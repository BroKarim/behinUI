This file is a merged representation of the entire codebase, combined into a single document by Repomix.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files (if enabled)
4. Repository files, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

<additional_info>

</additional_info>

</file_summary>

<directory_structure>
__registry__/
  default/
    blocks/
      bento-01/
        page.tsx
      card-01/
        page.tsx
      card-02/
        page.tsx
      cta-01/
        page.tsx
      next-int/
        main.tsx
        page.tsx
      portofolio-01/
        main.tsx
      portofolio-02/
        main.tsx
      portofolio-03/
        page.tsx
      tool-01/
        main.tsx
      tool-02/
        page.tsx
  icons.tsx
  index.tsx
.github/
  ISSUE_TEMPLATE/
    bug_report.md
    documentation.md
    feature_request.md
  workflows/
    code-check.yml
.husky/
  commit-msg
app/
  (app)/
    [...categories]/
      page.tsx
    layout.tsx
    page.tsx
  (view)/
    view/
      styles/
        [style]/
          [name]/
            page.tsx
  api/
    custom-components/
      route.ts
    repo/
      download/
        route.tsx
  layout.tsx
  not-found.tsx
  robots.ts
  sitemap.ts
components/
  editor/
    theme-select.tsx
  home/
    template-toast.tsx
  registry/
    component-display.tsx
    component-nav.tsx
    component-render.tsx
    component-viewer.tsx
  ui/
    accordion.tsx
    alert.tsx
    avatar.tsx
    badge.tsx
    border-beam.tsx
    button.tsx
    calendar.tsx
    card.tsx
    chart.tsx
    collapsible.tsx
    command.tsx
    dialog.tsx
    drawer.tsx
    dropdown-menu.tsx
    form.tsx
    hover-card.tsx
    icon-button.tsx
    input.tsx
    label.tsx
    loading-button.tsx
    navigation-menu.tsx
    popover.tsx
    pulsating-button.tsx
    resizable.tsx
    scroll-area.tsx
    select.tsx
    separator.tsx
    sheet.tsx
    sidebar.tsx
    skeleton.tsx
    sonner.tsx
    switch.tsx
    table.tsx
    tabs.tsx
    texture-button.tsx
    toast.tsx
    toaster.tsx
    toggle-group.tsx
    toggle.tsx
    tooltip.tsx
    use-toast.ts
  analytics.tsx
  blur-image.tsx
  callout.tsx
  category-tab.tsx
  code-block-wrapper.tsx
  code-panel-dialog.tsx
  code-panel.tsx
  code-preview.tsx
  command-menu.tsx
  commit-list.tsx
  component-preview.tsx
  component-source.tsx
  component-wrapper.tsx
  copy-button.tsx
  deal-banner.tsx
  gradient-blur.tsx
  hero-animated.tsx
  icons.tsx
  main-nav.tsx
  marquee.tsx
  mobile-nav.tsx
  mode-toggle.tsx
  post-details.tsx
  posthog-provider.tsx
  repo-download.tsx
  send-button.tsx
  sidebar-nav.tsx
  site-banner.tsx
  site-footer.tsx
  site-header.tsx
  tech-stack.tsx
  template-preview.tsx
  text-animation.tsx
  theme-customizer.tsx
  theme-provider-tweakcn.tsx
  theme-provider.tsx
  theme-toggle.tsx
  theme-wrapper.tsx
  toc.tsx
config/
  docs.ts
  site.ts
  theme-tweakcn.ts
hooks/
  use-click-outside.ts
  use-copy-to-clipboard.ts
  use-mobile.tsx
  use-toast.ts
lib/
  block.ts
  events.ts
  font.ts
  highlight-code.ts
  highlighter-theme.json
  octokit.ts
  registry-utils.ts
  rehype-component.ts
  rehype-npm-command.ts
  theme-preset-helper.ts
  theme-preset-tweakcn.ts
  theme-receiver.ts
  themes.ts
  toc.ts
  types.ts
  use-config.ts
  use-mounted.ts
  utils.ts
public/
  r/
    colors/
      gray.json
      index.json
      neutral.json
      slate.json
      stone.json
      zinc.json
    icons/
      index.json
    styles/
      default/
        accordion.json
        alert.json
        animated-beam.json
        animated-circular-progress-bar.json
        animated-gradient-text.json
        animated-grid-pattern.json
        animated-list.json
        animated-shiny-text.json
        animated-subscribe-button.json
        avatar-circles.json
        avatar.json
        badge.json
        bento-01.json
        bento-grid.json
        biophilic-01.json
        blur-fade.json
        blur-in.json
        border-beam.json
        box-reveal.json
        button.json
        calendar.json
        card-01.json
        card-02.json
        card.json
        chart.json
        client-tweet-card.json
        collapsible.json
        command.json
        confetti.json
        cool-mode.json
        cta-01.json
        dialog.json
        dock.json
        dot-pattern.json
        drawer.json
        dropdown-menu.json
        fade-text.json
        file-tree.json
        flickering-grid.json
        flip-text.json
        form.json
        globe.json
        gradual-spacing.json
        grid-pattern.json
        hero-01.json
        hero-02.json
        hero-tes.json
        hero-video-dialog.json
        hover-card.json
        hyper-text.json
        icon-button.json
        icon-cloud.json
        index.json
        input.json
        iphone-15-pro.json
        label.json
        letter-pullup.json
        magic-card.json
        marquee.json
        meteors.json
        navigation-menu.json
        neon-gradient-card.json
        nextint-02.json
        nextint.json
        number-ticker.json
        orbiting-circles.json
        particles.json
        popover.json
        portofolio-01.json
        portofolio-02.json
        portofolio-03.json
        pulsating-button.json
        rainbow-button.json
        resizable.json
        retro-grid.json
        ripple.json
        safari.json
        scroll-area.json
        scroll-based-velocity.json
        select.json
        separator.json
        sheet.json
        shimmer-button.json
        shine-border.json
        shiny-button.json
        sidebar.json
        skeleton.json
        sonner.json
        sparkles-text.json
        switch.json
        table.json
        tabs.json
        text-reveal.json
        texture-button.json
        theme-daylight.json
        theme-emerald.json
        theme-midnight.json
        toast.json
        toaster.json
        toggle-group.json
        toggle.json
        tool-01.json
        tool-02.json
        tooltip.json
        tweet-card.json
        typing-animation.json
        utils.json
        word-fade-in.json
        word-pull-up.json
        word-rotate.json
      index.json
    themes/
      amber-minimal.json
      amethyst-haze.json
      bold-tech.json
      bubblegum.json
      caffeine.json
      candyland.json
      catppuccin.json
      claude.json
      claymorphism.json
      clean-slate.json
      cosmic-night.json
      cyberpunk.json
      doom-64.json
      elegant-luxury.json
      graphite.json
      gray.json
      kodama-grove.json
      midnight-bloom.json
      mocha-mousse.json
      modern-minimal.json
      mono.json
      nature.json
      neo-brutalism.json
      neutral.json
      northern-lights.json
      ocean-breeze.json
      pastel-dreams.json
      perpetuity.json
      quantum-rose.json
      registry.json
      retro-arcade.json
      slate.json
      solar-dusk.json
      starry-night.json
      stone.json
      sunset-horizon.json
      supabase.json
      t3-chat.json
      tangerine.json
      twitter.json
      vercel.json
      vintage-paper.json
      zinc.json
    index.json
    themes.css
  registry/
    theme.css
  schema/
    registry-item.json
  placeholder-dark.svg
  placeholder.svg
  registry.json
  site.webmanifest
registry/
  default/
    blocks/
      bento-01/
        components/
          animated-emoji.tsx
          logo.tsx
        hooks/
          useAnimation.tsx
        page.tsx
      card-01/
        components/
          post-card.tsx
        page.tsx
      card-02/
        components/
          pricing-card.tsx
        page.tsx
      next-int/
        components/
          drawer.tsx
          lang-switch.tsx
          marquee.tsx
          navbar.tsx
          photos.tsx
        page.tsx
      portofolio-01/
        components/
          animated-background.tsx
          footer.tsx
          list.tsx
        contents/
          projects.ts
        main.tsx
      portofolio-02/
        components/
          bio-detail.tsx
          bio.tsx
          career-path.tsx
          highlight.tsx
          intro-item.tsx
          panel.tsx
          tag.tsx
          typhography.tsx
        data/
          career-path.ts
          USER.ts
        type/
          career-path.ts
        main.tsx
        PENJELASAN.md
      portofolio-03/
        components/
          expandable-tab.tsx
          logos.tsx
          work-experiences.tsx
        page.tsx
      tool-01/
        components/
          banner.tsx
          colorful-button.tsx
          github-button.tsx
          header.tsx
          installer.tsx
          open-source.tsx
          review.tsx
        style/
          style.css
        main.tsx
      tool-02/
        components/
          compare.tsx
          image-compare.tsx
        page.tsx
    hooks/
      use-mobile.ts
      use-toast.ts
    lib/
      utils.ts
    ui/
      accordion.tsx
      alert.tsx
      avatar.tsx
      badge.tsx
      border-beam.tsx
      button.tsx
      calendar.tsx
      card.tsx
      chart.tsx
      collapsible.tsx
      command.tsx
      dialog.tsx
      drawer.tsx
      dropdown-menu.tsx
      form.tsx
      hover-card.tsx
      icon-button.tsx
      input.tsx
      label.tsx
      loading-button.tsx
      navigation-menu.tsx
      popover.tsx
      resizable.tsx
      scroll-area.tsx
      select.tsx
      separator.tsx
      sheet.tsx
      sidebar.tsx
      skeleton.tsx
      sonner.tsx
      switch.tsx
      table.tsx
      tabs.tsx
      texture-button.tsx
      toast.tsx
      toaster.tsx
      toggle-group.tsx
      toggle.tsx
      tooltip.tsx
  .eslintrc.json
  index.tsx
  registry-base-colors.ts
  registry-blocks.ts
  registry-categories.ts
  registry-colors.ts
  registry-hooks.ts
  registry-icons.ts
  registry-lib.ts
  registry-styles.ts
  registry-themes.ts
  registry-ui.ts
  schema.ts
scripts/
  build-registry.mts
  capture-registry.mts
  fix-import.mts
  generate-registry-tweakcn.ts
  generate-theme-registry-tweakcn.ts
store/
  editor-store.tsx
  preferences-store.tsx
  theme-preset-store.tsx
styles/
  globals.css
  mdx.css
types/
  editor.ts
  index.d.ts
  next-auth.d.ts
  theme-tweakcn.ts
  unist.ts
utils/
  registry/
    themes-tweakcn.ts
  apply-style-to-elements.ts
  apply-theme.ts
  color-converter.ts
  shadow.ts
  theme-fonts.ts
  theme-preset-helper-tweakcn.ts
  theme-style-generator.ts
.commitlintrc.json
.eslintrc.json
.gitattributes
.gitignore
.prettier.config.cjs
.prettierignore
.yarnrc.yml
components.json
env.mjs
middleware.ts
next.config.mjs
package.json
postcss.config.cjs
README.md
tailwind.config.cjs
tsconfig.json
tsconfig.scripts.json
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path=".github/ISSUE_TEMPLATE/bug_report.md">
---
name: Bug report
about: Create a report to help us improve
title: ''
labels: ''
assignees: ''

---

**Describe the bug**
A clear and concise description of what the bug is.

**To Reproduce**
Steps to reproduce the behavior:
1. Go to '...'
2. Click on '....'
3. Scroll down to '....'
4. See error

**Expected behavior**
A clear and concise description of what you expected to happen.

**Screenshots**
If applicable, add screenshots to help explain your problem.

**Desktop (please complete the following information):**
 - OS: [e.g. iOS]
 - Browser [e.g. chrome, safari]
 - Version [e.g. 22]

**Smartphone (please complete the following information):**
 - Device: [e.g. iPhone6]
 - OS: [e.g. iOS8.1]
 - Browser [e.g. stock browser, safari]
 - Version [e.g. 22]

**Additional context**
Add any other context about the problem here.
</file>

<file path=".github/ISSUE_TEMPLATE/documentation.md">
---
name: Documentation
about: Suggest an edit for the documentation
title: ""
labels: ""
assignees: ""
---

**Describe the documentation change**
A clear and concise description of what you'd like to see changed or added in the documentation.

**Current documentation**
If applicable, provide a link or reference to the current documentation that needs to be updated.

**Proposed change**
Describe the change you'd like to see in the documentation. Be as specific as possible.

**Additional context**
Add any other context or screenshots about the documentation request here.
</file>

<file path=".github/ISSUE_TEMPLATE/feature_request.md">
---
name: Feature request
about: Suggest an idea for this project
title: ''
labels: ''
assignees: ''

---

**Is your feature request related to a problem? Please describe.**
A clear and concise description of what the problem is. Ex. I'm always frustrated when [...]

**Describe the solution you'd like**
A clear and concise description of what you want to happen.

**Describe alternatives you've considered**
A clear and concise description of any alternative solutions or features you've considered.

**Additional context**
Add any other context or screenshots about the feature request here.
</file>

<file path=".github/workflows/code-check.yml">
name: Code check

on:
  pull_request:
    branches: ["*"]

jobs:
  lint:
    runs-on: ubuntu-latest
    name: pnpm lint
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Install Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20

      - uses: pnpm/action-setup@v4
        name: Install pnpm
        id: pnpm-install
        with:
          version: 9.4.0
          run_install: false

      - name: Get pnpm store directory
        id: pnpm-cache
        run: |
          echo "pnpm_cache_dir=$(pnpm store path)" >> $GITHUB_OUTPUT
      - uses: actions/cache@v3
        name: Setup pnpm cache
        with:
          path: ${{ steps.pnpm-cache.outputs.pnpm_cache_dir }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-
      - name: Install dependencies
        run: pnpm install

      - run: pnpm lint

  format:
    runs-on: ubuntu-latest
    name: pnpm format:check
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Install Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20

      - uses: pnpm/action-setup@v4
        name: Install pnpm
        id: pnpm-install
        with:
          version: 9.4.0
          run_install: false

      - name: Get pnpm store directory
        id: pnpm-cache
        run: |
          echo "pnpm_cache_dir=$(pnpm store path)" >> $GITHUB_OUTPUT

      - uses: actions/cache@v3
        name: Setup pnpm cache
        with:
          path: ${{ steps.pnpm-cache.outputs.pnpm_cache_dir }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install

      - run: pnpm format:check

  tsc:
    runs-on: ubuntu-latest
    name: pnpm typecheck
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Install Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20

      - uses: pnpm/action-setup@v4
        name: Install pnpm
        id: pnpm-install
        with:
          version: 9.4.0
          run_install: false

      - name: Get pnpm store directory
        id: pnpm-cache
        run: |
          echo "pnpm_cache_dir=$(pnpm store path)" >> $GITHUB_OUTPUT
      - uses: actions/cache@v3
        name: Setup pnpm cache
        with:
          path: ${{ steps.pnpm-cache.outputs.pnpm_cache_dir }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-
      - name: Install dependencies
        run: pnpm install

      - run: pnpm typecheck
</file>

<file path=".husky/commit-msg">
npx commitlint --edit $1
</file>

<file path="app/api/custom-components/route.ts">
import nodemailer from "nodemailer";
import { NextResponse } from "next/server";

export const dynamic = "force-static";

export async function POST(request: Request) {
  console.log("Received request");
  try {
    // Parse request body
    const body = await request.json();
    console.log("Request body:", body);
    const { message } = body;

    if (!message) {
      return NextResponse.json({ error: "Message is required" }, { status: 400 });
    }

    // Configure Nodemailer
    const transporter = nodemailer.createTransport({
      service: "gmail",
      auth: {
        user: process.env.EMAIL_USER,
        pass: process.env.EMAIL_PASS,
      },
      tls: {
        rejectUnauthorized: true,
      },
    });

    // Send email
    await transporter.sendMail({
      from: process.env.EMAIL_USER,
      to: "brokariim@gmail.com",
      subject: "Custom Design Request",
      text: message,
    });

    return NextResponse.json({ success: true, message: "Email sent successfully" }, { status: 200 });
  } catch (error) {
    console.error("Email sending error:", error);
    return NextResponse.json({ error: "Failed to send email fremm be" }, { status: 500 });
  }
}
</file>

<file path="app/api/repo/download/route.tsx">
import { NextRequest, NextResponse } from "next/server";
import { z } from "zod";

import { octokit } from "@/lib/octokit";

const bodySchema = z.object({
  owner: z.string(),
  repo: z.string(),
});

export async function POST(request: NextRequest) {
  const body = await request.json();
  try {
    const { owner, repo } = bodySchema.parse(body);
    const response = await octokit.request(
      "GET /repos/{owner}/{repo}/zipball",
      {
        owner: owner,
        repo: repo,
        headers: {
          "X-GitHub-Api-Version": "2022-11-28",
        },
      },
    );
    const status = response.status;
    const downloadUrl = response.url;
    return NextResponse.json({ success: true, status, downloadUrl });
  } catch (error: any) {
    return NextResponse.json(
      { success: false, error: error.message },
      { status: 500 },
    );
  }
}
</file>

<file path="app/not-found.tsx">
"use client";

import Link from "next/link";
import { useRouter } from "next/navigation";

import { Button, buttonVariants } from "@/components/ui/button";
import { Icons } from "@/components/icons";

export default function NotFound() {
  const router = useRouter();
  return (
    <section>
      <div className="container mx-auto flex min-h-[calc(100vh-8rem)] items-center px-6 py-12">
        <div className="mx-auto flex max-w-sm flex-col items-center text-center">
          <p className="rounded-full bg-blue-50 p-3 text-sm font-medium dark:bg-gray-800">
            <Icons.warning className="size-6" />
          </p>
          <h1 className="mt-3 text-2xl font-semibold text-gray-800 dark:text-white md:text-3xl">
            Page not found
          </h1>
          <p className="mt-4 text-gray-500 dark:text-gray-400">
            The page you are looking for doesn&apos;t exist.
          </p>

          <div className="group mt-6 flex w-full shrink-0 items-center gap-x-3 sm:w-auto">
            <Button
              onClick={() => router.back()}
              className={buttonVariants({ variant: "secondary" })}
            >
              <Icons.chevronLeft className="size-4 transition-transform group-hover:-translate-x-1" />
              <span>Go back</span>
            </Button>

            <Link href="/" className={buttonVariants({ variant: "default" })}>
              Take me home
            </Link>
          </div>
        </div>
      </div>
    </section>
  );
}
</file>

<file path="app/robots.ts">
import { MetadataRoute } from "next";

export default function robots(): MetadataRoute.Robots {
  return {
    rules: {
      userAgent: "*",
      allow: "/",
      disallow: ["/api/", "/_next/", "/public/"],
    },
    sitemap: "https://behindui.vercel.app/sitemap.xml",
  };
}
</file>

<file path="components/home/template-toast.tsx">
"use client";

import { useEffect, useState } from "react";
import Link from "next/link";

import { cn } from "@/lib/utils";

import { Button } from "@/components/ui/button";
import { Card, CardDescription, CardFooter, CardHeader } from "@/components/ui/card";
import { usePathname } from "next/navigation";

export function TemplateToaster() {
  const [isVisibile, setIsVisible] = useState(true);
  const [notificationStatus, setNotificationStatus] = useState<string | null>(null);
  const path = usePathname();
  const [hydrated, setHydrated] = useState(false);

  // Run this effect only once to set hydrated to true
  useEffect(() => {
    setHydrated(true);
  }, []);

  // Run this effect only on client side
  useEffect(() => {
    if (hydrated) {
      localStorage.removeItem("behindui-notification");
      setNotificationStatus(localStorage.getItem("behindui-notification"));
    }
  }, [hydrated]);

  if (!hydrated) {
    return null;
  }

  const templates = path.includes("templates");
  const isIframe = isInIframe();
  if (isIframe || notificationStatus === "off") {
    return <div></div>;
  }

  return (
    isVisibile &&
    !templates && (
      <section className="relative z-50">
        <div className="font-geist fixed bottom-4 right-4">
          <Card className={cn(" w-[350px] bg-background [border:1px_solid_rgba(255,255,255,.1)]")}>
            <CardHeader>
              <div className="font-mono font-bold  uppercase tracking-tight">
                🚧Website Under Development 🚧 <br />
              </div>
              <CardDescription className="mt-4 text-black/90 dark:text-white/70">This website is currently in active development. Enjoy exploring—exciting updates coming soon!</CardDescription>
            </CardHeader>
            <CardFooter className="flex justify-end gap-4">
              <Button
                size="sm"
                onClick={() => {
                  localStorage.setItem("behindui-notification", "off");
                  setIsVisible(false);
                }}
              >
                Understand
              </Button>
            </CardFooter>
          </Card>
        </div>
      </section>
    )
  );
}

function isInIframe() {
  try {
    return window.self !== window.top;
  } catch (e) {
    return true;
  }
}
</file>

<file path="components/ui/accordion.tsx">
"use client";

import * as React from "react";
import * as AccordionPrimitive from "@radix-ui/react-accordion";
import { ChevronDownIcon } from "@radix-ui/react-icons";

import { cn } from "@/lib/utils";

const Accordion = AccordionPrimitive.Root;

const AccordionItem = React.forwardRef<
  React.ElementRef<typeof AccordionPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>
>(({ className, ...props }, ref) => (
  <AccordionPrimitive.Item
    ref={ref}
    className={cn("border-b", className)}
    {...props}
  />
));
AccordionItem.displayName = "AccordionItem";

const AccordionTrigger = React.forwardRef<
  React.ElementRef<typeof AccordionPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>
>(({ className, children, ...props }, ref) => (
  <AccordionPrimitive.Header className="flex">
    <AccordionPrimitive.Trigger
      ref={ref}
      className={cn(
        "flex flex-1 items-center justify-between py-4 text-sm font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180",
        className,
      )}
      {...props}
    >
      {children}
      <ChevronDownIcon className="size-4 shrink-0 text-muted-foreground transition-transform duration-200" />
    </AccordionPrimitive.Trigger>
  </AccordionPrimitive.Header>
));
AccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName;

const AccordionContent = React.forwardRef<
  React.ElementRef<typeof AccordionPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <AccordionPrimitive.Content
    ref={ref}
    className="overflow-hidden text-sm data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down"
    {...props}
  >
    <div className={cn("pb-4 pt-0", className)}>{children}</div>
  </AccordionPrimitive.Content>
));
AccordionContent.displayName = AccordionPrimitive.Content.displayName;

export { Accordion, AccordionContent, AccordionItem, AccordionTrigger };
</file>

<file path="components/ui/alert.tsx">
import * as React from "react";
import { cva, type VariantProps } from "class-variance-authority";

import { cn } from "@/lib/utils";

const alertVariants = cva(
  "relative w-full rounded-lg border px-4 py-3 text-sm [&:has(svg)]:pl-11 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground",
  {
    variants: {
      variant: {
        default: "bg-background text-foreground",
        destructive:
          "border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  },
);

const Alert = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>
>(({ className, variant, ...props }, ref) => (
  <div
    ref={ref}
    role="alert"
    className={cn(alertVariants({ variant }), className)}
    {...props}
  />
));
Alert.displayName = "Alert";

const AlertTitle = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLHeadingElement>
>(({ className, ...props }, ref) => (
  <h5
    ref={ref}
    className={cn("mb-1 font-medium leading-none tracking-tight", className)}
    {...props}
  />
));
AlertTitle.displayName = "AlertTitle";

const AlertDescription = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("text-sm [&_p]:leading-relaxed", className)}
    {...props}
  />
));
AlertDescription.displayName = "AlertDescription";

export { Alert, AlertTitle, AlertDescription };
</file>

<file path="components/ui/avatar.tsx">
"use client";

import * as React from "react";
import * as AvatarPrimitive from "@radix-ui/react-avatar";

import { cn } from "@/lib/utils";

const Avatar = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Root
    ref={ref}
    className={cn(
      "relative flex size-10 shrink-0 overflow-hidden rounded-full",
      className,
    )}
    {...props}
  />
));
Avatar.displayName = AvatarPrimitive.Root.displayName;

const AvatarImage = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Image>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Image
    ref={ref}
    className={cn("aspect-square size-full", className)}
    {...props}
  />
));
AvatarImage.displayName = AvatarPrimitive.Image.displayName;

const AvatarFallback = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Fallback>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Fallback
    ref={ref}
    className={cn(
      "flex size-full items-center justify-center rounded-full bg-muted",
      className,
    )}
    {...props}
  />
));
AvatarFallback.displayName = AvatarPrimitive.Fallback.displayName;

export { Avatar, AvatarImage, AvatarFallback };
</file>

<file path="components/ui/border-beam.tsx">
import { cn } from "@/lib/utils";

interface BorderBeamProps {
  className?: string;
  size?: number;
  duration?: number;
  borderWidth?: number;
  anchor?: number;
  colorFrom?: string;
  colorTo?: string;
  delay?: number;
}

export const BorderBeam = ({ className, size = 200, duration = 15, anchor = 90, borderWidth = 1.5, colorFrom = "#ffaa40", colorTo = "#9c40ff", delay = 0 }: BorderBeamProps) => {
  return (
    <div
      style={
        {
          "--size": size,
          "--duration": duration,
          "--anchor": anchor,
          "--border-width": borderWidth,
          "--color-from": colorFrom,
          "--color-to": colorTo,
          "--delay": `-${delay}s`,
        } as React.CSSProperties
      }
      className={cn(
        "pointer-events-none absolute inset-0 rounded-[inherit] [border:calc(var(--border-width)*1px)_solid_transparent]",

        // mask styles
        "![mask-clip:padding-box,border-box] ![mask-composite:intersect] [mask:linear-gradient(transparent,transparent),linear-gradient(white,white)]",

        // pseudo styles
        "after:absolute after:aspect-square after:w-[calc(var(--size)*1px)] after:animate-border-beam after:[animation-delay:var(--delay)] after:[background:linear-gradient(to_left,var(--color-from),var(--color-to),transparent)] after:[offset-anchor:calc(var(--anchor)*1%)_50%] after:[offset-path:rect(0_auto_auto_0_round_calc(var(--size)*1px))]",
        className
      )}
    />
  );
};
</file>

<file path="components/ui/card.tsx">
import * as React from "react";

import { cn } from "@/lib/utils";

const Card = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn(
      "rounded-xl border bg-card text-card-foreground shadow",
      className,
    )}
    {...props}
  />
));
Card.displayName = "Card";

const CardHeader = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex flex-col space-y-1.5 p-6", className)}
    {...props}
  />
));
CardHeader.displayName = "CardHeader";

const CardTitle = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLHeadingElement>
>(({ className, ...props }, ref) => (
  <h3
    ref={ref}
    className={cn("font-semibold leading-none tracking-tight", className)}
    {...props}
  />
));
CardTitle.displayName = "CardTitle";

const CardDescription = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, ...props }, ref) => (
  <p
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
));
CardDescription.displayName = "CardDescription";

const CardContent = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div ref={ref} className={cn("p-6 pt-0", className)} {...props} />
));
CardContent.displayName = "CardContent";

const CardFooter = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn(" flex items-center p-6 pt-0", className)}
    {...props}
  />
));
CardFooter.displayName = "CardFooter";

export {
  Card,
  CardHeader,
  CardFooter,
  CardTitle,
  CardDescription,
  CardContent,
};
</file>

<file path="components/ui/collapsible.tsx">
"use client";

import * as CollapsiblePrimitive from "@radix-ui/react-collapsible";

const Collapsible = CollapsiblePrimitive.Root;

const CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger;

const CollapsibleContent = CollapsiblePrimitive.CollapsibleContent;

export { Collapsible, CollapsibleTrigger, CollapsibleContent };
</file>

<file path="components/ui/command.tsx">
"use client";

import * as React from "react";
import { type DialogProps } from "@radix-ui/react-dialog";
import { MagnifyingGlassIcon } from "@radix-ui/react-icons";
import { Command as CommandPrimitive } from "cmdk";

import { cn } from "@/lib/utils";
import { Dialog, DialogContent } from "@/components/ui/dialog";

const Command = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive>
>(({ className, ...props }, ref) => (
  <CommandPrimitive
    ref={ref}
    className={cn(
      "flex size-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground",
      className,
    )}
    {...props}
  />
));
Command.displayName = CommandPrimitive.displayName;

interface CommandDialogProps extends DialogProps {}

const CommandDialog = ({ children, ...props }: CommandDialogProps) => {
  return (
    <Dialog {...props}>
      <DialogContent className="overflow-hidden p-0">
        <Command className="[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:size-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:size-5">
          {children}
        </Command>
      </DialogContent>
    </Dialog>
  );
};

const CommandInput = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Input>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>
>(({ className, ...props }, ref) => (
  <div className="flex items-center border-b px-3" cmdk-input-wrapper="">
    <MagnifyingGlassIcon className="mr-2 size-4 shrink-0 opacity-50" />
    <CommandPrimitive.Input
      ref={ref}
      className={cn(
        "flex h-10 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50",
        className,
      )}
      {...props}
    />
  </div>
));

CommandInput.displayName = CommandPrimitive.Input.displayName;

const CommandList = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.List>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>
>(({ className, ...props }, ref) => (
  <CommandPrimitive.List
    ref={ref}
    className={cn("max-h-[300px] overflow-y-auto overflow-x-hidden", className)}
    {...props}
  />
));

CommandList.displayName = CommandPrimitive.List.displayName;

const CommandEmpty = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Empty>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>
>((props, ref) => (
  <CommandPrimitive.Empty
    ref={ref}
    className="py-6 text-center text-sm"
    {...props}
  />
));

CommandEmpty.displayName = CommandPrimitive.Empty.displayName;

const CommandGroup = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Group>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>
>(({ className, ...props }, ref) => (
  <CommandPrimitive.Group
    ref={ref}
    className={cn(
      "overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground",
      className,
    )}
    {...props}
  />
));

CommandGroup.displayName = CommandPrimitive.Group.displayName;

const CommandSeparator = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <CommandPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 h-px bg-border", className)}
    {...props}
  />
));
CommandSeparator.displayName = CommandPrimitive.Separator.displayName;

const CommandItem = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>
>(({ className, ...props }, ref) => (
  <CommandPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected=true]:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50",
      className,
    )}
    {...props}
  />
));

CommandItem.displayName = CommandPrimitive.Item.displayName;

const CommandShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn(
        "ml-auto text-xs tracking-widest text-muted-foreground",
        className,
      )}
      {...props}
    />
  );
};
CommandShortcut.displayName = "CommandShortcut";

export {
  Command,
  CommandDialog,
  CommandEmpty,
  CommandGroup,
  CommandInput,
  CommandItem,
  CommandList,
  CommandSeparator,
  CommandShortcut,
};
</file>

<file path="components/ui/dialog.tsx">
"use client";

import * as DialogPrimitive from "@radix-ui/react-dialog";
import { Cross2Icon } from "@radix-ui/react-icons";
import * as React from "react";

import { cn } from "@/lib/utils";

const Dialog = DialogPrimitive.Root;

const DialogTrigger = DialogPrimitive.Trigger;

const DialogPortal = DialogPrimitive.Portal;

const DialogClose = DialogPrimitive.Close;

const DialogOverlay = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Overlay
    ref={ref}
    className={cn(
      "fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className,
    )}
    {...props}
  />
));
DialogOverlay.displayName = DialogPrimitive.Overlay.displayName;

const DialogContent = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <DialogPortal>
    <DialogOverlay />
    <DialogPrimitive.Content
      ref={ref}
      className={cn(
        "fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg",
        className,
      )}
      {...props}
    >
      {children}
      <DialogPrimitive.Close className="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground">
        <Cross2Icon className="size-4" />
        <span className="sr-only">Close</span>
      </DialogPrimitive.Close>
    </DialogPrimitive.Content>
  </DialogPortal>
));
DialogContent.displayName = DialogPrimitive.Content.displayName;

const DialogHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col space-y-1.5 text-center sm:text-left",
      className,
    )}
    {...props}
  />
);
DialogHeader.displayName = "DialogHeader";

const DialogFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className,
    )}
    {...props}
  />
);
DialogFooter.displayName = "DialogFooter";

const DialogTitle = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Title
    ref={ref}
    className={cn(
      "text-lg font-semibold leading-none tracking-tight",
      className,
    )}
    {...props}
  />
));
DialogTitle.displayName = DialogPrimitive.Title.displayName;

const DialogDescription = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
));
DialogDescription.displayName = DialogPrimitive.Description.displayName;

export {
  Dialog,
  DialogClose,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogOverlay,
  DialogPortal,
  DialogTitle,
  DialogTrigger,
};
</file>

<file path="components/ui/drawer.tsx">
"use client"

import * as React from "react"
import { Drawer as DrawerPrimitive } from "vaul"

import { cn } from "@/lib/utils"

const Drawer = ({
  shouldScaleBackground = true,
  ...props
}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (
  <DrawerPrimitive.Root
    shouldScaleBackground={shouldScaleBackground}
    {...props}
  />
)
Drawer.displayName = "Drawer"

const DrawerTrigger = DrawerPrimitive.Trigger

const DrawerPortal = DrawerPrimitive.Portal

const DrawerClose = DrawerPrimitive.Close

const DrawerOverlay = React.forwardRef<
  React.ElementRef<typeof DrawerPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <DrawerPrimitive.Overlay
    ref={ref}
    className={cn("fixed inset-0 z-50 bg-black/80", className)}
    {...props}
  />
))
DrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName

const DrawerContent = React.forwardRef<
  React.ElementRef<typeof DrawerPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <DrawerPortal>
    <DrawerOverlay />
    <DrawerPrimitive.Content
      ref={ref}
      className={cn(
        "fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background",
        className
      )}
      {...props}
    >
      <div className="mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted" />
      {children}
    </DrawerPrimitive.Content>
  </DrawerPortal>
))
DrawerContent.displayName = "DrawerContent"

const DrawerHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn("grid gap-1.5 p-4 text-center sm:text-left", className)}
    {...props}
  />
)
DrawerHeader.displayName = "DrawerHeader"

const DrawerFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn("mt-auto flex flex-col gap-2 p-4", className)}
    {...props}
  />
)
DrawerFooter.displayName = "DrawerFooter"

const DrawerTitle = React.forwardRef<
  React.ElementRef<typeof DrawerPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>
>(({ className, ...props }, ref) => (
  <DrawerPrimitive.Title
    ref={ref}
    className={cn(
      "text-lg font-semibold leading-none tracking-tight",
      className
    )}
    {...props}
  />
))
DrawerTitle.displayName = DrawerPrimitive.Title.displayName

const DrawerDescription = React.forwardRef<
  React.ElementRef<typeof DrawerPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>
>(({ className, ...props }, ref) => (
  <DrawerPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
DrawerDescription.displayName = DrawerPrimitive.Description.displayName

export {
  Drawer,
  DrawerPortal,
  DrawerOverlay,
  DrawerTrigger,
  DrawerClose,
  DrawerContent,
  DrawerHeader,
  DrawerFooter,
  DrawerTitle,
  DrawerDescription,
}
</file>

<file path="components/ui/dropdown-menu.tsx">
"use client";

import * as React from "react";
import * as DropdownMenuPrimitive from "@radix-ui/react-dropdown-menu";
import {
  CheckIcon,
  ChevronRightIcon,
  DotFilledIcon,
} from "@radix-ui/react-icons";

import { cn } from "@/lib/utils";

const DropdownMenu = DropdownMenuPrimitive.Root;

const DropdownMenuTrigger = DropdownMenuPrimitive.Trigger;

const DropdownMenuGroup = DropdownMenuPrimitive.Group;

const DropdownMenuPortal = DropdownMenuPrimitive.Portal;

const DropdownMenuSub = DropdownMenuPrimitive.Sub;

const DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup;

const DropdownMenuSubTrigger = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {
    inset?: boolean;
  }
>(({ className, inset, children, ...props }, ref) => (
  <DropdownMenuPrimitive.SubTrigger
    ref={ref}
    className={cn(
      "flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent",
      inset && "pl-8",
      className,
    )}
    {...props}
  >
    {children}
    <ChevronRightIcon className="ml-auto size-4" />
  </DropdownMenuPrimitive.SubTrigger>
));
DropdownMenuSubTrigger.displayName =
  DropdownMenuPrimitive.SubTrigger.displayName;

const DropdownMenuSubContent = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>
>(({ className, ...props }, ref) => (
  <DropdownMenuPrimitive.SubContent
    ref={ref}
    className={cn(
      "z-50 min-w-32 overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className,
    )}
    {...props}
  />
));
DropdownMenuSubContent.displayName =
  DropdownMenuPrimitive.SubContent.displayName;

const DropdownMenuContent = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>
>(({ className, sideOffset = 4, ...props }, ref) => (
  <DropdownMenuPrimitive.Portal>
    <DropdownMenuPrimitive.Content
      ref={ref}
      sideOffset={sideOffset}
      className={cn(
        "z-50 min-w-32 overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md",
        "data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        className,
      )}
      {...props}
    />
  </DropdownMenuPrimitive.Portal>
));
DropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName;

const DropdownMenuItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {
    inset?: boolean;
  }
>(({ className, inset, ...props }, ref) => (
  <DropdownMenuPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      inset && "pl-8",
      className,
    )}
    {...props}
  />
));
DropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName;

const DropdownMenuCheckboxItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>
>(({ className, children, checked, ...props }, ref) => (
  <DropdownMenuPrimitive.CheckboxItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className,
    )}
    checked={checked}
    {...props}
  >
    <span className="absolute left-2 flex size-3.5 items-center justify-center">
      <DropdownMenuPrimitive.ItemIndicator>
        <CheckIcon className="size-4" />
      </DropdownMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </DropdownMenuPrimitive.CheckboxItem>
));
DropdownMenuCheckboxItem.displayName =
  DropdownMenuPrimitive.CheckboxItem.displayName;

const DropdownMenuRadioItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>
>(({ className, children, ...props }, ref) => (
  <DropdownMenuPrimitive.RadioItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className,
    )}
    {...props}
  >
    <span className="absolute left-2 flex size-3.5 items-center justify-center">
      <DropdownMenuPrimitive.ItemIndicator>
        <DotFilledIcon className="size-4 fill-current" />
      </DropdownMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </DropdownMenuPrimitive.RadioItem>
));
DropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName;

const DropdownMenuLabel = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {
    inset?: boolean;
  }
>(({ className, inset, ...props }, ref) => (
  <DropdownMenuPrimitive.Label
    ref={ref}
    className={cn(
      "px-2 py-1.5 text-sm font-semibold",
      inset && "pl-8",
      className,
    )}
    {...props}
  />
));
DropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName;

const DropdownMenuSeparator = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <DropdownMenuPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-muted", className)}
    {...props}
  />
));
DropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName;

const DropdownMenuShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn("ml-auto text-xs tracking-widest opacity-60", className)}
      {...props}
    />
  );
};
DropdownMenuShortcut.displayName = "DropdownMenuShortcut";

export {
  DropdownMenu,
  DropdownMenuTrigger,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuCheckboxItem,
  DropdownMenuRadioItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuShortcut,
  DropdownMenuGroup,
  DropdownMenuPortal,
  DropdownMenuSub,
  DropdownMenuSubContent,
  DropdownMenuSubTrigger,
  DropdownMenuRadioGroup,
};
</file>

<file path="components/ui/form.tsx">
import * as React from "react";
import * as LabelPrimitive from "@radix-ui/react-label";
import { Slot } from "@radix-ui/react-slot";
import {
  Controller,
  ControllerProps,
  FieldPath,
  FieldValues,
  FormProvider,
  useFormContext,
} from "react-hook-form";

import { cn } from "@/lib/utils";
import { Label } from "@/components/ui/label";

const Form = FormProvider;

type FormFieldContextValue<
  TFieldValues extends FieldValues = FieldValues,
  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,
> = {
  name: TName;
};

const FormFieldContext = React.createContext<FormFieldContextValue>(
  {} as FormFieldContextValue,
);

const FormField = <
  TFieldValues extends FieldValues = FieldValues,
  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,
>({
  ...props
}: ControllerProps<TFieldValues, TName>) => {
  return (
    <FormFieldContext.Provider value={{ name: props.name }}>
      <Controller {...props} />
    </FormFieldContext.Provider>
  );
};

const useFormField = () => {
  const fieldContext = React.useContext(FormFieldContext);
  const itemContext = React.useContext(FormItemContext);
  const { getFieldState, formState } = useFormContext();

  const fieldState = getFieldState(fieldContext.name, formState);

  if (!fieldContext) {
    throw new Error("useFormField should be used within <FormField>");
  }

  const { id } = itemContext;

  return {
    id,
    name: fieldContext.name,
    formItemId: `${id}-form-item`,
    formDescriptionId: `${id}-form-item-description`,
    formMessageId: `${id}-form-item-message`,
    ...fieldState,
  };
};

type FormItemContextValue = {
  id: string;
};

const FormItemContext = React.createContext<FormItemContextValue>(
  {} as FormItemContextValue,
);

const FormItem = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => {
  const id = React.useId();

  return (
    <FormItemContext.Provider value={{ id }}>
      <div ref={ref} className={cn("space-y-2", className)} {...props} />
    </FormItemContext.Provider>
  );
});
FormItem.displayName = "FormItem";

const FormLabel = React.forwardRef<
  React.ElementRef<typeof LabelPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>
>(({ className, ...props }, ref) => {
  const { error, formItemId } = useFormField();

  return (
    <Label
      ref={ref}
      className={cn(error && "text-destructive", className)}
      htmlFor={formItemId}
      {...props}
    />
  );
});
FormLabel.displayName = "FormLabel";

const FormControl = React.forwardRef<
  React.ElementRef<typeof Slot>,
  React.ComponentPropsWithoutRef<typeof Slot>
>(({ ...props }, ref) => {
  const { error, formItemId, formDescriptionId, formMessageId } =
    useFormField();

  return (
    <Slot
      ref={ref}
      id={formItemId}
      aria-describedby={
        !error
          ? `${formDescriptionId}`
          : `${formDescriptionId} ${formMessageId}`
      }
      aria-invalid={!!error}
      {...props}
    />
  );
});
FormControl.displayName = "FormControl";

const FormDescription = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, ...props }, ref) => {
  const { formDescriptionId } = useFormField();

  return (
    <p
      ref={ref}
      id={formDescriptionId}
      className={cn("text-[0.8rem] text-muted-foreground", className)}
      {...props}
    />
  );
});
FormDescription.displayName = "FormDescription";

const FormMessage = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, children, ...props }, ref) => {
  const { error, formMessageId } = useFormField();
  const body = error ? String(error?.message) : children;

  if (!body) {
    return null;
  }

  return (
    <p
      ref={ref}
      id={formMessageId}
      className={cn("text-[0.8rem] font-medium text-destructive", className)}
      {...props}
    >
      {body}
    </p>
  );
});
FormMessage.displayName = "FormMessage";

export {
  useFormField,
  Form,
  FormItem,
  FormLabel,
  FormControl,
  FormDescription,
  FormMessage,
  FormField,
};
</file>

<file path="components/ui/hover-card.tsx">
"use client";

import * as React from "react";
import * as HoverCardPrimitive from "@radix-ui/react-hover-card";

import { cn } from "@/lib/utils";

const HoverCard = HoverCardPrimitive.Root;

const HoverCardTrigger = HoverCardPrimitive.Trigger;

const HoverCardContent = React.forwardRef<
  React.ElementRef<typeof HoverCardPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>
>(({ className, align = "center", sideOffset = 4, ...props }, ref) => (
  <HoverCardPrimitive.Content
    ref={ref}
    align={align}
    sideOffset={sideOffset}
    className={cn(
      "z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className,
    )}
    {...props}
  />
));
HoverCardContent.displayName = HoverCardPrimitive.Content.displayName;

export { HoverCard, HoverCardTrigger, HoverCardContent };
</file>

<file path="components/ui/icon-button.tsx">
import React, { memo } from "react";
import { cn } from "@/lib/utils";

type IconSize = "sm" | "md" | "lg" | "xl" | "xxl";

interface BaseIconButtonProps {
  size?: IconSize;
  className?: string;
  iconClassName?: string;
  disabledClassName?: string;
  title?: string;
  disabled?: boolean;
  onClick?: (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void;
}

type IconButtonWithoutChildrenProps = {
  icon: string;
  children?: undefined;
} & BaseIconButtonProps;

type IconButtonWithChildrenProps = {
  icon?: undefined;
  children: string | JSX.Element | JSX.Element[];
} & BaseIconButtonProps;

type IconButtonProps = IconButtonWithoutChildrenProps | IconButtonWithChildrenProps;

const IconButton = memo(({ icon, size = "xl", className, iconClassName, disabledClassName, disabled = false, title, onClick, children }: IconButtonProps) => {
  return (
    <button
      className={cn(
        "text-bolt-elements-item-contentDefault enabled:hover:text-bolt-elements-item-contentActive enabled:hover:bg-bolt-elements-item-backgroundActive flex items-center rounded-md bg-transparent p-1 disabled:cursor-not-allowed",
        { [cn("opacity-30", disabledClassName)]: disabled },
        className
      )}
      title={title}
      disabled={disabled}
      onClick={(event) => {
        if (disabled) {
          return;
        }
        onClick?.(event);
      }}
    >
      {children ? children : <div className={cn(icon, getIconSize(size), iconClassName)}></div>}
    </button>
  );
});

IconButton.displayName = "IconButton";

export default IconButton;

function getIconSize(size: IconSize) {
  if (size === "sm") {
    return "text-sm";
  } else if (size === "md") {
    return "text-md";
  } else if (size === "lg") {
    return "text-lg";
  } else if (size === "xl") {
    return "text-xl";
  } else {
    return "text-2xl";
  }
}
</file>

<file path="components/ui/input.tsx">
import * as React from "react";

import { cn } from "@/lib/utils";

export interface InputProps
  extends React.InputHTMLAttributes<HTMLInputElement> {}

const Input = React.forwardRef<HTMLInputElement, InputProps>(
  ({ className, type, ...props }, ref) => {
    return (
      <input
        type={type}
        className={cn(
          "flex h-9 w-full rounded-md border border-input bg-background px-3 py-1 text-sm shadow-sm transition-colors file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50",
          className,
        )}
        ref={ref}
        {...props}
      />
    );
  },
);
Input.displayName = "Input";

export { Input };
</file>

<file path="components/ui/label.tsx">
"use client";

import * as React from "react";
import * as LabelPrimitive from "@radix-ui/react-label";
import { cva, type VariantProps } from "class-variance-authority";

import { cn } from "@/lib/utils";

const labelVariants = cva(
  "text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70",
);

const Label = React.forwardRef<
  React.ElementRef<typeof LabelPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &
    VariantProps<typeof labelVariants>
>(({ className, ...props }, ref) => (
  <LabelPrimitive.Root
    ref={ref}
    className={cn(labelVariants(), className)}
    {...props}
  />
));
Label.displayName = LabelPrimitive.Root.displayName;

export { Label };
</file>

<file path="components/ui/loading-button.tsx">
import * as React from "react";
import { Slot } from "@radix-ui/react-slot";
import { cva, type VariantProps } from "class-variance-authority";
import { cn } from "@/lib/utils";
import { Loader2 } from "lucide-react";

const buttonVariants = cva(
  "inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50",
  {
    variants: {
      variant: {
        default: "bg-primary text-primary-foreground hover:bg-primary/90",
        destructive: "bg-destructive text-destructive-foreground hover:bg-destructive/90",
        outline: "border border-input bg-background hover:bg-accent hover:text-accent-foreground",
        secondary: "bg-secondary text-secondary-foreground hover:bg-secondary/80",
        ghost: "hover:bg-accent hover:text-accent-foreground",
        link: "text-primary underline-offset-4 hover:underline",
      },
      size: {
        default: "h-10 px-4 py-2",
        sm: "h-9 rounded-md px-3",
        lg: "h-11 rounded-md px-8",
        icon: "h-10 w-10",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
);

export interface ButtonProps extends React.ButtonHTMLAttributes<HTMLButtonElement>, VariantProps<typeof buttonVariants> {
  asChild?: boolean;
  loading?: boolean;
}

const LoadingButton = React.forwardRef<HTMLButtonElement, ButtonProps>(({ className, variant, size, asChild = false, loading, children, ...props }, ref) => {
  if (asChild) {
    return (
      <Slot ref={ref} {...props}>
        <>
          {React.Children.map(children as React.ReactElement, (child: React.ReactElement) => {
            return React.cloneElement(child, {
              className: cn(buttonVariants({ variant, size }), className),
              children: (
                <>
                  {loading && <Loader2 className={cn("h-4 w-4 animate-spin", children && "mr-2")} />}
                  {child.props.children}
                </>
              ),
            });
          })}
        </>
      </Slot>
    );
  }

  return (
    <button className={cn(buttonVariants({ variant, size, className }))} disabled={loading} ref={ref} {...props}>
      <>
        {loading && <Loader2 className={cn("h-4 w-4 animate-spin", children && "mr-2")} />}
        {children}
      </>
    </button>
  );
});
LoadingButton.displayName = "LoadingButton";

export { LoadingButton, buttonVariants };
</file>

<file path="components/ui/navigation-menu.tsx">
import * as React from "react"
import { ChevronDownIcon } from "@radix-ui/react-icons"
import * as NavigationMenuPrimitive from "@radix-ui/react-navigation-menu"
import { cva } from "class-variance-authority"

import { cn } from "@/lib/utils"

const NavigationMenu = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>
>(({ className, children, ...props }, ref) => (
  <NavigationMenuPrimitive.Root
    ref={ref}
    className={cn(
      "relative z-10 flex max-w-max flex-1 items-center justify-center",
      className
    )}
    {...props}
  >
    {children}
    <NavigationMenuViewport />
  </NavigationMenuPrimitive.Root>
))
NavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName

const NavigationMenuList = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.List>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>
>(({ className, ...props }, ref) => (
  <NavigationMenuPrimitive.List
    ref={ref}
    className={cn(
      "group flex flex-1 list-none items-center justify-center space-x-1",
      className
    )}
    {...props}
  />
))
NavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName

const NavigationMenuItem = NavigationMenuPrimitive.Item

const navigationMenuTriggerStyle = cva(
  "group inline-flex h-9 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[active]:bg-accent/50 data-[state=open]:bg-accent/50"
)

const NavigationMenuTrigger = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>
>(({ className, children, ...props }, ref) => (
  <NavigationMenuPrimitive.Trigger
    ref={ref}
    className={cn(navigationMenuTriggerStyle(), "group", className)}
    {...props}
  >
    {children}{" "}
    <ChevronDownIcon
      className="relative top-[1px] ml-1 h-3 w-3 transition duration-300 group-data-[state=open]:rotate-180"
      aria-hidden="true"
    />
  </NavigationMenuPrimitive.Trigger>
))
NavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName

const NavigationMenuContent = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>
>(({ className, ...props }, ref) => (
  <NavigationMenuPrimitive.Content
    ref={ref}
    className={cn(
      "left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto ",
      className
    )}
    {...props}
  />
))
NavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName

const NavigationMenuLink = NavigationMenuPrimitive.Link

const NavigationMenuViewport = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>
>(({ className, ...props }, ref) => (
  <div className={cn("absolute left-0 top-full flex justify-center")}>
    <NavigationMenuPrimitive.Viewport
      className={cn(
        "origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]",
        className
      )}
      ref={ref}
      {...props}
    />
  </div>
))
NavigationMenuViewport.displayName =
  NavigationMenuPrimitive.Viewport.displayName

const NavigationMenuIndicator = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>
>(({ className, ...props }, ref) => (
  <NavigationMenuPrimitive.Indicator
    ref={ref}
    className={cn(
      "top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in",
      className
    )}
    {...props}
  >
    <div className="relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md" />
  </NavigationMenuPrimitive.Indicator>
))
NavigationMenuIndicator.displayName =
  NavigationMenuPrimitive.Indicator.displayName

export {
  navigationMenuTriggerStyle,
  NavigationMenu,
  NavigationMenuList,
  NavigationMenuItem,
  NavigationMenuContent,
  NavigationMenuTrigger,
  NavigationMenuLink,
  NavigationMenuIndicator,
  NavigationMenuViewport,
}
</file>

<file path="components/ui/popover.tsx">
"use client";

import * as React from "react";
import * as PopoverPrimitive from "@radix-ui/react-popover";

import { cn } from "@/lib/utils";

const Popover = PopoverPrimitive.Root;

const PopoverTrigger = PopoverPrimitive.Trigger;

const PopoverAnchor = PopoverPrimitive.Anchor;

const PopoverContent = React.forwardRef<
  React.ElementRef<typeof PopoverPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>
>(({ className, align = "center", sideOffset = 4, ...props }, ref) => (
  <PopoverPrimitive.Portal>
    <PopoverPrimitive.Content
      ref={ref}
      align={align}
      sideOffset={sideOffset}
      className={cn(
        "z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        className,
      )}
      {...props}
    />
  </PopoverPrimitive.Portal>
));
PopoverContent.displayName = PopoverPrimitive.Content.displayName;

export { Popover, PopoverTrigger, PopoverContent, PopoverAnchor };
</file>

<file path="components/ui/pulsating-button.tsx">
"use client";

import React from "react";

import { cn } from "@/lib/utils";

interface PulsatingButtonProps extends React.ButtonHTMLAttributes<HTMLButtonElement> {
  pulseColor?: string;
  duration?: string;
}

export function PulsatingButton({ className, children, pulseColor = "#0096ff", duration = "1.5s", ...props }: PulsatingButtonProps) {
  return (
    <button
      className={cn("relative flex cursor-pointer items-center justify-center rounded-lg bg-blue-500 px-4 py-2 text-center text-white dark:bg-blue-500 dark:text-black", className)}
      style={
        {
          "--pulse-color": pulseColor,
          "--duration": duration,
        } as React.CSSProperties
      }
      {...props}
    >
      <div className="relative z-10">{children}</div>
      <div className="absolute left-1/2 top-1/2 size-full -translate-x-1/2 -translate-y-1/2 animate-pulse rounded-lg bg-inherit" />
    </button>
  );
}
</file>

<file path="components/ui/scroll-area.tsx">
"use client";

import * as React from "react";
import * as ScrollAreaPrimitive from "@radix-ui/react-scroll-area";

import { cn } from "@/lib/utils";

const ScrollArea = React.forwardRef<
  React.ElementRef<typeof ScrollAreaPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>
>(({ className, children, ...props }, ref) => (
  <ScrollAreaPrimitive.Root
    ref={ref}
    className={cn("relative overflow-hidden", className)}
    {...props}
  >
    <ScrollAreaPrimitive.Viewport className="size-full rounded-[inherit]">
      {children}
    </ScrollAreaPrimitive.Viewport>
    <ScrollBar />
    <ScrollAreaPrimitive.Corner />
  </ScrollAreaPrimitive.Root>
));
ScrollArea.displayName = ScrollAreaPrimitive.Root.displayName;

const ScrollBar = React.forwardRef<
  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,
  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>
>(({ className, orientation = "vertical", ...props }, ref) => (
  <ScrollAreaPrimitive.ScrollAreaScrollbar
    ref={ref}
    orientation={orientation}
    className={cn(
      "flex touch-none select-none transition-colors",
      orientation === "vertical" &&
        "h-full w-2.5 border-l border-l-transparent p-px",
      orientation === "horizontal" &&
        "h-2.5 border-t border-t-transparent p-px",
      className,
    )}
    {...props}
  >
    <ScrollAreaPrimitive.ScrollAreaThumb className="relative flex-1 rounded-full bg-border" />
  </ScrollAreaPrimitive.ScrollAreaScrollbar>
));
ScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName;

export { ScrollArea, ScrollBar };
</file>

<file path="components/ui/select.tsx">
"use client"

import * as React from "react"
import * as SelectPrimitive from "@radix-ui/react-select"
import { cn } from "@/lib/utils"
import { CheckIcon, ChevronDownIcon, ChevronUpIcon } from "@radix-ui/react-icons"

const Select = SelectPrimitive.Root

const SelectGroup = SelectPrimitive.Group

const SelectValue = SelectPrimitive.Value

const SelectTrigger = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>
>(({ className, children, ...props }, ref) => (
  <SelectPrimitive.Trigger
    ref={ref}
    className={cn(
      "flex h-9 w-full items-center justify-between whitespace-nowrap rounded-md border border-input bg-transparent px-3 py-2 text-sm shadow-sm ring-offset-background placeholder:text-muted-foreground focus:outline-none focus:ring-1 focus:ring-ring disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1",
      className
    )}
    {...props}
  >
    {children}
    <SelectPrimitive.Icon asChild>
      <ChevronDownIcon className="h-4 w-4 opacity-50" />
    </SelectPrimitive.Icon>
  </SelectPrimitive.Trigger>
))
SelectTrigger.displayName = SelectPrimitive.Trigger.displayName

const SelectScrollUpButton = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.ScrollUpButton
    ref={ref}
    className={cn(
      "flex cursor-default items-center justify-center py-1",
      className
    )}
    {...props}
  >
    <ChevronUpIcon className="h-4 w-4" />
  </SelectPrimitive.ScrollUpButton>
))
SelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName

const SelectScrollDownButton = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.ScrollDownButton
    ref={ref}
    className={cn(
      "flex cursor-default items-center justify-center py-1",
      className
    )}
    {...props}
  >
    <ChevronDownIcon className="h-4 w-4" />
  </SelectPrimitive.ScrollDownButton>
))
SelectScrollDownButton.displayName =
  SelectPrimitive.ScrollDownButton.displayName

const SelectContent = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>
>(({ className, children, position = "popper", ...props }, ref) => (
  <SelectPrimitive.Portal>
    <SelectPrimitive.Content
      ref={ref}
      className={cn(
        "relative z-50 max-h-96 min-w-[8rem] overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        position === "popper" &&
          "data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1",
        className
      )}
      position={position}
      {...props}
    >
      <SelectScrollUpButton />
      <SelectPrimitive.Viewport
        className={cn(
          "p-1",
          position === "popper" &&
            "h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]"
        )}
      >
        {children}
      </SelectPrimitive.Viewport>
      <SelectScrollDownButton />
    </SelectPrimitive.Content>
  </SelectPrimitive.Portal>
))
SelectContent.displayName = SelectPrimitive.Content.displayName

const SelectLabel = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.Label
    ref={ref}
    className={cn("px-2 py-1.5 text-sm font-semibold", className)}
    {...props}
  />
))
SelectLabel.displayName = SelectPrimitive.Label.displayName

const SelectItem = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>
>(({ className, children, ...props }, ref) => (
  <SelectPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-2 pr-8 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute right-2 flex h-3.5 w-3.5 items-center justify-center">
      <SelectPrimitive.ItemIndicator>
        <CheckIcon className="h-4 w-4" />
      </SelectPrimitive.ItemIndicator>
    </span>
    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>
  </SelectPrimitive.Item>
))
SelectItem.displayName = SelectPrimitive.Item.displayName

const SelectSeparator = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-muted", className)}
    {...props}
  />
))
SelectSeparator.displayName = SelectPrimitive.Separator.displayName

export {
  Select,
  SelectGroup,
  SelectValue,
  SelectTrigger,
  SelectContent,
  SelectLabel,
  SelectItem,
  SelectSeparator,
  SelectScrollUpButton,
  SelectScrollDownButton,
}
</file>

<file path="components/ui/separator.tsx">
"use client";

import * as React from "react";
import * as SeparatorPrimitive from "@radix-ui/react-separator";

import { cn } from "@/lib/utils";

const Separator = React.forwardRef<
  React.ElementRef<typeof SeparatorPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>
>(
  (
    { className, orientation = "horizontal", decorative = true, ...props },
    ref,
  ) => (
    <SeparatorPrimitive.Root
      ref={ref}
      decorative={decorative}
      orientation={orientation}
      className={cn(
        "shrink-0 bg-border",
        orientation === "horizontal" ? "h-px w-full" : "h-full w-px",
        className,
      )}
      {...props}
    />
  ),
);
Separator.displayName = SeparatorPrimitive.Root.displayName;

export { Separator };
</file>

<file path="components/ui/sheet.tsx">
"use client";

import * as React from "react";
import * as SheetPrimitive from "@radix-ui/react-dialog";
import { Cross2Icon } from "@radix-ui/react-icons";
import { cva, type VariantProps } from "class-variance-authority";

import { cn } from "@/lib/utils";

const Sheet = SheetPrimitive.Root;

const SheetTrigger = SheetPrimitive.Trigger;

const SheetClose = SheetPrimitive.Close;

const SheetPortal = SheetPrimitive.Portal;

const SheetOverlay = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <SheetPrimitive.Overlay
    className={cn(
      "fixed inset-0 z-50 bg-background/80 backdrop-blur-sm data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className,
    )}
    {...props}
    ref={ref}
  />
));
SheetOverlay.displayName = SheetPrimitive.Overlay.displayName;

const sheetVariants = cva(
  "fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=closed]:duration-300 data-[state=open]:duration-500 data-[state=open]:animate-in data-[state=closed]:animate-out",
  {
    variants: {
      side: {
        top: "inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top",
        bottom:
          "inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom",
        left: "inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm",
        right:
          "inset-y-0 right-0 h-full w-3/4 border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm",
      },
    },
    defaultVariants: {
      side: "right",
    },
  },
);

interface SheetContentProps
  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,
    VariantProps<typeof sheetVariants> {}

const SheetContent = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Content>,
  SheetContentProps
>(({ side = "right", className, children, ...props }, ref) => (
  <SheetPortal>
    <SheetOverlay />
    <SheetPrimitive.Content
      ref={ref}
      className={cn(sheetVariants({ side }), className)}
      {...props}
    >
      {children}
      <SheetPrimitive.Close className="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary">
        <Cross2Icon className="size-4" />
        <span className="sr-only">Close</span>
      </SheetPrimitive.Close>
    </SheetPrimitive.Content>
  </SheetPortal>
));
SheetContent.displayName = SheetPrimitive.Content.displayName;

const SheetHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col space-y-2 text-center sm:text-left",
      className,
    )}
    {...props}
  />
);
SheetHeader.displayName = "SheetHeader";

const SheetFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className,
    )}
    {...props}
  />
);
SheetFooter.displayName = "SheetFooter";

const SheetTitle = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>
>(({ className, ...props }, ref) => (
  <SheetPrimitive.Title
    ref={ref}
    className={cn("text-lg font-semibold text-foreground", className)}
    {...props}
  />
));
SheetTitle.displayName = SheetPrimitive.Title.displayName;

const SheetDescription = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>
>(({ className, ...props }, ref) => (
  <SheetPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
));
SheetDescription.displayName = SheetPrimitive.Description.displayName;

export {
  Sheet,
  SheetPortal,
  SheetOverlay,
  SheetTrigger,
  SheetClose,
  SheetContent,
  SheetHeader,
  SheetFooter,
  SheetTitle,
  SheetDescription,
};
</file>

<file path="components/ui/skeleton.tsx">
import { cn } from "@/lib/utils";

function Skeleton({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) {
  return (
    <div
      className={cn("animate-pulse rounded-md bg-primary/10", className)}
      {...props}
    />
  );
}

export { Skeleton };
</file>

<file path="components/ui/sonner.tsx">
"use client";

import * as React from "react";
import * as ToastPrimitives from "@radix-ui/react-toast";
import { cva, type VariantProps } from "class-variance-authority";
import { X } from "lucide-react";

import { cn } from "@/lib/utils";

const ToastProvider = ToastPrimitives.Provider;

const ToastViewport = React.forwardRef<React.ElementRef<typeof ToastPrimitives.Viewport>, React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>>(({ className, ...props }, ref) => (
  <ToastPrimitives.Viewport ref={ref} className={cn("fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]", className)} {...props} />
));
ToastViewport.displayName = ToastPrimitives.Viewport.displayName;

const toastVariants = cva(
  "group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full",
  {
    variants: {
      variant: {
        default: "border bg-background text-foreground",
        destructive: "destructive group border-destructive bg-destructive text-destructive-foreground",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
);

const Toast = React.forwardRef<React.ElementRef<typeof ToastPrimitives.Root>, React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> & VariantProps<typeof toastVariants>>(({ className, variant, ...props }, ref) => {
  return <ToastPrimitives.Root ref={ref} className={cn(toastVariants({ variant }), className)} {...props} />;
});
Toast.displayName = ToastPrimitives.Root.displayName;

const ToastAction = React.forwardRef<React.ElementRef<typeof ToastPrimitives.Action>, React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>>(({ className, ...props }, ref) => (
  <ToastPrimitives.Action
    ref={ref}
    className={cn(
      "inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive",
      className
    )}
    {...props}
  />
));
ToastAction.displayName = ToastPrimitives.Action.displayName;

const ToastClose = React.forwardRef<React.ElementRef<typeof ToastPrimitives.Close>, React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>>(({ className, ...props }, ref) => (
  <ToastPrimitives.Close
    ref={ref}
    className={cn(
      "absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600",
      className
    )}
    toast-close=""
    {...props}
  >
    <X className="h-4 w-4" />
  </ToastPrimitives.Close>
));
ToastClose.displayName = ToastPrimitives.Close.displayName;

const ToastTitle = React.forwardRef<React.ElementRef<typeof ToastPrimitives.Title>, React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>>(({ className, ...props }, ref) => (
  <ToastPrimitives.Title ref={ref} className={cn("text-sm font-semibold", className)} {...props} />
));
ToastTitle.displayName = ToastPrimitives.Title.displayName;

const ToastDescription = React.forwardRef<React.ElementRef<typeof ToastPrimitives.Description>, React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>>(({ className, ...props }, ref) => (
  <ToastPrimitives.Description ref={ref} className={cn("text-sm opacity-90", className)} {...props} />
));
ToastDescription.displayName = ToastPrimitives.Description.displayName;

type ToastProps = React.ComponentPropsWithoutRef<typeof Toast>;

type ToastActionElement = React.ReactElement<typeof ToastAction>;

export { type ToastProps, type ToastActionElement, ToastProvider, ToastViewport, Toast, ToastTitle, ToastDescription, ToastClose, ToastAction };
</file>

<file path="components/ui/switch.tsx">
"use client";

import * as React from "react";
import * as SwitchPrimitives from "@radix-ui/react-switch";

import { cn } from "@/lib/utils";

const Switch = React.forwardRef<
  React.ElementRef<typeof SwitchPrimitives.Root>,
  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>
>(({ className, ...props }, ref) => (
  <SwitchPrimitives.Root
    className={cn(
      "peer inline-flex h-5 w-9 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent shadow-sm transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input",
      className,
    )}
    {...props}
    ref={ref}
  >
    <SwitchPrimitives.Thumb
      className={cn(
        "pointer-events-none block size-4 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-4 data-[state=unchecked]:translate-x-0",
      )}
    />
  </SwitchPrimitives.Root>
));
Switch.displayName = SwitchPrimitives.Root.displayName;

export { Switch };
</file>

<file path="components/ui/table.tsx">
import * as React from "react";

import { cn } from "@/lib/utils";

const Table = React.forwardRef<
  HTMLTableElement,
  React.HTMLAttributes<HTMLTableElement>
>(({ className, ...props }, ref) => (
  <div className="w-full overflow-auto">
    <table
      ref={ref}
      className={cn("w-full caption-bottom text-sm", className)}
      {...props}
    />
  </div>
));
Table.displayName = "Table";

const TableHeader = React.forwardRef<
  HTMLTableSectionElement,
  React.HTMLAttributes<HTMLTableSectionElement>
>(({ className, ...props }, ref) => (
  <thead ref={ref} className={cn("[&_tr]:border-b", className)} {...props} />
));
TableHeader.displayName = "TableHeader";

const TableBody = React.forwardRef<
  HTMLTableSectionElement,
  React.HTMLAttributes<HTMLTableSectionElement>
>(({ className, ...props }, ref) => (
  <tbody
    ref={ref}
    className={cn("[&_tr:last-child]:border-0", className)}
    {...props}
  />
));
TableBody.displayName = "TableBody";

const TableFooter = React.forwardRef<
  HTMLTableSectionElement,
  React.HTMLAttributes<HTMLTableSectionElement>
>(({ className, ...props }, ref) => (
  <tfoot
    ref={ref}
    className={cn("bg-primary font-medium text-primary-foreground", className)}
    {...props}
  />
));
TableFooter.displayName = "TableFooter";

const TableRow = React.forwardRef<
  HTMLTableRowElement,
  React.HTMLAttributes<HTMLTableRowElement>
>(({ className, ...props }, ref) => (
  <tr
    ref={ref}
    className={cn(
      "border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted",
      className,
    )}
    {...props}
  />
));
TableRow.displayName = "TableRow";

const TableHead = React.forwardRef<
  HTMLTableCellElement,
  React.ThHTMLAttributes<HTMLTableCellElement>
>(({ className, ...props }, ref) => (
  <th
    ref={ref}
    className={cn(
      "h-10 px-2 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0 [&>[role=checkbox]]:translate-y-[2px]",
      className,
    )}
    {...props}
  />
));
TableHead.displayName = "TableHead";

const TableCell = React.forwardRef<
  HTMLTableCellElement,
  React.TdHTMLAttributes<HTMLTableCellElement>
>(({ className, ...props }, ref) => (
  <td
    ref={ref}
    className={cn(
      "p-2 align-middle [&:has([role=checkbox])]:pr-0 [&>[role=checkbox]]:translate-y-[2px]",
      className,
    )}
    {...props}
  />
));
TableCell.displayName = "TableCell";

const TableCaption = React.forwardRef<
  HTMLTableCaptionElement,
  React.HTMLAttributes<HTMLTableCaptionElement>
>(({ className, ...props }, ref) => (
  <caption
    ref={ref}
    className={cn("mt-4 text-sm text-muted-foreground", className)}
    {...props}
  />
));
TableCaption.displayName = "TableCaption";

export {
  Table,
  TableHeader,
  TableBody,
  TableFooter,
  TableHead,
  TableRow,
  TableCell,
  TableCaption,
};
</file>

<file path="components/ui/tabs.tsx">
"use client";

import * as React from "react";
import * as TabsPrimitive from "@radix-ui/react-tabs";

import { cn } from "@/lib/utils";

const Tabs = TabsPrimitive.Root;

const TabsList = React.forwardRef<React.ElementRef<typeof TabsPrimitive.List>, React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>>(({ className, ...props }, ref) => (
  <TabsPrimitive.List ref={ref} className={cn("inline-flex h-9 items-center justify-center rounded-lg bg-muted p-1 text-muted-foreground", className)} {...props} />
));
TabsList.displayName = TabsPrimitive.List.displayName;

const TabsTrigger = React.forwardRef<React.ElementRef<typeof TabsPrimitive.Trigger>, React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>>(({ className, ...props }, ref) => (
  <TabsPrimitive.Trigger
    ref={ref}
    className={cn(
      "inline-flex items-center justify-center whitespace-nowrap rounded-md px-3 py-1 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow",
      className
    )}
    {...props}
  />
));
TabsTrigger.displayName = TabsPrimitive.Trigger.displayName;

const TabsContent = React.forwardRef<React.ElementRef<typeof TabsPrimitive.Content>, React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>>(({ className, ...props }, ref) => (
  <TabsPrimitive.Content ref={ref} className={cn("mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2", className)} {...props} />
));
TabsContent.displayName = TabsPrimitive.Content.displayName;

export { Tabs, TabsList, TabsTrigger, TabsContent };
</file>

<file path="components/ui/toast.tsx">
"use client"

import * as React from "react"
import * as ToastPrimitives from "@radix-ui/react-toast"
import { cva, type VariantProps } from "class-variance-authority"
import { cn } from "@/lib/utils"
import { Cross2Icon } from "@radix-ui/react-icons"

const ToastProvider = ToastPrimitives.Provider

const ToastViewport = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Viewport>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Viewport
    ref={ref}
    className={cn(
      "fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]",
      className
    )}
    {...props}
  />
))
ToastViewport.displayName = ToastPrimitives.Viewport.displayName

const toastVariants = cva(
  "group pointer-events-auto relative flex w-full items-center justify-between space-x-2 overflow-hidden rounded-md border p-4 pr-6 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full",
  {
    variants: {
      variant: {
        default: "border bg-background text-foreground",
        destructive:
          "destructive group border-destructive bg-destructive text-destructive-foreground",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

const Toast = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Root>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &
    VariantProps<typeof toastVariants>
>(({ className, variant, ...props }, ref) => {
  return (
    <ToastPrimitives.Root
      ref={ref}
      className={cn(toastVariants({ variant }), className)}
      {...props}
    />
  )
})
Toast.displayName = ToastPrimitives.Root.displayName

const ToastAction = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Action>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Action
    ref={ref}
    className={cn(
      "inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium transition-colors hover:bg-secondary focus:outline-none focus:ring-1 focus:ring-ring disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive",
      className
    )}
    {...props}
  />
))
ToastAction.displayName = ToastPrimitives.Action.displayName

const ToastClose = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Close>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Close
    ref={ref}
    className={cn(
      "absolute right-1 top-1 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-1 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600",
      className
    )}
    toast-close=""
    {...props}
  >
    <Cross2Icon className="h-4 w-4" />
  </ToastPrimitives.Close>
))
ToastClose.displayName = ToastPrimitives.Close.displayName

const ToastTitle = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Title>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Title
    ref={ref}
    className={cn("text-sm font-semibold [&+div]:text-xs", className)}
    {...props}
  />
))
ToastTitle.displayName = ToastPrimitives.Title.displayName

const ToastDescription = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Description>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Description
    ref={ref}
    className={cn("text-sm opacity-90", className)}
    {...props}
  />
))
ToastDescription.displayName = ToastPrimitives.Description.displayName

type ToastProps = React.ComponentPropsWithoutRef<typeof Toast>

type ToastActionElement = React.ReactElement<typeof ToastAction>

export {
  type ToastProps,
  type ToastActionElement,
  ToastProvider,
  ToastViewport,
  Toast,
  ToastTitle,
  ToastDescription,
  ToastClose,
  ToastAction,
}
</file>

<file path="components/ui/toaster.tsx">
"use client";

import { useToast } from "@/hooks/use-toast";
import { Toast, ToastClose, ToastDescription, ToastProvider, ToastTitle, ToastViewport } from "@/components/ui/toast";

export function Toaster() {
  const { toasts } = useToast();

  return (
    <ToastProvider>
      {toasts.map(function ({ id, title, description, action, ...props }) {
        return (
          <Toast key={id} {...props}>
            <div className="grid gap-1">
              {title && <ToastTitle>{title}</ToastTitle>}
              {description && <ToastDescription>{description}</ToastDescription>}
            </div>
            {action}
            <ToastClose />
          </Toast>
        );
      })}
      <ToastViewport />
    </ToastProvider>
  );
}
</file>

<file path="components/ui/tooltip.tsx">
"use client";

import * as React from "react";
import * as TooltipPrimitive from "@radix-ui/react-tooltip";

import { cn } from "@/lib/utils";

const TooltipProvider = TooltipPrimitive.Provider;

const Tooltip = TooltipPrimitive.Root;

const TooltipTrigger = TooltipPrimitive.Trigger;

const TooltipContent = React.forwardRef<
  React.ElementRef<typeof TooltipPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>
>(({ className, sideOffset = 4, ...props }, ref) => (
  <TooltipPrimitive.Content
    ref={ref}
    sideOffset={sideOffset}
    className={cn(
      "z-50 overflow-hidden rounded-md bg-primary px-3 py-1.5 text-xs text-primary-foreground animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className,
    )}
    {...props}
  />
));
TooltipContent.displayName = TooltipPrimitive.Content.displayName;

export { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider };
</file>

<file path="components/ui/use-toast.ts">
// Inspired by react-hot-toast library
import * as React from "react";

import type { ToastActionElement, ToastProps } from "@/components/ui/toast";

const TOAST_LIMIT = 1;
const TOAST_REMOVE_DELAY = 1000000;

type ToasterToast = ToastProps & {
  id: string;
  title?: React.ReactNode;
  description?: React.ReactNode;
  action?: ToastActionElement;
};

const actionTypes = {
  ADD_TOAST: "ADD_TOAST",
  UPDATE_TOAST: "UPDATE_TOAST",
  DISMISS_TOAST: "DISMISS_TOAST",
  REMOVE_TOAST: "REMOVE_TOAST",
} as const;

let count = 0;

function genId() {
  count = (count + 1) % Number.MAX_VALUE;
  return count.toString();
}

type ActionType = typeof actionTypes;

type Action =
  | {
      type: ActionType["ADD_TOAST"];
      toast: ToasterToast;
    }
  | {
      type: ActionType["UPDATE_TOAST"];
      toast: Partial<ToasterToast>;
    }
  | {
      type: ActionType["DISMISS_TOAST"];
      toastId?: ToasterToast["id"];
    }
  | {
      type: ActionType["REMOVE_TOAST"];
      toastId?: ToasterToast["id"];
    };

interface State {
  toasts: ToasterToast[];
}

const toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>();

const addToRemoveQueue = (toastId: string) => {
  if (toastTimeouts.has(toastId)) {
    return;
  }

  const timeout = setTimeout(() => {
    toastTimeouts.delete(toastId);
    dispatch({
      type: "REMOVE_TOAST",
      toastId: toastId,
    });
  }, TOAST_REMOVE_DELAY);

  toastTimeouts.set(toastId, timeout);
};

export const reducer = (state: State, action: Action): State => {
  switch (action.type) {
    case "ADD_TOAST":
      return {
        ...state,
        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),
      };

    case "UPDATE_TOAST":
      return {
        ...state,
        toasts: state.toasts.map((t) =>
          t.id === action.toast.id ? { ...t, ...action.toast } : t,
        ),
      };

    case "DISMISS_TOAST": {
      const { toastId } = action;

      // ! Side effects ! - This could be extracted into a dismissToast() action,
      // but I'll keep it here for simplicity
      if (toastId) {
        addToRemoveQueue(toastId);
      } else {
        state.toasts.forEach((toast) => {
          addToRemoveQueue(toast.id);
        });
      }

      return {
        ...state,
        toasts: state.toasts.map((t) =>
          t.id === toastId || toastId === undefined
            ? {
                ...t,
                open: false,
              }
            : t,
        ),
      };
    }
    case "REMOVE_TOAST":
      if (action.toastId === undefined) {
        return {
          ...state,
          toasts: [],
        };
      }
      return {
        ...state,
        toasts: state.toasts.filter((t) => t.id !== action.toastId),
      };
  }
};

const listeners: Array<(state: State) => void> = [];

let memoryState: State = { toasts: [] };

function dispatch(action: Action) {
  memoryState = reducer(memoryState, action);
  listeners.forEach((listener) => {
    listener(memoryState);
  });
}

type Toast = Omit<ToasterToast, "id">;

function toast({ ...props }: Toast) {
  const id = genId();

  const update = (props: ToasterToast) =>
    dispatch({
      type: "UPDATE_TOAST",
      toast: { ...props, id },
    });
  const dismiss = () => dispatch({ type: "DISMISS_TOAST", toastId: id });

  dispatch({
    type: "ADD_TOAST",
    toast: {
      ...props,
      id,
      open: true,
      onOpenChange: (open) => {
        if (!open) dismiss();
      },
    },
  });

  return {
    id: id,
    dismiss,
    update,
  };
}

function useToast() {
  const [state, setState] = React.useState<State>(memoryState);

  React.useEffect(() => {
    listeners.push(setState);
    return () => {
      const index = listeners.indexOf(setState);
      if (index > -1) {
        listeners.splice(index, 1);
      }
    };
  }, [state]);

  return {
    ...state,
    toast,
    dismiss: (toastId?: string) => dispatch({ type: "DISMISS_TOAST", toastId }),
  };
}

export { useToast, toast };
</file>

<file path="components/analytics.tsx">
"use client";

import Script from "next/script";

export function Analytics() {
  return (
    <>
      <Script id="id">{`window.lemonSqueezyAffiliateConfig = { store: "magicui" };`}</Script>
      <Script src="https://lmsqueezy.com/affiliate.js" defer></Script>
      <Script
        async
        defer
        src="https://www.googletagmanager.com/gtag/js?id=G-4CVHZX68BT"
      ></Script>
      <Script id="gtag">
        {`
window.dataLayer = window.dataLayer || [];
function gtag(){dataLayer.push(arguments);}
gtag('js', new Date());

gtag('config', 'G-4CVHZX68BT');
`}
      </Script>
    </>
  );
}
</file>

<file path="components/blur-image.tsx">
"use client";

import { useEffect, useState } from "react";
import Image, { ImageProps } from "next/image";

export default function BlurImage(props: ImageProps) {
  const [loading, setLoading] = useState(true);
  const [src, setSrc] = useState(props.src);
  useEffect(() => setSrc(props.src), [props.src]); // update the `src` value when the `prop.src` value changes

  return (
    <Image
      {...props}
      src={src}
      alt={props.alt}
      className={`${props.className} ${loading ? "blur-[2px]" : "blur-0"}`}
      onLoadingComplete={async () => {
        setLoading(false);
      }}
      onError={() => {
        setSrc(`https://avatar.vercel.sh/${props.alt}`); // if the image fails to load, use the default avatar
      }}
    />
  );
}
</file>

<file path="components/callout.tsx">
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";

interface CalloutProps {
  icon?: string;
  title?: string;
  children?: React.ReactNode;
}

export function Callout({ title, children, icon, ...props }: CalloutProps) {
  return (
    <Alert {...props}>
      {icon && <span className="mr-4 text-2xl">{icon}</span>}
      {title && <AlertTitle>{title}</AlertTitle>}
      <AlertDescription>{children}</AlertDescription>
    </Alert>
  );
}
</file>

<file path="components/category-tab.tsx">
"use client";

import { useState } from "react";
import { ScrollArea, ScrollBar } from "@/components/ui/scroll-area";
import { Tabs, TabsList, TabsTrigger } from "@/components/ui/tabs";



export function CategoryTab({ categories, onCategoryChange }: { categories: string[]; onCategoryChange: (category: string) => void }) {
  const [activeCategory, setActiveCategory] = useState(categories[0]);

  const handleCategoryChange = (category: string) => {
    setActiveCategory(category);
    onCategoryChange(category);
  };

  return (
    <>
      <Tabs defaultValue={categories[0]} className="w-full" onValueChange={handleCategoryChange}>
        <ScrollArea className="h-16 w-full whitespace-nowrap rounded-md bg-transparent">
          <TabsList className="bg-transparent">
            {categories.map((category) => (
              <TabsTrigger key={category} value={category} className="text-md">
                {category}
              </TabsTrigger>
            ))}
          </TabsList>
          <ScrollBar orientation="horizontal" className="w-0 bg-transparent  " />
        </ScrollArea>
      </Tabs>
    </>
  );
}
</file>

<file path="components/code-block-wrapper.tsx">
"use client";

import * as React from "react";

import { cn } from "@/lib/utils";
import { Button } from "@/components/ui/button";
import { Collapsible, CollapsibleContent, CollapsibleTrigger } from "@/components/ui/collapsible";

interface CodeBlockProps extends React.HTMLAttributes<HTMLDivElement> {
  expandButtonTitle?: string;
}

export function CodeBlockWrapper({ expandButtonTitle = "View Code", className, children, ...props }: CodeBlockProps) {
  const [isOpened, setIsOpened] = React.useState(false);

  return (
    <Collapsible open={isOpened} onOpenChange={setIsOpened}>
      <div className={cn("relative overflow-hidden ", className)} {...props}>
        <CollapsibleContent forceMount className={cn("overflow-hidden ", !isOpened && "max-h-72")}>
          <div className={cn("border-none [&_pre]:my-0 [&_pre]:max-h-[650px] [&_pre]:pb-[100px]", !isOpened ? "[&_pre]:overflow-hidden" : "[&_pre]:overflow-auto]")}>{children}</div>
        </CollapsibleContent>
        <div className={cn("absolute flex items-center justify-center bg-gradient-to-b from-background/10 to-background to-90% p-2", isOpened ? "inset-x-0 bottom-0 h-12 from-gray-900/30" : "inset-0 ")}>
          <CollapsibleTrigger asChild>
            <Button variant="secondary" className="mb-8 h-8 text-xs">
              {isOpened ? "Collapse" : expandButtonTitle}
            </Button>
          </CollapsibleTrigger>
        </div>
      </div>
    </Collapsible>
  );
}
</file>

<file path="components/code-panel-dialog.tsx">
import { Dialog, DialogContent } from "@/components/ui/dialog";
import CodePanel from "./code-panel";
import { ThemeEditorState } from "@/types/editor";

interface CodePanelDialogProps {
  open: boolean;
  onOpenChange: (open: boolean) => void;
  themeEditorState: ThemeEditorState;
}

export function CodePanelDialog({ open, onOpenChange, themeEditorState }: CodePanelDialogProps) {
  return (
    <Dialog open={open} onOpenChange={onOpenChange}>
      <DialogContent className="h-[80vh] max-w-4xl gap-6 overflow-hidden rounded-lg border p-0 py-6 outline-none">
        <div className="h-full overflow-auto px-6">
          <CodePanel themeEditorState={themeEditorState} />
        </div>
      </DialogContent>
    </Dialog>
  );
}
</file>

<file path="components/code-panel.tsx">
import { useMemo, useState } from "react";
import { Button } from "@/components/ui/button";
import { Copy, Check, Heart } from "lucide-react";
import { ThemeEditorState } from "@/types/editor";
import { Alert } from "./ui/alert";
import { ScrollArea, ScrollBar } from "./ui/scroll-area";
import { ColorFormat } from "@/types";
import { Select, SelectContent, SelectTrigger, SelectValue, SelectItem } from "./ui/select";
import { useEditorStore } from "@/store/editor-store";
import { usePreferencesStore } from "@/store/preferences-store";
import { generateThemeCode } from "@/utils/theme-style-generator";

interface CodePanelProps {
  themeEditorState: ThemeEditorState;
}

const CodePanel: React.FC<CodePanelProps> = ({ themeEditorState }) => {
  const [registryCopied, setRegistryCopied] = useState(false);
  const [copied, setCopied] = useState(false);
  const preset = useEditorStore((state) => state.themeState.preset);
  const colorFormat = usePreferencesStore((state) => state.colorFormat);
  const setColorFormat = usePreferencesStore((state) => state.setColorFormat);

  const code = generateThemeCode(themeEditorState, colorFormat);

  const copyToClipboard = async (text: string) => {
    try {
      await navigator.clipboard.writeText(text);
      setCopied(true);
      setTimeout(() => setCopied(false), 2000);
    } catch (err) {
      console.error("Failed to copy text:", err);
    }
  };

  const showRegistryCommand = useMemo(() => {
    return preset && preset !== "default";
  }, [preset]);

  return (
    <>
      <div className="flex h-full flex-col">
        <div className="mb-4 flex-none">
          <div className="flex items-center justify-between gap-2">
            <h2 className="text-lg font-semibold">Theme Code</h2>
          </div>
        </div>
        <div className="mb-4 flex items-center gap-2 ">
          <Select value={colorFormat} onValueChange={(value: ColorFormat) => setColorFormat(value)}>
            <SelectTrigger className="outline-hidden w-fit gap-1 border-none bg-muted/50 focus:border-none focus:ring-transparent">
              <SelectValue className="focus:ring-transparent" />
            </SelectTrigger>
            <SelectContent>
              <SelectItem value="hsl">hsl</SelectItem>
              <SelectItem value="oklch">oklch</SelectItem>
              <SelectItem value="rgb">rgb</SelectItem>
              <SelectItem value="hex">hex</SelectItem>
            </SelectContent>
          </Select>
        </div>

        <div className="flex min-h-0 flex-1 flex-col overflow-hidden rounded-lg border">
          <div className="flex flex-none items-center justify-between border-b bg-muted/50 px-4 py-2">
            <span className="text-sm font-medium">index.css</span>

            <div className="flex items-center gap-2">
              <Button variant="outline" size="sm" onClick={() => copyToClipboard(code)} className="h-8" aria-label={copied ? "Copied to clipboard" : "Copy to clipboard"}>
                {copied ? (
                  <>
                    <Check className="size-4" />
                    <span className="sr-only md:not-sr-only">Copied</span>
                  </>
                ) : (
                  <>
                    <Copy className="size-4" />
                    <span className="sr-only md:not-sr-only">Copy</span>
                  </>
                )}
              </Button>
            </div>
          </div>

          <ScrollArea className="relative flex-1">
            <pre className="h-full p-4 text-sm">
              <code>{code}</code>
            </pre>
            <ScrollBar orientation="horizontal" />
          </ScrollArea>
        </div>
      </div>
    </>
  );
};

export default CodePanel;
</file>

<file path="components/code-preview.tsx">
"use client";
import { Check, Copy } from "lucide-react";
import { useState } from "react";
import { codeToHtml } from "shiki";

type CodePreviewProps = {
  children: string;
  language?: string;
};

export default function CodePreview({ children, language = "javascript" }: CodePreviewProps) {
  const [hasCheckIcon, setHasCheckIcon] = useState(false);

  const onCopy = () => {
    navigator.clipboard.writeText(children); // Salin isi dari children ke clipboard
    setHasCheckIcon(true);

    setTimeout(() => {
      setHasCheckIcon(false);
    }, 1000);
  };

  return (
    <div className="relative">
      <div className="absolute right-4 top-4 cursor-pointer bg-transparent p-2" onClick={onCopy}>
        <div className={`absolute inset-0 transition-all duration-300${hasCheckIcon ? "scale-0 opacity-0" : "scale-100 opacity-100"}`}>
          <Copy className="h-4 w-4 text-zinc-50" />
        </div>
        <div className={`absolute inset-0 transition-all duration-300${hasCheckIcon ? "scale-100 opacity-100" : "scale-0 opacity-0"}`}>
          <Check className="h-4 w-4 text-zinc-50" />
        </div>
      </div>
      <div className="h-[650px] overflow-auto rounded-md bg-zinc-900 text-white">
        <code>{children}</code>
      </div>
    </div>
  );
}
</file>

<file path="components/command-menu.tsx">
"use client";

import * as React from "react";
import { useRouter } from "next/navigation";
import { type DialogProps } from "@radix-ui/react-dialog";
import {
  CircleIcon,
  FileIcon,
  LaptopIcon,
  MoonIcon,
  SunIcon,
} from "@radix-ui/react-icons";
import { useTheme } from "next-themes";

import { docsConfig } from "@/config/docs";
import { cn } from "@/lib/utils";
import { Button } from "@/components/ui/button";
import {
  CommandDialog,
  CommandEmpty,
  CommandGroup,
  CommandInput,
  CommandItem,
  CommandList,
  CommandSeparator,
} from "@/components/ui/command";

export function CommandMenu({ ...props }: DialogProps) {
  const router = useRouter();
  const [open, setOpen] = React.useState(false);
  const { setTheme } = useTheme();

  React.useEffect(() => {
    const down = (e: KeyboardEvent) => {
      if ((e.key === "k" && (e.metaKey || e.ctrlKey)) || e.key === "/") {
        if (
          (e.target instanceof HTMLElement && e.target.isContentEditable) ||
          e.target instanceof HTMLInputElement ||
          e.target instanceof HTMLTextAreaElement ||
          e.target instanceof HTMLSelectElement
        ) {
          return;
        }

        e.preventDefault();
        setOpen((open) => !open);
      }
    };

    document.addEventListener("keydown", down);
    return () => document.removeEventListener("keydown", down);
  }, []);

  const runCommand = React.useCallback((command: () => unknown) => {
    setOpen(false);
    command();
  }, []);

  return (
    <>
      <Button
        variant="outline"
        className={cn(
          "relative h-8 w-full justify-start rounded-[0.5rem] bg-muted/50 text-sm font-normal text-muted-foreground shadow-none sm:pr-12 md:w-40 lg:w-64",
        )}
        onClick={() => setOpen(true)}
        {...props}
      >
        <span className="hidden lg:inline-flex">Search documentation...</span>
        <span className="inline-flex lg:hidden">Search...</span>
        <kbd className="pointer-events-none absolute right-[0.3rem] top-[0.3rem] hidden h-5 select-none items-center gap-1 rounded border bg-muted px-1.5 font-mono text-[10px] font-medium opacity-100 sm:flex">
          <span className="text-xs">⌘</span>K
        </kbd>
      </Button>
      <CommandDialog open={open} onOpenChange={setOpen}>
        <CommandInput placeholder="Type a command or search..." />
        <CommandList>
          <CommandEmpty>No results found.</CommandEmpty>
          <CommandGroup heading="Links">
            {docsConfig.mainNav
              .filter((navitem) => !navitem.external)
              .map((navItem) => (
                <CommandItem
                  key={navItem.href}
                  value={navItem.title}
                  onSelect={() => {
                    runCommand(() => router.push(navItem.href as string));
                  }}
                >
                  <FileIcon className="mr-2 size-4" />
                  {navItem.title}
                </CommandItem>
              ))}
          </CommandGroup>
          {docsConfig.sidebarNav.map((group) => (
            <CommandGroup key={group.title} heading={group.title}>
              {group.items?.map((navItem) => (
                <CommandItem
                  key={navItem.href}
                  value={navItem.title}
                  onSelect={() => {
                    runCommand(() => router.push(navItem.href as string));
                  }}
                >
                  <div className="mr-2 flex size-4 items-center justify-center">
                    <CircleIcon className="size-3" />
                  </div>
                  {navItem.title}
                </CommandItem>
              ))}
            </CommandGroup>
          ))}
          <CommandSeparator />
          <CommandGroup heading="Theme">
            <CommandItem onSelect={() => runCommand(() => setTheme("light"))}>
              <SunIcon className="mr-2 size-4" />
              Light
            </CommandItem>
            <CommandItem onSelect={() => runCommand(() => setTheme("dark"))}>
              <MoonIcon className="mr-2 size-4" />
              Dark
            </CommandItem>
            <CommandItem onSelect={() => runCommand(() => setTheme("system"))}>
              <LaptopIcon className="mr-2 size-4" />
              System
            </CommandItem>
          </CommandGroup>
        </CommandList>
      </CommandDialog>
    </>
  );
}
</file>

<file path="components/commit-list.tsx">
"use client";

import { useEffect, useState } from "react";
import { formatDistanceToNow } from "date-fns";
import { toast } from "sonner";

import { Badge } from "@/components/ui/badge";

export default function CommitList({
  repo,
  owner,
}: {
  repo: string;
  owner: string;
}) {
  const [loading, setLoading] = useState(false);
  const [commits, setCommits] = useState<any[]>([]);

  useEffect(() => {
    const loadCommits = async () => {
      setLoading(true);
      try {
        const response = await fetch(
          `${process.env.NEXT_PUBLIC_APP_URL}/api/repo/commits`,
          {
            method: "POST",
            headers: {
              "Content-Type": "application/json",
            },
            body: JSON.stringify({ repo, owner }),
          },
        );
        if (!response.ok) {
          throw new Error(`HTTP error! status: ${response.status}`);
        }
        const data = await response.json();
        setCommits(data.commits);
      } catch (error) {
        toast.error("Error occurred while loading commits. Please try again.");
        console.error("error", error);
      } finally {
        setLoading(false);
      }
    };
    loadCommits();
  }, [repo, owner]);

  return (
    <ul>
      {commits.map((commit, index) => (
        <li key={index}>
          {commit?.commit?.message}{" "}
          <Badge className="ml-2">
            {formatDistanceToNow(new Date(commit?.commit?.author?.date), {
              addSuffix: true,
            })}
          </Badge>
        </li>
      ))}
    </ul>
  );
}
</file>

<file path="components/component-preview.tsx">
"use client";

import * as React from "react";
import { Index } from "__registry__";
import { RotateCcw } from "lucide-react";

import { useConfig } from "@/lib/use-config";
import { cn } from "@/lib/utils";
import { Button } from "@/components/ui/button";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import ComponentWrapper from "@/components/component-wrapper";
import { Icons } from "@/components/icons";
import { styles } from "@/registry/registry-styles";

interface ComponentPreviewProps extends React.HTMLAttributes<HTMLDivElement> {
  name: string;
  align?: "center" | "start" | "end";
  preview?: boolean;
}

export function ComponentPreview({ name, children, className, align = "center", preview = false, ...props }: ComponentPreviewProps) {
  const [key, setKey] = React.useState(0);
  const [config] = useConfig();
  const index = styles.findIndex((style) => style.name === config.style);

  const Codes = React.Children.toArray(children) as React.ReactElement[];
  const Code = Codes[index];

  const Preview = React.useMemo(() => {
    const Component = Index[config.style][name]?.component;

    if (!Component) {
      console.error(`Component with name "${name}" not found in registry.`);
      return (
        <p className="text-sm text-muted-foreground">
          Component <code className="relative rounded bg-muted px-[0.3rem] py-[0.2rem] font-mono text-sm">{name}</code> not found in registry.
        </p>
      );
    }

    return <Component />;
  }, [name, config.style]);

  return (
    <div className={cn("relative  my-4 flex flex-col space-y-2 lg:max-w-full", className)} {...props}>
      <Tabs defaultValue="preview" className="relative mr-auto w-full">
        {!preview && (
          <div className="flex items-center justify-between pb-3">
            <TabsList className="w-full justify-start rounded-none border-b bg-transparent p-0">
              <TabsTrigger
                value="preview"
                className="relative h-9 rounded-none border-b-2 border-b-transparent bg-transparent px-4 pb-3 pt-2 font-semibold text-muted-foreground shadow-none transition-none data-[state=active]:border-b-primary data-[state=active]:text-foreground data-[state=active]:shadow-none"
              >
                Preview
              </TabsTrigger>
              <TabsTrigger
                value="code"
                className="relative h-9 rounded-none border-b-2 border-b-transparent bg-transparent px-4 pb-3 pt-2 font-semibold text-muted-foreground shadow-none transition-none data-[state=active]:border-b-primary data-[state=active]:text-foreground data-[state=active]:shadow-none"
              >
                Code
              </TabsTrigger>
            </TabsList>
          </div>
        )}
        <TabsContent value="preview" className=" relative h-96 overflow-y-scroll rounded-md border border-black dark:border-white md:h-full md:overflow-hidden" key={key}>
          <ComponentWrapper>
            <Button onClick={() => setKey((prev) => prev + 1)} className="absolute right-1.5 top-1.5 z-10 ml-4 flex items-center rounded-lg px-3 py-1" variant="ghost">
              <RotateCcw aria-label="restart-btn" size={16} />
            </Button>
            <React.Suspense
              fallback={
                <div className="flex items-center text-sm text-muted-foreground">
                  <Icons.spinner className="mr-2 size-4 animate-spin" />
                  Loading...
                </div>
              }
            >
              {Preview}
            </React.Suspense>
          </ComponentWrapper>
        </TabsContent>
        <TabsContent value="code">
          <div className="flex flex-col space-y-4">
            <div className="w-full rounded-md [&_pre]:my-0 [&_pre]:max-h-[350px] [&_pre]:overflow-auto">{Code}</div>
          </div>
        </TabsContent>
      </Tabs>
    </div>
  );
}
</file>

<file path="components/component-source.tsx">
"use client";

import * as React from "react";

import { cn } from "@/lib/utils";
import { CodeBlockWrapper } from "@/components/code-block-wrapper";

interface ComponentSourceProps extends React.HTMLAttributes<HTMLDivElement> {
  src: string;
}

export function ComponentSource({ children, className, ...props }: ComponentSourceProps) {
  return (
    <CodeBlockWrapper expandButtonTitle="Expand" className={cn("my-6 overflow-hidden rounded-md border-none", className)} {...props}>
      {children}
    </CodeBlockWrapper>
  );
}
</file>

<file path="components/component-wrapper.tsx">
import { cn } from "@/lib/utils";

interface ComponentWrapperProps {
  className?: string;
  children: any;
}
const ComponentWrapper = ({ className, children }: ComponentWrapperProps) => {
  return (
    <div className={cn("max-w-screen relative flex flex-col items-center justify-center overflow-hidden rounded-xl  bg-background p-0 md:border md:py-2", className)}>
      <div className={cn(`absolute inset-0 size-full`, `bg-[radial-gradient(#00000055_1px,transparent_1px)] dark:bg-[radial-gradient(#ffffff22_1px,transparent_1px)]`, "lab-bg [background-size:16px_16px]")} />
      {children}
    </div>
  );
};

export default ComponentWrapper;
</file>

<file path="components/deal-banner.tsx">
import Link from "next/link";
import { ExternalLink } from "lucide-react";

export function DealBanner() {
  return (
    <div className="relative top-0 bg-background py-3 md:py-0">
      <div className="container flex flex-col items-center justify-center gap-4 md:h-12 md:flex-row">
        <Link href="/pricing" className="flex flex-row items-center justify-center gap-2 text-center text-sm font-bold leading-loose text-black dark:text-white">
          🔥🔥🔥 FIRE SALE - Get $100 off TODAY ONLY
          <ExternalLink className="size-4" />
          {/* with code{" "}
          <span className="rounded-md bg-orange-400 p-1 font-bold text-black dark:text-white">
            BLOCKPARTY
          </span>{" "}
          ✨  */}
        </Link>
      </div>
      <hr className="absolute bottom-0 m-0 h-px w-full bg-neutral-200/30" />
    </div>
  );
}
</file>

<file path="components/gradient-blur.tsx">
import React from "react";

import { cn } from "@/lib/utils";

interface GradientBlurProps {
  numberOfLayers?: number;
  className?: string;
}

const GradientBlur: React.FC<GradientBlurProps> = ({
  numberOfLayers = 6,
  className = "",
}) => {
  const generateLayers = () => {
    const layers = [];
    for (let i = 0; i < numberOfLayers; i++) {
      const blurAmount = Math.pow(2, i);
      const startPercent = (i * 100) / numberOfLayers;
      const midPercent = ((i + 1) * 100) / numberOfLayers;
      const endPercent = ((i + 2) * 100) / numberOfLayers;
      layers.push(
        <div
          key={i}
          className="absolute inset-0"
          style={{
            zIndex: i + 2,
            backdropFilter: `blur(${blurAmount}px)`,
            mask: `linear-gradient(
              to bottom,
              rgba(0, 0, 0, 0) ${startPercent}%,
              rgba(0, 0, 0, 1) ${midPercent}%,
              rgba(0, 0, 0, 1) ${endPercent}%,
              rgba(0, 0, 0, 0) ${endPercent + (endPercent - midPercent)}%
            )`,
          }}
        />,
      );
    }
    return layers;
  };

  return (
    <div className={cn(`z-5 pointer-events-none inset-x-0 h-full`, className)}>
      <div
        className="absolute inset-0"
        style={{
          zIndex: 1,
          backdropFilter: "blur(0.5px)",
          mask: `linear-gradient(
            to bottom,
            rgba(0, 0, 0, 0) 0%,
            rgba(0, 0, 0, 1) ${100 / (numberOfLayers * 4)}%,
            rgba(0, 0, 0, 1) ${100 / (numberOfLayers * 2)}%,
            rgba(0, 0, 0, 0) ${(100 * 3) / (numberOfLayers * 4)}%
          )`,
        }}
      />
      {generateLayers()}
      <div
        className="absolute inset-0"
        style={{
          zIndex: numberOfLayers + 2,
          backdropFilter: `blur(${Math.pow(2, numberOfLayers)}px)`,
          mask: `linear-gradient(
            to bottom,
            rgba(0, 0, 0, 0) ${100 - 100 / (numberOfLayers * 2)}%,
            rgba(0, 0, 0, 1) 100%
          )`,
        }}
      />
    </div>
  );
};

export default GradientBlur;
</file>

<file path="components/hero-animated.tsx">
"use client";
import { motion } from "framer-motion";
import React from "react";
import { cn } from "@/lib/utils";

const FADE_UP_ANIMATION_VARIANTS = {
  hidden: { opacity: 0, y: 10 },
  show: { opacity: 1, y: 0, transition: { type: "spring" } },
};
const HeroAnimated = ({
  children,
  header,
  headerClassName = "",
  descriptionClassName = "",
  childrenClassName = "",
  description,
}: {
  children?: React.ReactNode;
  header: string;
  headerClassName?: string;
  description: string;
  descriptionClassName?: string;
  childrenClassName?: string;
}) => {
  return (
    <motion.div
      initial="hidden"
      animate="show"
      viewport={{ once: true }}
      variants={{
        hidden: {},
        show: {
          transition: {
            staggerChildren: 0.15,
          },
        },
      }}
    >
      <motion.h1 className={cn(headerClassName, "drop-shadow-sm")} variants={FADE_UP_ANIMATION_VARIANTS}>
        {header}
      </motion.h1>
      <motion.p className={cn(descriptionClassName, "mt-6")} variants={FADE_UP_ANIMATION_VARIANTS}>
        {description}
      </motion.p>
      <motion.div className={cn(childrenClassName, "mx-auto mt-6 flex items-center justify-center space-x-5")} variants={FADE_UP_ANIMATION_VARIANTS}>
        {children}
      </motion.div>
    </motion.div>
  );
};

export default HeroAnimated;
</file>

<file path="components/main-nav.tsx">
"use client";

import Link from "next/link";
import { usePathname } from "next/navigation";
import { ExternalLinkIcon } from "@radix-ui/react-icons";
import posthog from "posthog-js";

import { docsConfig } from "@/config/docs";
import { siteConfig } from "@/config/site";
import { cn } from "@/lib/utils";

import { Icons } from "@/components/icons";

export function MainNav() {
  const pathname = usePathname();

  return (
    <div className="flex  gap-x-8 md:mr-4">
      <Link href="/" className="relative flex items-center justify-center text-center md:mr-6">
        <Icons.logo1 className="size-0  md:size-8" />
        <span className=" inline-block text-center  font-mono font-bold">{siteConfig.name}</span>
      </Link>
      {/* 

      NOTE: Navigation component prepared for future main navigation bar.
            Currently not displayed, but retained for upcoming features or layout updates.

      <nav className=" items-center font-medium  md:flex md:space-x-6">
        {docsConfig.mainNav.map((item) => (
          <Link
            key={item.href}
            href={item.href!}
            aria-label={item.title}
            onClick={() => item.event && posthog.capture(item.event)}
            target={item.external ? "_blank" : undefined}
            className={cn("flex items-center justify-center transition-colors hover:text-foreground/80", pathname?.startsWith(item.href!) ? "text-foreground" : "text-foreground/60")}
          >
            <span className="shrink-0">{item.title}</span>
            {item.label && <span className="ml-2 rounded-md bg-[#FFBD7A] px-1.5 py-0.5 text-xs leading-none text-[#000000] no-underline group-hover:no-underline">{item.label}</span>}
            {item.external && <ExternalLinkIcon className="ml-2 size-4" />}
          </Link>
        ))}
      </nav> 
      
      */}
    </div>
  );
}
</file>

<file path="components/marquee.tsx">
import { cn } from "@/lib/utils";

interface MarqueeProps {
  className?: string;
  reverse?: boolean;
  pauseOnHover?: boolean;
  children?: React.ReactNode;
  vertical?: boolean;
  repeat?: number;
  [key: string]: any;
}

export function Marquee({ className, reverse, pauseOnHover = false, children, vertical = false, repeat = 4, ...props }: MarqueeProps) {
  return (
    <div
      {...props}
      className={cn(
        "group flex overflow-hidden p-2 [--duration:40s] [--gap:1rem] [gap:var(--gap)]",
        {
          "flex-row": !vertical,
          "flex-col": vertical,
        },
        className
      )}
    >
      {Array(repeat)
        .fill(0)
        .map((_, i) => (
          <div
            key={i}
            className={cn("flex shrink-0 justify-around [gap:var(--gap)]", {
              "animate-marquee flex-row": !vertical,
              "animate-marquee-vertical flex-col": vertical,
              "group-hover:[animation-play-state:paused]": pauseOnHover,
              "[animation-direction:reverse]": reverse,
            })}
          >
            {children}
          </div>
        ))}
    </div>
  );
}
</file>

<file path="components/mobile-nav.tsx">
"use client";

import * as React from "react";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/navigation";
import posthog from "posthog-js";

import { docsConfig } from "@/config/docs";
import { siteConfig } from "@/config/site";
import { cn } from "@/lib/utils";
import { Button } from "@/components/ui/button";
import { ScrollArea } from "@/components/ui/scroll-area";
import { Sheet, SheetContent, SheetTrigger } from "@/components/ui/sheet";
import { Icons } from "@/components/icons";

export function MobileNav() {
  const [open, setOpen] = React.useState(false);

  return (
    <Sheet open={open} onOpenChange={setOpen}>
      <SheetTrigger asChild>
        <Button variant="ghost" className="mr-2 px-0 text-base hover:bg-transparent focus-visible:bg-transparent focus-visible:ring-0 focus-visible:ring-offset-0 md:hidden">
          <svg strokeWidth="1.5" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg" className="size-5">
            <path d="M3 5H11" stroke="currentColor" strokeWidth="1.5" strokeLinecap="round" strokeLinejoin="round"></path>
            <path d="M3 12H16" stroke="currentColor" strokeWidth="1.5" strokeLinecap="round" strokeLinejoin="round"></path>
            <path d="M3 19H21" stroke="currentColor" strokeWidth="1.5" strokeLinecap="round" strokeLinejoin="round"></path>
          </svg>
          <span className="sr-only">Toggle Menu</span>
        </Button>
      </SheetTrigger>
      <SheetContent side="left" className="pr-0">
        <MobileLink href="/" className="flex items-center" onOpenChange={setOpen}>
          <Icons.logo className="mr-2 size-8" />
          <span className="font-bold">{siteConfig.name}</span>
        </MobileLink>
        <ScrollArea className="my-4 h-[calc(100vh-8rem)] pb-10 pl-6">
          <div className="flex flex-col space-y-3">
            {docsConfig.mainNav?.map(
              (item) =>
                item.href && (
                  <MobileLink key={item.href} href={item.href} onOpenChange={setOpen}>
                    {item.title}
                  </MobileLink>
                )
            )}
          </div>
          <div className="flex flex-col space-y-2">
            {docsConfig.sidebarNav.map((item, index) => (
              <div key={index} className="flex flex-col space-y-3 pt-6">
                <h4 className="font-medium">{item.title}</h4>
                {item.items?.map((item) =>
                  !item.disabled && item.href ? (
                    <MobileLink key={item.href} href={item.href} onOpenChange={setOpen} onClick={() => item.event && posthog.capture(item.event)} className={cn("text-muted-foreground", item.disabled && "cursor-not-allowed opacity-60")}>
                      {item.title}
                      {item.label && <span className="ml-2 rounded-md bg-[#FFBD7A] px-1.5 py-0.5 text-xs leading-none text-[#000000] no-underline group-hover:no-underline">{item.label}</span>}
                    </MobileLink>
                  ) : (
                    <span key={index} className={cn("text-muted-foreground", item.disabled && "cursor-not-allowed opacity-60")}>
                      {item.title}
                      {item.label && <span className="ml-2 rounded-md bg-muted px-1.5 py-0.5 text-xs leading-none text-muted-foreground no-underline group-hover:no-underline">{item.label}</span>}
                    </span>
                  )
                )}
              </div>
            ))}
          </div>
        </ScrollArea>
      </SheetContent>
    </Sheet>
  );
}

interface MobileLinkProps extends LinkProps {
  onOpenChange?: (open: boolean) => void;
  children: React.ReactNode;
  className?: string;
}

function MobileLink({ href, onOpenChange, className, children, ...props }: MobileLinkProps) {
  const router = useRouter();
  return (
    <Link
      href={href}
      onClick={() => {
        router.push(href.toString());
        onOpenChange?.(false);
      }}
      className={cn(className)}
      {...props}
    >
      {children}
    </Link>
  );
}
</file>

<file path="components/mode-toggle.tsx">
"use client";

import React from "react";
import { MoonIcon, SunIcon } from "@radix-ui/react-icons";
import { useTheme } from "next-themes";

import { cn } from "@/lib/utils";
import { Button } from "@/components/ui/button";

export const ModeToggle = React.forwardRef<
  HTMLButtonElement,
  React.ComponentPropsWithoutRef<typeof Button> & { className?: string }
>(({ className, ...props }, ref) => {
  const { theme, setTheme } = useTheme();

  return (
    <Button
      ref={ref}
      variant="ghost"
      type="button"
      size="icon"
      className={cn("px-2", className)}
      aria-label="Toggle theme"
      onClick={() => setTheme(theme === "dark" ? "light" : "dark")}
      {...props}
    >
      <SunIcon className="size-[1.2rem] text-neutral-800 dark:hidden dark:text-neutral-200" />
      <MoonIcon className="hidden size-[1.2rem] text-neutral-800 dark:block dark:text-neutral-200" />
    </Button>
  );
});

ModeToggle.displayName = "ModeToggle";
</file>

<file path="components/post-details.tsx">
"use client";
import React from "react";
import { Badge } from "./ui/badge";
import { Avatar, AvatarImage, AvatarFallback } from "./ui/avatar";

interface Author {
  name: string;
  link: string;
  avatar: string;
}
interface PostDetailProps {
  lastUpdate: string;
  builtWith: string[];
  tags: string[];
  author: Author;
}

const PostDetail: React.FC<PostDetailProps> = ({ lastUpdate, builtWith, tags, author }) => {
  return (
    <div className="flex w-full flex-col items-start justify-start space-y-4 text-gray-400 md:mt-4 md:flex-row md:gap-20 md:space-y-1 md:px-4">
      <div className="space-y-4 md:space-y-1">
        <div className="flex w-full flex-col gap-2">
          Last Update:
          <p className="text-white lg:pl-4">{lastUpdate}</p>
        </div>
        <div className="flex w-full flex-col gap-2">
          Built With:
          <p className="text-white lg:pl-4">{builtWith.join(", ")}</p>
        </div>
      </div>
      <div className="space-y-4 md:space-y-1">
        <div className="flex flex-col">
          Tags:
          <div className="md:w-full lg:pl-4">
            {tags.map((tag, index) => (
              <Badge key={index} variant="secondary">
                {tag}
              </Badge>
            ))}
          </div>
        </div>
        <div className="flex flex-col gap-2">
          Author:
          <a href={author.link} className="flex flex-row items-center text-white transition-colors lg:pl-4">
            <Avatar>
              <AvatarImage src={author.avatar} className="h-8 w-8" alt={author.name} />
              <AvatarFallback>{author.name[0]}</AvatarFallback>
            </Avatar>
            {author.name}
          </a>
        </div>
      </div>
    </div>
  );
};

export default PostDetail;
</file>

<file path="components/posthog-provider.tsx">
"use client";

import { useEffect } from "react";
import { usePathname, useSearchParams } from "next/navigation";
import posthog from "posthog-js";
import { PostHogProvider } from "posthog-js/react";

if (typeof window !== "undefined") {
  posthog.init(process.env.NEXT_PUBLIC_POSTHOG_API_KEY!, {
    api_host: "https://app.posthog.com",
    session_recording: {
      maskAllInputs: false,
    },
    // Enable debug mode in development
    loaded: (posthog) => {
      if (process.env.NODE_ENV === "development") posthog.debug();
    },
  });
}

export function PostHogPageview(): JSX.Element {
  const pathname = usePathname();
  const searchParams = useSearchParams();

  useEffect(() => {
    if (pathname) {
      let url = window.origin + pathname;
      if (searchParams && searchParams.toString()) {
        url = url + `?${searchParams.toString()}`;
      }
      posthog.capture("$pageview", {
        $current_url: url,
      });
    }
  }, [pathname, searchParams]);

  return <></>;
}

export function PHProvider({ children }: { children: React.ReactNode }) {
  return <PostHogProvider client={posthog}>{children}</PostHogProvider>;
}
</file>

<file path="components/repo-download.tsx">
"use client";

import { useState } from "react";
import Link from "next/link";
import { ArrowRightIcon, Download } from "lucide-react";
import { toast } from "sonner";

import { cn } from "@/lib/utils";
import { Button, buttonVariants } from "@/components/ui/button";
import { Icons } from "@/components/icons";

interface RepoDownloadProps {
  repo: string;
  owner: string;
  free?: boolean;
}

export default function RepoDownload({
  repo,
  owner,
  free = false,
}: RepoDownloadProps) {
  const [loading, setLoading] = useState(false);

  const handleDownload = async () => {
    setLoading(true);

    try {
      const response = await fetch(
        `${process.env.NEXT_PUBLIC_APP_URL}/api/repo/download`,
        {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify({ repo, owner }),
        },
      );
      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }
      const data = await response.json();
      const downloadUrl = data.downloadUrl;
      /* window.open(downloadUrl, "_blank"); */
      window.location.href = downloadUrl;
    } catch (error) {
      toast.error("Error occured while downloading. Please try again.");
      console.error("error", error);
    } finally {
      setLoading(false);
    }
  };

  if (free) {
    return (
      <Button
        onClick={handleDownload}
        disabled={loading}
        className="not-prose group relative w-full gap-2"
      >
        {loading ? "Downloading" : "Free Download"}
        {!loading && <Download className="size-4" />}
        {loading && <Icons.spinner className="size-4 animate-spin" />}
      </Button>
    );
  }

  return (
    <Link
      href="https://pro.magicui.design/#pricing"
      target="_blank"
      className={cn(
        buttonVariants({
          variant: "default",
        }),
        "not-prose group relative w-full gap-1",
      )}
    >
      Buy Now
      <ArrowRightIcon className="size-4 transition-all duration-300 ease-out group-hover:translate-x-1" />
    </Link>
  );
}
</file>

<file path="components/send-button.tsx">
import { AnimatePresence, cubicBezier, motion } from "framer-motion";
import { SendHorizontal, Ban } from "lucide-react";
import { LoadingButton } from "./ui/loading-button";

interface SendButtonProps {
  show: boolean;
  isStreaming?: boolean;
  onClick?: (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void;
}

const customEasingFn = cubicBezier(0.4, 0, 0.2, 1);

export function SendButton({ show, isStreaming, onClick }: SendButtonProps) {
  return (
    <AnimatePresence>
      {show ? (
        <motion.button
          className="bg-accent-500 hover:brightness-94 color-white transition-theme absolute right-[22px] top-[18px] z-10 flex h-[34px] w-[34px] items-center justify-center rounded-md p-1"
          transition={{ ease: customEasingFn, duration: 0.17 }}
          initial={{ opacity: 0, y: 10 }}
          animate={{ opacity: 1, y: 0 }}
          exit={{ opacity: 0, y: 10 }}
          onClick={(event) => {
            event.preventDefault();
            onClick?.(event);
          }}
          type="submit"
          disabled={!show || isStreaming}
        >
          <div className="text-lg">
            {!isStreaming ? (
              <SendHorizontal />
            ) : (
              <div className="stop-circle-bold">
                <LoaderIcon className="h-4 w-4 animate-spin" />
              </div>
            )}
          </div>
        </motion.button>
      ) : null}
    </AnimatePresence>
  );
}

function LoaderIcon(props: any) {
  return (
    <svg {...props} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
      <path d="M12 2v4" />
      <path d="m16.2 7.8 2.9-2.9" />
      <path d="M18 12h4" />
      <path d="m16.2 16.2 2.9 2.9" />
      <path d="M12 18v4" />
      <path d="m4.9 19.1 2.9-2.9" />
      <path d="M2 12h4" />
      <path d="m4.9 4.9 2.9 2.9" />
    </svg>
  );
}
</file>

<file path="components/sidebar-nav.tsx">
"use client";

import Link from "next/link";
import { usePathname } from "next/navigation";
import { SidebarNavItem } from "@/types";
import { ExternalLinkIcon } from "@radix-ui/react-icons";
import { motion } from "framer-motion";
import posthog from "posthog-js";

import { cn } from "@/lib/utils";

export interface DocsSidebarNavProps {
  items: SidebarNavItem[];
}

export function DocsSidebarNav({ items }: DocsSidebarNavProps) {
  const pathname = usePathname();

  return items.length ? (
    <div className="w-full pb-20">
      {items.map((item, index) => (
        <div key={index} className={"pb-4"}>
          <h4 className="mb-1 rounded-md px-2 py-1 text-sm font-semibold">
            {item.title}
          </h4>
          {item?.items && (
            <DocsSidebarNavItems
              items={item.items}
              pathname={pathname}
              groupId={`group-${index}`}
            />
          )}
        </div>
      ))}
    </div>
  ) : null;
}

interface DocsSidebarNavItemsProps {
  items: SidebarNavItem[];
  pathname: string | null;
  groupId: string;
}

export function DocsSidebarNavItems({
  items,
  pathname,
  groupId,
}: DocsSidebarNavItemsProps) {
  return items?.length ? (
    <div className="relative grid grid-flow-row auto-rows-max gap-0.5 text-sm">
      {items.map((item, index) =>
        item.href && !item.disabled ? (
          <Link
            key={index}
            href={item.href}
            onClick={() => item.event && posthog.capture(item.event)}
            className={cn(
              "group relative flex w-full items-center rounded-md border border-transparent px-2 py-1",
              item.disabled && "cursor-not-allowed opacity-60",
              pathname === item.href
                ? "font-medium text-foreground"
                : "text-muted-foreground",
            )}
            target={item.external ? "_blank" : ""}
            rel={item.external ? "noreferrer" : ""}
          >
            {pathname === item.href && (
              <motion.div
                layoutId={groupId}
                className="absolute inset-0 rounded-r-md border-l-2 border-neutral-300 bg-neutral-100 dark:border-neutral-600 dark:bg-neutral-800"
                initial={false}
                transition={{
                  type: "spring",
                  stiffness: 350,
                  damping: 30,
                  mass: 1,
                  velocity: 200,
                }}
              />
            )}
            <span className="relative z-10 shrink-0">{item.title}</span>
            {item.label && (
              <span className="relative z-10 ml-2 rounded-md bg-[#FFBD7A] px-1.5 py-0.5 text-xs leading-none text-[#000000] no-underline group-hover:no-underline">
                {item.label}
              </span>
            )}
            {item.paid && (
              <span className="relative z-10 ml-2 rounded-md bg-[#4ade80] px-1.5 py-0.5 text-xs leading-none text-[#000000] no-underline group-hover:no-underline">
                Paid
              </span>
            )}
            {item.external && (
              <ExternalLinkIcon className="relative z-10 ml-2 size-4" />
            )}
          </Link>
        ) : (
          <span
            key={index}
            className={cn(
              "flex w-full cursor-not-allowed items-center rounded-md p-2 text-muted-foreground",
              item.disabled && "cursor-not-allowed opacity-60",
            )}
          >
            {item.title}
            {item.label && (
              <span className="ml-2 rounded-md bg-muted px-1.5 py-0.5 text-xs leading-none text-muted-foreground no-underline group-hover:no-underline">
                {item.label}
              </span>
            )}
            {item.paid && (
              <span className="ml-2 rounded-md bg-[#4ade80] px-1.5 py-0.5 text-xs leading-none text-[#000000] no-underline group-hover:no-underline">
                Paid
              </span>
            )}
          </span>
        ),
      )}
    </div>
  ) : null;
}
</file>

<file path="components/site-banner.tsx">
"use client";

import Link from "next/link";
import { ChevronRight } from "lucide-react";
import posthog from "posthog-js";

export function SiteBanner() {
  return (
    <div className="group relative top-0 bg-indigo-600 py-3 text-white transition-all duration-300 md:py-0">
      <div className="container flex flex-col items-center justify-center gap-4 md:h-12 md:flex-row">
        <Link
          href="https://pro.magicui.design"
          onClick={() => posthog.capture("banner_cta_clicked")}
          target="_blank"
          className="inline-flex text-xs leading-normal md:text-sm"
        >
          ✨{" "}
          <span className="ml-1 font-[580] dark:font-[550]">
            {" "}
            Introducing Magic UI Pro - 50+ blocks and templates to build
            beautiful landing pages in minutes.
          </span>{" "}
          <ChevronRight className="ml-1 mt-[3px] hidden size-4 transition-all duration-300 ease-out group-hover:translate-x-1 lg:inline-block" />
        </Link>
      </div>
      <hr className="absolute bottom-0 m-0 h-px w-full bg-neutral-200/30" />
    </div>
  );
}
</file>

<file path="components/tech-stack.tsx">
import { cn } from "@/lib/utils";
import {
  Tooltip,
  TooltipContent,
  TooltipTrigger,
} from "@/components/ui/tooltip";

type TechComponentType = {
  name: string;
  icon: JSX.Element;
};

type TechComponents = Record<string, TechComponentType>;

const techComponents: TechComponents = {
  nextjs: {
    name: "Next.js 14",
    icon: (
      <svg
        role="img"
        viewBox="0 0 24 24"
        xmlns="http://www.w3.org/2000/svg"
        className="size-8"
        aria-label="Next.js"
        fill="currentColor"
      >
        <title>Next.js</title>
        <path d="M11.5725 0c-.1763 0-.3098.0013-.3584.0067-.0516.0053-.2159.021-.3636.0328-3.4088.3073-6.6017 2.1463-8.624 4.9728C1.1004 6.584.3802 8.3666.1082 10.255c-.0962.659-.108.8537-.108 1.7474s.012 1.0884.108 1.7476c.652 4.506 3.8591 8.2919 8.2087 9.6945.7789.2511 1.6.4223 2.5337.5255.3636.04 1.9354.04 2.299 0 1.6117-.1783 2.9772-.577 4.3237-1.2643.2065-.1056.2464-.1337.2183-.1573-.0188-.0139-.8987-1.1938-1.9543-2.62l-1.919-2.592-2.4047-3.5583c-1.3231-1.9564-2.4117-3.556-2.4211-3.556-.0094-.0026-.0187 1.5787-.0235 3.509-.0067 3.3802-.0093 3.5162-.0516 3.596-.061.115-.108.1618-.2064.2134-.075.0374-.1408.0445-.495.0445h-.406l-.1078-.068a.4383.4383 0 01-.1572-.1712l-.0493-.1056.0053-4.703.0067-4.7054.0726-.0915c.0376-.0493.1174-.1125.1736-.143.0962-.047.1338-.0517.5396-.0517.4787 0 .5584.0187.6827.1547.0353.0377 1.3373 1.9987 2.895 4.3608a10760.433 10760.433 0 004.7344 7.1706l1.9002 2.8782.096-.0633c.8518-.5536 1.7525-1.3418 2.4657-2.1627 1.5179-1.7429 2.4963-3.868 2.8247-6.134.0961-.6591.1078-.854.1078-1.7475 0-.8937-.012-1.0884-.1078-1.7476-.6522-4.506-3.8592-8.2919-8.2087-9.6945-.7672-.2487-1.5836-.42-2.4985-.5232-.169-.0176-1.0835-.0366-1.6123-.037zm4.0685 7.217c.3473 0 .4082.0053.4857.047.1127.0562.204.1642.237.2767.0186.061.0234 1.3653.0186 4.3044l-.0067 4.2175-.7436-1.14-.7461-1.14v-3.066c0-1.982.0093-3.0963.0234-3.1502.0375-.1313.1196-.2346.2323-.2955.0961-.0494.1313-.054.4997-.054z" />
      </svg>
    ),
  },
  react: {
    name: "React",
    icon: (
      <svg
        role="img"
        viewBox="0 0 32 32"
        xmlns="http://www.w3.org/2000/svg"
        aria-label="React"
        className="size-8"
        fill="currentColor"
      >
        <title>React</title>
        <path d="m16 13.146c-1.573 0-2.854 1.281-2.854 2.854s1.281 2.854 2.854 2.854 2.854-1.281 2.854-2.854-1.281-2.854-2.854-2.854zm-7.99 8.526-.63-.156c-4.688-1.188-7.38-3.198-7.38-5.521s2.693-4.333 7.38-5.521l.63-.156.177.625c.474 1.635 1.083 3.229 1.818 4.771l.135.281-.135.286c-.734 1.536-1.344 3.13-1.818 4.771zm-.921-9.74c-3.563 1-5.75 2.536-5.75 4.063s2.188 3.057 5.75 4.063c.438-1.391.964-2.745 1.578-4.063-.615-1.318-1.141-2.672-1.578-4.063zm16.901 9.74-.177-.625c-.474-1.635-1.083-3.229-1.818-4.766l-.135-.286.135-.286c.734-1.536 1.344-3.13 1.818-4.771l.177-.62.63.156c4.688 1.188 7.38 3.198 7.38 5.521s-2.693 4.333-7.38 5.521zm-.657-5.677c.641 1.385 1.172 2.745 1.578 4.063 3.568-1.005 5.75-2.536 5.75-4.063s-2.188-3.057-5.75-4.063c-.438 1.385-.964 2.745-1.578 4.063zm-16.255-4.068-.177-.625c-1.318-4.646-.917-7.979 1.099-9.141 1.979-1.141 5.151.208 8.479 3.625l.453.464-.453.464c-1.182 1.229-2.26 2.552-3.229 3.958l-.182.255-.313.026c-1.703.135-3.391.406-5.047.813zm2.531-8.838c-.359 0-.677.073-.943.229-1.323.766-1.557 3.422-.646 7.005 1.422-.318 2.859-.542 4.313-.672.833-1.188 1.75-2.323 2.734-3.391-2.078-2.026-4.047-3.172-5.458-3.172zm12.787 27.145c-.005 0-.005 0 0 0-1.901 0-4.344-1.427-6.875-4.031l-.453-.464.453-.464c1.182-1.229 2.26-2.552 3.229-3.958l.177-.255.313-.031c1.703-.13 3.391-.401 5.052-.813l.63-.156.177.625c1.318 4.646.917 7.974-1.099 9.135-.49.281-1.042.422-1.604.411zm-5.464-4.505c2.078 2.026 4.047 3.172 5.458 3.172h.005c.354 0 .672-.078.938-.229 1.323-.766 1.563-3.422.646-7.005-1.422.318-2.865.542-4.313.667-.833 1.193-1.75 2.323-2.734 3.396zm7.99-13.802-.63-.161c-1.661-.406-3.349-.677-5.052-.813l-.313-.026-.177-.255c-.969-1.406-2.047-2.729-3.229-3.958l-.453-.464.453-.464c3.328-3.417 6.5-4.766 8.479-3.625 2.016 1.161 2.417 4.495 1.099 9.141zm-5.255-2.276c1.521.141 2.969.365 4.313.672.917-3.583.677-6.24-.646-7.005-1.318-.76-3.797.406-6.401 2.943.984 1.073 1.896 2.203 2.734 3.391zm-10.058 20.583c-.563.01-1.12-.13-1.609-.411-2.016-1.161-2.417-4.49-1.099-9.135l.177-.625.63.156c1.542.391 3.24.661 5.047.813l.313.031.177.255c.969 1.406 2.047 2.729 3.229 3.958l.453.464-.453.464c-2.526 2.604-4.969 4.031-6.865 4.031zm-1.588-8.567c-.917 3.583-.677 6.24.646 7.005 1.318.75 3.792-.406 6.401-2.943-.984-1.073-1.901-2.203-2.734-3.396-1.453-.125-2.891-.349-4.313-.667zm7.979.838c-1.099 0-2.224-.047-3.354-.141l-.313-.026-.182-.26c-.635-.917-1.24-1.859-1.797-2.828-.563-.969-1.078-1.958-1.557-2.969l-.135-.286.135-.286c.479-1.01.995-2 1.557-2.969.552-.953 1.156-1.906 1.797-2.828l.182-.26.313-.026c2.234-.188 4.479-.188 6.708 0l.313.026.182.26c1.276 1.833 2.401 3.776 3.354 5.797l.135.286-.135.286c-.953 2.021-2.073 3.964-3.354 5.797l-.182.26-.313.026c-1.125.094-2.255.141-3.354.141zm-2.927-1.448c1.969.151 3.885.151 5.859 0 1.099-1.609 2.078-3.302 2.927-5.063-.844-1.76-1.823-3.453-2.932-5.063-1.948-.151-3.906-.151-5.854 0-1.109 1.609-2.089 3.302-2.932 5.063.849 1.76 1.828 3.453 2.932 5.063z" />
      </svg>
    ),
  },
  typescript: {
    name: "Typescript ",
    icon: (
      <svg
        viewBox="0 0 32 32"
        xmlns="http://www.w3.org/2000/svg"
        aria-label="Typescript"
        className="size-8"
        fill="currentColor"
      >
        <path d="m0 16v16h32v-32h-32zm25.786-1.276c.813.203 1.432.568 2.005 1.156.292.312.729.885.766 1.026.01.042-1.38.974-2.224 1.495-.031.021-.156-.109-.292-.313-.411-.599-.844-.859-1.505-.906-.969-.063-1.594.443-1.589 1.292-.005.208.042.417.135.599.214.443.615.708 1.854 1.245 2.292.984 3.271 1.635 3.88 2.557.682 1.031.833 2.677.375 3.906-.51 1.328-1.771 2.234-3.542 2.531-.547.099-1.849.083-2.438-.026-1.286-.229-2.505-.865-3.255-1.698-.297-.323-.87-1.172-.833-1.229.016-.021.146-.104.292-.188s.682-.396 1.188-.688l.922-.536.193.286c.271.411.859.974 1.214 1.161 1.021.542 2.422.464 3.115-.156.281-.234.438-.594.417-.958 0-.37-.047-.536-.24-.813-.25-.354-.755-.656-2.198-1.281-1.651-.714-2.365-1.151-3.01-1.854-.406-.464-.708-1.01-.88-1.599-.12-.453-.151-1.589-.057-2.042.339-1.599 1.547-2.708 3.281-3.036.563-.109 1.875-.068 2.427.068zm-7.51 1.339.01 1.307h-4.167v11.839h-2.948v-11.839h-4.161v-1.281c0-.714.016-1.307.036-1.323.016-.021 2.547-.031 5.62-.026l5.594.016z" />
      </svg>
    ),
  },

  tailwindcss: {
    name: "Tailwind CSS",
    icon: (
      <svg
        role="img"
        viewBox="0 0 24 24"
        xmlns="http://www.w3.org/2000/svg"
        aria-label="Tailwind css"
        className="size-8"
        fill="currentColor"
      >
        <title>Tailwind CSS</title>
        <path d="m12.001 4.8c-3.2 0-5.2 1.6-6 4.8 1.2-1.6 2.6-2.2 4.2-1.8.913.228 1.565.89 2.288 1.624 1.177 1.194 2.538 2.576 5.512 2.576 3.2 0 5.2-1.6 6-4.8-1.2 1.6-2.6 2.2-4.2 1.8-.913-.228-1.565-.89-2.288-1.624-1.176-1.194-2.537-2.576-5.512-2.576zm-6 7.2c-3.2 0-5.2 1.6-6 4.8 1.2-1.6 2.6-2.2 4.2-1.8.913.228 1.565.89 2.288 1.624 1.177 1.194 2.538 2.576 5.512 2.576 3.2 0 5.2-1.6 6-4.8-1.2 1.6-2.6 2.2-4.2 1.8-.913-.228-1.565-.89-2.288-1.624-1.176-1.194-2.537-2.576-5.512-2.576z" />
      </svg>
    ),
  },
  framermotion: {
    name: "Framer Motion",
    icon: (
      <svg
        role="img"
        viewBox="0 0 24 24"
        xmlns="http://www.w3.org/2000/svg"
        aria-label="Framer Motion"
        className="size-8"
        fill="none"
        stroke="currentColor"
        strokeWidth="1"
        strokeLinecap="round"
        strokeLinejoin="round"
      >
        <title>Framer Motion</title>
        <path stroke="none" d="M0 0h24v24H0z" fill="none" />
        <path d="M12 12l-8 -8v16l16 -16v16l-4 -4" />
        <path d="M20 12l-8 8l-4 -4" />
      </svg>
    ),
  },
  shadcn: {
    name: "shadcn",
    icon: (
      <svg
        xmlns="http://www.w3.org/2000/svg"
        aria-label="shadcn"
        viewBox="0 0 256 256"
        className="size-8"
        fill="none"
        stroke="currentColor"
      >
        {/* <rect width="256" height="256" fill="none"></rect> */}
        <line
          x1="208"
          y1="128"
          x2="128"
          y2="208"
          fill="none"
          stroke="currentColor"
          strokeLinecap="round"
          strokeLinejoin="round"
          strokeWidth="16"
        ></line>
        <line
          x1="192"
          y1="40"
          x2="40"
          y2="192"
          fill="none"
          stroke="currentColor"
          strokeLinecap="round"
          strokeLinejoin="round"
          strokeWidth="16"
        ></line>
      </svg>
    ),
  },
};

export default function TechStack({
  technologies,
  className,
}: {
  technologies: string[];
  className?: string;
}) {
  return (
    <div className={cn("flex flex-row gap-2", className)}>
      {technologies.map((tech) => (
        <Tooltip key={tech}>
          <TooltipTrigger>{techComponents[tech].icon}</TooltipTrigger>
          <TooltipContent>
            <p>{techComponents[tech].name}</p>
          </TooltipContent>
        </Tooltip>
      ))}
    </div>
  );
}
</file>

<file path="components/template-preview.tsx">
import { ReactNode } from "react";
import Link from "next/link";
import { ExternalLinkIcon } from "@radix-ui/react-icons";

import { cn } from "@/lib/utils";
import { buttonVariants } from "@/components/ui/button";

export default function TemplatePreview({
  href,
  children,
}: {
  href: string;
  children: ReactNode;
}) {
  return (
    <Link
      className={cn(
        buttonVariants({
          variant: "outline",
        }),
        "not-prose group relative w-full gap-2",
      )}
      href={href}
      target="_blank"
    >
      {children}
      <ExternalLinkIcon className="size-4" />
    </Link>
  );
}
</file>

<file path="components/text-animation.tsx">
"use client";

import { AnimatePresence, motion, Variants } from "framer-motion";

import { cn } from "@/lib/utils";

interface WordPullUpProps {
  words: string;
  delayMultiple?: number;
  wrapperFramerProps?: Variants;
  framerProps?: Variants;
  className?: string;
}

interface GradualSpacingProps {
  text: string;
  duration?: number;
  delayMultiple?: number;
  framerProps?: Variants;
  className?: string;
}

export function WordPullUp({
  words,
  wrapperFramerProps = {
    hidden: { opacity: 0 },
    show: {
      opacity: 1,
      transition: {
        staggerChildren: 0.2,
      },
    },
  },
  framerProps = {
    hidden: { y: 20, opacity: 0 },
    show: { y: 0, opacity: 1 },
  },
  className,
}: WordPullUpProps) {
  return (
    <motion.h1 variants={wrapperFramerProps} initial="hidden" animate="show" className={cn("font-display text-center text-4xl font-bold leading-[5rem] tracking-[-0.02em] drop-shadow-sm", className)}>
      {words.split(" ").map((word, i) => (
        <motion.span key={i} variants={framerProps} style={{ display: "inline-block", paddingRight: "8px" }}>
          {word === "" ? <span>&nbsp;</span> : word}
        </motion.span>
      ))}
    </motion.h1>
  );
}

export function GradualSpacing({
  text,
  duration = 0.5,
  delayMultiple = 0.04,
  framerProps = {
    hidden: { opacity: 0, x: -20 },
    visible: { opacity: 1, x: 0 },
  },
  className,
}: GradualSpacingProps) {
  return (
    <div className={cn("flex justify-center space-x-1", className)}>
      <AnimatePresence>
        {text.split("").map((char, i) => (
          <motion.h1 key={i} initial="hidden" animate="visible" exit="hidden" variants={framerProps} transition={{ duration, delay: i * delayMultiple }} className={cn("drop-shadow-sm ", className)}>
            {char === " " ? <span>&nbsp;</span> : char}
          </motion.h1>
        ))}
      </AnimatePresence>
    </div>
  );
}
</file>

<file path="components/theme-toggle.tsx">
import { Moon, Sun } from "lucide-react";
import * as SwitchPrimitives from "@radix-ui/react-switch";
import { useTheme } from "@/components/theme-provider";
import { Tooltip, TooltipContent, TooltipTrigger } from "@/components/ui/tooltip";

export function ThemeToggle() {
  const { theme, toggleTheme } = useTheme();

  console.log("Current theme:", theme);

  const handleThemeToggle = (event: React.MouseEvent<HTMLButtonElement>) => {
    const { clientX: x, clientY: y } = event;
    console.log("Toggling theme", { x, y });
    toggleTheme({ x, y });
  };

  return (
    <div className="px-2">
      <Tooltip>
        <TooltipTrigger>
          <SwitchPrimitives.Root
            checked={theme === "dark"}
            onClick={handleThemeToggle}
            className="focus-visible:outline-hidden peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-accent data-[state=unchecked]:bg-input"
          >
            <SwitchPrimitives.Thumb className="pointer-events-none  flex h-5 w-5 items-center justify-center rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0">
              {theme === "dark" ? <Moon className="size-3" /> : <Sun className="size-3" />}
            </SwitchPrimitives.Thumb>
          </SwitchPrimitives.Root>
        </TooltipTrigger>
        <TooltipContent>Toggle light/dark mode</TooltipContent>
      </Tooltip>
    </div>
  );
}
</file>

<file path="components/toc.tsx">
"use client";

import { useEffect, useMemo, useState } from "react";

import type { TableOfContents } from "@/lib/toc";
import { useMounted } from "@/lib/use-mounted";
import { cn } from "@/lib/utils";
import { Icons } from "./icons";
// import { TableOfContents as Table } from "lucide-react";

interface TocProps {
  toc: TableOfContents;
}

export function TableOfContents({ toc }: TocProps) {
  const refinedToc = useMemo(() => {
    if (!toc.items || toc.items.length === 0) {
      return toc;
    }

    const [linksInSteps, ...rest] = toc.items;

    if (linksInSteps.items && linksInSteps.items.length > 0) {
      return {
        items: [...linksInSteps.items, ...rest],
      };
    }

    return toc;
  }, [toc]);

  const itemIds: string[] = useMemo(
    () =>
      refinedToc.items
        ? refinedToc.items
            .flatMap((item) => [item.url, item?.items?.map((item) => item.url)])
            .flat()
            .filter(Boolean)
            .map((id) => id?.split("#")[1])
        : [],
    [refinedToc]
  ) as string[];

  const activeHeading = useActiveItem(itemIds);
  const mounted = useMounted();

  if (!toc?.items || !mounted) {
    return null;
  }

  return (
    <div className="space-y-1">
      <p className="flex items-center gap-x-1">
        <Icons.contentMenu size={14} /> On This Page
      </p>
      <Tree tree={refinedToc} activeItem={activeHeading} />
    </div>
  );
}

function useActiveItem(itemIds: string[]): string | null {
  const [activeId, setActiveId] = useState<string | null>(null);

  useEffect(() => {
    const observer = new IntersectionObserver(
      (entries) => {
        entries.forEach((entry) => {
          if (entry.isIntersecting) {
            setActiveId(entry.target.id);
          }
        });
      },
      { rootMargin: `0% 0% -80% 0%` }
    );

    itemIds?.forEach((id) => {
      const element = document.getElementById(id);
      if (element) {
        observer.observe(element);
      }
    });

    return () => {
      itemIds?.forEach((id) => {
        const element = document.getElementById(id);
        if (element) {
          observer.unobserve(element);
        }
      });
    };
  }, [itemIds]);

  return activeId;
}

interface TreeProps {
  tree: TableOfContents;
  level?: number;
  activeItem?: string | null;
}

function Tree({ tree, level = 1, activeItem }: TreeProps) {
  return tree?.items?.length && level < 3 ? (
    <ul className={cn("m-0 list-none", { "pl-4": level !== 1 })}>
      {tree.items.map((item, index) => {
        return (
          <li key={index} className={cn("mt-0 pt-2")}>
            <a href={item.url} className={cn("inline-block no-underline transition-colors hover:text-foreground", item.url === `#${activeItem}` ? "font-medium text-foreground" : "text-muted-foreground")}>
              {item.title}
            </a>
            {item.items?.length ? <Tree tree={item} level={level + 1} activeItem={activeItem} /> : null}
          </li>
        );
      })}
    </ul>
  ) : null;
}
</file>

<file path="config/docs.ts">
import { MainNavItem, SidebarNavItem } from "@/types";

interface DocsConfig {
  mainNav: MainNavItem[];
  sidebarNav: SidebarNavItem[];
}

export const docsConfig: DocsConfig = {
  mainNav: [
    {
      title: "Components",
      href: "/",
    },

    // {
    //   title: "Tools",
    //   href: "/",
    // },
    // {
    //   title: "Template",
    //   href: "/",
    // },
    // {
    //   title: "Service",
    //   href: "/",
    // },
  ],
  sidebarNav: [
    {
      title: "Follow",
      items: [
        {
          title: "Twitter @BroKarim",
          href: "https://x.com/BroKariim",
          items: [],
        },
      ],
    },
    {
      title: "All Design",
      items: [
        {
          title: "Clair",
          href: `/docs/components/clair`,
          items: [],
        },
        {
          title: "Maria & Co.",
          href: `/shots/components/maria-and-co`,
          items: [],
        },
        {
          title: "Odama",
          href: `/shots/components/odama`,
          items: [],
        },
        {
          title: "Tirana",
          href: `/shots/components/tirana`,
          items: [],
          label: "New",
        },
      ],
    },
  ],
};
</file>

<file path="hooks/use-click-outside.ts">
import { RefObject, useEffect } from "react";

function useClickOutside<T extends HTMLElement>(ref: RefObject<T>, handler: (event: MouseEvent | TouchEvent) => void): void {
  useEffect(() => {
    const handleClickOutside = (event: MouseEvent | TouchEvent) => {
      if (!ref || !ref.current || ref.current.contains(event.target as Node)) {
        return;
      }

      handler(event);
    };

    document.addEventListener("mousedown", handleClickOutside);
    document.addEventListener("touchstart", handleClickOutside);

    return () => {
      document.removeEventListener("mousedown", handleClickOutside);
      document.removeEventListener("touchstart", handleClickOutside);
    };
  }, [ref, handler]);
}

export default useClickOutside;
</file>

<file path="hooks/use-toast.ts">
"use client"

// Inspired by react-hot-toast library
import * as React from "react"

import type {
  ToastActionElement,
  ToastProps,
} from "@/components/ui/toast"

const TOAST_LIMIT = 1
const TOAST_REMOVE_DELAY = 1000000

type ToasterToast = ToastProps & {
  id: string
  title?: React.ReactNode
  description?: React.ReactNode
  action?: ToastActionElement
}

const actionTypes = {
  ADD_TOAST: "ADD_TOAST",
  UPDATE_TOAST: "UPDATE_TOAST",
  DISMISS_TOAST: "DISMISS_TOAST",
  REMOVE_TOAST: "REMOVE_TOAST",
} as const

let count = 0

function genId() {
  count = (count + 1) % Number.MAX_SAFE_INTEGER
  return count.toString()
}

type ActionType = typeof actionTypes

type Action =
  | {
      type: ActionType["ADD_TOAST"]
      toast: ToasterToast
    }
  | {
      type: ActionType["UPDATE_TOAST"]
      toast: Partial<ToasterToast>
    }
  | {
      type: ActionType["DISMISS_TOAST"]
      toastId?: ToasterToast["id"]
    }
  | {
      type: ActionType["REMOVE_TOAST"]
      toastId?: ToasterToast["id"]
    }

interface State {
  toasts: ToasterToast[]
}

const toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()

const addToRemoveQueue = (toastId: string) => {
  if (toastTimeouts.has(toastId)) {
    return
  }

  const timeout = setTimeout(() => {
    toastTimeouts.delete(toastId)
    dispatch({
      type: "REMOVE_TOAST",
      toastId: toastId,
    })
  }, TOAST_REMOVE_DELAY)

  toastTimeouts.set(toastId, timeout)
}

export const reducer = (state: State, action: Action): State => {
  switch (action.type) {
    case "ADD_TOAST":
      return {
        ...state,
        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),
      }

    case "UPDATE_TOAST":
      return {
        ...state,
        toasts: state.toasts.map((t) =>
          t.id === action.toast.id ? { ...t, ...action.toast } : t
        ),
      }

    case "DISMISS_TOAST": {
      const { toastId } = action

      // ! Side effects ! - This could be extracted into a dismissToast() action,
      // but I'll keep it here for simplicity
      if (toastId) {
        addToRemoveQueue(toastId)
      } else {
        state.toasts.forEach((toast) => {
          addToRemoveQueue(toast.id)
        })
      }

      return {
        ...state,
        toasts: state.toasts.map((t) =>
          t.id === toastId || toastId === undefined
            ? {
                ...t,
                open: false,
              }
            : t
        ),
      }
    }
    case "REMOVE_TOAST":
      if (action.toastId === undefined) {
        return {
          ...state,
          toasts: [],
        }
      }
      return {
        ...state,
        toasts: state.toasts.filter((t) => t.id !== action.toastId),
      }
  }
}

const listeners: Array<(state: State) => void> = []

let memoryState: State = { toasts: [] }

function dispatch(action: Action) {
  memoryState = reducer(memoryState, action)
  listeners.forEach((listener) => {
    listener(memoryState)
  })
}

type Toast = Omit<ToasterToast, "id">

function toast({ ...props }: Toast) {
  const id = genId()

  const update = (props: ToasterToast) =>
    dispatch({
      type: "UPDATE_TOAST",
      toast: { ...props, id },
    })
  const dismiss = () => dispatch({ type: "DISMISS_TOAST", toastId: id })

  dispatch({
    type: "ADD_TOAST",
    toast: {
      ...props,
      id,
      open: true,
      onOpenChange: (open) => {
        if (!open) dismiss()
      },
    },
  })

  return {
    id: id,
    dismiss,
    update,
  }
}

function useToast() {
  const [state, setState] = React.useState<State>(memoryState)

  React.useEffect(() => {
    listeners.push(setState)
    return () => {
      const index = listeners.indexOf(setState)
      if (index > -1) {
        listeners.splice(index, 1)
      }
    }
  }, [state])

  return {
    ...state,
    toast,
    dismiss: (toastId?: string) => dispatch({ type: "DISMISS_TOAST", toastId }),
  }
}

export { useToast, toast }
</file>

<file path="lib/highlighter-theme.json">
{
  "name": "Lambda Studio — Blackout",
  "semanticHighlighting": true,
  "colors": {
    "editorLink.activeForeground": "#ca8a0488",
    "foreground": "#fff8",
    "button.background": "#fff",
    "button.foreground": "#000",
    "button.hoverBackground": "#fffb",
    "list.highlightForeground": "#fff",
    "textLink.foreground": "#fff",
    "scrollbar.shadow": "#000",
    "textLink.activeForeground": "#fff8",
    "editor.lineHighlightBackground": "#8881",
    "editor.lineHighlightBorder": "#8882",
    "editorCursor.foreground": "#fff",
    "editor.findMatchBackground": "#fff8",
    "editor.findMatchHighlightBackground": "#fff2",
    "list.activeSelectionForeground": "#fff",
    "list.focusForeground": "#fff",
    "list.hoverForeground": "#fff",
    "list.inactiveSelectionForeground": "#fff",
    "list.inactiveSelectionBackground": "#000",
    "list.focusBackground": "#000",
    "list.focusAndSelectionOutline": "#000",
    "list.focusHighlightForeground": "#fff",
    "list.hoverBackground": "#000",
    "list.focusOutline": "#000",
    "list.activeSelectionBackground": "#000",
    "editorIndentGuide.background": "#fff2",
    "editor.background": "#000",
    "editor.foreground": "#fff",
    "editor.foldBackground": "#000",
    "editor.hoverHighlightBackground": "#000",
    "editor.selectionBackground": "#8888",
    "editor.inactiveSelectionBackground": "#8882",
    "gitDecoration.modifiedResourceForeground": "#fff",
    "gitDecoration.untrackedResourceForeground": "#a7cb7b",
    "gitDecoration.conflictingResourceForeground": "#ca8a04",
    "gitDecoration.deletedResourceForeground": "#c97b89",
    "listFilterWidget.background": "#000",
    "input.background": "#fff1",
    "titleBar.activeForeground": "#fff",
    "editorWidget.background": "#000",
    "editorGutter.background": "#000",
    "debugToolBar.background": "#000",
    "commandCenter.background": "#000",
    "sideBarSectionHeader.background": "#000",
    "focusBorder": "#fff8",
    "titleBar.activeBackground": "#000",
    "titleBar.inactiveBackground": "#000",
    "breadcrumb.background": "#000",
    "activityBar.background": "#000",
    "activityBar.foreground": "#fff8",
    "panel.background": "#000",
    "sideBar.background": "#000",
    "sideBarTitle.foreground": "#fff8",
    "tab.hoverBackground": "#000",
    "terminal.background": "#000",
    "statusBar.background": "#000",
    "statusBar.foreground": "#fff8",
    "selection.background": "#fff2",
    "editorPane.background": "#000",
    "badge.background": "#000",
    "banner.background": "#000",
    "menu.background": "#000",
    "activityBarBadge.background": "#000",
    "activityBarBadge.foreground": "#fff8",
    "editorLineNumber.foreground": "#fff2",
    "editorLineNumber.activeForeground": "#fff8",
    "statusBarItem.errorBackground": "#f43f5e"
  },
  "semanticTokenColors": {
    "comment": {
      "foreground": "#fff4"
    },
    "keyword": {
      "foreground": "#fff8"
    },
    "string": {
      "foreground": "#fff8"
    },
    "selfKeyword": {
      "foreground": "#fff",
      "bold": true
    },
    "method.declaration": {
      "foreground": "#fff",
      "bold": true
    },
    "method.definition": {
      "foreground": "#fff",
      "bold": true
    },
    "method": {
      "foreground": "#fff",
      "bold": false
    },
    "function.declaration": {
      "foreground": "#fff",
      "bold": true
    },
    "function.definition": {
      "foreground": "#fff",
      "bold": true
    },
    "function": {
      "foreground": "#fff",
      "bold": false
    },
    "property": {
      "foreground": "#fff"
    },
    "enumMember": {
      "foreground": "#fff8",
      "bold": false
    },
    "enum": {
      "foreground": "#fff",
      "bold": true
    },
    "boolean": {
      "foreground": "#fff8"
    },
    "number": {
      "foreground": "#fff8"
    },
    "type": {
      "foreground": "#fff",
      "bold": true
    },
    "typeAlias": {
      "foreground": "#fff",
      "bold": true
    },
    "class": {
      "foreground": "#fff",
      "bold": true
    },
    "selfTypeKeyword": {
      "foreground": "#fff",
      "bold": true
    },
    "builtinType": {
      "foreground": "#fff",
      "bold": true
    },
    "interface": {
      "foreground": "#fff8",
      "bold": false
    },
    "typeParameter": {
      "foreground": "#fff",
      "bold": true
    },
    "lifetime": {
      "foreground": "#fff8",
      "italic": false,
      "bold": false
    },
    "namespace": {
      "foreground": "#fff"
    },
    "macro": {
      "foreground": "#fff",
      "bold": false
    },
    "decorator": {
      "foreground": "#fff",
      "bold": false
    },
    "builtinAttribute": {
      "foreground": "#fff",
      "bold": false
    },
    "generic.attribute": {
      "foreground": "#fff"
    },
    "derive": {
      "foreground": "#fff"
    },
    "operator": {
      "foreground": "#fff8"
    },
    "variable": {
      "foreground": "#fff"
    },
    "variable.readonly": {
      "foreground": "#fff8"
    },
    "parameter": {
      "foreground": "#fff"
    },
    "variable.mutable": {
      "underline": true
    },
    "parameter.mutable": {
      "underline": true
    },
    "selfKeyword.mutable": {
      "underline": true
    },
    "variable.constant": {
      "foreground": "#fff8"
    },
    "struct": {
      "foreground": "#fff",
      "bold": true
    }
  },
  "tokenColors": [
    {
      "name": "Fallback Operator",
      "scope": ["keyword.operator"],
      "settings": {
        "foreground": "#fff8"
      }
    },
    {
      "name": "Fallback keywords",
      "scope": [
        "storage.type.ts",
        "keyword",
        "keyword.other",
        "keyword.control",
        "storage.type",
        "storage.modifier"
      ],
      "settings": {
        "foreground": "#fff8"
      }
    },
    {
      "name": "Fallback strings",
      "scope": ["string"],
      "settings": {
        "foreground": "#fff8"
      }
    },
    {
      "name": "Fallback JSON Properties",
      "scope": ["support.type.property-name.json"],
      "settings": {
        "foreground": "#fff"
      }
    },
    {
      "name": "Fallback string variables",
      "scope": ["string variable", "string meta.interpolation"],
      "settings": {
        "foreground": "#fff"
      }
    },
    {
      "name": "Fallback comments",
      "scope": ["comment"],
      "settings": {
        "foreground": "#fff4"
      }
    },
    {
      "name": "Fallback constants",
      "scope": ["constant"],
      "settings": {
        "foreground": "#fff8"
      }
    },
    {
      "name": "Fallback self/this",
      "scope": ["variable.language.this"],
      "settings": {
        "foreground": "#fff"
      }
    },
    {
      "name": "Fallback types",
      "scope": [
        "entity.other.alias",
        "source.php support.class",
        "entity.name.type",
        "meta.function-call support.class",
        "keyword.other.type",
        "entity.other.inherited-class"
      ],
      "settings": {
        "foreground": "#fff",
        "fontStyle": "bold"
      }
    },
    {
      "name": "Fallback method calls",
      "scope": ["meta.method-call entity.name.function"],
      "settings": {
        "foreground": "#fff",
        "fontStyle": ""
      }
    },
    {
      "name": "Fallback function calls",
      "scope": [
        "meta.function-call entity.name.function",
        "meta.function-call support.function",
        "meta.function.call entity.name.function"
      ],
      "settings": {
        "foreground": "#fff",
        "fontStyle": ""
      }
    },
    {
      "name": "Fallback enums & constants",
      "scope": ["constant.enum", "constant.other"],
      "settings": {
        "foreground": "#fff8"
      }
    },
    {
      "name": "Fallback Properties & func arguments",
      "scope": [
        "variable.other.property",
        "entity.name.goto-label",
        "entity.name.variable.parameter"
      ],
      "settings": {
        "foreground": "#fff"
      }
    },
    {
      "name": "Fallback functions & methods declarations",
      "scope": [
        "entity.name.function",
        "support.function",
        "support.function.constructor",
        "entity.name.function meta.function-call meta.method-call"
      ],
      "settings": {
        "foreground": "#fff",
        "fontStyle": "bold"
      }
    },
    {
      "name": "HTML Tags",
      "scope": [
        "meta.tag entity.name.tag.html",
        "entity.name.tag.template.html"
      ],
      "settings": {
        "foreground": "#fff"
      }
    },
    {
      "name": "HTML Attributes",
      "scope": ["entity.other.attribute-name.html"],
      "settings": {
        "foreground": "#fff8"
      }
    },
    {
      "name": "HTML Custom Tag",
      "scope": ["meta.tag.other.unrecognized.html entity.name.tag.html"],
      "settings": {
        "foreground": "#fff"
      }
    },
    {
      "name": "HTML Keywords",
      "scope": ["text.html keyword"],
      "settings": {
        "foreground": "#fff"
      }
    },
    {
      "name": "Punctuations",
      "scope": ["punctuation", "meta.brace"],
      "settings": {
        "foreground": "#fff8"
      }
    }
  ]
}
</file>

<file path="lib/octokit.ts">
import { Octokit } from "octokit";

export const octokit = new Octokit({
  auth: process.env.GITHUB_ACCESS_TOKEN,
});
</file>

<file path="lib/rehype-component.ts">
import fs from "fs";
import path from "path";
import { u } from "unist-builder";
import { visit } from "unist-util-visit";

import { UnistNode, UnistTree } from "@/types/unist";

import { Index } from "../__registry__";
import { styles } from "../registry/registry-styles";

export function rehypeComponent() {
  return async (tree: UnistTree) => {
    visit(tree, (node: UnistNode) => {
      const { value: srcPath } = getNodeAttributeByName(node, "src") || {};

      if (node.name === "ComponentSource") {
        const name = getNodeAttributeByName(node, "name")?.value as string;
        const fileName = getNodeAttributeByName(node, "fileName")?.value as
          | string
          | undefined;

        if (!name && !srcPath) {
          return null;
        }

        try {
          for (const style of styles) {
            let src: string;

            if (srcPath) {
              src = srcPath as string;
            } else {
              const component = Index[style.name][name];
              src = fileName
                ? component.files.find((file: string) => {
                    return (
                      file.endsWith(`${fileName}.tsx`) ||
                      file.endsWith(`${fileName}.ts`)
                    );
                  }) || component.files[0]
                : component.files[0];
            }

            // Read the source file.
            const filePath = path.join(process.cwd(), src);
            let source = fs.readFileSync(filePath, "utf8");

            // Replace imports.
            // TODO: Use @swc/core and a visitor to replace this.
            // For now a simple regex should do.
            source = source.replaceAll(
              `@/registry/${style.name}/`,
              "@/components/",
            );
            source = source.replaceAll("export default", "export");

            // Add code as children so that rehype can take over at build time.
            node.children?.push(
              u("element", {
                tagName: "pre",
                properties: {
                  __src__: src,
                },
                attributes: [
                  {
                    name: "styleName",
                    type: "mdxJsxAttribute",
                    value: style.name,
                  },
                ],
                children: [
                  u("element", {
                    tagName: "code",
                    properties: {
                      className: ["language-tsx"],
                    },
                    data: {
                      meta: `event="copy_source_code"`,
                    },
                    children: [
                      {
                        type: "text",
                        value: source,
                      },
                    ],
                  }),
                ],
              }),
            );
          }
        } catch (error) {
          console.error(error);
        }
      }

      if (node.name === "ComponentPreview" || node.name === "BlockPreview") {
        const name = getNodeAttributeByName(node, "name")?.value as string;

        if (!name) {
          return null;
        }

        try {
          for (const style of styles) {
            const component = Index[style.name][name];
            const src = component.files[0];

            // Read the source file.
            const filePath = path.join(process.cwd(), src);
            let source = fs.readFileSync(filePath, "utf8");

            // Replace imports.
            // TODO: Use @swc/core and a visitor to replace this.
            // For now a simple regex should do.
            source = source.replaceAll(
              `@/registry/${style.name}/`,
              "@/components/",
            );
            source = source.replaceAll("export default", "export");

            // Add code as children so that rehype can take over at build time.
            node.children?.push(
              u("element", {
                tagName: "pre",
                properties: {
                  __src__: src,
                },
                children: [
                  u("element", {
                    tagName: "code",
                    properties: {
                      className: ["language-tsx"],
                    },
                    data: {
                      meta: `event="copy_usage_code"`,
                    },
                    children: [
                      {
                        type: "text",
                        value: source,
                      },
                    ],
                  }),
                ],
              }),
            );
          }
        } catch (error) {
          console.error(error);
        }
      }
    });
  };
}

function getNodeAttributeByName(node: UnistNode, name: string) {
  return node.attributes?.find((attribute) => attribute.name === name);
}

function getComponentSourceFileContent(node: UnistNode) {
  const src = getNodeAttributeByName(node, "src")?.value as string;

  if (!src) {
    return null;
  }

  // Read the source file.
  const filePath = path.join(process.cwd(), src);
  const source = fs.readFileSync(filePath, "utf8");

  return source;
}
</file>

<file path="lib/rehype-npm-command.ts">
import { UnistNode, UnistTree } from "types/unist";
import { visit } from "unist-util-visit";

export function rehypeNpmCommand() {
  return (tree: UnistTree) => {
    visit(tree, (node: UnistNode) => {
      if (node.type !== "element" || node?.tagName !== "pre") {
        return;
      }

      // npm install.
      if (node.properties?.["__rawString__"]?.startsWith("npm install")) {
        const npmCommand = node.properties?.["__rawString__"];
        node.properties["__npmCommand__"] = npmCommand;
        node.properties["__yarnCommand__"] = npmCommand.replace(
          "npm install",
          "yarn add",
        );
        node.properties["__pnpmCommand__"] = npmCommand.replace(
          "npm install",
          "pnpm add",
        );
        node.properties["__bunCommand__"] = npmCommand.replace(
          "npm install",
          "bun add",
        );
      }

      // npx create.
      if (node.properties?.["__rawString__"]?.startsWith("npx create-")) {
        const npmCommand = node.properties?.["__rawString__"];
        node.properties["__npmCommand__"] = npmCommand;
        node.properties["__yarnCommand__"] = npmCommand.replace(
          "npx create-",
          "yarn create ",
        );
        node.properties["__pnpmCommand__"] = npmCommand.replace(
          "npx create-",
          "pnpm create ",
        );
        node.properties["__bunCommand__"] = npmCommand.replace(
          "npx",
          "bunx --bun",
        );
      }

      // npx.
      if (
        node.properties?.["__rawString__"]?.startsWith("npx") &&
        !node.properties?.["__rawString__"]?.startsWith("npx create-")
      ) {
        const npmCommand = node.properties?.["__rawString__"];
        node.properties["__npmCommand__"] = npmCommand;
        node.properties["__yarnCommand__"] = npmCommand;
        node.properties["__pnpmCommand__"] = npmCommand.replace(
          "npx",
          "pnpm dlx",
        );
        node.properties["__bunCommand__"] = npmCommand.replace(
          "npx",
          "bunx --bun",
        );
      }
    });
  };
}
</file>

<file path="lib/toc.ts">
import { toc } from "mdast-util-toc";
import { remark } from "remark";
import { visit } from "unist-util-visit";

const textTypes = ["text", "emphasis", "strong", "inlineCode"];

function flattenNode(node: any) {
  const p: any[] = [];
  visit(node, (node) => {
    if (!textTypes.includes(node.type)) return;
    p.push(node.value);
  });
  return p.join(``);
}

interface Item {
  title: string;
  url: string;
  items?: Item[];
}

interface Items {
  items?: Item[];
}

function getItems(node: any, current: any): Items {
  if (!node) {
    return {};
  }

  if (node.type === "paragraph") {
    visit(node, (item) => {
      if (item.type === "link") {
        current.url = item.url;
        current.title = flattenNode(node);
      }

      if (item.type === "text") {
        current.title = flattenNode(node);
      }
    });

    return current;
  }

  if (node.type === "list") {
    current.items = node.children.map((i: any) => getItems(i, {}));

    return current;
  } else if (node.type === "listItem") {
    const heading = getItems(node.children[0], {});

    if (node.children.length > 1) {
      getItems(node.children[1], heading);
    }

    return heading;
  }

  return {};
}

const getToc = () => (node: any, file: any) => {
  const table = toc(node);
  file.data = getItems(table.map, {});
};

export type TableOfContents = Items;

export async function getTableOfContents(
  content: string,
): Promise<TableOfContents> {
  const result = await remark().use(getToc).process(content);

  return result.data;
}
</file>

<file path="lib/types.ts">
export type SiteConfig = {
  avatar?: string;
  siteUrl: string;
  siteName: string;
  siteDescription: string;
  siteThumbnail: string;
  nav: Array<{ label: string; href: string }>;
  social?: {
    github?: string;
    twitter?: string;
    linkedin?: string;
    instagram?: string;
  };
};

export type MDXFrontMatter = {
  slug: string;
  title: string;
  description?: string;
  date: string;
  tags?: Array<string>;
};
</file>

<file path="lib/use-mounted.ts">
import * as React from "react";

export function useMounted() {
  const [mounted, setMounted] = React.useState(false);

  React.useEffect(() => {
    setMounted(true);
  }, []);

  return mounted;
}
</file>

<file path="public/r/colors/index.json">
{
  "inherit": "inherit",
  "current": "currentColor",
  "transparent": "transparent",
  "black": {
    "hex": "#000000",
    "rgb": "rgb(0,0,0)",
    "hsl": "hsl(0,0%,0%)",
    "rgbChannel": "0 0 0",
    "hslChannel": "0 0% 0%"
  },
  "white": {
    "hex": "#ffffff",
    "rgb": "rgb(255,255,255)",
    "hsl": "hsl(0,0%,100%)",
    "rgbChannel": "255 255 255",
    "hslChannel": "0 0% 100%"
  },
  "slate": [
    {
      "scale": 50,
      "hex": "#f8fafc",
      "rgb": "rgb(248,250,252)",
      "hsl": "hsl(210,40%,98%)",
      "rgbChannel": "248 250 252",
      "hslChannel": "210 40% 98%"
    },
    {
      "scale": 100,
      "hex": "#f1f5f9",
      "rgb": "rgb(241,245,249)",
      "hsl": "hsl(210,40%,96.1%)",
      "rgbChannel": "241 245 249",
      "hslChannel": "210 40% 96.1%"
    },
    {
      "scale": 200,
      "hex": "#e2e8f0",
      "rgb": "rgb(226,232,240)",
      "hsl": "hsl(214.3,31.8%,91.4%)",
      "rgbChannel": "226 232 240",
      "hslChannel": "214.3 31.8% 91.4%"
    },
    {
      "scale": 300,
      "hex": "#cbd5e1",
      "rgb": "rgb(203,213,225)",
      "hsl": "hsl(212.7,26.8%,83.9%)",
      "rgbChannel": "203 213 225",
      "hslChannel": "212.7 26.8% 83.9%"
    },
    {
      "scale": 400,
      "hex": "#94a3b8",
      "rgb": "rgb(148,163,184)",
      "hsl": "hsl(215,20.2%,65.1%)",
      "rgbChannel": "148 163 184",
      "hslChannel": "215 20.2% 65.1%"
    },
    {
      "scale": 500,
      "hex": "#64748b",
      "rgb": "rgb(100,116,139)",
      "hsl": "hsl(215.4,16.3%,46.9%)",
      "rgbChannel": "100 116 139",
      "hslChannel": "215.4 16.3% 46.9%"
    },
    {
      "scale": 600,
      "hex": "#475569",
      "rgb": "rgb(71,85,105)",
      "hsl": "hsl(215.3,19.3%,34.5%)",
      "rgbChannel": "71 85 105",
      "hslChannel": "215.3 19.3% 34.5%"
    },
    {
      "scale": 700,
      "hex": "#334155",
      "rgb": "rgb(51,65,85)",
      "hsl": "hsl(215.3,25%,26.7%)",
      "rgbChannel": "51 65 85",
      "hslChannel": "215.3 25% 26.7%"
    },
    {
      "scale": 800,
      "hex": "#1e293b",
      "rgb": "rgb(30,41,59)",
      "hsl": "hsl(217.2,32.6%,17.5%)",
      "rgbChannel": "30 41 59",
      "hslChannel": "217.2 32.6% 17.5%"
    },
    {
      "scale": 900,
      "hex": "#0f172a",
      "rgb": "rgb(15,23,42)",
      "hsl": "hsl(222.2,47.4%,11.2%)",
      "rgbChannel": "15 23 42",
      "hslChannel": "222.2 47.4% 11.2%"
    },
    {
      "scale": 950,
      "hex": "#020617",
      "rgb": "rgb(2,6,23)",
      "hsl": "hsl(222.2,84%,4.9%)",
      "rgbChannel": "2 6 23",
      "hslChannel": "222.2 84% 4.9%"
    }
  ],
  "gray": [
    {
      "scale": 50,
      "hex": "#f9fafb",
      "rgb": "rgb(249,250,251)",
      "hsl": "hsl(210,20%,98%)",
      "rgbChannel": "249 250 251",
      "hslChannel": "210 20% 98%"
    },
    {
      "scale": 100,
      "hex": "#f3f4f6",
      "rgb": "rgb(243,244,246)",
      "hsl": "hsl(220,14.3%,95.9%)",
      "rgbChannel": "243 244 246",
      "hslChannel": "220 14.3% 95.9%"
    },
    {
      "scale": 200,
      "hex": "#e5e7eb",
      "rgb": "rgb(229,231,235)",
      "hsl": "hsl(220,13%,91%)",
      "rgbChannel": "229 231 235",
      "hslChannel": "220 13% 91%"
    },
    {
      "scale": 300,
      "hex": "#d1d5db",
      "rgb": "rgb(209,213,219)",
      "hsl": "hsl(216,12.2%,83.9%)",
      "rgbChannel": "209 213 219",
      "hslChannel": "216 12.2% 83.9%"
    },
    {
      "scale": 400,
      "hex": "#9ca3af",
      "rgb": "rgb(156,163,175)",
      "hsl": "hsl(217.9,10.6%,64.9%)",
      "rgbChannel": "156 163 175",
      "hslChannel": "217.9 10.6% 64.9%"
    },
    {
      "scale": 500,
      "hex": "#6b7280",
      "rgb": "rgb(107,114,128)",
      "hsl": "hsl(220,8.9%,46.1%)",
      "rgbChannel": "107 114 128",
      "hslChannel": "220 8.9% 46.1%"
    },
    {
      "scale": 600,
      "hex": "#4b5563",
      "rgb": "rgb(75,85,99)",
      "hsl": "hsl(215,13.8%,34.1%)",
      "rgbChannel": "75 85 99",
      "hslChannel": "215 13.8% 34.1%"
    },
    {
      "scale": 700,
      "hex": "#374151",
      "rgb": "rgb(55,65,81)",
      "hsl": "hsl(216.9,19.1%,26.7%)",
      "rgbChannel": "55 65 81",
      "hslChannel": "216.9 19.1% 26.7%"
    },
    {
      "scale": 800,
      "hex": "#1f2937",
      "rgb": "rgb(31,41,55)",
      "hsl": "hsl(215,27.9%,16.9%)",
      "rgbChannel": "31 41 55",
      "hslChannel": "215 27.9% 16.9%"
    },
    {
      "scale": 900,
      "hex": "#111827",
      "rgb": "rgb(17,24,39)",
      "hsl": "hsl(220.9,39.3%,11%)",
      "rgbChannel": "17 24 39",
      "hslChannel": "220.9 39.3% 11%"
    },
    {
      "scale": 950,
      "hex": "#030712",
      "rgb": "rgb(3,7,18)",
      "hsl": "hsl(224,71.4%,4.1%)",
      "rgbChannel": "3 7 18",
      "hslChannel": "224 71.4% 4.1%"
    }
  ],
  "zinc": [
    {
      "scale": 50,
      "hex": "#fafafa",
      "rgb": "rgb(250,250,250)",
      "hsl": "hsl(0,0%,98%)",
      "rgbChannel": "250 250 250",
      "hslChannel": "0 0% 98%"
    },
    {
      "scale": 100,
      "hex": "#f4f4f5",
      "rgb": "rgb(244,244,245)",
      "hsl": "hsl(240,4.8%,95.9%)",
      "rgbChannel": "244 244 245",
      "hslChannel": "240 4.8% 95.9%"
    },
    {
      "scale": 200,
      "hex": "#e4e4e7",
      "rgb": "rgb(228,228,231)",
      "hsl": "hsl(240,5.9%,90%)",
      "rgbChannel": "228 228 231",
      "hslChannel": "240 5.9% 90%"
    },
    {
      "scale": 300,
      "hex": "#d4d4d8",
      "rgb": "rgb(212,212,216)",
      "hsl": "hsl(240,4.9%,83.9%)",
      "rgbChannel": "212 212 216",
      "hslChannel": "240 4.9% 83.9%"
    },
    {
      "scale": 400,
      "hex": "#a1a1aa",
      "rgb": "rgb(161,161,170)",
      "hsl": "hsl(240,5%,64.9%)",
      "rgbChannel": "161 161 170",
      "hslChannel": "240 5% 64.9%"
    },
    {
      "scale": 500,
      "hex": "#71717a",
      "rgb": "rgb(113,113,122)",
      "hsl": "hsl(240,3.8%,46.1%)",
      "rgbChannel": "113 113 122",
      "hslChannel": "240 3.8% 46.1%"
    },
    {
      "scale": 600,
      "hex": "#52525b",
      "rgb": "rgb(82,82,91)",
      "hsl": "hsl(240,5.2%,33.9%)",
      "rgbChannel": "82 82 91",
      "hslChannel": "240 5.2% 33.9%"
    },
    {
      "scale": 700,
      "hex": "#3f3f46",
      "rgb": "rgb(63,63,70)",
      "hsl": "hsl(240,5.3%,26.1%)",
      "rgbChannel": "63 63 70",
      "hslChannel": "240 5.3% 26.1%"
    },
    {
      "scale": 800,
      "hex": "#27272a",
      "rgb": "rgb(39,39,42)",
      "hsl": "hsl(240,3.7%,15.9%)",
      "rgbChannel": "39 39 42",
      "hslChannel": "240 3.7% 15.9%"
    },
    {
      "scale": 900,
      "hex": "#18181b",
      "rgb": "rgb(24,24,27)",
      "hsl": "hsl(240,5.9%,10%)",
      "rgbChannel": "24 24 27",
      "hslChannel": "240 5.9% 10%"
    },
    {
      "scale": 950,
      "hex": "#09090b",
      "rgb": "rgb(9,9,11)",
      "hsl": "hsl(240,10%,3.9%)",
      "rgbChannel": "9 9 11",
      "hslChannel": "240 10% 3.9%"
    }
  ],
  "neutral": [
    {
      "scale": 50,
      "hex": "#fafafa",
      "rgb": "rgb(250,250,250)",
      "hsl": "hsl(0,0%,98%)",
      "rgbChannel": "250 250 250",
      "hslChannel": "0 0% 98%"
    },
    {
      "scale": 100,
      "hex": "#f5f5f5",
      "rgb": "rgb(245,245,245)",
      "hsl": "hsl(0,0%,96.1%)",
      "rgbChannel": "245 245 245",
      "hslChannel": "0 0% 96.1%"
    },
    {
      "scale": 200,
      "hex": "#e5e5e5",
      "rgb": "rgb(229,229,229)",
      "hsl": "hsl(0,0%,89.8%)",
      "rgbChannel": "229 229 229",
      "hslChannel": "0 0% 89.8%"
    },
    {
      "scale": 300,
      "hex": "#d4d4d4",
      "rgb": "rgb(212,212,212)",
      "hsl": "hsl(0,0%,83.1%)",
      "rgbChannel": "212 212 212",
      "hslChannel": "0 0% 83.1%"
    },
    {
      "scale": 400,
      "hex": "#a3a3a3",
      "rgb": "rgb(163,163,163)",
      "hsl": "hsl(0,0%,63.9%)",
      "rgbChannel": "163 163 163",
      "hslChannel": "0 0% 63.9%"
    },
    {
      "scale": 500,
      "hex": "#737373",
      "rgb": "rgb(115,115,115)",
      "hsl": "hsl(0,0%,45.1%)",
      "rgbChannel": "115 115 115",
      "hslChannel": "0 0% 45.1%"
    },
    {
      "scale": 600,
      "hex": "#525252",
      "rgb": "rgb(82,82,82)",
      "hsl": "hsl(0,0%,32.2%)",
      "rgbChannel": "82 82 82",
      "hslChannel": "0 0% 32.2%"
    },
    {
      "scale": 700,
      "hex": "#404040",
      "rgb": "rgb(64,64,64)",
      "hsl": "hsl(0,0%,25.1%)",
      "rgbChannel": "64 64 64",
      "hslChannel": "0 0% 25.1%"
    },
    {
      "scale": 800,
      "hex": "#262626",
      "rgb": "rgb(38,38,38)",
      "hsl": "hsl(0,0%,14.9%)",
      "rgbChannel": "38 38 38",
      "hslChannel": "0 0% 14.9%"
    },
    {
      "scale": 900,
      "hex": "#171717",
      "rgb": "rgb(23,23,23)",
      "hsl": "hsl(0,0%,9%)",
      "rgbChannel": "23 23 23",
      "hslChannel": "0 0% 9%"
    },
    {
      "scale": 950,
      "hex": "#0a0a0a",
      "rgb": "rgb(10,10,10)",
      "hsl": "hsl(0,0%,3.9%)",
      "rgbChannel": "10 10 10",
      "hslChannel": "0 0% 3.9%"
    }
  ],
  "stone": [
    {
      "scale": 50,
      "hex": "#fafaf9",
      "rgb": "rgb(250,250,249)",
      "hsl": "hsl(60,9.1%,97.8%)",
      "rgbChannel": "250 250 249",
      "hslChannel": "60 9.1% 97.8%"
    },
    {
      "scale": 100,
      "hex": "#f5f5f4",
      "rgb": "rgb(245,245,244)",
      "hsl": "hsl(60,4.8%,95.9%)",
      "rgbChannel": "245 245 244",
      "hslChannel": "60 4.8% 95.9%"
    },
    {
      "scale": 200,
      "hex": "#e7e5e4",
      "rgb": "rgb(231,229,228)",
      "hsl": "hsl(20,5.9%,90%)",
      "rgbChannel": "231 229 228",
      "hslChannel": "20 5.9% 90%"
    },
    {
      "scale": 300,
      "hex": "#d6d3d1",
      "rgb": "rgb(214,211,209)",
      "hsl": "hsl(24,5.7%,82.9%)",
      "rgbChannel": "214 211 209",
      "hslChannel": "24 5.7% 82.9%"
    },
    {
      "scale": 400,
      "hex": "#a8a29e",
      "rgb": "rgb(168,162,158)",
      "hsl": "hsl(24,5.4%,63.9%)",
      "rgbChannel": "168 162 158",
      "hslChannel": "24 5.4% 63.9%"
    },
    {
      "scale": 500,
      "hex": "#78716c",
      "rgb": "rgb(120,113,108)",
      "hsl": "hsl(25,5.3%,44.7%)",
      "rgbChannel": "120 113 108",
      "hslChannel": "25 5.3% 44.7%"
    },
    {
      "scale": 600,
      "hex": "#57534e",
      "rgb": "rgb(87,83,78)",
      "hsl": "hsl(33.3,5.5%,32.4%)",
      "rgbChannel": "87 83 78",
      "hslChannel": "33.3 5.5% 32.4%"
    },
    {
      "scale": 700,
      "hex": "#44403c",
      "rgb": "rgb(68,64,60)",
      "hsl": "hsl(30,6.3%,25.1%)",
      "rgbChannel": "68 64 60",
      "hslChannel": "30 6.3% 25.1%"
    },
    {
      "scale": 800,
      "hex": "#292524",
      "rgb": "rgb(41,37,36)",
      "hsl": "hsl(12,6.5%,15.1%)",
      "rgbChannel": "41 37 36",
      "hslChannel": "12 6.5% 15.1%"
    },
    {
      "scale": 900,
      "hex": "#1c1917",
      "rgb": "rgb(28,25,23)",
      "hsl": "hsl(24,9.8%,10%)",
      "rgbChannel": "28 25 23",
      "hslChannel": "24 9.8% 10%"
    },
    {
      "scale": 950,
      "hex": "#0c0a09",
      "rgb": "rgb(12,10,9)",
      "hsl": "hsl(20,14.3%,4.1%)",
      "rgbChannel": "12 10 9",
      "hslChannel": "20 14.3% 4.1%"
    }
  ],
  "red": [
    {
      "scale": 50,
      "hex": "#fef2f2",
      "rgb": "rgb(254,242,242)",
      "hsl": "hsl(0,85.7%,97.3%)",
      "rgbChannel": "254 242 242",
      "hslChannel": "0 85.7% 97.3%"
    },
    {
      "scale": 100,
      "hex": "#fee2e2",
      "rgb": "rgb(254,226,226)",
      "hsl": "hsl(0,93.3%,94.1%)",
      "rgbChannel": "254 226 226",
      "hslChannel": "0 93.3% 94.1%"
    },
    {
      "scale": 200,
      "hex": "#fecaca",
      "rgb": "rgb(254,202,202)",
      "hsl": "hsl(0,96.3%,89.4%)",
      "rgbChannel": "254 202 202",
      "hslChannel": "0 96.3% 89.4%"
    },
    {
      "scale": 300,
      "hex": "#fca5a5",
      "rgb": "rgb(252,165,165)",
      "hsl": "hsl(0,93.5%,81.8%)",
      "rgbChannel": "252 165 165",
      "hslChannel": "0 93.5% 81.8%"
    },
    {
      "scale": 400,
      "hex": "#f87171",
      "rgb": "rgb(248,113,113)",
      "hsl": "hsl(0,90.6%,70.8%)",
      "rgbChannel": "248 113 113",
      "hslChannel": "0 90.6% 70.8%"
    },
    {
      "scale": 500,
      "hex": "#ef4444",
      "rgb": "rgb(239,68,68)",
      "hsl": "hsl(0,84.2%,60.2%)",
      "rgbChannel": "239 68 68",
      "hslChannel": "0 84.2% 60.2%"
    },
    {
      "scale": 600,
      "hex": "#dc2626",
      "rgb": "rgb(220,38,38)",
      "hsl": "hsl(0,72.2%,50.6%)",
      "rgbChannel": "220 38 38",
      "hslChannel": "0 72.2% 50.6%"
    },
    {
      "scale": 700,
      "hex": "#b91c1c",
      "rgb": "rgb(185,28,28)",
      "hsl": "hsl(0,73.7%,41.8%)",
      "rgbChannel": "185 28 28",
      "hslChannel": "0 73.7% 41.8%"
    },
    {
      "scale": 800,
      "hex": "#991b1b",
      "rgb": "rgb(153,27,27)",
      "hsl": "hsl(0,70%,35.3%)",
      "rgbChannel": "153 27 27",
      "hslChannel": "0 70% 35.3%"
    },
    {
      "scale": 900,
      "hex": "#7f1d1d",
      "rgb": "rgb(127,29,29)",
      "hsl": "hsl(0,62.8%,30.6%)",
      "rgbChannel": "127 29 29",
      "hslChannel": "0 62.8% 30.6%"
    },
    {
      "scale": 950,
      "hex": "#450a0a",
      "rgb": "rgb(69,10,10)",
      "hsl": "hsl(0,74.7%,15.5%)",
      "rgbChannel": "69 10 10",
      "hslChannel": "0 74.7% 15.5%"
    }
  ],
  "orange": [
    {
      "scale": 50,
      "hex": "#fff7ed",
      "rgb": "rgb(255,247,237)",
      "hsl": "hsl(33.3,100%,96.5%)",
      "rgbChannel": "255 247 237",
      "hslChannel": "33.3 100% 96.5%"
    },
    {
      "scale": 100,
      "hex": "#ffedd5",
      "rgb": "rgb(255,237,213)",
      "hsl": "hsl(34.3,100%,91.8%)",
      "rgbChannel": "255 237 213",
      "hslChannel": "34.3 100% 91.8%"
    },
    {
      "scale": 200,
      "hex": "#fed7aa",
      "rgb": "rgb(254,215,170)",
      "hsl": "hsl(32.1,97.7%,83.1%)",
      "rgbChannel": "254 215 170",
      "hslChannel": "32.1 97.7% 83.1%"
    },
    {
      "scale": 300,
      "hex": "#fdba74",
      "rgb": "rgb(253,186,116)",
      "hsl": "hsl(30.7,97.2%,72.4%)",
      "rgbChannel": "253 186 116",
      "hslChannel": "30.7 97.2% 72.4%"
    },
    {
      "scale": 400,
      "hex": "#fb923c",
      "rgb": "rgb(251,146,60)",
      "hsl": "hsl(27,96%,61%)",
      "rgbChannel": "251 146 60",
      "hslChannel": "27 96% 61%"
    },
    {
      "scale": 500,
      "hex": "#f97316",
      "rgb": "rgb(249,115,22)",
      "hsl": "hsl(24.6,95%,53.1%)",
      "rgbChannel": "249 115 22",
      "hslChannel": "24.6 95% 53.1%"
    },
    {
      "scale": 600,
      "hex": "#ea580c",
      "rgb": "rgb(234,88,12)",
      "hsl": "hsl(20.5,90.2%,48.2%)",
      "rgbChannel": "234 88 12",
      "hslChannel": "20.5 90.2% 48.2%"
    },
    {
      "scale": 700,
      "hex": "#c2410c",
      "rgb": "rgb(194,65,12)",
      "hsl": "hsl(17.5,88.3%,40.4%)",
      "rgbChannel": "194 65 12",
      "hslChannel": "17.5 88.3% 40.4%"
    },
    {
      "scale": 800,
      "hex": "#9a3412",
      "rgb": "rgb(154,52,18)",
      "hsl": "hsl(15,79.1%,33.7%)",
      "rgbChannel": "154 52 18",
      "hslChannel": "15 79.1% 33.7%"
    },
    {
      "scale": 900,
      "hex": "#7c2d12",
      "rgb": "rgb(124,45,18)",
      "hsl": "hsl(15.3,74.6%,27.8%)",
      "rgbChannel": "124 45 18",
      "hslChannel": "15.3 74.6% 27.8%"
    },
    {
      "scale": 950,
      "hex": "#431407",
      "rgb": "rgb(67,20,7)",
      "hsl": "hsl(13,81.1%,14.5%)",
      "rgbChannel": "67 20 7",
      "hslChannel": "13 81.1% 14.5%"
    }
  ],
  "amber": [
    {
      "scale": 50,
      "hex": "#fffbeb",
      "rgb": "rgb(255,251,235)",
      "hsl": "hsl(48,100%,96.1%)",
      "rgbChannel": "255 251 235",
      "hslChannel": "48 100% 96.1%"
    },
    {
      "scale": 100,
      "hex": "#fef3c7",
      "rgb": "rgb(254,243,199)",
      "hsl": "hsl(48,96.5%,88.8%)",
      "rgbChannel": "254 243 199",
      "hslChannel": "48 96.5% 88.8%"
    },
    {
      "scale": 200,
      "hex": "#fde68a",
      "rgb": "rgb(253,230,138)",
      "hsl": "hsl(48,96.6%,76.7%)",
      "rgbChannel": "253 230 138",
      "hslChannel": "48 96.6% 76.7%"
    },
    {
      "scale": 300,
      "hex": "#fcd34d",
      "rgb": "rgb(252,211,77)",
      "hsl": "hsl(45.9,96.7%,64.5%)",
      "rgbChannel": "252 211 77",
      "hslChannel": "45.9 96.7% 64.5%"
    },
    {
      "scale": 400,
      "hex": "#fbbf24",
      "rgb": "rgb(251,191,36)",
      "hsl": "hsl(43.3,96.4%,56.3%)",
      "rgbChannel": "251 191 36",
      "hslChannel": "43.3 96.4% 56.3%"
    },
    {
      "scale": 500,
      "hex": "#f59e0b",
      "rgb": "rgb(245,158,11)",
      "hsl": "hsl(37.7,92.1%,50.2%)",
      "rgbChannel": "245 158 11",
      "hslChannel": "37.7 92.1% 50.2%"
    },
    {
      "scale": 600,
      "hex": "#d97706",
      "rgb": "rgb(217,119,6)",
      "hsl": "hsl(32.1,94.6%,43.7%)",
      "rgbChannel": "217 119 6",
      "hslChannel": "32.1 94.6% 43.7%"
    },
    {
      "scale": 700,
      "hex": "#b45309",
      "rgb": "rgb(180,83,9)",
      "hsl": "hsl(26,90.5%,37.1%)",
      "rgbChannel": "180 83 9",
      "hslChannel": "26 90.5% 37.1%"
    },
    {
      "scale": 800,
      "hex": "#92400e",
      "rgb": "rgb(146,64,14)",
      "hsl": "hsl(22.7,82.5%,31.4%)",
      "rgbChannel": "146 64 14",
      "hslChannel": "22.7 82.5% 31.4%"
    },
    {
      "scale": 900,
      "hex": "#78350f",
      "rgb": "rgb(120,53,15)",
      "hsl": "hsl(21.7,77.8%,26.5%)",
      "rgbChannel": "120 53 15",
      "hslChannel": "21.7 77.8% 26.5%"
    },
    {
      "scale": 950,
      "hex": "#451a03",
      "rgb": "rgb(69,26,3)",
      "hsl": "hsl(20.9,91.7%,14.1%)",
      "rgbChannel": "69 26 3",
      "hslChannel": "20.9 91.7% 14.1%"
    }
  ],
  "yellow": [
    {
      "scale": 50,
      "hex": "#fefce8",
      "rgb": "rgb(254,252,232)",
      "hsl": "hsl(54.5,91.7%,95.3%)",
      "rgbChannel": "254 252 232",
      "hslChannel": "54.5 91.7% 95.3%"
    },
    {
      "scale": 100,
      "hex": "#fef9c3",
      "rgb": "rgb(254,249,195)",
      "hsl": "hsl(54.9,96.7%,88%)",
      "rgbChannel": "254 249 195",
      "hslChannel": "54.9 96.7% 88%"
    },
    {
      "scale": 200,
      "hex": "#fef08a",
      "rgb": "rgb(254,240,138)",
      "hsl": "hsl(52.8,98.3%,76.9%)",
      "rgbChannel": "254 240 138",
      "hslChannel": "52.8 98.3% 76.9%"
    },
    {
      "scale": 300,
      "hex": "#fde047",
      "rgb": "rgb(253,224,71)",
      "hsl": "hsl(50.4,97.8%,63.5%)",
      "rgbChannel": "253 224 71",
      "hslChannel": "50.4 97.8% 63.5%"
    },
    {
      "scale": 400,
      "hex": "#facc15",
      "rgb": "rgb(250,204,21)",
      "hsl": "hsl(47.9,95.8%,53.1%)",
      "rgbChannel": "250 204 21",
      "hslChannel": "47.9 95.8% 53.1%"
    },
    {
      "scale": 500,
      "hex": "#eab308",
      "rgb": "rgb(234,179,8)",
      "hsl": "hsl(45.4,93.4%,47.5%)",
      "rgbChannel": "234 179 8",
      "hslChannel": "45.4 93.4% 47.5%"
    },
    {
      "scale": 600,
      "hex": "#ca8a04",
      "rgb": "rgb(202,138,4)",
      "hsl": "hsl(40.6,96.1%,40.4%)",
      "rgbChannel": "202 138 4",
      "hslChannel": "40.6 96.1% 40.4%"
    },
    {
      "scale": 700,
      "hex": "#a16207",
      "rgb": "rgb(161,98,7)",
      "hsl": "hsl(35.5,91.7%,32.9%)",
      "rgbChannel": "161 98 7",
      "hslChannel": "35.5 91.7% 32.9%"
    },
    {
      "scale": 800,
      "hex": "#854d0e",
      "rgb": "rgb(133,77,14)",
      "hsl": "hsl(31.8,81%,28.8%)",
      "rgbChannel": "133 77 14",
      "hslChannel": "31.8 81% 28.8%"
    },
    {
      "scale": 900,
      "hex": "#713f12",
      "rgb": "rgb(113,63,18)",
      "hsl": "hsl(28.4,72.5%,25.7%)",
      "rgbChannel": "113 63 18",
      "hslChannel": "28.4 72.5% 25.7%"
    },
    {
      "scale": 950,
      "hex": "#422006",
      "rgb": "rgb(66,32,6)",
      "hsl": "hsl(26,83.3%,14.1%)",
      "rgbChannel": "66 32 6",
      "hslChannel": "26 83.3% 14.1%"
    }
  ],
  "lime": [
    {
      "scale": 50,
      "hex": "#f7fee7",
      "rgb": "rgb(247,254,231)",
      "hsl": "hsl(78.3,92%,95.1%)",
      "rgbChannel": "247 254 231",
      "hslChannel": "78.3 92% 95.1%"
    },
    {
      "scale": 100,
      "hex": "#ecfccb",
      "rgb": "rgb(236,252,203)",
      "hsl": "hsl(79.6,89.1%,89.2%)",
      "rgbChannel": "236 252 203",
      "hslChannel": "79.6 89.1% 89.2%"
    },
    {
      "scale": 200,
      "hex": "#d9f99d",
      "rgb": "rgb(217,249,157)",
      "hsl": "hsl(80.9,88.5%,79.6%)",
      "rgbChannel": "217 249 157",
      "hslChannel": "80.9 88.5% 79.6%"
    },
    {
      "scale": 300,
      "hex": "#bef264",
      "rgb": "rgb(190,242,100)",
      "hsl": "hsl(82,84.5%,67.1%)",
      "rgbChannel": "190 242 100",
      "hslChannel": "82 84.5% 67.1%"
    },
    {
      "scale": 400,
      "hex": "#a3e635",
      "rgb": "rgb(163,230,53)",
      "hsl": "hsl(82.7,78%,55.5%)",
      "rgbChannel": "163 230 53",
      "hslChannel": "82.7 78% 55.5%"
    },
    {
      "scale": 500,
      "hex": "#84cc16",
      "rgb": "rgb(132,204,22)",
      "hsl": "hsl(83.7,80.5%,44.3%)",
      "rgbChannel": "132 204 22",
      "hslChannel": "83.7 80.5% 44.3%"
    },
    {
      "scale": 600,
      "hex": "#65a30d",
      "rgb": "rgb(101,163,13)",
      "hsl": "hsl(84.8,85.2%,34.5%)",
      "rgbChannel": "101 163 13",
      "hslChannel": "84.8 85.2% 34.5%"
    },
    {
      "scale": 700,
      "hex": "#4d7c0f",
      "rgb": "rgb(77,124,15)",
      "hsl": "hsl(85.9,78.4%,27.3%)",
      "rgbChannel": "77 124 15",
      "hslChannel": "85.9 78.4% 27.3%"
    },
    {
      "scale": 800,
      "hex": "#3f6212",
      "rgb": "rgb(63,98,18)",
      "hsl": "hsl(86.3,69%,22.7%)",
      "rgbChannel": "63 98 18",
      "hslChannel": "86.3 69% 22.7%"
    },
    {
      "scale": 900,
      "hex": "#365314",
      "rgb": "rgb(54,83,20)",
      "hsl": "hsl(87.6,61.2%,20.2%)",
      "rgbChannel": "54 83 20",
      "hslChannel": "87.6 61.2% 20.2%"
    },
    {
      "scale": 950,
      "hex": "#1a2e05",
      "rgb": "rgb(26,46,5)",
      "hsl": "hsl(89.3,80.4%,10%)",
      "rgbChannel": "26 46 5",
      "hslChannel": "89.3 80.4% 10%"
    }
  ],
  "green": [
    {
      "scale": 50,
      "hex": "#f0fdf4",
      "rgb": "rgb(240,253,244)",
      "hsl": "hsl(138.5,76.5%,96.7%)",
      "rgbChannel": "240 253 244",
      "hslChannel": "138.5 76.5% 96.7%"
    },
    {
      "scale": 100,
      "hex": "#dcfce7",
      "rgb": "rgb(220,252,231)",
      "hsl": "hsl(140.6,84.2%,92.5%)",
      "rgbChannel": "220 252 231",
      "hslChannel": "140.6 84.2% 92.5%"
    },
    {
      "scale": 200,
      "hex": "#bbf7d0",
      "rgb": "rgb(187,247,208)",
      "hsl": "hsl(141,78.9%,85.1%)",
      "rgbChannel": "187 247 208",
      "hslChannel": "141 78.9% 85.1%"
    },
    {
      "scale": 300,
      "hex": "#86efac",
      "rgb": "rgb(134,239,172)",
      "hsl": "hsl(141.7,76.6%,73.1%)",
      "rgbChannel": "134 239 172",
      "hslChannel": "141.7 76.6% 73.1%"
    },
    {
      "scale": 400,
      "hex": "#4ade80",
      "rgb": "rgb(74,222,128)",
      "hsl": "hsl(141.9,69.2%,58%)",
      "rgbChannel": "74 222 128",
      "hslChannel": "141.9 69.2% 58%"
    },
    {
      "scale": 500,
      "hex": "#22c55e",
      "rgb": "rgb(34,197,94)",
      "hsl": "hsl(142.1,70.6%,45.3%)",
      "rgbChannel": "34 197 94",
      "hslChannel": "142.1 70.6% 45.3%"
    },
    {
      "scale": 600,
      "hex": "#16a34a",
      "rgb": "rgb(22,163,74)",
      "hsl": "hsl(142.1,76.2%,36.3%)",
      "rgbChannel": "22 163 74",
      "hslChannel": "142.1 76.2% 36.3%"
    },
    {
      "scale": 700,
      "hex": "#15803d",
      "rgb": "rgb(21,128,61)",
      "hsl": "hsl(142.4,71.8%,29.2%)",
      "rgbChannel": "21 128 61",
      "hslChannel": "142.4 71.8% 29.2%"
    },
    {
      "scale": 800,
      "hex": "#166534",
      "rgb": "rgb(22,101,52)",
      "hsl": "hsl(142.8,64.2%,24.1%)",
      "rgbChannel": "22 101 52",
      "hslChannel": "142.8 64.2% 24.1%"
    },
    {
      "scale": 900,
      "hex": "#14532d",
      "rgb": "rgb(20,83,45)",
      "hsl": "hsl(143.8,61.2%,20.2%)",
      "rgbChannel": "20 83 45",
      "hslChannel": "143.8 61.2% 20.2%"
    },
    {
      "scale": 950,
      "hex": "#052e16",
      "rgb": "rgb(5,46,22)",
      "hsl": "hsl(144.9,80.4%,10%)",
      "rgbChannel": "5 46 22",
      "hslChannel": "144.9 80.4% 10%"
    }
  ],
  "emerald": [
    {
      "scale": 50,
      "hex": "#ecfdf5",
      "rgb": "rgb(236,253,245)",
      "hsl": "hsl(151.8,81%,95.9%)",
      "rgbChannel": "236 253 245",
      "hslChannel": "151.8 81% 95.9%"
    },
    {
      "scale": 100,
      "hex": "#d1fae5",
      "rgb": "rgb(209,250,229)",
      "hsl": "hsl(149.3,80.4%,90%)",
      "rgbChannel": "209 250 229",
      "hslChannel": "149.3 80.4% 90%"
    },
    {
      "scale": 200,
      "hex": "#a7f3d0",
      "rgb": "rgb(167,243,208)",
      "hsl": "hsl(152.4,76%,80.4%)",
      "rgbChannel": "167 243 208",
      "hslChannel": "152.4 76% 80.4%"
    },
    {
      "scale": 300,
      "hex": "#6ee7b7",
      "rgb": "rgb(110,231,183)",
      "hsl": "hsl(156.2,71.6%,66.9%)",
      "rgbChannel": "110 231 183",
      "hslChannel": "156.2 71.6% 66.9%"
    },
    {
      "scale": 400,
      "hex": "#34d399",
      "rgb": "rgb(52,211,153)",
      "hsl": "hsl(158.1,64.4%,51.6%)",
      "rgbChannel": "52 211 153",
      "hslChannel": "158.1 64.4% 51.6%"
    },
    {
      "scale": 500,
      "hex": "#10b981",
      "rgb": "rgb(16,185,129)",
      "hsl": "hsl(160.1,84.1%,39.4%)",
      "rgbChannel": "16 185 129",
      "hslChannel": "160.1 84.1% 39.4%"
    },
    {
      "scale": 600,
      "hex": "#059669",
      "rgb": "rgb(5,150,105)",
      "hsl": "hsl(161.4,93.5%,30.4%)",
      "rgbChannel": "5 150 105",
      "hslChannel": "161.4 93.5% 30.4%"
    },
    {
      "scale": 700,
      "hex": "#047857",
      "rgb": "rgb(4,120,87)",
      "hsl": "hsl(162.9,93.5%,24.3%)",
      "rgbChannel": "4 120 87",
      "hslChannel": "162.9 93.5% 24.3%"
    },
    {
      "scale": 800,
      "hex": "#065f46",
      "rgb": "rgb(6,95,70)",
      "hsl": "hsl(163.1,88.1%,19.8%)",
      "rgbChannel": "6 95 70",
      "hslChannel": "163.1 88.1% 19.8%"
    },
    {
      "scale": 900,
      "hex": "#064e3b",
      "rgb": "rgb(6,78,59)",
      "hsl": "hsl(164.2,85.7%,16.5%)",
      "rgbChannel": "6 78 59",
      "hslChannel": "164.2 85.7% 16.5%"
    },
    {
      "scale": 950,
      "hex": "#022c22",
      "rgb": "rgb(2,44,34)",
      "hsl": "hsl(165.7,91.3%,9%)",
      "rgbChannel": "2 44 34",
      "hslChannel": "165.7 91.3% 9%"
    }
  ],
  "teal": [
    {
      "scale": 50,
      "hex": "#f0fdfa",
      "rgb": "rgb(240,253,250)",
      "hsl": "hsl(166.2,76.5%,96.7%)",
      "rgbChannel": "240 253 250",
      "hslChannel": "166.2 76.5% 96.7%"
    },
    {
      "scale": 100,
      "hex": "#ccfbf1",
      "rgb": "rgb(204,251,241)",
      "hsl": "hsl(167.2,85.5%,89.2%)",
      "rgbChannel": "204 251 241",
      "hslChannel": "167.2 85.5% 89.2%"
    },
    {
      "scale": 200,
      "hex": "#99f6e4",
      "rgb": "rgb(153,246,228)",
      "hsl": "hsl(168.4,83.8%,78.2%)",
      "rgbChannel": "153 246 228",
      "hslChannel": "168.4 83.8% 78.2%"
    },
    {
      "scale": 300,
      "hex": "#5eead4",
      "rgb": "rgb(94,234,212)",
      "hsl": "hsl(170.6,76.9%,64.3%)",
      "rgbChannel": "94 234 212",
      "hslChannel": "170.6 76.9% 64.3%"
    },
    {
      "scale": 400,
      "hex": "#2dd4bf",
      "rgb": "rgb(45,212,191)",
      "hsl": "hsl(172.5,66%,50.4%)",
      "rgbChannel": "45 212 191",
      "hslChannel": "172.5 66% 50.4%"
    },
    {
      "scale": 500,
      "hex": "#14b8a6",
      "rgb": "rgb(20,184,166)",
      "hsl": "hsl(173.4,80.4%,40%)",
      "rgbChannel": "20 184 166",
      "hslChannel": "173.4 80.4% 40%"
    },
    {
      "scale": 600,
      "hex": "#0d9488",
      "rgb": "rgb(13,148,136)",
      "hsl": "hsl(174.7,83.9%,31.6%)",
      "rgbChannel": "13 148 136",
      "hslChannel": "174.7 83.9% 31.6%"
    },
    {
      "scale": 700,
      "hex": "#0f766e",
      "rgb": "rgb(15,118,110)",
      "hsl": "hsl(175.3,77.4%,26.1%)",
      "rgbChannel": "15 118 110",
      "hslChannel": "175.3 77.4% 26.1%"
    },
    {
      "scale": 800,
      "hex": "#115e59",
      "rgb": "rgb(17,94,89)",
      "hsl": "hsl(176.1,69.4%,21.8%)",
      "rgbChannel": "17 94 89",
      "hslChannel": "176.1 69.4% 21.8%"
    },
    {
      "scale": 900,
      "hex": "#134e4a",
      "rgb": "rgb(19,78,74)",
      "hsl": "hsl(175.9,60.8%,19%)",
      "rgbChannel": "19 78 74",
      "hslChannel": "175.9 60.8% 19%"
    },
    {
      "scale": 950,
      "hex": "#042f2e",
      "rgb": "rgb(4,47,46)",
      "hsl": "hsl(178.6,84.3%,10%)",
      "rgbChannel": "4 47 46",
      "hslChannel": "178.6 84.3% 10%"
    }
  ],
  "cyan": [
    {
      "scale": 50,
      "hex": "#ecfeff",
      "rgb": "rgb(236,254,255)",
      "hsl": "hsl(183.2,100%,96.3%)",
      "rgbChannel": "236 254 255",
      "hslChannel": "183.2 100% 96.3%"
    },
    {
      "scale": 100,
      "hex": "#cffafe",
      "rgb": "rgb(207,250,254)",
      "hsl": "hsl(185.1,95.9%,90.4%)",
      "rgbChannel": "207 250 254",
      "hslChannel": "185.1 95.9% 90.4%"
    },
    {
      "scale": 200,
      "hex": "#a5f3fc",
      "rgb": "rgb(165,243,252)",
      "hsl": "hsl(186.2,93.5%,81.8%)",
      "rgbChannel": "165 243 252",
      "hslChannel": "186.2 93.5% 81.8%"
    },
    {
      "scale": 300,
      "hex": "#67e8f9",
      "rgb": "rgb(103,232,249)",
      "hsl": "hsl(187,92.4%,69%)",
      "rgbChannel": "103 232 249",
      "hslChannel": "187 92.4% 69%"
    },
    {
      "scale": 400,
      "hex": "#22d3ee",
      "rgb": "rgb(34,211,238)",
      "hsl": "hsl(187.9,85.7%,53.3%)",
      "rgbChannel": "34 211 238",
      "hslChannel": "187.9 85.7% 53.3%"
    },
    {
      "scale": 500,
      "hex": "#06b6d4",
      "rgb": "rgb(6,182,212)",
      "hsl": "hsl(188.7,94.5%,42.7%)",
      "rgbChannel": "6 182 212",
      "hslChannel": "188.7 94.5% 42.7%"
    },
    {
      "scale": 600,
      "hex": "#0891b2",
      "rgb": "rgb(8,145,178)",
      "hsl": "hsl(191.6,91.4%,36.5%)",
      "rgbChannel": "8 145 178",
      "hslChannel": "191.6 91.4% 36.5%"
    },
    {
      "scale": 700,
      "hex": "#0e7490",
      "rgb": "rgb(14,116,144)",
      "hsl": "hsl(192.9,82.3%,31%)",
      "rgbChannel": "14 116 144",
      "hslChannel": "192.9 82.3% 31%"
    },
    {
      "scale": 800,
      "hex": "#155e75",
      "rgb": "rgb(21,94,117)",
      "hsl": "hsl(194.4,69.6%,27.1%)",
      "rgbChannel": "21 94 117",
      "hslChannel": "194.4 69.6% 27.1%"
    },
    {
      "scale": 900,
      "hex": "#164e63",
      "rgb": "rgb(22,78,99)",
      "hsl": "hsl(196.4,63.6%,23.7%)",
      "rgbChannel": "22 78 99",
      "hslChannel": "196.4 63.6% 23.7%"
    },
    {
      "scale": 950,
      "hex": "#083344",
      "rgb": "rgb(8,51,68)",
      "hsl": "hsl(197,78.9%,14.9%)",
      "rgbChannel": "8 51 68",
      "hslChannel": "197 78.9% 14.9%"
    }
  ],
  "sky": [
    {
      "scale": 50,
      "hex": "#f0f9ff",
      "rgb": "rgb(240,249,255)",
      "hsl": "hsl(204,100%,97.1%)",
      "rgbChannel": "240 249 255",
      "hslChannel": "204 100% 97.1%"
    },
    {
      "scale": 100,
      "hex": "#e0f2fe",
      "rgb": "rgb(224,242,254)",
      "hsl": "hsl(204,93.8%,93.7%)",
      "rgbChannel": "224 242 254",
      "hslChannel": "204 93.8% 93.7%"
    },
    {
      "scale": 200,
      "hex": "#bae6fd",
      "rgb": "rgb(186,230,253)",
      "hsl": "hsl(200.6,94.4%,86.1%)",
      "rgbChannel": "186 230 253",
      "hslChannel": "200.6 94.4% 86.1%"
    },
    {
      "scale": 300,
      "hex": "#7dd3fc",
      "rgb": "rgb(125,211,252)",
      "hsl": "hsl(199.4,95.5%,73.9%)",
      "rgbChannel": "125 211 252",
      "hslChannel": "199.4 95.5% 73.9%"
    },
    {
      "scale": 400,
      "hex": "#38bdf8",
      "rgb": "rgb(56,189,248)",
      "hsl": "hsl(198.4,93.2%,59.6%)",
      "rgbChannel": "56 189 248",
      "hslChannel": "198.4 93.2% 59.6%"
    },
    {
      "scale": 500,
      "hex": "#0ea5e9",
      "rgb": "rgb(14,165,233)",
      "hsl": "hsl(198.6,88.7%,48.4%)",
      "rgbChannel": "14 165 233",
      "hslChannel": "198.6 88.7% 48.4%"
    },
    {
      "scale": 600,
      "hex": "#0284c7",
      "rgb": "rgb(2,132,199)",
      "hsl": "hsl(200.4,98%,39.4%)",
      "rgbChannel": "2 132 199",
      "hslChannel": "200.4 98% 39.4%"
    },
    {
      "scale": 700,
      "hex": "#0369a1",
      "rgb": "rgb(3,105,161)",
      "hsl": "hsl(201.3,96.3%,32.2%)",
      "rgbChannel": "3 105 161",
      "hslChannel": "201.3 96.3% 32.2%"
    },
    {
      "scale": 800,
      "hex": "#075985",
      "rgb": "rgb(7,89,133)",
      "hsl": "hsl(201,90%,27.5%)",
      "rgbChannel": "7 89 133",
      "hslChannel": "201 90% 27.5%"
    },
    {
      "scale": 900,
      "hex": "#0c4a6e",
      "rgb": "rgb(12,74,110)",
      "hsl": "hsl(202,80.3%,23.9%)",
      "rgbChannel": "12 74 110",
      "hslChannel": "202 80.3% 23.9%"
    },
    {
      "scale": 950,
      "hex": "#082f49",
      "rgb": "rgb(8,47,73)",
      "hsl": "hsl(204,80.2%,15.9%)",
      "rgbChannel": "8 47 73",
      "hslChannel": "204 80.2% 15.9%"
    }
  ],
  "blue": [
    {
      "scale": 50,
      "hex": "#eff6ff",
      "rgb": "rgb(239,246,255)",
      "hsl": "hsl(213.8,100%,96.9%)",
      "rgbChannel": "239 246 255",
      "hslChannel": "213.8 100% 96.9%"
    },
    {
      "scale": 100,
      "hex": "#dbeafe",
      "rgb": "rgb(219,234,254)",
      "hsl": "hsl(214.3,94.6%,92.7%)",
      "rgbChannel": "219 234 254",
      "hslChannel": "214.3 94.6% 92.7%"
    },
    {
      "scale": 200,
      "hex": "#bfdbfe",
      "rgb": "rgb(191,219,254)",
      "hsl": "hsl(213.3,96.9%,87.3%)",
      "rgbChannel": "191 219 254",
      "hslChannel": "213.3 96.9% 87.3%"
    },
    {
      "scale": 300,
      "hex": "#93c5fd",
      "rgb": "rgb(147,197,253)",
      "hsl": "hsl(211.7,96.4%,78.4%)",
      "rgbChannel": "147 197 253",
      "hslChannel": "211.7 96.4% 78.4%"
    },
    {
      "scale": 400,
      "hex": "#60a5fa",
      "rgb": "rgb(96,165,250)",
      "hsl": "hsl(213.1,93.9%,67.8%)",
      "rgbChannel": "96 165 250",
      "hslChannel": "213.1 93.9% 67.8%"
    },
    {
      "scale": 500,
      "hex": "#3b82f6",
      "rgb": "rgb(59,130,246)",
      "hsl": "hsl(217.2,91.2%,59.8%)",
      "rgbChannel": "59 130 246",
      "hslChannel": "217.2 91.2% 59.8%"
    },
    {
      "scale": 600,
      "hex": "#2563eb",
      "rgb": "rgb(37,99,235)",
      "hsl": "hsl(221.2,83.2%,53.3%)",
      "rgbChannel": "37 99 235",
      "hslChannel": "221.2 83.2% 53.3%"
    },
    {
      "scale": 700,
      "hex": "#1d4ed8",
      "rgb": "rgb(29,78,216)",
      "hsl": "hsl(224.3,76.3%,48%)",
      "rgbChannel": "29 78 216",
      "hslChannel": "224.3 76.3% 48%"
    },
    {
      "scale": 800,
      "hex": "#1e40af",
      "rgb": "rgb(30,64,175)",
      "hsl": "hsl(225.9,70.7%,40.2%)",
      "rgbChannel": "30 64 175",
      "hslChannel": "225.9 70.7% 40.2%"
    },
    {
      "scale": 900,
      "hex": "#1e3a8a",
      "rgb": "rgb(30,58,138)",
      "hsl": "hsl(224.4,64.3%,32.9%)",
      "rgbChannel": "30 58 138",
      "hslChannel": "224.4 64.3% 32.9%"
    },
    {
      "scale": 950,
      "hex": "#172554",
      "rgb": "rgb(23,37,84)",
      "hsl": "hsl(226.2,57%,21%)",
      "rgbChannel": "23 37 84",
      "hslChannel": "226.2 57% 21%"
    }
  ],
  "indigo": [
    {
      "scale": 50,
      "hex": "#eef2ff",
      "rgb": "rgb(238,242,255)",
      "hsl": "hsl(225.9,100%,96.7%)",
      "rgbChannel": "238 242 255",
      "hslChannel": "225.9 100% 96.7%"
    },
    {
      "scale": 100,
      "hex": "#e0e7ff",
      "rgb": "rgb(224,231,255)",
      "hsl": "hsl(226.5,100%,93.9%)",
      "rgbChannel": "224 231 255",
      "hslChannel": "226.5 100% 93.9%"
    },
    {
      "scale": 200,
      "hex": "#c7d2fe",
      "rgb": "rgb(199,210,254)",
      "hsl": "hsl(228,96.5%,88.8%)",
      "rgbChannel": "199 210 254",
      "hslChannel": "228 96.5% 88.8%"
    },
    {
      "scale": 300,
      "hex": "#a5b4fc",
      "rgb": "rgb(165,180,252)",
      "hsl": "hsl(229.7,93.5%,81.8%)",
      "rgbChannel": "165 180 252",
      "hslChannel": "229.7 93.5% 81.8%"
    },
    {
      "scale": 400,
      "hex": "#818cf8",
      "rgb": "rgb(129,140,248)",
      "hsl": "hsl(234.5,89.5%,73.9%)",
      "rgbChannel": "129 140 248",
      "hslChannel": "234.5 89.5% 73.9%"
    },
    {
      "scale": 500,
      "hex": "#6366f1",
      "rgb": "rgb(99,102,241)",
      "hsl": "hsl(238.7,83.5%,66.7%)",
      "rgbChannel": "99 102 241",
      "hslChannel": "238.7 83.5% 66.7%"
    },
    {
      "scale": 600,
      "hex": "#4f46e5",
      "rgb": "rgb(79,70,229)",
      "hsl": "hsl(243.4,75.4%,58.6%)",
      "rgbChannel": "79 70 229",
      "hslChannel": "243.4 75.4% 58.6%"
    },
    {
      "scale": 700,
      "hex": "#4338ca",
      "rgb": "rgb(67,56,202)",
      "hsl": "hsl(244.5,57.9%,50.6%)",
      "rgbChannel": "67 56 202",
      "hslChannel": "244.5 57.9% 50.6%"
    },
    {
      "scale": 800,
      "hex": "#3730a3",
      "rgb": "rgb(55,48,163)",
      "hsl": "hsl(243.7,54.5%,41.4%)",
      "rgbChannel": "55 48 163",
      "hslChannel": "243.7 54.5% 41.4%"
    },
    {
      "scale": 900,
      "hex": "#312e81",
      "rgb": "rgb(49,46,129)",
      "hsl": "hsl(242.2,47.4%,34.3%)",
      "rgbChannel": "49 46 129",
      "hslChannel": "242.2 47.4% 34.3%"
    },
    {
      "scale": 950,
      "hex": "#1e1b4b",
      "rgb": "rgb(30,27,75)",
      "hsl": "hsl(243.8,47.1%,20%)",
      "rgbChannel": "30 27 75",
      "hslChannel": "243.8 47.1% 20%"
    }
  ],
  "violet": [
    {
      "scale": 50,
      "hex": "#f5f3ff",
      "rgb": "rgb(245,243,255)",
      "hsl": "hsl(250,100%,97.6%)",
      "rgbChannel": "245 243 255",
      "hslChannel": "250 100% 97.6%"
    },
    {
      "scale": 100,
      "hex": "#ede9fe",
      "rgb": "rgb(237,233,254)",
      "hsl": "hsl(251.4,91.3%,95.5%)",
      "rgbChannel": "237 233 254",
      "hslChannel": "251.4 91.3% 95.5%"
    },
    {
      "scale": 200,
      "hex": "#ddd6fe",
      "rgb": "rgb(221,214,254)",
      "hsl": "hsl(250.5,95.2%,91.8%)",
      "rgbChannel": "221 214 254",
      "hslChannel": "250.5 95.2% 91.8%"
    },
    {
      "scale": 300,
      "hex": "#c4b5fd",
      "rgb": "rgb(196,181,253)",
      "hsl": "hsl(252.5,94.7%,85.1%)",
      "rgbChannel": "196 181 253",
      "hslChannel": "252.5 94.7% 85.1%"
    },
    {
      "scale": 400,
      "hex": "#a78bfa",
      "rgb": "rgb(167,139,250)",
      "hsl": "hsl(255.1,91.7%,76.3%)",
      "rgbChannel": "167 139 250",
      "hslChannel": "255.1 91.7% 76.3%"
    },
    {
      "scale": 500,
      "hex": "#8b5cf6",
      "rgb": "rgb(139,92,246)",
      "hsl": "hsl(258.3,89.5%,66.3%)",
      "rgbChannel": "139 92 246",
      "hslChannel": "258.3 89.5% 66.3%"
    },
    {
      "scale": 600,
      "hex": "#7c3aed",
      "rgb": "rgb(124,58,237)",
      "hsl": "hsl(262.1,83.3%,57.8%)",
      "rgbChannel": "124 58 237",
      "hslChannel": "262.1 83.3% 57.8%"
    },
    {
      "scale": 700,
      "hex": "#6d28d9",
      "rgb": "rgb(109,40,217)",
      "hsl": "hsl(263.4,70%,50.4%)",
      "rgbChannel": "109 40 217",
      "hslChannel": "263.4 70% 50.4%"
    },
    {
      "scale": 800,
      "hex": "#5b21b6",
      "rgb": "rgb(91,33,182)",
      "hsl": "hsl(263.4,69.3%,42.2%)",
      "rgbChannel": "91 33 182",
      "hslChannel": "263.4 69.3% 42.2%"
    },
    {
      "scale": 900,
      "hex": "#4c1d95",
      "rgb": "rgb(76,29,149)",
      "hsl": "hsl(263.5,67.4%,34.9%)",
      "rgbChannel": "76 29 149",
      "hslChannel": "263.5 67.4% 34.9%"
    },
    {
      "scale": 950,
      "hex": "#1e1b4b",
      "rgb": "rgb(46,16,101)",
      "hsl": "hsl(261.2,72.6%,22.9%)",
      "rgbChannel": "46 16 101",
      "hslChannel": "261.2 72.6% 22.9%"
    }
  ],
  "purple": [
    {
      "scale": 50,
      "hex": "#faf5ff",
      "rgb": "rgb(250,245,255)",
      "hsl": "hsl(270,100%,98%)",
      "rgbChannel": "250 245 255",
      "hslChannel": "270 100% 98%"
    },
    {
      "scale": 100,
      "hex": "#f3e8ff",
      "rgb": "rgb(243,232,255)",
      "hsl": "hsl(268.7,100%,95.5%)",
      "rgbChannel": "243 232 255",
      "hslChannel": "268.7 100% 95.5%"
    },
    {
      "scale": 200,
      "hex": "#e9d5ff",
      "rgb": "rgb(233,213,255)",
      "hsl": "hsl(268.6,100%,91.8%)",
      "rgbChannel": "233 213 255",
      "hslChannel": "268.6 100% 91.8%"
    },
    {
      "scale": 300,
      "hex": "#d8b4fe",
      "rgb": "rgb(216,180,254)",
      "hsl": "hsl(269.2,97.4%,85.1%)",
      "rgbChannel": "216 180 254",
      "hslChannel": "269.2 97.4% 85.1%"
    },
    {
      "scale": 400,
      "hex": "#c084fc",
      "rgb": "rgb(192,132,252)",
      "hsl": "hsl(270,95.2%,75.3%)",
      "rgbChannel": "192 132 252",
      "hslChannel": "270 95.2% 75.3%"
    },
    {
      "scale": 500,
      "hex": "#a855f7",
      "rgb": "rgb(168,85,247)",
      "hsl": "hsl(270.7,91%,65.1%)",
      "rgbChannel": "168 85 247",
      "hslChannel": "270.7 91% 65.1%"
    },
    {
      "scale": 600,
      "hex": "#9333ea",
      "rgb": "rgb(147,51,234)",
      "hsl": "hsl(271.5,81.3%,55.9%)",
      "rgbChannel": "147 51 234",
      "hslChannel": "271.5 81.3% 55.9%"
    },
    {
      "scale": 700,
      "hex": "#7e22ce",
      "rgb": "rgb(126,34,206)",
      "hsl": "hsl(272.1,71.7%,47.1%)",
      "rgbChannel": "126 34 206",
      "hslChannel": "272.1 71.7% 47.1%"
    },
    {
      "scale": 800,
      "hex": "#6b21a8",
      "rgb": "rgb(107,33,168)",
      "hsl": "hsl(272.9,67.2%,39.4%)",
      "rgbChannel": "107 33 168",
      "hslChannel": "272.9 67.2% 39.4%"
    },
    {
      "scale": 900,
      "hex": "#581c87",
      "rgb": "rgb(88,28,135)",
      "hsl": "hsl(273.6,65.6%,32%)",
      "rgbChannel": "88 28 135",
      "hslChannel": "273.6 65.6% 32%"
    },
    {
      "scale": 950,
      "hex": "#3b0764",
      "rgb": "rgb(59,7,100)",
      "hsl": "hsl(273.5,86.9%,21%)",
      "rgbChannel": "59 7 100",
      "hslChannel": "273.5 86.9% 21%"
    }
  ],
  "fuchsia": [
    {
      "scale": 50,
      "hex": "#fdf4ff",
      "rgb": "rgb(253,244,255)",
      "hsl": "hsl(289.1,100%,97.8%)",
      "rgbChannel": "253 244 255",
      "hslChannel": "289.1 100% 97.8%"
    },
    {
      "scale": 100,
      "hex": "#fae8ff",
      "rgb": "rgb(250,232,255)",
      "hsl": "hsl(287,100%,95.5%)",
      "rgbChannel": "250 232 255",
      "hslChannel": "287 100% 95.5%"
    },
    {
      "scale": 200,
      "hex": "#f5d0fe",
      "rgb": "rgb(245,208,254)",
      "hsl": "hsl(288.3,95.8%,90.6%)",
      "rgbChannel": "245 208 254",
      "hslChannel": "288.3 95.8% 90.6%"
    },
    {
      "scale": 300,
      "hex": "#f0abfc",
      "rgb": "rgb(240,171,252)",
      "hsl": "hsl(291.1,93.1%,82.9%)",
      "rgbChannel": "240 171 252",
      "hslChannel": "291.1 93.1% 82.9%"
    },
    {
      "scale": 400,
      "hex": "#e879f9",
      "rgb": "rgb(232,121,249)",
      "hsl": "hsl(292,91.4%,72.5%)",
      "rgbChannel": "232 121 249",
      "hslChannel": "292 91.4% 72.5%"
    },
    {
      "scale": 500,
      "hex": "#d946ef",
      "rgb": "rgb(217,70,239)",
      "hsl": "hsl(292.2,84.1%,60.6%)",
      "rgbChannel": "217 70 239",
      "hslChannel": "292.2 84.1% 60.6%"
    },
    {
      "scale": 600,
      "hex": "#c026d3",
      "rgb": "rgb(192,38,211)",
      "hsl": "hsl(293.4,69.5%,48.8%)",
      "rgbChannel": "192 38 211",
      "hslChannel": "293.4 69.5% 48.8%"
    },
    {
      "scale": 700,
      "hex": "#a21caf",
      "rgb": "rgb(162,28,175)",
      "hsl": "hsl(294.7,72.4%,39.8%)",
      "rgbChannel": "162 28 175",
      "hslChannel": "294.7 72.4% 39.8%"
    },
    {
      "scale": 800,
      "hex": "#86198f",
      "rgb": "rgb(134,25,143)",
      "hsl": "hsl(295.4,70.2%,32.9%)",
      "rgbChannel": "134 25 143",
      "hslChannel": "295.4 70.2% 32.9%"
    },
    {
      "scale": 900,
      "hex": "#701a75",
      "rgb": "rgb(112,26,117)",
      "hsl": "hsl(296.7,63.6%,28%)",
      "rgbChannel": "112 26 117",
      "hslChannel": "296.7 63.6% 28%"
    },
    {
      "scale": 950,
      "hex": "#4a044e",
      "rgb": "rgb(74,4,78)",
      "hsl": "hsl(296.8,90.2%,16.1%)",
      "rgbChannel": "74 4 78",
      "hslChannel": "296.8 90.2% 16.1%"
    }
  ],
  "pink": [
    {
      "scale": 50,
      "hex": "#fdf2f8",
      "rgb": "rgb(253,242,248)",
      "hsl": "hsl(327.3,73.3%,97.1%)",
      "rgbChannel": "253 242 248",
      "hslChannel": "327.3 73.3% 97.1%"
    },
    {
      "scale": 100,
      "hex": "#fce7f3",
      "rgb": "rgb(252,231,243)",
      "hsl": "hsl(325.7,77.8%,94.7%)",
      "rgbChannel": "252 231 243",
      "hslChannel": "325.7 77.8% 94.7%"
    },
    {
      "scale": 200,
      "hex": "#fbcfe8",
      "rgb": "rgb(251,207,232)",
      "hsl": "hsl(325.9,84.6%,89.8%)",
      "rgbChannel": "251 207 232",
      "hslChannel": "325.9 84.6% 89.8%"
    },
    {
      "scale": 300,
      "hex": "#f9a8d4",
      "rgb": "rgb(249,168,212)",
      "hsl": "hsl(327.4,87.1%,81.8%)",
      "rgbChannel": "249 168 212",
      "hslChannel": "327.4 87.1% 81.8%"
    },
    {
      "scale": 400,
      "hex": "#f472b6",
      "rgb": "rgb(244,114,182)",
      "hsl": "hsl(328.6,85.5%,70.2%)",
      "rgbChannel": "244 114 182",
      "hslChannel": "328.6 85.5% 70.2%"
    },
    {
      "scale": 500,
      "hex": "#ec4899",
      "rgb": "rgb(236,72,153)",
      "hsl": "hsl(330.4,81.2%,60.4%)",
      "rgbChannel": "236 72 153",
      "hslChannel": "330.4 81.2% 60.4%"
    },
    {
      "scale": 600,
      "hex": "#db2777",
      "rgb": "rgb(219,39,119)",
      "hsl": "hsl(333.3,71.4%,50.6%)",
      "rgbChannel": "219 39 119",
      "hslChannel": "333.3 71.4% 50.6%"
    },
    {
      "scale": 700,
      "hex": "#be185d",
      "rgb": "rgb(190,24,93)",
      "hsl": "hsl(335.1,77.6%,42%)",
      "rgbChannel": "190 24 93",
      "hslChannel": "335.1 77.6% 42%"
    },
    {
      "scale": 800,
      "hex": "#9d174d",
      "rgb": "rgb(157,23,77)",
      "hsl": "hsl(335.8,74.4%,35.3%)",
      "rgbChannel": "157 23 77",
      "hslChannel": "335.8 74.4% 35.3%"
    },
    {
      "scale": 900,
      "hex": "#831843",
      "rgb": "rgb(131,24,67)",
      "hsl": "hsl(335.9,69%,30.4%)",
      "rgbChannel": "131 24 67",
      "hslChannel": "335.9 69% 30.4%"
    },
    {
      "scale": 950,
      "hex": "#500724",
      "rgb": "rgb(80,7,36)",
      "hsl": "hsl(336.2,83.9%,17.1%)",
      "rgbChannel": "80 7 36",
      "hslChannel": "336.2 83.9% 17.1%"
    }
  ],
  "rose": [
    {
      "scale": 50,
      "hex": "#fff1f2",
      "rgb": "rgb(255,241,242)",
      "hsl": "hsl(355.7,100%,97.3%)",
      "rgbChannel": "255 241 242",
      "hslChannel": "355.7 100% 97.3%"
    },
    {
      "scale": 100,
      "hex": "#ffe4e6",
      "rgb": "rgb(255,228,230)",
      "hsl": "hsl(355.6,100%,94.7%)",
      "rgbChannel": "255 228 230",
      "hslChannel": "355.6 100% 94.7%"
    },
    {
      "scale": 200,
      "hex": "#fecdd3",
      "rgb": "rgb(254,205,211)",
      "hsl": "hsl(352.7,96.1%,90%)",
      "rgbChannel": "254 205 211",
      "hslChannel": "352.7 96.1% 90%"
    },
    {
      "scale": 300,
      "hex": "#fda4af",
      "rgb": "rgb(253,164,175)",
      "hsl": "hsl(352.6,95.7%,81.8%)",
      "rgbChannel": "253 164 175",
      "hslChannel": "352.6 95.7% 81.8%"
    },
    {
      "scale": 400,
      "hex": "#fb7185",
      "rgb": "rgb(251,113,133)",
      "hsl": "hsl(351.3,94.5%,71.4%)",
      "rgbChannel": "251 113 133",
      "hslChannel": "351.3 94.5% 71.4%"
    },
    {
      "scale": 500,
      "hex": "#f43f5e",
      "rgb": "rgb(244,63,94)",
      "hsl": "hsl(349.7,89.2%,60.2%)",
      "rgbChannel": "244 63 94",
      "hslChannel": "349.7 89.2% 60.2%"
    },
    {
      "scale": 600,
      "hex": "#e11d48",
      "rgb": "rgb(225,29,72)",
      "hsl": "hsl(346.8,77.2%,49.8%)",
      "rgbChannel": "225 29 72",
      "hslChannel": "346.8 77.2% 49.8%"
    },
    {
      "scale": 700,
      "hex": "#be123c",
      "rgb": "rgb(190,18,60)",
      "hsl": "hsl(345.3,82.7%,40.8%)",
      "rgbChannel": "190 18 60",
      "hslChannel": "345.3 82.7% 40.8%"
    },
    {
      "scale": 800,
      "hex": "#9f1239",
      "rgb": "rgb(159,18,57)",
      "hsl": "hsl(343.4,79.7%,34.7%)",
      "rgbChannel": "159 18 57",
      "hslChannel": "343.4 79.7% 34.7%"
    },
    {
      "scale": 900,
      "hex": "#881337",
      "rgb": "rgb(136,19,55)",
      "hsl": "hsl(341.5,75.5%,30.4%)",
      "rgbChannel": "136 19 55",
      "hslChannel": "341.5 75.5% 30.4%"
    },
    {
      "scale": 950,
      "hex": "#4c0519",
      "rgb": "rgb(76,5,25)",
      "hsl": "hsl(343.1,87.7%,15.9%)",
      "rgbChannel": "76 5 25",
      "hslChannel": "343.1 87.7% 15.9%"
    }
  ]
}
</file>

<file path="public/r/styles/default/animated-beam.json">
{
  "name": "animated-beam",
  "type": "registry:ui",
  "dependencies": [
    "framer-motion"
  ],
  "files": [
    {
      "path": "magicui/animated-beam.tsx",
      "content": "\"use client\";\n\nimport { RefObject, useEffect, useId, useState } from \"react\";\nimport { motion } from \"framer-motion\";\n\nimport { cn } from \"@/lib/utils\";\n\nexport interface AnimatedBeamProps {\n  className?: string;\n  containerRef: RefObject<HTMLElement>; // Container ref\n  fromRef: RefObject<HTMLElement>;\n  toRef: RefObject<HTMLElement>;\n  curvature?: number;\n  reverse?: boolean;\n  pathColor?: string;\n  pathWidth?: number;\n  pathOpacity?: number;\n  gradientStartColor?: string;\n  gradientStopColor?: string;\n  delay?: number;\n  duration?: number;\n  startXOffset?: number;\n  startYOffset?: number;\n  endXOffset?: number;\n  endYOffset?: number;\n}\n\nexport const AnimatedBeam: React.FC<AnimatedBeamProps> = ({\n  className,\n  containerRef,\n  fromRef,\n  toRef,\n  curvature = 0,\n  reverse = false, // Include the reverse prop\n  duration = Math.random() * 3 + 4,\n  delay = 0,\n  pathColor = \"gray\",\n  pathWidth = 2,\n  pathOpacity = 0.2,\n  gradientStartColor = \"#ffaa40\",\n  gradientStopColor = \"#9c40ff\",\n  startXOffset = 0,\n  startYOffset = 0,\n  endXOffset = 0,\n  endYOffset = 0,\n}) => {\n  const id = useId();\n  const [pathD, setPathD] = useState(\"\");\n  const [svgDimensions, setSvgDimensions] = useState({ width: 0, height: 0 });\n\n  // Calculate the gradient coordinates based on the reverse prop\n  const gradientCoordinates = reverse\n    ? {\n        x1: [\"90%\", \"-10%\"],\n        x2: [\"100%\", \"0%\"],\n        y1: [\"0%\", \"0%\"],\n        y2: [\"0%\", \"0%\"],\n      }\n    : {\n        x1: [\"10%\", \"110%\"],\n        x2: [\"0%\", \"100%\"],\n        y1: [\"0%\", \"0%\"],\n        y2: [\"0%\", \"0%\"],\n      };\n\n  useEffect(() => {\n    const updatePath = () => {\n      if (containerRef.current && fromRef.current && toRef.current) {\n        const containerRect = containerRef.current.getBoundingClientRect();\n        const rectA = fromRef.current.getBoundingClientRect();\n        const rectB = toRef.current.getBoundingClientRect();\n\n        const svgWidth = containerRect.width;\n        const svgHeight = containerRect.height;\n        setSvgDimensions({ width: svgWidth, height: svgHeight });\n\n        const startX =\n          rectA.left - containerRect.left + rectA.width / 2 + startXOffset;\n        const startY =\n          rectA.top - containerRect.top + rectA.height / 2 + startYOffset;\n        const endX =\n          rectB.left - containerRect.left + rectB.width / 2 + endXOffset;\n        const endY =\n          rectB.top - containerRect.top + rectB.height / 2 + endYOffset;\n\n        const controlY = startY - curvature;\n        const d = `M ${startX},${startY} Q ${\n          (startX + endX) / 2\n        },${controlY} ${endX},${endY}`;\n        setPathD(d);\n      }\n    };\n\n    // Initialize ResizeObserver\n    const resizeObserver = new ResizeObserver((entries) => {\n      // For all entries, recalculate the path\n      for (let entry of entries) {\n        updatePath();\n      }\n    });\n\n    // Observe the container element\n    if (containerRef.current) {\n      resizeObserver.observe(containerRef.current);\n    }\n\n    // Call the updatePath initially to set the initial path\n    updatePath();\n\n    // Clean up the observer on component unmount\n    return () => {\n      resizeObserver.disconnect();\n    };\n  }, [\n    containerRef,\n    fromRef,\n    toRef,\n    curvature,\n    startXOffset,\n    startYOffset,\n    endXOffset,\n    endYOffset,\n  ]);\n\n  return (\n    <svg\n      fill=\"none\"\n      width={svgDimensions.width}\n      height={svgDimensions.height}\n      xmlns=\"http://www.w3.org/2000/svg\"\n      className={cn(\n        \"pointer-events-none absolute left-0 top-0 transform-gpu stroke-2\",\n        className,\n      )}\n      viewBox={`0 0 ${svgDimensions.width} ${svgDimensions.height}`}\n    >\n      <path\n        d={pathD}\n        stroke={pathColor}\n        strokeWidth={pathWidth}\n        strokeOpacity={pathOpacity}\n        strokeLinecap=\"round\"\n      />\n      <path\n        d={pathD}\n        strokeWidth={pathWidth}\n        stroke={`url(#${id})`}\n        strokeOpacity=\"1\"\n        strokeLinecap=\"round\"\n      />\n      <defs>\n        <motion.linearGradient\n          className=\"transform-gpu\"\n          id={id}\n          gradientUnits={\"userSpaceOnUse\"}\n          initial={{\n            x1: \"0%\",\n            x2: \"0%\",\n            y1: \"0%\",\n            y2: \"0%\",\n          }}\n          animate={{\n            x1: gradientCoordinates.x1,\n            x2: gradientCoordinates.x2,\n            y1: gradientCoordinates.y1,\n            y2: gradientCoordinates.y2,\n          }}\n          transition={{\n            delay,\n            duration,\n            ease: [0.16, 1, 0.3, 1], // https://easings.net/#easeOutExpo\n            repeat: Infinity,\n            repeatDelay: 0,\n          }}\n        >\n          <stop stopColor={gradientStartColor} stopOpacity=\"0\"></stop>\n          <stop stopColor={gradientStartColor}></stop>\n          <stop offset=\"32.5%\" stopColor={gradientStopColor}></stop>\n          <stop\n            offset=\"100%\"\n            stopColor={gradientStopColor}\n            stopOpacity=\"0\"\n          ></stop>\n        </motion.linearGradient>\n      </defs>\n    </svg>\n  );\n};\n",
      "type": "registry:ui",
      "target": ""
    }
  ]
}
</file>

<file path="public/r/styles/default/animated-circular-progress-bar.json">
{
  "name": "animated-circular-progress-bar",
  "type": "registry:ui",
  "files": [
    {
      "path": "magicui/animated-circular-progress-bar.tsx",
      "content": "import { cn } from \"@/lib/utils\";\n\ninterface Props {\n  max: number;\n  value: number;\n  min: number;\n  gaugePrimaryColor: string;\n  gaugeSecondaryColor: string;\n  className?: string;\n}\n\nexport default function AnimatedCircularProgressBar({\n  max = 100,\n  min = 0,\n  value = 0,\n  gaugePrimaryColor,\n  gaugeSecondaryColor,\n  className,\n}: Props) {\n  const circumference = 2 * Math.PI * 45;\n  const percentPx = circumference / 100;\n  const currentPercent = ((value - min) / (max - min)) * 100;\n\n  return (\n    <div\n      className={cn(\"relative size-40 text-2xl font-semibold\", className)}\n      style={\n        {\n          \"--circle-size\": \"100px\",\n          \"--circumference\": circumference,\n          \"--percent-to-px\": `${percentPx}px`,\n          \"--gap-percent\": \"5\",\n          \"--offset-factor\": \"0\",\n          \"--transition-length\": \"1s\",\n          \"--transition-step\": \"200ms\",\n          \"--delay\": \"0s\",\n          \"--percent-to-deg\": \"3.6deg\",\n          transform: \"translateZ(0)\",\n        } as React.CSSProperties\n      }\n    >\n      <svg\n        fill=\"none\"\n        className=\"size-full\"\n        strokeWidth=\"2\"\n        viewBox=\"0 0 100 100\"\n      >\n        {currentPercent <= 90 && currentPercent >= 0 && (\n          <circle\n            cx=\"50\"\n            cy=\"50\"\n            r=\"45\"\n            strokeWidth=\"10\"\n            strokeDashoffset=\"0\"\n            strokeLinecap=\"round\"\n            strokeLinejoin=\"round\"\n            className=\" opacity-100\"\n            style={\n              {\n                stroke: gaugeSecondaryColor,\n                \"--stroke-percent\": 90 - currentPercent,\n                \"--offset-factor-secondary\": \"calc(1 - var(--offset-factor))\",\n                strokeDasharray:\n                  \"calc(var(--stroke-percent) * var(--percent-to-px)) var(--circumference)\",\n                transform:\n                  \"rotate(calc(1turn - 90deg - (var(--gap-percent) * var(--percent-to-deg) * var(--offset-factor-secondary)))) scaleY(-1)\",\n                transition: \"all var(--transition-length) ease var(--delay)\",\n                transformOrigin:\n                  \"calc(var(--circle-size) / 2) calc(var(--circle-size) / 2)\",\n              } as React.CSSProperties\n            }\n          />\n        )}\n        <circle\n          cx=\"50\"\n          cy=\"50\"\n          r=\"45\"\n          strokeWidth=\"10\"\n          strokeDashoffset=\"0\"\n          strokeLinecap=\"round\"\n          strokeLinejoin=\"round\"\n          className=\"opacity-100\"\n          style={\n            {\n              stroke: gaugePrimaryColor,\n              \"--stroke-percent\": currentPercent,\n              strokeDasharray:\n                \"calc(var(--stroke-percent) * var(--percent-to-px)) var(--circumference)\",\n              transition:\n                \"var(--transition-length) ease var(--delay),stroke var(--transition-length) ease var(--delay)\",\n              transitionProperty: \"stroke-dasharray,transform\",\n              transform:\n                \"rotate(calc(-90deg + var(--gap-percent) * var(--offset-factor) * var(--percent-to-deg)))\",\n              transformOrigin:\n                \"calc(var(--circle-size) / 2) calc(var(--circle-size) / 2)\",\n            } as React.CSSProperties\n          }\n        />\n      </svg>\n      <span\n        data-current-value={currentPercent}\n        className=\"duration-[var(--transition-length)] delay-[var(--delay)] absolute inset-0 m-auto size-fit ease-linear animate-in fade-in\"\n      >\n        {currentPercent}\n      </span>\n    </div>\n  );\n}\n",
      "type": "registry:ui",
      "target": ""
    }
  ]
}
</file>

<file path="public/r/styles/default/animated-gradient-text.json">
{
  "name": "animated-gradient-text",
  "type": "registry:ui",
  "files": [
    {
      "path": "magicui/animated-gradient-text.tsx",
      "content": "import { ReactNode } from \"react\";\n\nimport { cn } from \"@/lib/utils\";\n\nexport default function AnimatedGradientText({\n  children,\n  className,\n}: {\n  children: ReactNode;\n  className?: string;\n}) {\n  return (\n    <div\n      className={cn(\n        \"group relative mx-auto flex max-w-fit flex-row items-center justify-center rounded-2xl bg-white/40 px-4 py-1.5 text-sm font-medium shadow-[inset_0_-8px_10px_#8fdfff1f] backdrop-blur-sm transition-shadow duration-500 ease-out [--bg-size:300%] hover:shadow-[inset_0_-5px_10px_#8fdfff3f] dark:bg-black/40\",\n        className,\n      )}\n    >\n      <div\n        className={`absolute inset-0 block h-full w-full animate-gradient bg-gradient-to-r from-[#ffaa40]/50 via-[#9c40ff]/50 to-[#ffaa40]/50 bg-[length:var(--bg-size)_100%] p-[1px] ![mask-composite:subtract] [border-radius:inherit] [mask:linear-gradient(#fff_0_0)_content-box,linear-gradient(#fff_0_0)]`}\n      />\n\n      {children}\n    </div>\n  );\n}\n",
      "type": "registry:ui",
      "target": ""
    }
  ],
  "tailwind": {
    "config": {
      "theme": {
        "extend": {
          "animation": {
            "gradient": "gradient 8s linear infinite"
          },
          "keyframes": {
            "gradient": {
              "to": {
                "backgroundPosition": "var(--bg-size) 0"
              }
            }
          }
        }
      }
    }
  }
}
</file>

<file path="public/r/styles/default/animated-grid-pattern.json">
{
  "name": "animated-grid-pattern",
  "type": "registry:ui",
  "dependencies": [
    "framer-motion"
  ],
  "files": [
    {
      "path": "magicui/animated-grid-pattern.tsx",
      "content": "\"use client\";\n\nimport { useEffect, useId, useRef, useState } from \"react\";\nimport { motion } from \"framer-motion\";\n\nimport { cn } from \"@/lib/utils\";\n\ninterface GridPatternProps {\n  width?: number;\n  height?: number;\n  x?: number;\n  y?: number;\n  strokeDasharray?: any;\n  numSquares?: number;\n  className?: string;\n  maxOpacity?: number;\n  duration?: number;\n  repeatDelay?: number;\n}\n\nexport function GridPattern({\n  width = 40,\n  height = 40,\n  x = -1,\n  y = -1,\n  strokeDasharray = 0,\n  numSquares = 50,\n  className,\n  maxOpacity = 0.5,\n  duration = 4,\n  repeatDelay = 0.5,\n  ...props\n}: GridPatternProps) {\n  const id = useId();\n  const containerRef = useRef(null);\n  const [dimensions, setDimensions] = useState({ width: 0, height: 0 });\n  const [squares, setSquares] = useState(() => generateSquares(numSquares));\n\n  function getPos() {\n    return [\n      Math.floor((Math.random() * dimensions.width) / width),\n      Math.floor((Math.random() * dimensions.height) / height),\n    ];\n  }\n\n  // Adjust the generateSquares function to return objects with an id, x, and y\n  function generateSquares(count: number) {\n    return Array.from({ length: count }, (_, i) => ({\n      id: i,\n      pos: getPos(),\n    }));\n  }\n\n  // Function to update a single square's position\n  const updateSquarePosition = (id: number) => {\n    setSquares((currentSquares) =>\n      currentSquares.map((sq) =>\n        sq.id === id\n          ? {\n              ...sq,\n              pos: getPos(),\n            }\n          : sq,\n      ),\n    );\n  };\n\n  // Update squares to animate in\n  useEffect(() => {\n    if (dimensions.width && dimensions.height) {\n      setSquares(generateSquares(numSquares));\n    }\n  }, [dimensions, numSquares]);\n\n  // Resize observer to update container dimensions\n  useEffect(() => {\n    const resizeObserver = new ResizeObserver((entries) => {\n      for (let entry of entries) {\n        setDimensions({\n          width: entry.contentRect.width,\n          height: entry.contentRect.height,\n        });\n      }\n    });\n\n    if (containerRef.current) {\n      resizeObserver.observe(containerRef.current);\n    }\n\n    return () => {\n      if (containerRef.current) {\n        resizeObserver.unobserve(containerRef.current);\n      }\n    };\n  }, [containerRef]);\n\n  return (\n    <svg\n      ref={containerRef}\n      aria-hidden=\"true\"\n      className={cn(\n        \"pointer-events-none absolute inset-0 h-full w-full fill-gray-400/30 stroke-gray-400/30\",\n        className,\n      )}\n      {...props}\n    >\n      <defs>\n        <pattern\n          id={id}\n          width={width}\n          height={height}\n          patternUnits=\"userSpaceOnUse\"\n          x={x}\n          y={y}\n        >\n          <path\n            d={`M.5 ${height}V.5H${width}`}\n            fill=\"none\"\n            strokeDasharray={strokeDasharray}\n          />\n        </pattern>\n      </defs>\n      <rect width=\"100%\" height=\"100%\" fill={`url(#${id})`} />\n      <svg x={x} y={y} className=\"overflow-visible\">\n        {squares.map(({ pos: [x, y], id }, index) => (\n          <motion.rect\n            initial={{ opacity: 0 }}\n            animate={{ opacity: maxOpacity }}\n            transition={{\n              duration,\n              repeat: 1,\n              delay: index * 0.1,\n              repeatType: \"reverse\",\n            }}\n            onAnimationComplete={() => updateSquarePosition(id)}\n            key={`${x}-${y}-${index}`}\n            width={width - 1}\n            height={height - 1}\n            x={x * width + 1}\n            y={y * height + 1}\n            fill=\"currentColor\"\n            strokeWidth=\"0\"\n          />\n        ))}\n      </svg>\n    </svg>\n  );\n}\n\nexport default GridPattern;\n",
      "type": "registry:ui",
      "target": ""
    }
  ]
}
</file>

<file path="public/r/styles/default/animated-list.json">
{
  "name": "animated-list",
  "type": "registry:ui",
  "dependencies": [
    "framer-motion"
  ],
  "files": [
    {
      "path": "magicui/animated-list.tsx",
      "content": "\"use client\";\n\nimport React, { ReactElement, useEffect, useMemo, useState } from \"react\";\nimport { AnimatePresence, motion } from \"framer-motion\";\n\nexport interface AnimatedListProps {\n  className?: string;\n  children: React.ReactNode;\n  delay?: number;\n}\n\nexport const AnimatedList = React.memo(\n  ({ className, children, delay = 1000 }: AnimatedListProps) => {\n    const [index, setIndex] = useState(0);\n    const childrenArray = React.Children.toArray(children);\n\n    useEffect(() => {\n      const interval = setInterval(() => {\n        setIndex((prevIndex) => (prevIndex + 1) % childrenArray.length);\n      }, delay);\n\n      return () => clearInterval(interval);\n    }, [childrenArray.length, delay]);\n\n    const itemsToShow = useMemo(\n      () => childrenArray.slice(0, index + 1).reverse(),\n      [index, childrenArray],\n    );\n\n    return (\n      <div className={`flex flex-col items-center gap-4 ${className}`}>\n        <AnimatePresence>\n          {itemsToShow.map((item) => (\n            <AnimatedListItem key={(item as ReactElement).key}>\n              {item}\n            </AnimatedListItem>\n          ))}\n        </AnimatePresence>\n      </div>\n    );\n  },\n);\n\nAnimatedList.displayName = \"AnimatedList\";\n\nexport function AnimatedListItem({ children }: { children: React.ReactNode }) {\n  const animations = {\n    initial: { scale: 0, opacity: 0 },\n    animate: { scale: 1, opacity: 1, originY: 0 },\n    exit: { scale: 0, opacity: 0 },\n    transition: { type: \"spring\", stiffness: 350, damping: 40 },\n  };\n\n  return (\n    <motion.div {...animations} layout className=\"mx-auto w-full\">\n      {children}\n    </motion.div>\n  );\n}\n",
      "type": "registry:ui",
      "target": ""
    }
  ]
}
</file>

<file path="public/r/styles/default/animated-shiny-text.json">
{
  "name": "animated-shiny-text",
  "type": "registry:ui",
  "files": [
    {
      "path": "magicui/animated-shiny-text.tsx",
      "content": "import { CSSProperties, FC, ReactNode } from \"react\";\n\nimport { cn } from \"@/lib/utils\";\n\ninterface AnimatedShinyTextProps {\n  children: ReactNode;\n  className?: string;\n  shimmerWidth?: number;\n}\n\nconst AnimatedShinyText: FC<AnimatedShinyTextProps> = ({\n  children,\n  className,\n  shimmerWidth = 100,\n}) => {\n  return (\n    <p\n      style={\n        {\n          \"--shiny-width\": `${shimmerWidth}px`,\n        } as CSSProperties\n      }\n      className={cn(\n        \"mx-auto max-w-md text-neutral-600/70 dark:text-neutral-400/70\",\n\n        // Shine effect\n        \"animate-shiny-text bg-clip-text bg-no-repeat [background-position:0_0] [background-size:var(--shiny-width)_100%] [transition:background-position_1s_cubic-bezier(.6,.6,0,1)_infinite]\",\n\n        // Shine gradient\n        \"bg-gradient-to-r from-transparent via-black/80 via-50% to-transparent  dark:via-white/80\",\n\n        className,\n      )}\n    >\n      {children}\n    </p>\n  );\n};\n\nexport default AnimatedShinyText;\n",
      "type": "registry:ui",
      "target": ""
    }
  ],
  "tailwind": {
    "config": {
      "theme": {
        "extend": {
          "animation": {
            "shiny-text": "shiny-text 8s infinite"
          },
          "keyframes": {
            "shiny-text": {
              "0%, 90%, 100%": {
                "background-position": "calc(-100% - var(--shiny-width)) 0"
              },
              "30%, 60%": {
                "background-position": "calc(100% + var(--shiny-width)) 0"
              }
            }
          }
        }
      }
    }
  }
}
</file>

<file path="public/r/styles/default/animated-subscribe-button.json">
{
  "name": "animated-subscribe-button",
  "type": "registry:ui",
  "dependencies": [
    "framer-motion"
  ],
  "files": [
    {
      "path": "magicui/animated-subscribe-button.tsx",
      "content": "\"use client\";\n\nimport React, { useState } from \"react\";\nimport { AnimatePresence, motion } from \"framer-motion\";\n\ninterface AnimatedSubscribeButtonProps {\n  buttonColor: string;\n  buttonTextColor?: string;\n  subscribeStatus: boolean;\n  initialText: React.ReactElement | string;\n  changeText: React.ReactElement | string;\n}\n\nexport const AnimatedSubscribeButton: React.FC<\n  AnimatedSubscribeButtonProps\n> = ({\n  buttonColor,\n  subscribeStatus,\n  buttonTextColor,\n  changeText,\n  initialText,\n}) => {\n  const [isSubscribed, setIsSubscribed] = useState<boolean>(subscribeStatus);\n\n  return (\n    <AnimatePresence mode=\"wait\">\n      {isSubscribed ? (\n        <motion.button\n          className=\"relative flex w-[200px] items-center justify-center overflow-hidden rounded-md bg-white p-[10px] outline outline-1 outline-black\"\n          onClick={() => setIsSubscribed(false)}\n          initial={{ opacity: 0 }}\n          animate={{ opacity: 1 }}\n          exit={{ opacity: 0 }}\n        >\n          <motion.span\n            key=\"action\"\n            className=\"relative block h-full w-full font-semibold\"\n            initial={{ y: -50 }}\n            animate={{ y: 0 }}\n            style={{ color: buttonColor }}\n          >\n            {changeText}\n          </motion.span>\n        </motion.button>\n      ) : (\n        <motion.button\n          className=\"relative flex w-[200px] cursor-pointer items-center justify-center rounded-md border-none p-[10px]\"\n          style={{ backgroundColor: buttonColor, color: buttonTextColor }}\n          onClick={() => setIsSubscribed(true)}\n          initial={{ opacity: 0 }}\n          animate={{ opacity: 1 }}\n          exit={{ opacity: 0 }}\n        >\n          <motion.span\n            key=\"reaction\"\n            className=\"relative block font-semibold\"\n            initial={{ x: 0 }}\n            exit={{ x: 50, transition: { duration: 0.1 } }}\n          >\n            {initialText}\n          </motion.span>\n        </motion.button>\n      )}\n    </AnimatePresence>\n  );\n};\n",
      "type": "registry:ui",
      "target": ""
    }
  ]
}
</file>

<file path="public/r/styles/default/avatar-circles.json">
{
  "name": "avatar-circles",
  "type": "registry:ui",
  "files": [
    {
      "path": "magicui/avatar-circles.tsx",
      "content": "\"use client\";\n\nimport React from \"react\";\n\nimport { cn } from \"@/lib/utils\";\n\ninterface AvatarCirclesProps {\n  className?: string;\n  numPeople?: number;\n  avatarUrls: string[];\n}\n\nconst AvatarCircles = ({\n  numPeople,\n  className,\n  avatarUrls,\n}: AvatarCirclesProps) => {\n  return (\n    <div className={cn(\"z-10 flex -space-x-4 rtl:space-x-reverse\", className)}>\n      {avatarUrls.map((url, index) => (\n        <img\n          key={index}\n          className=\"h-10 w-10 rounded-full border-2 border-white dark:border-gray-800\"\n          src={url}\n          width={40}\n          height={40}\n          alt={`Avatar ${index + 1}`}\n        />\n      ))}\n      <a\n        className=\"flex h-10 w-10 items-center justify-center rounded-full border-2 border-white bg-black text-center text-xs font-medium text-white hover:bg-gray-600 dark:border-gray-800 dark:bg-white dark:text-black\"\n        href=\"\"\n      >\n        +{numPeople}\n      </a>\n    </div>\n  );\n};\n\nexport default AvatarCircles;\n",
      "type": "registry:ui",
      "target": ""
    }
  ]
}
</file>

<file path="public/r/styles/default/bento-grid.json">
{
  "name": "bento-grid",
  "type": "registry:ui",
  "dependencies": [
    "@radix-ui/react-icons"
  ],
  "files": [
    {
      "path": "magicui/bento-grid.tsx",
      "content": "import { ReactNode } from \"react\";\nimport { ArrowRightIcon } from \"@radix-ui/react-icons\";\n\nimport { cn } from \"@/lib/utils\";\nimport { Button } from \"@/components/ui/button\";\n\nconst BentoGrid = ({\n  children,\n  className,\n}: {\n  children: ReactNode;\n  className?: string;\n}) => {\n  return (\n    <div\n      className={cn(\n        \"grid w-full auto-rows-[22rem] grid-cols-3 gap-4\",\n        className,\n      )}\n    >\n      {children}\n    </div>\n  );\n};\n\nconst BentoCard = ({\n  name,\n  className,\n  background,\n  Icon,\n  description,\n  href,\n  cta,\n}: {\n  name: string;\n  className: string;\n  background: ReactNode;\n  Icon: any;\n  description: string;\n  href: string;\n  cta: string;\n}) => (\n  <div\n    key={name}\n    className={cn(\n      \"group relative col-span-3 flex flex-col justify-between overflow-hidden rounded-xl\",\n      // light styles\n      \"bg-white [box-shadow:0_0_0_1px_rgba(0,0,0,.03),0_2px_4px_rgba(0,0,0,.05),0_12px_24px_rgba(0,0,0,.05)]\",\n      // dark styles\n      \"transform-gpu dark:bg-black dark:[border:1px_solid_rgba(255,255,255,.1)] dark:[box-shadow:0_-20px_80px_-20px_#ffffff1f_inset]\",\n      className,\n    )}\n  >\n    <div>{background}</div>\n    <div className=\"pointer-events-none z-10 flex transform-gpu flex-col gap-1 p-6 transition-all duration-300 group-hover:-translate-y-10\">\n      <Icon className=\"h-12 w-12 origin-left transform-gpu text-neutral-700 transition-all duration-300 ease-in-out group-hover:scale-75\" />\n      <h3 className=\"text-xl font-semibold text-neutral-700 dark:text-neutral-300\">\n        {name}\n      </h3>\n      <p className=\"max-w-lg text-neutral-400\">{description}</p>\n    </div>\n\n    <div\n      className={cn(\n        \"pointer-events-none absolute bottom-0 flex w-full translate-y-10 transform-gpu flex-row items-center p-4 opacity-0 transition-all duration-300 group-hover:translate-y-0 group-hover:opacity-100\",\n      )}\n    >\n      <Button variant=\"ghost\" asChild size=\"sm\" className=\"pointer-events-auto\">\n        <a href={href}>\n          {cta}\n          <ArrowRightIcon className=\"ml-2 h-4 w-4\" />\n        </a>\n      </Button>\n    </div>\n    <div className=\"pointer-events-none absolute inset-0 transform-gpu transition-all duration-300 group-hover:bg-black/[.03] group-hover:dark:bg-neutral-800/10\" />\n  </div>\n);\n\nexport { BentoCard, BentoGrid };\n",
      "type": "registry:ui",
      "target": ""
    }
  ]
}
</file>

<file path="public/r/styles/default/blur-fade.json">
{
  "name": "blur-fade",
  "type": "registry:ui",
  "dependencies": [
    "framer-motion"
  ],
  "files": [
    {
      "path": "magicui/blur-fade.tsx",
      "content": "\"use client\";\n\nimport { useRef } from \"react\";\nimport {\n  AnimatePresence,\n  motion,\n  useInView,\n  UseInViewOptions,\n  Variants,\n} from \"framer-motion\";\n\ntype MarginType = UseInViewOptions[\"margin\"];\n\ninterface BlurFadeProps {\n  children: React.ReactNode;\n  className?: string;\n  variant?: {\n    hidden: { y: number };\n    visible: { y: number };\n  };\n  duration?: number;\n  delay?: number;\n  yOffset?: number;\n  inView?: boolean;\n  inViewMargin?: MarginType;\n  blur?: string;\n}\n\nexport default function BlurFade({\n  children,\n  className,\n  variant,\n  duration = 0.4,\n  delay = 0,\n  yOffset = 6,\n  inView = false,\n  inViewMargin = \"-50px\",\n  blur = \"6px\",\n}: BlurFadeProps) {\n  const ref = useRef(null);\n  const inViewResult = useInView(ref, { once: true, margin: inViewMargin });\n  const isInView = !inView || inViewResult;\n  const defaultVariants: Variants = {\n    hidden: { y: yOffset, opacity: 0, filter: `blur(${blur})` },\n    visible: { y: -yOffset, opacity: 1, filter: `blur(0px)` },\n  };\n  const combinedVariants = variant || defaultVariants;\n  return (\n    <AnimatePresence>\n      <motion.div\n        ref={ref}\n        initial=\"hidden\"\n        animate={isInView ? \"visible\" : \"hidden\"}\n        exit=\"hidden\"\n        variants={combinedVariants}\n        transition={{\n          delay: 0.04 + delay,\n          duration,\n          ease: \"easeOut\",\n        }}\n        className={className}\n      >\n        {children}\n      </motion.div>\n    </AnimatePresence>\n  );\n}\n",
      "type": "registry:ui",
      "target": ""
    }
  ]
}
</file>

<file path="public/r/styles/default/blur-in.json">
{
  "name": "blur-in",
  "type": "registry:ui",
  "dependencies": [
    "framer-motion"
  ],
  "files": [
    {
      "path": "magicui/blur-in.tsx",
      "content": "\"use client\";\n\nimport { motion } from \"framer-motion\";\n\nimport { cn } from \"@/lib/utils\";\n\ninterface BlurIntProps {\n  word: string;\n  className?: string;\n  variant?: {\n    hidden: { filter: string; opacity: number };\n    visible: { filter: string; opacity: number };\n  };\n  duration?: number;\n}\nconst BlurIn = ({ word, className, variant, duration = 1 }: BlurIntProps) => {\n  const defaultVariants = {\n    hidden: { filter: \"blur(10px)\", opacity: 0 },\n    visible: { filter: \"blur(0px)\", opacity: 1 },\n  };\n  const combinedVariants = variant || defaultVariants;\n\n  return (\n    <motion.h1\n      initial=\"hidden\"\n      animate=\"visible\"\n      transition={{ duration }}\n      variants={combinedVariants}\n      className={cn(\n        \"font-display text-center text-4xl font-bold tracking-[-0.02em] drop-shadow-sm md:text-7xl md:leading-[5rem]\",\n        className,\n      )}\n    >\n      {word}\n    </motion.h1>\n  );\n};\n\nexport default BlurIn;\n",
      "type": "registry:ui",
      "target": ""
    }
  ]
}
</file>

<file path="public/r/styles/default/box-reveal.json">
{
  "name": "box-reveal",
  "type": "registry:ui",
  "dependencies": [
    "framer-motion"
  ],
  "files": [
    {
      "path": "magicui/box-reveal.tsx",
      "content": "\"use client\";\n\nimport { useEffect, useRef } from \"react\";\nimport { motion, useAnimation, useInView } from \"framer-motion\";\n\ninterface BoxRevealProps {\n  children: JSX.Element;\n  width?: \"fit-content\" | \"100%\";\n  boxColor?: string;\n  duration?: number;\n}\n\nexport const BoxReveal = ({\n  children,\n  width = \"fit-content\",\n  boxColor,\n  duration,\n}: BoxRevealProps) => {\n  const mainControls = useAnimation();\n  const slideControls = useAnimation();\n\n  const ref = useRef(null);\n  const isInView = useInView(ref, { once: true });\n\n  useEffect(() => {\n    if (isInView) {\n      slideControls.start(\"visible\");\n      mainControls.start(\"visible\");\n    } else {\n      slideControls.start(\"hidden\");\n      mainControls.start(\"hidden\");\n    }\n  }, [isInView, mainControls, slideControls]);\n\n  return (\n    <div ref={ref} style={{ position: \"relative\", width, overflow: \"hidden\" }}>\n      <motion.div\n        variants={{\n          hidden: { opacity: 0, y: 75 },\n          visible: { opacity: 1, y: 0 },\n        }}\n        initial=\"hidden\"\n        animate={mainControls}\n        transition={{ duration: duration ? duration : 0.5, delay: 0.25 }}\n      >\n        {children}\n      </motion.div>\n\n      <motion.div\n        variants={{\n          hidden: { left: 0 },\n          visible: { left: \"100%\" },\n        }}\n        initial=\"hidden\"\n        animate={slideControls}\n        transition={{ duration: duration ? duration : 0.5, ease: \"easeIn\" }}\n        style={{\n          position: \"absolute\",\n          top: 4,\n          bottom: 4,\n          left: 0,\n          right: 0,\n          zIndex: 20,\n          background: boxColor ? boxColor : \"#5046e6\",\n        }}\n      />\n    </div>\n  );\n};\n\nexport default BoxReveal;\n",
      "type": "registry:ui",
      "target": ""
    }
  ]
}
</file>

<file path="public/r/styles/default/client-tweet-card.json">
{
  "name": "client-tweet-card",
  "type": "registry:ui",
  "dependencies": [
    "react-tweet"
  ],
  "files": [
    {
      "path": "magicui/client-tweet-card.tsx",
      "content": "\"use client\";\n\nimport { TweetProps, useTweet } from \"react-tweet\";\n\nimport {\n  MagicTweet,\n  TweetNotFound,\n  TweetSkeleton,\n} from \"@/registry/default/magicui/tweet-card\";\n\nconst ClientTweetCard = ({\n  id,\n  apiUrl,\n  fallback = <TweetSkeleton />,\n  components,\n  fetchOptions,\n  onError,\n  ...props\n}: TweetProps & { className?: string }) => {\n  const { data, error, isLoading } = useTweet(id, apiUrl, fetchOptions);\n\n  if (isLoading) return fallback;\n  if (error || !data) {\n    const NotFound = components?.TweetNotFound || TweetNotFound;\n    return <NotFound error={onError ? onError(error) : error} />;\n  }\n\n  return <MagicTweet tweet={data} components={components} {...props} />;\n};\n\nexport default ClientTweetCard;\n",
      "type": "registry:ui",
      "target": ""
    }
  ]
}
</file>

<file path="public/r/styles/default/confetti.json">
{
  "name": "confetti",
  "type": "registry:ui",
  "dependencies": [
    "canvas-confetti",
    "@types/canvas-confetti"
  ],
  "files": [
    {
      "path": "magicui/confetti.tsx",
      "content": "import type { ReactNode } from \"react\";\nimport React, {\n  createContext,\n  forwardRef,\n  useCallback,\n  useEffect,\n  useImperativeHandle,\n  useMemo,\n  useRef,\n} from \"react\";\nimport type {\n  GlobalOptions as ConfettiGlobalOptions,\n  CreateTypes as ConfettiInstance,\n  Options as ConfettiOptions,\n} from \"canvas-confetti\";\nimport confetti from \"canvas-confetti\";\n\nimport { Button, ButtonProps } from \"@/components/ui/button\";\n\ntype Api = {\n  fire: (options?: ConfettiOptions) => void;\n};\n\ntype Props = React.ComponentPropsWithRef<\"canvas\"> & {\n  options?: ConfettiOptions;\n  globalOptions?: ConfettiGlobalOptions;\n  manualstart?: boolean;\n  children?: ReactNode;\n};\n\nexport type ConfettiRef = Api | null;\n\nconst ConfettiContext = createContext<Api>({} as Api);\n\nconst Confetti = forwardRef<ConfettiRef, Props>((props, ref) => {\n  const {\n    options,\n    globalOptions = { resize: true, useWorker: true },\n    manualstart = false,\n    children,\n    ...rest\n  } = props;\n  const instanceRef = useRef<ConfettiInstance | null>(null); // confetti instance\n\n  const canvasRef = useCallback(\n    // https://react.dev/reference/react-dom/components/common#ref-callback\n    // https://reactjs.org/docs/refs-and-the-dom.html#callback-refs\n    (node: HTMLCanvasElement) => {\n      if (node !== null) {\n        // <canvas> is mounted => create the confetti instance\n        if (instanceRef.current) return; // if not already created\n        instanceRef.current = confetti.create(node, {\n          ...globalOptions,\n          resize: true,\n        });\n      } else {\n        // <canvas> is unmounted => reset and destroy instanceRef\n        if (instanceRef.current) {\n          instanceRef.current.reset();\n          instanceRef.current = null;\n        }\n      }\n    },\n    [globalOptions],\n  );\n\n  // `fire` is a function that calls the instance() with `opts` merged with `options`\n  const fire = useCallback(\n    (opts = {}) => instanceRef.current?.({ ...options, ...opts }),\n    [options],\n  );\n\n  const api = useMemo(\n    () => ({\n      fire,\n    }),\n    [fire],\n  );\n\n  useImperativeHandle(ref, () => api, [api]);\n\n  useEffect(() => {\n    if (!manualstart) {\n      fire();\n    }\n  }, [manualstart, fire]);\n\n  return (\n    <ConfettiContext.Provider value={api}>\n      <canvas ref={canvasRef} {...rest} />\n      {children}\n    </ConfettiContext.Provider>\n  );\n});\n\ninterface ConfettiButtonProps extends ButtonProps {\n  options?: ConfettiOptions &\n    ConfettiGlobalOptions & { canvas?: HTMLCanvasElement };\n  children?: React.ReactNode;\n}\n\nfunction ConfettiButton({ options, children, ...props }: ConfettiButtonProps) {\n  const handleClick = (event: React.MouseEvent<HTMLButtonElement>) => {\n    const rect = event.currentTarget.getBoundingClientRect();\n    const x = rect.left + rect.width / 2;\n    const y = rect.top + rect.height / 2;\n    confetti({\n      ...options,\n      origin: {\n        x: x / window.innerWidth,\n        y: y / window.innerHeight,\n      },\n    });\n  };\n\n  return (\n    <Button onClick={handleClick} {...props}>\n      {children}\n    </Button>\n  );\n}\n\nConfetti.displayName = \"Confetti\";\n\nexport { Confetti, ConfettiButton };\n\nexport default Confetti;\n",
      "type": "registry:ui",
      "target": ""
    }
  ]
}
</file>

<file path="public/r/styles/default/cool-mode.json">
{
  "name": "cool-mode",
  "type": "registry:ui",
  "files": [
    {
      "path": "magicui/cool-mode.tsx",
      "content": "import React, { ReactNode, RefObject, useEffect, useRef } from \"react\";\n\nexport interface BaseParticle {\n  element: HTMLElement | SVGSVGElement;\n  left: number;\n  size: number;\n  top: number;\n}\n\nexport interface BaseParticleOptions {\n  particle?: string;\n  size?: number;\n}\n\nexport interface CoolParticle extends BaseParticle {\n  direction: number;\n  speedHorz: number;\n  speedUp: number;\n  spinSpeed: number;\n  spinVal: number;\n}\n\nexport interface CoolParticleOptions extends BaseParticleOptions {\n  particleCount?: number;\n  speedHorz?: number;\n  speedUp?: number;\n}\n\nconst getContainer = () => {\n  const id = \"_coolMode_effect\";\n  let existingContainer = document.getElementById(id);\n\n  if (existingContainer) {\n    return existingContainer;\n  }\n\n  const container = document.createElement(\"div\");\n  container.setAttribute(\"id\", id);\n  container.setAttribute(\n    \"style\",\n    \"overflow:hidden; position:fixed; height:100%; top:0; left:0; right:0; bottom:0; pointer-events:none; z-index:2147483647\",\n  );\n\n  document.body.appendChild(container);\n\n  return container;\n};\n\nlet instanceCounter = 0;\n\nconst applyParticleEffect = (\n  element: HTMLElement,\n  options?: CoolParticleOptions,\n): (() => void) => {\n  instanceCounter++;\n\n  const defaultParticle = \"circle\";\n  const particleType = options?.particle || defaultParticle;\n  const sizes = [15, 20, 25, 35, 45];\n  const limit = 45;\n\n  let particles: CoolParticle[] = [];\n  let autoAddParticle = false;\n  let mouseX = 0;\n  let mouseY = 0;\n\n  const container = getContainer();\n\n  function generateParticle() {\n    const size =\n      options?.size || sizes[Math.floor(Math.random() * sizes.length)];\n    const speedHorz = options?.speedHorz || Math.random() * 10;\n    const speedUp = options?.speedUp || Math.random() * 25;\n    const spinVal = Math.random() * 360;\n    const spinSpeed = Math.random() * 35 * (Math.random() <= 0.5 ? -1 : 1);\n    const top = mouseY - size / 2;\n    const left = mouseX - size / 2;\n    const direction = Math.random() <= 0.5 ? -1 : 1;\n\n    const particle = document.createElement(\"div\");\n\n    if (particleType === \"circle\") {\n      const svgNS = \"http://www.w3.org/2000/svg\";\n      const circleSVG = document.createElementNS(svgNS, \"svg\");\n      const circle = document.createElementNS(svgNS, \"circle\");\n      circle.setAttributeNS(null, \"cx\", (size / 2).toString());\n      circle.setAttributeNS(null, \"cy\", (size / 2).toString());\n      circle.setAttributeNS(null, \"r\", (size / 2).toString());\n      circle.setAttributeNS(\n        null,\n        \"fill\",\n        `hsl(${Math.random() * 360}, 70%, 50%)`,\n      );\n\n      circleSVG.appendChild(circle);\n      circleSVG.setAttribute(\"width\", size.toString());\n      circleSVG.setAttribute(\"height\", size.toString());\n\n      particle.appendChild(circleSVG);\n    } else {\n      particle.innerHTML = `<img src=\"${particleType}\" width=\"${size}\" height=\"${size}\" style=\"border-radius: 50%\">`;\n    }\n\n    particle.style.position = \"absolute\";\n    particle.style.transform = `translate3d(${left}px, ${top}px, 0px) rotate(${spinVal}deg)`;\n\n    container.appendChild(particle);\n\n    particles.push({\n      direction,\n      element: particle,\n      left,\n      size,\n      speedHorz,\n      speedUp,\n      spinSpeed,\n      spinVal,\n      top,\n    });\n  }\n\n  function refreshParticles() {\n    particles.forEach((p) => {\n      p.left = p.left - p.speedHorz * p.direction;\n      p.top = p.top - p.speedUp;\n      p.speedUp = Math.min(p.size, p.speedUp - 1);\n      p.spinVal = p.spinVal + p.spinSpeed;\n\n      if (\n        p.top >=\n        Math.max(window.innerHeight, document.body.clientHeight) + p.size\n      ) {\n        particles = particles.filter((o) => o !== p);\n        p.element.remove();\n      }\n\n      p.element.setAttribute(\n        \"style\",\n        [\n          \"position:absolute\",\n          \"will-change:transform\",\n          `top:${p.top}px`,\n          `left:${p.left}px`,\n          `transform:rotate(${p.spinVal}deg)`,\n        ].join(\";\"),\n      );\n    });\n  }\n\n  let animationFrame: number | undefined;\n\n  let lastParticleTimestamp = 0;\n  const particleGenerationDelay = 30;\n\n  function loop() {\n    const currentTime = performance.now();\n    if (\n      autoAddParticle &&\n      particles.length < limit &&\n      currentTime - lastParticleTimestamp > particleGenerationDelay\n    ) {\n      generateParticle();\n      lastParticleTimestamp = currentTime;\n    }\n\n    refreshParticles();\n    animationFrame = requestAnimationFrame(loop);\n  }\n\n  loop();\n\n  const isTouchInteraction = \"ontouchstart\" in window;\n\n  const tap = isTouchInteraction ? \"touchstart\" : \"mousedown\";\n  const tapEnd = isTouchInteraction ? \"touchend\" : \"mouseup\";\n  const move = isTouchInteraction ? \"touchmove\" : \"mousemove\";\n\n  const updateMousePosition = (e: MouseEvent | TouchEvent) => {\n    if (\"touches\" in e) {\n      mouseX = e.touches?.[0].clientX;\n      mouseY = e.touches?.[0].clientY;\n    } else {\n      mouseX = e.clientX;\n      mouseY = e.clientY;\n    }\n  };\n\n  const tapHandler = (e: MouseEvent | TouchEvent) => {\n    updateMousePosition(e);\n    autoAddParticle = true;\n  };\n\n  const disableAutoAddParticle = () => {\n    autoAddParticle = false;\n  };\n\n  element.addEventListener(move, updateMousePosition, { passive: true });\n  element.addEventListener(tap, tapHandler, { passive: true });\n  element.addEventListener(tapEnd, disableAutoAddParticle, { passive: true });\n  element.addEventListener(\"mouseleave\", disableAutoAddParticle, {\n    passive: true,\n  });\n\n  return () => {\n    element.removeEventListener(move, updateMousePosition);\n    element.removeEventListener(tap, tapHandler);\n    element.removeEventListener(tapEnd, disableAutoAddParticle);\n    element.removeEventListener(\"mouseleave\", disableAutoAddParticle);\n\n    const interval = setInterval(() => {\n      if (animationFrame && particles.length === 0) {\n        cancelAnimationFrame(animationFrame);\n        clearInterval(interval);\n\n        if (--instanceCounter === 0) {\n          container.remove();\n        }\n      }\n    }, 500);\n  };\n};\n\ninterface CoolModeProps {\n  children: ReactNode;\n  options?: CoolParticleOptions;\n}\n\nexport const CoolMode: React.FC<CoolModeProps> = ({ children, options }) => {\n  const ref = useRef<HTMLElement>(null);\n\n  useEffect(() => {\n    if (ref.current) {\n      return applyParticleEffect(ref.current, options);\n    }\n  }, [options]);\n\n  return React.cloneElement(children as React.ReactElement, { ref });\n};\n",
      "type": "registry:ui",
      "target": ""
    }
  ]
}
</file>

<file path="public/r/styles/default/dock.json">
{
  "name": "dock",
  "type": "registry:ui",
  "dependencies": [
    "framer-motion"
  ],
  "files": [
    {
      "path": "magicui/dock.tsx",
      "content": "\"use client\";\n\nimport React, { PropsWithChildren, useRef } from \"react\";\nimport { cva, type VariantProps } from \"class-variance-authority\";\nimport { motion, useMotionValue, useSpring, useTransform } from \"framer-motion\";\n\nimport { cn } from \"@/lib/utils\";\n\nexport interface DockProps extends VariantProps<typeof dockVariants> {\n  className?: string;\n  magnification?: number;\n  distance?: number;\n  direction?: \"top\" | \"middle\" | \"bottom\";\n  children: React.ReactNode;\n}\n\nconst DEFAULT_MAGNIFICATION = 60;\nconst DEFAULT_DISTANCE = 140;\n\nconst dockVariants = cva(\n  \"mx-auto w-max mt-8 h-[58px] p-2 flex gap-2 rounded-2xl border supports-backdrop-blur:bg-white/10 supports-backdrop-blur:dark:bg-black/10 backdrop-blur-md\",\n);\n\nconst Dock = React.forwardRef<HTMLDivElement, DockProps>(\n  (\n    {\n      className,\n      children,\n      magnification = DEFAULT_MAGNIFICATION,\n      distance = DEFAULT_DISTANCE,\n      direction = \"bottom\",\n      ...props\n    },\n    ref,\n  ) => {\n    const mouseX = useMotionValue(Infinity);\n\n    const renderChildren = () => {\n      return React.Children.map(children, (child: any) => {\n        return React.cloneElement(child, {\n          mouseX: mouseX,\n          magnification: magnification,\n          distance: distance,\n        });\n      });\n    };\n\n    return (\n      <motion.div\n        ref={ref}\n        onMouseMove={(e) => mouseX.set(e.pageX)}\n        onMouseLeave={() => mouseX.set(Infinity)}\n        {...props}\n        className={cn(dockVariants({ className }), {\n          \"items-start\": direction === \"top\",\n          \"items-center\": direction === \"middle\",\n          \"items-end\": direction === \"bottom\",\n        })}\n      >\n        {renderChildren()}\n      </motion.div>\n    );\n  },\n);\n\nDock.displayName = \"Dock\";\n\nexport interface DockIconProps {\n  size?: number;\n  magnification?: number;\n  distance?: number;\n  mouseX?: any;\n  className?: string;\n  children?: React.ReactNode;\n  props?: PropsWithChildren;\n}\n\nconst DockIcon = ({\n  size,\n  magnification = DEFAULT_MAGNIFICATION,\n  distance = DEFAULT_DISTANCE,\n  mouseX,\n  className,\n  children,\n  ...props\n}: DockIconProps) => {\n  const ref = useRef<HTMLDivElement>(null);\n\n  const distanceCalc = useTransform(mouseX, (val: number) => {\n    const bounds = ref.current?.getBoundingClientRect() ?? { x: 0, width: 0 };\n\n    return val - bounds.x - bounds.width / 2;\n  });\n\n  let widthSync = useTransform(\n    distanceCalc,\n    [-distance, 0, distance],\n    [40, magnification, 40],\n  );\n\n  let width = useSpring(widthSync, {\n    mass: 0.1,\n    stiffness: 150,\n    damping: 12,\n  });\n\n  return (\n    <motion.div\n      ref={ref}\n      style={{ width }}\n      className={cn(\n        \"flex aspect-square cursor-pointer items-center justify-center rounded-full\",\n        className,\n      )}\n      {...props}\n    >\n      {children}\n    </motion.div>\n  );\n};\n\nDockIcon.displayName = \"DockIcon\";\n\nexport { Dock, DockIcon, dockVariants };\n",
      "type": "registry:ui",
      "target": ""
    }
  ]
}
</file>

<file path="public/r/styles/default/dot-pattern.json">
{
  "name": "dot-pattern",
  "type": "registry:ui",
  "files": [
    {
      "path": "magicui/dot-pattern.tsx",
      "content": "import { useId } from \"react\";\n\nimport { cn } from \"@/lib/utils\";\n\ninterface DotPatternProps {\n  width?: any;\n  height?: any;\n  x?: any;\n  y?: any;\n  cx?: any;\n  cy?: any;\n  cr?: any;\n  className?: string;\n  [key: string]: any;\n}\nexport function DotPattern({\n  width = 16,\n  height = 16,\n  x = 0,\n  y = 0,\n  cx = 1,\n  cy = 1,\n  cr = 1,\n  className,\n  ...props\n}: DotPatternProps) {\n  const id = useId();\n\n  return (\n    <svg\n      aria-hidden=\"true\"\n      className={cn(\n        \"pointer-events-none absolute inset-0 h-full w-full fill-neutral-400/80\",\n        className,\n      )}\n      {...props}\n    >\n      <defs>\n        <pattern\n          id={id}\n          width={width}\n          height={height}\n          patternUnits=\"userSpaceOnUse\"\n          patternContentUnits=\"userSpaceOnUse\"\n          x={x}\n          y={y}\n        >\n          <circle id=\"pattern-circle\" cx={cx} cy={cy} r={cr} />\n        </pattern>\n      </defs>\n      <rect width=\"100%\" height=\"100%\" strokeWidth={0} fill={`url(#${id})`} />\n    </svg>\n  );\n}\n\nexport default DotPattern;\n",
      "type": "registry:ui",
      "target": ""
    }
  ]
}
</file>

<file path="public/r/styles/default/fade-text.json">
{
  "name": "fade-text",
  "type": "registry:ui",
  "dependencies": [
    "framer-motion"
  ],
  "files": [
    {
      "path": "magicui/fade-text.tsx",
      "content": "\"use client\";\n\nimport { useMemo } from \"react\";\nimport { motion, Variants } from \"framer-motion\";\n\ntype FadeTextProps = {\n  className?: string;\n  direction?: \"up\" | \"down\" | \"left\" | \"right\";\n  framerProps?: Variants;\n  text: string;\n};\n\nexport function FadeText({\n  direction = \"up\",\n  className,\n  framerProps = {\n    hidden: { opacity: 0 },\n    show: { opacity: 1, transition: { type: \"spring\" } },\n  },\n  text,\n}: FadeTextProps) {\n  const directionOffset = useMemo(() => {\n    const map = { up: 10, down: -10, left: -10, right: 10 };\n    return map[direction];\n  }, [direction]);\n\n  const axis = direction === \"up\" || direction === \"down\" ? \"y\" : \"x\";\n\n  const FADE_ANIMATION_VARIANTS = useMemo(() => {\n    const { hidden, show, ...rest } = framerProps as {\n      [name: string]: { [name: string]: number; opacity: number };\n    };\n\n    return {\n      ...rest,\n      hidden: {\n        ...(hidden ?? {}),\n        opacity: hidden?.opacity ?? 0,\n        [axis]: hidden?.[axis] ?? directionOffset,\n      },\n      show: {\n        ...(show ?? {}),\n        opacity: show?.opacity ?? 1,\n        [axis]: show?.[axis] ?? 0,\n      },\n    };\n  }, [directionOffset, axis, framerProps]);\n\n  return (\n    <motion.div\n      initial=\"hidden\"\n      animate=\"show\"\n      viewport={{ once: true }}\n      variants={FADE_ANIMATION_VARIANTS}\n    >\n      <motion.span className={className}>{text}</motion.span>\n    </motion.div>\n  );\n}\n",
      "type": "registry:ui",
      "target": ""
    }
  ]
}
</file>

<file path="public/r/styles/default/file-tree.json">
{
  "name": "file-tree",
  "type": "registry:ui",
  "files": [
    {
      "path": "magicui/file-tree.tsx",
      "content": "\"use client\";\n\nimport React, {\n  createContext,\n  forwardRef,\n  useCallback,\n  useContext,\n  useEffect,\n  useState,\n} from \"react\";\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\";\nimport { FileIcon, FolderIcon, FolderOpenIcon } from \"lucide-react\";\n\nimport { cn } from \"@/lib/utils\";\nimport { Button } from \"@/components/ui/button\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\n\ntype TreeViewElement = {\n  id: string;\n  name: string;\n  isSelectable?: boolean;\n  children?: TreeViewElement[];\n};\n\ntype TreeContextProps = {\n  selectedId: string | undefined;\n  expandedItems: string[] | undefined;\n  indicator: boolean;\n  handleExpand: (id: string) => void;\n  selectItem: (id: string) => void;\n  setExpandedItems?: React.Dispatch<React.SetStateAction<string[] | undefined>>;\n  openIcon?: React.ReactNode;\n  closeIcon?: React.ReactNode;\n  direction: \"rtl\" | \"ltr\";\n};\n\nconst TreeContext = createContext<TreeContextProps | null>(null);\n\nconst useTree = () => {\n  const context = useContext(TreeContext);\n  if (!context) {\n    throw new Error(\"useTree must be used within a TreeProvider\");\n  }\n  return context;\n};\n\ninterface TreeViewComponentProps extends React.HTMLAttributes<HTMLDivElement> {}\n\ntype Direction = \"rtl\" | \"ltr\" | undefined;\n\ntype TreeViewProps = {\n  initialSelectedId?: string;\n  indicator?: boolean;\n  elements?: TreeViewElement[];\n  initialExpandedItems?: string[];\n  openIcon?: React.ReactNode;\n  closeIcon?: React.ReactNode;\n} & TreeViewComponentProps;\n\nconst Tree = forwardRef<HTMLDivElement, TreeViewProps>(\n  (\n    {\n      className,\n      elements,\n      initialSelectedId,\n      initialExpandedItems,\n      children,\n      indicator = true,\n      openIcon,\n      closeIcon,\n      dir,\n      ...props\n    },\n    ref,\n  ) => {\n    const [selectedId, setSelectedId] = useState<string | undefined>(\n      initialSelectedId,\n    );\n    const [expandedItems, setExpandedItems] = useState<string[] | undefined>(\n      initialExpandedItems,\n    );\n\n    const selectItem = useCallback((id: string) => {\n      setSelectedId(id);\n    }, []);\n\n    const handleExpand = useCallback((id: string) => {\n      setExpandedItems((prev) => {\n        if (prev?.includes(id)) {\n          return prev.filter((item) => item !== id);\n        }\n        return [...(prev ?? []), id];\n      });\n    }, []);\n\n    const expandSpecificTargetedElements = useCallback(\n      (elements?: TreeViewElement[], selectId?: string) => {\n        if (!elements || !selectId) return;\n        const findParent = (\n          currentElement: TreeViewElement,\n          currentPath: string[] = [],\n        ) => {\n          const isSelectable = currentElement.isSelectable ?? true;\n          const newPath = [...currentPath, currentElement.id];\n          if (currentElement.id === selectId) {\n            if (isSelectable) {\n              setExpandedItems((prev) => [...(prev ?? []), ...newPath]);\n            } else {\n              if (newPath.includes(currentElement.id)) {\n                newPath.pop();\n                setExpandedItems((prev) => [...(prev ?? []), ...newPath]);\n              }\n            }\n            return;\n          }\n          if (\n            isSelectable &&\n            currentElement.children &&\n            currentElement.children.length > 0\n          ) {\n            currentElement.children.forEach((child) => {\n              findParent(child, newPath);\n            });\n          }\n        };\n        elements.forEach((element) => {\n          findParent(element);\n        });\n      },\n      [],\n    );\n\n    useEffect(() => {\n      if (initialSelectedId) {\n        expandSpecificTargetedElements(elements, initialSelectedId);\n      }\n    }, [initialSelectedId, elements]);\n\n    const direction = dir === \"rtl\" ? \"rtl\" : \"ltr\";\n\n    return (\n      <TreeContext.Provider\n        value={{\n          selectedId,\n          expandedItems,\n          handleExpand,\n          selectItem,\n          setExpandedItems,\n          indicator,\n          openIcon,\n          closeIcon,\n          direction,\n        }}\n      >\n        <div className={cn(\"size-full\", className)}>\n          <ScrollArea\n            ref={ref}\n            className=\"h-full relative px-2\"\n            dir={dir as Direction}\n          >\n            <AccordionPrimitive.Root\n              {...props}\n              type=\"multiple\"\n              defaultValue={expandedItems}\n              value={expandedItems}\n              className=\"flex flex-col gap-1\"\n              onValueChange={(value) =>\n                setExpandedItems((prev) => [...(prev ?? []), value[0]])\n              }\n              dir={dir as Direction}\n            >\n              {children}\n            </AccordionPrimitive.Root>\n          </ScrollArea>\n        </div>\n      </TreeContext.Provider>\n    );\n  },\n);\n\nTree.displayName = \"Tree\";\n\nconst TreeIndicator = forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { direction } = useTree();\n\n  return (\n    <div\n      dir={direction}\n      ref={ref}\n      className={cn(\n        \"h-full w-px bg-muted absolute left-1.5 rtl:right-1.5 py-3 rounded-md hover:bg-slate-300 duration-300 ease-in-out\",\n        className,\n      )}\n      {...props}\n    />\n  );\n});\n\nTreeIndicator.displayName = \"TreeIndicator\";\n\ninterface FolderComponentProps\n  extends React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item> {}\n\ntype FolderProps = {\n  expandedItems?: string[];\n  element: string;\n  isSelectable?: boolean;\n  isSelect?: boolean;\n} & FolderComponentProps;\n\nconst Folder = forwardRef<\n  HTMLDivElement,\n  FolderProps & React.HTMLAttributes<HTMLDivElement>\n>(\n  (\n    {\n      className,\n      element,\n      value,\n      isSelectable = true,\n      isSelect,\n      children,\n      ...props\n    },\n    ref,\n  ) => {\n    const {\n      direction,\n      handleExpand,\n      expandedItems,\n      indicator,\n      setExpandedItems,\n      openIcon,\n      closeIcon,\n    } = useTree();\n\n    return (\n      <AccordionPrimitive.Item\n        {...props}\n        value={value}\n        className=\"relative overflow-hidden h-full \"\n      >\n        <AccordionPrimitive.Trigger\n          className={cn(\n            `flex items-center gap-1 text-sm rounded-md`,\n            className,\n            {\n              \"bg-muted rounded-md\": isSelect && isSelectable,\n              \"cursor-pointer\": isSelectable,\n              \"cursor-not-allowed opacity-50\": !isSelectable,\n            },\n          )}\n          disabled={!isSelectable}\n          onClick={() => handleExpand(value)}\n        >\n          {expandedItems?.includes(value)\n            ? (openIcon ?? <FolderOpenIcon className=\"size-4\" />)\n            : (closeIcon ?? <FolderIcon className=\"size-4\" />)}\n          <span>{element}</span>\n        </AccordionPrimitive.Trigger>\n        <AccordionPrimitive.Content className=\"text-sm data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down relative overflow-hidden h-full\">\n          {element && indicator && <TreeIndicator aria-hidden=\"true\" />}\n          <AccordionPrimitive.Root\n            dir={direction}\n            type=\"multiple\"\n            className=\"flex flex-col gap-1 py-1 ml-5 rtl:mr-5 \"\n            defaultValue={expandedItems}\n            value={expandedItems}\n            onValueChange={(value) => {\n              setExpandedItems?.((prev) => [...(prev ?? []), value[0]]);\n            }}\n          >\n            {children}\n          </AccordionPrimitive.Root>\n        </AccordionPrimitive.Content>\n      </AccordionPrimitive.Item>\n    );\n  },\n);\n\nFolder.displayName = \"Folder\";\n\nconst File = forwardRef<\n  HTMLButtonElement,\n  {\n    value: string;\n    handleSelect?: (id: string) => void;\n    isSelectable?: boolean;\n    isSelect?: boolean;\n    fileIcon?: React.ReactNode;\n  } & React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(\n  (\n    {\n      value,\n      className,\n      handleSelect,\n      isSelectable = true,\n      isSelect,\n      fileIcon,\n      children,\n      ...props\n    },\n    ref,\n  ) => {\n    const { direction, selectedId, selectItem } = useTree();\n    const isSelected = isSelect ?? selectedId === value;\n    return (\n      <AccordionPrimitive.Item value={value} className=\"relative\">\n        <AccordionPrimitive.Trigger\n          ref={ref}\n          {...props}\n          dir={direction}\n          disabled={!isSelectable}\n          aria-label=\"File\"\n          className={cn(\n            \"flex items-center gap-1 cursor-pointer text-sm pr-1 rtl:pl-1 rtl:pr-0 rounded-md  duration-200 ease-in-out\",\n            {\n              \"bg-muted\": isSelected && isSelectable,\n            },\n            isSelectable ? \"cursor-pointer\" : \"opacity-50 cursor-not-allowed\",\n            className,\n          )}\n          onClick={() => selectItem(value)}\n        >\n          {fileIcon ?? <FileIcon className=\"size-4\" />}\n          {children}\n        </AccordionPrimitive.Trigger>\n      </AccordionPrimitive.Item>\n    );\n  },\n);\n\nFile.displayName = \"File\";\n\nconst CollapseButton = forwardRef<\n  HTMLButtonElement,\n  {\n    elements: TreeViewElement[];\n    expandAll?: boolean;\n  } & React.HTMLAttributes<HTMLButtonElement>\n>(({ className, elements, expandAll = false, children, ...props }, ref) => {\n  const { expandedItems, setExpandedItems } = useTree();\n\n  const expendAllTree = useCallback((elements: TreeViewElement[]) => {\n    const expandTree = (element: TreeViewElement) => {\n      const isSelectable = element.isSelectable ?? true;\n      if (isSelectable && element.children && element.children.length > 0) {\n        setExpandedItems?.((prev) => [...(prev ?? []), element.id]);\n        element.children.forEach(expandTree);\n      }\n    };\n\n    elements.forEach(expandTree);\n  }, []);\n\n  const closeAll = useCallback(() => {\n    setExpandedItems?.([]);\n  }, []);\n\n  useEffect(() => {\n    console.log(expandAll);\n    if (expandAll) {\n      expendAllTree(elements);\n    }\n  }, [expandAll]);\n\n  return (\n    <Button\n      variant={\"ghost\"}\n      className=\"h-8 w-fit p-1 absolute bottom-1 right-2\"\n      onClick={\n        expandedItems && expandedItems.length > 0\n          ? closeAll\n          : () => expendAllTree(elements)\n      }\n      ref={ref}\n      {...props}\n    >\n      {children}\n      <span className=\"sr-only\">Toggle</span>\n    </Button>\n  );\n});\n\nCollapseButton.displayName = \"CollapseButton\";\n\nexport { CollapseButton, File, Folder, Tree, type TreeViewElement };\n",
      "type": "registry:ui",
      "target": ""
    }
  ]
}
</file>

<file path="public/r/styles/default/flickering-grid.json">
{
  "name": "flickering-grid",
  "type": "registry:ui",
  "dependencies": [
    "framer-motion"
  ],
  "files": [
    {
      "path": "magicui/flickering-grid.tsx",
      "content": "\"use client\";\n\nimport React, {\n  useCallback,\n  useEffect,\n  useMemo,\n  useRef,\n  useState,\n} from \"react\";\n\ninterface FlickeringGridProps {\n  squareSize?: number;\n  gridGap?: number;\n  flickerChance?: number;\n  color?: string;\n  width?: number;\n  height?: number;\n  className?: string;\n  maxOpacity?: number;\n}\n\nconst FlickeringGrid: React.FC<FlickeringGridProps> = ({\n  squareSize = 4,\n  gridGap = 6,\n  flickerChance = 0.3,\n  color = \"rgb(0, 0, 0)\",\n  width,\n  height,\n  className,\n  maxOpacity = 0.3,\n}) => {\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  const [isInView, setIsInView] = useState(false);\n\n  const memoizedColor = useMemo(() => {\n    const toRGBA = (color: string) => {\n      if (typeof window === \"undefined\") {\n        return `rgba(0, 0, 0,`;\n      }\n      const canvas = document.createElement(\"canvas\");\n      canvas.width = canvas.height = 1;\n      const ctx = canvas.getContext(\"2d\");\n      if (!ctx) return \"rgba(255, 0, 0,\";\n      ctx.fillStyle = color;\n      ctx.fillRect(0, 0, 1, 1);\n      const [r, g, b] = ctx.getImageData(0, 0, 1, 1).data;\n      return `rgba(${r}, ${g}, ${b},`;\n    };\n    return toRGBA(color);\n  }, [color]);\n\n  const setupCanvas = useCallback(\n    (canvas: HTMLCanvasElement) => {\n      const canvasWidth = width || canvas.clientWidth;\n      const canvasHeight = height || canvas.clientHeight;\n      const dpr = window.devicePixelRatio || 1;\n      canvas.width = canvasWidth * dpr;\n      canvas.height = canvasHeight * dpr;\n      canvas.style.width = `${canvasWidth}px`;\n      canvas.style.height = `${canvasHeight}px`;\n      const cols = Math.floor(canvasWidth / (squareSize + gridGap));\n      const rows = Math.floor(canvasHeight / (squareSize + gridGap));\n\n      const squares = new Float32Array(cols * rows);\n      for (let i = 0; i < squares.length; i++) {\n        squares[i] = Math.random() * maxOpacity;\n      }\n\n      return {\n        width: canvasWidth,\n        height: canvasHeight,\n        cols,\n        rows,\n        squares,\n        dpr,\n      };\n    },\n    [squareSize, gridGap, width, height, maxOpacity],\n  );\n\n  const updateSquares = useCallback(\n    (squares: Float32Array, deltaTime: number) => {\n      for (let i = 0; i < squares.length; i++) {\n        if (Math.random() < flickerChance * deltaTime) {\n          squares[i] = Math.random() * maxOpacity;\n        }\n      }\n    },\n    [flickerChance, maxOpacity],\n  );\n\n  const drawGrid = useCallback(\n    (\n      ctx: CanvasRenderingContext2D,\n      width: number,\n      height: number,\n      cols: number,\n      rows: number,\n      squares: Float32Array,\n      dpr: number,\n    ) => {\n      ctx.clearRect(0, 0, width, height);\n      ctx.fillStyle = \"transparent\";\n      ctx.fillRect(0, 0, width, height);\n\n      for (let i = 0; i < cols; i++) {\n        for (let j = 0; j < rows; j++) {\n          const opacity = squares[i * rows + j];\n          ctx.fillStyle = `${memoizedColor}${opacity})`;\n          ctx.fillRect(\n            i * (squareSize + gridGap) * dpr,\n            j * (squareSize + gridGap) * dpr,\n            squareSize * dpr,\n            squareSize * dpr,\n          );\n        }\n      }\n    },\n    [memoizedColor, squareSize, gridGap],\n  );\n\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n\n    const ctx = canvas.getContext(\"2d\");\n    if (!ctx) return;\n\n    let animationFrameId: number;\n    let { width, height, cols, rows, squares, dpr } = setupCanvas(canvas);\n\n    let lastTime = 0;\n    const animate = (time: number) => {\n      if (!isInView) return;\n\n      const deltaTime = (time - lastTime) / 1000;\n      lastTime = time;\n\n      updateSquares(squares, deltaTime);\n      drawGrid(ctx, width * dpr, height * dpr, cols, rows, squares, dpr);\n      animationFrameId = requestAnimationFrame(animate);\n    };\n\n    const handleResize = () => {\n      ({ width, height, cols, rows, squares, dpr } = setupCanvas(canvas));\n    };\n\n    const observer = new IntersectionObserver(\n      ([entry]) => {\n        setIsInView(entry.isIntersecting);\n      },\n      { threshold: 0 },\n    );\n\n    observer.observe(canvas);\n\n    window.addEventListener(\"resize\", handleResize);\n\n    if (isInView) {\n      animationFrameId = requestAnimationFrame(animate);\n    }\n\n    return () => {\n      window.removeEventListener(\"resize\", handleResize);\n      cancelAnimationFrame(animationFrameId);\n      observer.disconnect();\n    };\n  }, [setupCanvas, updateSquares, drawGrid, width, height, isInView]);\n\n  return (\n    <canvas\n      ref={canvasRef}\n      className={`size-full pointer-events-none ${className}`}\n      style={{\n        width: width || \"100%\",\n        height: height || \"100%\",\n      }}\n      width={width}\n      height={height}\n    />\n  );\n};\n\nexport default FlickeringGrid;\n",
      "type": "registry:ui",
      "target": ""
    }
  ]
}
</file>

<file path="public/r/styles/default/flip-text.json">
{
  "name": "flip-text",
  "type": "registry:ui",
  "dependencies": [
    "framer-motion"
  ],
  "files": [
    {
      "path": "magicui/flip-text.tsx",
      "content": "\"use client\";\n\nimport { AnimatePresence, motion, Variants } from \"framer-motion\";\n\nimport { cn } from \"@/lib/utils\";\n\ninterface SlightFlipProps {\n  word: string;\n  duration?: number;\n  delayMultiple?: number;\n  framerProps?: Variants;\n  className?: string;\n}\n\nexport default function SlightFlip({\n  word,\n  duration = 0.5,\n  delayMultiple = 0.08,\n  framerProps = {\n    hidden: { rotateX: -90, opacity: 0 },\n    visible: { rotateX: 0, opacity: 1 },\n  },\n  className,\n}: SlightFlipProps) {\n  return (\n    <div className=\"flex justify-center space-x-2\">\n      <AnimatePresence mode=\"wait\">\n        {word.split(\"\").map((char, i) => (\n          <motion.span\n            key={i}\n            initial=\"hidden\"\n            animate=\"visible\"\n            exit=\"hidden\"\n            variants={framerProps}\n            transition={{ duration, delay: i * delayMultiple }}\n            className={cn(\"origin-center drop-shadow-sm\", className)}\n          >\n            {char}\n          </motion.span>\n        ))}\n      </AnimatePresence>\n    </div>\n  );\n}\n",
      "type": "registry:ui",
      "target": ""
    }
  ]
}
</file>

<file path="public/r/styles/default/globe.json">
{
  "name": "globe",
  "type": "registry:ui",
  "dependencies": [
    "cobe",
    "react-spring"
  ],
  "files": [
    {
      "path": "magicui/globe.tsx",
      "content": "\"use client\";\n\nimport createGlobe, { COBEOptions } from \"cobe\";\nimport { useCallback, useEffect, useRef, useState } from \"react\";\n\nimport { cn } from \"@/lib/utils\";\n\nconst GLOBE_CONFIG: COBEOptions = {\n  width: 800,\n  height: 800,\n  onRender: () => {},\n  devicePixelRatio: 2,\n  phi: 0,\n  theta: 0.3,\n  dark: 0,\n  diffuse: 0.4,\n  mapSamples: 16000,\n  mapBrightness: 1.2,\n  baseColor: [1, 1, 1],\n  markerColor: [251 / 255, 100 / 255, 21 / 255],\n  glowColor: [1, 1, 1],\n  markers: [\n    { location: [14.5995, 120.9842], size: 0.03 },\n    { location: [19.076, 72.8777], size: 0.1 },\n    { location: [23.8103, 90.4125], size: 0.05 },\n    { location: [30.0444, 31.2357], size: 0.07 },\n    { location: [39.9042, 116.4074], size: 0.08 },\n    { location: [-23.5505, -46.6333], size: 0.1 },\n    { location: [19.4326, -99.1332], size: 0.1 },\n    { location: [40.7128, -74.006], size: 0.1 },\n    { location: [34.6937, 135.5022], size: 0.05 },\n    { location: [41.0082, 28.9784], size: 0.06 },\n  ],\n};\n\nexport default function Globe({\n  className,\n  config = GLOBE_CONFIG,\n}: {\n  className?: string;\n  config?: COBEOptions;\n}) {\n  let phi = 0;\n  let width = 0;\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  const pointerInteracting = useRef(null);\n  const pointerInteractionMovement = useRef(0);\n  const [r, setR] = useState(0);\n\n  const updatePointerInteraction = (value: any) => {\n    pointerInteracting.current = value;\n    if (canvasRef.current) {\n      canvasRef.current.style.cursor = value ? \"grabbing\" : \"grab\";\n    }\n  };\n\n  const updateMovement = (clientX: any) => {\n    if (pointerInteracting.current !== null) {\n      const delta = clientX - pointerInteracting.current;\n      pointerInteractionMovement.current = delta;\n      setR(delta / 200);\n    }\n  };\n\n  const onRender = useCallback(\n    (state: Record<string, any>) => {\n      if (!pointerInteracting.current) phi += 0.005;\n      state.phi = phi + r;\n      state.width = width * 2;\n      state.height = width * 2;\n    },\n    [r],\n  );\n\n  const onResize = () => {\n    if (canvasRef.current) {\n      width = canvasRef.current.offsetWidth;\n    }\n  };\n\n  useEffect(() => {\n    window.addEventListener(\"resize\", onResize);\n    onResize();\n\n    const globe = createGlobe(canvasRef.current!, {\n      ...config,\n      width: width * 2,\n      height: width * 2,\n      onRender,\n    });\n\n    setTimeout(() => (canvasRef.current!.style.opacity = \"1\"));\n    return () => globe.destroy();\n  }, []);\n\n  return (\n    <div\n      className={cn(\n        \"absolute inset-0 mx-auto aspect-[1/1] w-full max-w-[600px]\",\n        className,\n      )}\n    >\n      <canvas\n        className={cn(\n          \"size-full opacity-0 transition-opacity duration-500 [contain:layout_paint_size]\",\n        )}\n        ref={canvasRef}\n        onPointerDown={(e) =>\n          updatePointerInteraction(\n            e.clientX - pointerInteractionMovement.current,\n          )\n        }\n        onPointerUp={() => updatePointerInteraction(null)}\n        onPointerOut={() => updatePointerInteraction(null)}\n        onMouseMove={(e) => updateMovement(e.clientX)}\n        onTouchMove={(e) =>\n          e.touches[0] && updateMovement(e.touches[0].clientX)\n        }\n      />\n    </div>\n  );\n}\n",
      "type": "registry:ui",
      "target": ""
    }
  ]
}
</file>

<file path="public/r/styles/default/gradual-spacing.json">
{
  "name": "gradual-spacing",
  "type": "registry:ui",
  "dependencies": [
    "framer-motion"
  ],
  "files": [
    {
      "path": "magicui/gradual-spacing.tsx",
      "content": "\"use client\";\n\nimport { AnimatePresence, motion, Variants } from \"framer-motion\";\n\nimport { cn } from \"@/lib/utils\";\n\ninterface GradualSpacingProps {\n  text: string;\n  duration?: number;\n  delayMultiple?: number;\n  framerProps?: Variants;\n  className?: string;\n}\n\nexport default function GradualSpacing({\n  text,\n  duration = 0.5,\n  delayMultiple = 0.04,\n  framerProps = {\n    hidden: { opacity: 0, x: -20 },\n    visible: { opacity: 1, x: 0 },\n  },\n  className,\n}: GradualSpacingProps) {\n  return (\n    <div className=\"flex justify-center space-x-1\">\n      <AnimatePresence>\n        {text.split(\"\").map((char, i) => (\n          <motion.h1\n            key={i}\n            initial=\"hidden\"\n            animate=\"visible\"\n            exit=\"hidden\"\n            variants={framerProps}\n            transition={{ duration, delay: i * delayMultiple }}\n            className={cn(\"drop-shadow-sm \", className)}\n          >\n            {char === \" \" ? <span>&nbsp;</span> : char}\n          </motion.h1>\n        ))}\n      </AnimatePresence>\n    </div>\n  );\n}\n",
      "type": "registry:ui",
      "target": ""
    }
  ]
}
</file>

<file path="public/r/styles/default/grid-pattern.json">
{
  "name": "grid-pattern",
  "type": "registry:ui",
  "files": [
    {
      "path": "magicui/grid-pattern.tsx",
      "content": "import { useId } from \"react\";\n\nimport { cn } from \"@/lib/utils\";\n\ninterface GridPatternProps {\n  width?: any;\n  height?: any;\n  x?: any;\n  y?: any;\n  squares?: Array<[x: number, y: number]>;\n  strokeDasharray?: any;\n  className?: string;\n  [key: string]: any;\n}\n\nexport function GridPattern({\n  width = 40,\n  height = 40,\n  x = -1,\n  y = -1,\n  strokeDasharray = 0,\n  squares,\n  className,\n  ...props\n}: GridPatternProps) {\n  const id = useId();\n\n  return (\n    <svg\n      aria-hidden=\"true\"\n      className={cn(\n        \"pointer-events-none absolute inset-0 h-full w-full fill-gray-400/30 stroke-gray-400/30\",\n        className,\n      )}\n      {...props}\n    >\n      <defs>\n        <pattern\n          id={id}\n          width={width}\n          height={height}\n          patternUnits=\"userSpaceOnUse\"\n          x={x}\n          y={y}\n        >\n          <path\n            d={`M.5 ${height}V.5H${width}`}\n            fill=\"none\"\n            strokeDasharray={strokeDasharray}\n          />\n        </pattern>\n      </defs>\n      <rect width=\"100%\" height=\"100%\" strokeWidth={0} fill={`url(#${id})`} />\n      {squares && (\n        <svg x={x} y={y} className=\"overflow-visible\">\n          {squares.map(([x, y]) => (\n            <rect\n              strokeWidth=\"0\"\n              key={`${x}-${y}`}\n              width={width - 1}\n              height={height - 1}\n              x={x * width + 1}\n              y={y * height + 1}\n            />\n          ))}\n        </svg>\n      )}\n    </svg>\n  );\n}\n\nexport default GridPattern;\n",
      "type": "registry:ui",
      "target": ""
    }
  ]
}
</file>

<file path="public/r/styles/default/hero-tes.json">
{
  "name": "hero-tes",
  "type": "registry:ui",
  "files": [
    {
      "path": "magicui/hero-tes.tsx",
      "content": "export default function HeroTes() {\n  return (\n    <>\n      <section className=\"bg-gray-50\">\n        <div className=\"mx-auto max-w-screen-xl px-4 py-32 lg:flex lg:h-screen lg:items-center\">\n          <div className=\"mx-auto max-w-xl text-center\">\n            <h1 className=\"text-3xl font-extrabold sm:text-5xl\">\n              Understand User Flow.\n              <strong className=\"font-extrabold text-red-700 sm:block\">\n                {\" \"}\n                Increase Conversion.{\" \"}\n              </strong>\n            </h1>\n\n            <p className=\"mt-4 sm:text-xl/relaxed\">\n              Lorem ipsum dolor sit amet consectetur, adipisicing elit. Nesciunt\n              illo tenetur fuga ducimus numquam ea!\n            </p>\n\n            <div className=\"mt-8 flex flex-wrap justify-center gap-4\">\n              <a\n                className=\"block w-full rounded bg-red-600 px-12 py-3 text-sm font-medium text-white shadow hover:bg-red-700 focus:outline-none focus:ring active:bg-red-500 sm:w-auto\"\n                href=\"#\"\n              >\n                Get Started\n              </a>\n\n              <a\n                className=\"block w-full rounded px-12 py-3 text-sm font-medium text-red-600 shadow hover:text-red-700 focus:outline-none focus:ring active:text-red-500 sm:w-auto\"\n                href=\"#\"\n              >\n                Learn More\n              </a>\n            </div>\n          </div>\n        </div>\n      </section>\n      ;\n    </>\n  );\n}\n",
      "type": "registry:ui",
      "target": ""
    }
  ]
}
</file>

<file path="public/r/styles/default/hero-video-dialog.json">
{
  "name": "hero-video-dialog",
  "type": "registry:ui",
  "dependencies": [
    "framer-motion"
  ],
  "files": [
    {
      "path": "magicui/hero-video-dialog.tsx",
      "content": "\"use client\";\n\nimport { useState } from \"react\";\nimport { AnimatePresence, motion } from \"framer-motion\";\nimport { Play, XIcon } from \"lucide-react\";\n\nimport { cn } from \"@/lib/utils\";\n\ntype AnimationStyle =\n  | \"from-bottom\"\n  | \"from-center\"\n  | \"from-top\"\n  | \"from-left\"\n  | \"from-right\"\n  | \"fade\"\n  | \"top-in-bottom-out\"\n  | \"left-in-right-out\";\n\ninterface HeroVideoProps {\n  animationStyle?: AnimationStyle;\n  videoSrc: string;\n  thumbnailSrc: string;\n  thumbnailAlt?: string;\n  className?: string;\n}\n\nconst animationVariants = {\n  \"from-bottom\": {\n    initial: { y: \"100%\", opacity: 0 },\n    animate: { y: 0, opacity: 1 },\n    exit: { y: \"100%\", opacity: 0 },\n  },\n  \"from-center\": {\n    initial: { scale: 0.5, opacity: 0 },\n    animate: { scale: 1, opacity: 1 },\n    exit: { scale: 0.5, opacity: 0 },\n  },\n  \"from-top\": {\n    initial: { y: \"-100%\", opacity: 0 },\n    animate: { y: 0, opacity: 1 },\n    exit: { y: \"-100%\", opacity: 0 },\n  },\n  \"from-left\": {\n    initial: { x: \"-100%\", opacity: 0 },\n    animate: { x: 0, opacity: 1 },\n    exit: { x: \"-100%\", opacity: 0 },\n  },\n  \"from-right\": {\n    initial: { x: \"100%\", opacity: 0 },\n    animate: { x: 0, opacity: 1 },\n    exit: { x: \"100%\", opacity: 0 },\n  },\n  fade: {\n    initial: { opacity: 0 },\n    animate: { opacity: 1 },\n    exit: { opacity: 0 },\n  },\n  \"top-in-bottom-out\": {\n    initial: { y: \"-100%\", opacity: 0 },\n    animate: { y: 0, opacity: 1 },\n    exit: { y: \"100%\", opacity: 0 },\n  },\n  \"left-in-right-out\": {\n    initial: { x: \"-100%\", opacity: 0 },\n    animate: { x: 0, opacity: 1 },\n    exit: { x: \"100%\", opacity: 0 },\n  },\n};\n\nexport default function HeroVideoDialog({\n  animationStyle = \"from-center\",\n  videoSrc,\n  thumbnailSrc,\n  thumbnailAlt = \"Video thumbnail\",\n  className,\n}: HeroVideoProps) {\n  const [isVideoOpen, setIsVideoOpen] = useState(false);\n  const selectedAnimation = animationVariants[animationStyle];\n\n  return (\n    <div className={cn(\"relative\", className)}>\n      <div\n        className=\"group relative cursor-pointer\"\n        onClick={() => setIsVideoOpen(true)}\n      >\n        <img\n          src={thumbnailSrc}\n          alt={thumbnailAlt}\n          width={1920}\n          height={1080}\n          className=\"w-full rounded-md border shadow-lg transition-all duration-200 ease-out group-hover:brightness-[0.8]\"\n        />\n        <div className=\"absolute inset-0 flex scale-[0.9] items-center justify-center rounded-2xl transition-all duration-200 ease-out group-hover:scale-100\">\n          <div className=\"flex size-28 items-center justify-center rounded-full bg-primary/10 backdrop-blur-md\">\n            <div\n              className={`relative flex size-20 scale-100 items-center justify-center rounded-full bg-gradient-to-b from-primary/30 to-primary shadow-md transition-all duration-200 ease-out group-hover:scale-[1.2]`}\n            >\n              <Play\n                className=\"size-8 scale-100 fill-white text-white transition-transform duration-200 ease-out group-hover:scale-105\"\n                style={{\n                  filter:\n                    \"drop-shadow(0 4px 3px rgb(0 0 0 / 0.07)) drop-shadow(0 2px 2px rgb(0 0 0 / 0.06))\",\n                }}\n              />\n            </div>\n          </div>\n        </div>\n      </div>\n      <AnimatePresence>\n        {isVideoOpen && (\n          <motion.div\n            initial={{ opacity: 0 }}\n            animate={{ opacity: 1 }}\n            onClick={() => setIsVideoOpen(false)}\n            exit={{ opacity: 0 }}\n            className=\"fixed inset-0 z-50 flex items-center justify-center bg-black/50 backdrop-blur-md\"\n          >\n            <motion.div\n              {...selectedAnimation}\n              transition={{ type: \"spring\", damping: 30, stiffness: 300 }}\n              className=\"relative mx-4 aspect-video w-full max-w-4xl md:mx-0\"\n            >\n              <motion.button className=\"absolute -top-16 right-0 rounded-full bg-neutral-900/50 p-2 text-xl text-white ring-1 backdrop-blur-md dark:bg-neutral-100/50 dark:text-black\">\n                <XIcon className=\"size-5\" />\n              </motion.button>\n              <div className=\"relative isolate z-[1] size-full overflow-hidden rounded-2xl border-2 border-white\">\n                <iframe\n                  src={videoSrc}\n                  className=\"size-full rounded-2xl\"\n                  allowFullScreen\n                  allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\"\n                ></iframe>\n              </div>\n            </motion.div>\n          </motion.div>\n        )}\n      </AnimatePresence>\n    </div>\n  );\n}\n",
      "type": "registry:ui",
      "target": ""
    }
  ]
}
</file>

<file path="public/r/styles/default/hyper-text.json">
{
  "name": "hyper-text",
  "type": "registry:ui",
  "dependencies": [
    "framer-motion"
  ],
  "files": [
    {
      "path": "magicui/hyper-text.tsx",
      "content": "\"use client\";\n\nimport { useEffect, useRef, useState } from \"react\";\nimport { AnimatePresence, motion, Variants } from \"framer-motion\";\n\nimport { cn } from \"@/lib/utils\";\n\ninterface HyperTextProps {\n  text: string;\n  duration?: number;\n  framerProps?: Variants;\n  className?: string;\n  animateOnLoad?: boolean;\n}\n\nconst alphabets = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\".split(\"\");\n\nconst getRandomInt = (max: number) => Math.floor(Math.random() * max);\n\nexport default function HyperText({\n  text,\n  duration = 800,\n  framerProps = {\n    initial: { opacity: 0, y: -10 },\n    animate: { opacity: 1, y: 0 },\n    exit: { opacity: 0, y: 3 },\n  },\n  className,\n  animateOnLoad = true,\n}: HyperTextProps) {\n  const [displayText, setDisplayText] = useState(text.split(\"\"));\n  const [trigger, setTrigger] = useState(false);\n  const interations = useRef(0);\n  const isFirstRender = useRef(true);\n\n  const triggerAnimation = () => {\n    interations.current = 0;\n    setTrigger(true);\n  };\n\n  useEffect(() => {\n    const interval = setInterval(\n      () => {\n        if (!animateOnLoad && isFirstRender.current) {\n          clearInterval(interval);\n          isFirstRender.current = false;\n          return;\n        }\n        if (interations.current < text.length) {\n          setDisplayText((t) =>\n            t.map((l, i) =>\n              l === \" \"\n                ? l\n                : i <= interations.current\n                  ? text[i]\n                  : alphabets[getRandomInt(26)],\n            ),\n          );\n          interations.current = interations.current + 0.1;\n        } else {\n          setTrigger(false);\n          clearInterval(interval);\n        }\n      },\n      duration / (text.length * 10),\n    );\n    // Clean up interval on unmount\n    return () => clearInterval(interval);\n  }, [text, duration, trigger, animateOnLoad]);\n\n  return (\n    <div\n      className=\"overflow-hidden py-2 flex cursor-default scale-100\"\n      onMouseEnter={triggerAnimation}\n    >\n      <AnimatePresence mode=\"wait\">\n        {displayText.map((letter, i) => (\n          <motion.h1\n            key={i}\n            className={cn(\"font-mono\", letter === \" \" ? \"w-3\" : \"\", className)}\n            {...framerProps}\n          >\n            {letter.toUpperCase()}\n          </motion.h1>\n        ))}\n      </AnimatePresence>\n    </div>\n  );\n}\n",
      "type": "registry:ui",
      "target": ""
    }
  ]
}
</file>

<file path="public/r/styles/default/icon-cloud.json">
{
  "name": "icon-cloud",
  "type": "registry:ui",
  "dependencies": [
    "next-themes",
    "react-icon-cloud"
  ],
  "files": [
    {
      "path": "magicui/icon-cloud.tsx",
      "content": "\"use client\";\n\nimport { useEffect, useMemo, useState } from \"react\";\nimport { useTheme } from \"next-themes\";\nimport {\n  Cloud,\n  fetchSimpleIcons,\n  ICloud,\n  renderSimpleIcon,\n  SimpleIcon,\n} from \"react-icon-cloud\";\n\nexport const cloudProps: Omit<ICloud, \"children\"> = {\n  containerProps: {\n    style: {\n      display: \"flex\",\n      justifyContent: \"center\",\n      alignItems: \"center\",\n      width: \"100%\",\n      paddingTop: 40,\n    },\n  },\n  options: {\n    reverse: true,\n    depth: 1,\n    wheelZoom: false,\n    imageScale: 2,\n    activeCursor: \"default\",\n    tooltip: \"native\",\n    initial: [0.1, -0.1],\n    clickToFront: 500,\n    tooltipDelay: 0,\n    outlineColour: \"#0000\",\n    maxSpeed: 0.04,\n    minSpeed: 0.02,\n    // dragControl: false,\n  },\n};\n\nexport const renderCustomIcon = (icon: SimpleIcon, theme: string) => {\n  const bgHex = theme === \"light\" ? \"#f3f2ef\" : \"#080510\";\n  const fallbackHex = theme === \"light\" ? \"#6e6e73\" : \"#ffffff\";\n  const minContrastRatio = theme === \"dark\" ? 2 : 1.2;\n\n  return renderSimpleIcon({\n    icon,\n    bgHex,\n    fallbackHex,\n    minContrastRatio,\n    size: 42,\n    aProps: {\n      href: undefined,\n      target: undefined,\n      rel: undefined,\n      onClick: (e: any) => e.preventDefault(),\n    },\n  });\n};\n\nexport type DynamicCloudProps = {\n  iconSlugs: string[];\n};\n\ntype IconData = Awaited<ReturnType<typeof fetchSimpleIcons>>;\n\nexport default function IconCloud({ iconSlugs }: DynamicCloudProps) {\n  const [data, setData] = useState<IconData | null>(null);\n  const { theme } = useTheme();\n\n  useEffect(() => {\n    fetchSimpleIcons({ slugs: iconSlugs }).then(setData);\n  }, [iconSlugs]);\n\n  const renderedIcons = useMemo(() => {\n    if (!data) return null;\n\n    return Object.values(data.simpleIcons).map((icon) =>\n      renderCustomIcon(icon, theme || \"light\"),\n    );\n  }, [data, theme]);\n\n  return (\n    // @ts-ignore\n    <Cloud {...cloudProps}>\n      <>{renderedIcons}</>\n    </Cloud>\n  );\n}\n",
      "type": "registry:ui",
      "target": ""
    }
  ]
}
</file>

<file path="public/r/styles/default/index.json">
{
  "name": "default",
  "type": "registry:style",
  "dependencies": [
    "tailwindcss-animate",
    "class-variance-authority",
    "lucide-react"
  ],
  "registryDependencies": [
    "utils"
  ],
  "tailwind": {
    "config": {
      "plugins": [
        "require(\"tailwindcss-animate\")"
      ]
    }
  },
  "cssVars": {},
  "files": []
}
</file>

<file path="public/r/styles/default/iphone-15-pro.json">
{
  "name": "iphone-15-pro",
  "type": "registry:ui",
  "files": [
    {
      "path": "magicui/iphone-15-pro.tsx",
      "content": "import { SVGProps } from \"react\";\n\nexport interface Iphone15ProProps extends SVGProps<SVGSVGElement> {\n  width?: number;\n  height?: number;\n  src?: string;\n}\n\nexport default function Iphone15Pro({\n  width = 433,\n  height = 882,\n  src,\n  ...props\n}: Iphone15ProProps) {\n  return (\n    <svg\n      width={width}\n      height={height}\n      viewBox={`0 0 ${width} ${height}`}\n      fill=\"none\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n      {...props}\n    >\n      <path\n        d=\"M2 73C2 32.6832 34.6832 0 75 0H357C397.317 0 430 32.6832 430 73V809C430 849.317 397.317 882 357 882H75C34.6832 882 2 849.317 2 809V73Z\"\n        className=\"fill-[#E5E5E5] dark:fill-[#404040]\"\n      />\n      <path\n        d=\"M0 171C0 170.448 0.447715 170 1 170H3V204H1C0.447715 204 0 203.552 0 203V171Z\"\n        className=\"fill-[#E5E5E5] dark:fill-[#404040]\"\n      />\n      <path\n        d=\"M1 234C1 233.448 1.44772 233 2 233H3.5V300H2C1.44772 300 1 299.552 1 299V234Z\"\n        className=\"fill-[#E5E5E5] dark:fill-[#404040]\"\n      />\n      <path\n        d=\"M1 319C1 318.448 1.44772 318 2 318H3.5V385H2C1.44772 385 1 384.552 1 384V319Z\"\n        className=\"fill-[#E5E5E5] dark:fill-[#404040]\"\n      />\n      <path\n        d=\"M430 279H432C432.552 279 433 279.448 433 280V384C433 384.552 432.552 385 432 385H430V279Z\"\n        className=\"fill-[#E5E5E5] dark:fill-[#404040]\"\n      />\n      <path\n        d=\"M6 74C6 35.3401 37.3401 4 76 4H356C394.66 4 426 35.3401 426 74V808C426 846.66 394.66 878 356 878H76C37.3401 878 6 846.66 6 808V74Z\"\n        className=\"dark:fill-[#262626] fill-white\"\n      />\n      <path\n        opacity=\"0.5\"\n        d=\"M174 5H258V5.5C258 6.60457 257.105 7.5 256 7.5H176C174.895 7.5 174 6.60457 174 5.5V5Z\"\n        className=\"fill-[#E5E5E5] dark:fill-[#404040]\"\n      />\n      <path\n        d=\"M21.25 75C21.25 44.2101 46.2101 19.25 77 19.25H355C385.79 19.25 410.75 44.2101 410.75 75V807C410.75 837.79 385.79 862.75 355 862.75H77C46.2101 862.75 21.25 837.79 21.25 807V75Z\"\n        className=\"fill-[#E5E5E5] dark:fill-[#404040] stroke-[#E5E5E5] dark:stroke-[#404040] stroke-[0.5]\"\n      />\n\n      {src && (\n        <image\n          href={src}\n          x=\"21.25\"\n          y=\"19.25\"\n          width=\"389.5\"\n          height=\"843.5\"\n          preserveAspectRatio=\"xMidYMid slice\"\n          clipPath=\"url(#roundedCorners)\"\n        />\n      )}\n      <path\n        d=\"M154 48.5C154 38.2827 162.283 30 172.5 30H259.5C269.717 30 278 38.2827 278 48.5C278 58.7173 269.717 67 259.5 67H172.5C162.283 67 154 58.7173 154 48.5Z\"\n        className=\"dark:fill-[#262626] fill-[#F5F5F5]\"\n      />\n      <path\n        d=\"M249 48.5C249 42.701 253.701 38 259.5 38C265.299 38 270 42.701 270 48.5C270 54.299 265.299 59 259.5 59C253.701 59 249 54.299 249 48.5Z\"\n        className=\"dark:fill-[#262626] fill-[#F5F5F5]\"\n      />\n      <path\n        d=\"M254 48.5C254 45.4624 256.462 43 259.5 43C262.538 43 265 45.4624 265 48.5C265 51.5376 262.538 54 259.5 54C256.462 54 254 51.5376 254 48.5Z\"\n        className=\"fill-[#E5E5E5] dark:fill-[#404040]\"\n      />\n      <defs>\n        <clipPath id=\"roundedCorners\">\n          <rect\n            x=\"21.25\"\n            y=\"19.25\"\n            width=\"389.5\"\n            height=\"843.5\"\n            rx=\"55.75\"\n            ry=\"55.75\"\n          />\n        </clipPath>\n      </defs>\n    </svg>\n  );\n}\n",
      "type": "registry:ui",
      "target": ""
    }
  ]
}
</file>

<file path="public/r/styles/default/letter-pullup.json">
{
  "name": "letter-pullup",
  "type": "registry:ui",
  "dependencies": [
    "framer-motion"
  ],
  "files": [
    {
      "path": "magicui/letter-pullup.tsx",
      "content": "\"use client\";\n\nimport { motion } from \"framer-motion\";\n\nimport { cn } from \"@/lib/utils\";\n\ninterface LetterPullupProps {\n  className?: string;\n  words: string;\n  delay?: number;\n}\n\nexport default function LetterPullup({\n  className,\n  words,\n  delay,\n}: LetterPullupProps) {\n  const letters = words.split(\"\");\n\n  const pullupVariant = {\n    initial: { y: 100, opacity: 0 },\n    animate: (i: any) => ({\n      y: 0,\n      opacity: 1,\n      transition: {\n        delay: i * (delay ? delay : 0.05), // By default, delay each letter's animation by 0.05 seconds\n      },\n    }),\n  };\n\n  return (\n    <div className=\"flex justify-center\">\n      {letters.map((letter, i) => (\n        <motion.h1\n          key={i}\n          variants={pullupVariant}\n          initial=\"initial\"\n          animate=\"animate\"\n          custom={i}\n          className={cn(\n            \"font-display text-center text-4xl font-bold tracking-[-0.02em] text-black drop-shadow-sm dark:text-white md:text-4xl md:leading-[5rem]\",\n            className,\n          )}\n        >\n          {letter === \" \" ? <span>&nbsp;</span> : letter}\n        </motion.h1>\n      ))}\n    </div>\n  );\n}\n",
      "type": "registry:ui",
      "target": ""
    }
  ]
}
</file>

<file path="public/r/styles/default/magic-card.json">
{
  "name": "magic-card",
  "type": "registry:ui",
  "dependencies": [
    "framer-motion"
  ],
  "files": [
    {
      "path": "magicui/magic-card.tsx",
      "content": "\"use client\";\n\nimport React, { useCallback, useEffect } from \"react\";\nimport { motion, useMotionTemplate, useMotionValue } from \"framer-motion\";\n\nimport { cn } from \"@/lib/utils\";\n\nexport interface MagicCardProps extends React.HTMLAttributes<HTMLDivElement> {\n  gradientSize?: number;\n  gradientColor?: string;\n  gradientOpacity?: number;\n}\n\nexport function MagicCard({\n  children,\n  className,\n  gradientSize = 200,\n  gradientColor = \"#262626\",\n  gradientOpacity = 0.8,\n}: MagicCardProps) {\n  const mouseX = useMotionValue(-gradientSize);\n  const mouseY = useMotionValue(-gradientSize);\n\n  const handleMouseMove = useCallback(\n    (e: React.MouseEvent<HTMLDivElement>) => {\n      const { left, top } = e.currentTarget.getBoundingClientRect();\n      mouseX.set(e.clientX - left);\n      mouseY.set(e.clientY - top);\n    },\n    [mouseX, mouseY],\n  );\n\n  const handleMouseLeave = useCallback(() => {\n    mouseX.set(-gradientSize);\n    mouseY.set(-gradientSize);\n  }, [mouseX, mouseY, gradientSize]);\n\n  useEffect(() => {\n    mouseX.set(-gradientSize);\n    mouseY.set(-gradientSize);\n  }, [mouseX, mouseY, gradientSize]);\n\n  return (\n    <div\n      onMouseMove={handleMouseMove}\n      onMouseLeave={handleMouseLeave}\n      className={cn(\n        \"group relative flex size-full overflow-hidden rounded-xl bg-neutral-100 dark:bg-neutral-900 border text-black dark:text-white\",\n        className,\n      )}\n    >\n      <div className=\"relative z-10\">{children}</div>\n      <motion.div\n        className=\"pointer-events-none absolute -inset-px rounded-xl opacity-0 transition-opacity duration-300 group-hover:opacity-100\"\n        style={{\n          background: useMotionTemplate`\n            radial-gradient(${gradientSize}px circle at ${mouseX}px ${mouseY}px, ${gradientColor}, transparent 100%)\n          `,\n          opacity: gradientOpacity,\n        }}\n      />\n    </div>\n  );\n}\n",
      "type": "registry:ui",
      "target": ""
    }
  ]
}
</file>

<file path="public/r/styles/default/marquee.json">
{
  "name": "marquee",
  "type": "registry:ui",
  "files": [
    {
      "path": "magicui/marquee.tsx",
      "content": "import { cn } from \"@/lib/utils\";\n\ninterface MarqueeProps {\n  className?: string;\n  reverse?: boolean;\n  pauseOnHover?: boolean;\n  children?: React.ReactNode;\n  vertical?: boolean;\n  repeat?: number;\n  [key: string]: any;\n}\n\nexport default function Marquee({\n  className,\n  reverse,\n  pauseOnHover = false,\n  children,\n  vertical = false,\n  repeat = 4,\n  ...props\n}: MarqueeProps) {\n  return (\n    <div\n      {...props}\n      className={cn(\n        \"group flex overflow-hidden p-2 [--duration:40s] [--gap:1rem] [gap:var(--gap)]\",\n        {\n          \"flex-row\": !vertical,\n          \"flex-col\": vertical,\n        },\n        className,\n      )}\n    >\n      {Array(repeat)\n        .fill(0)\n        .map((_, i) => (\n          <div\n            key={i}\n            className={cn(\"flex shrink-0 justify-around [gap:var(--gap)]\", {\n              \"animate-marquee flex-row\": !vertical,\n              \"animate-marquee-vertical flex-col\": vertical,\n              \"group-hover:[animation-play-state:paused]\": pauseOnHover,\n              \"[animation-direction:reverse]\": reverse,\n            })}\n          >\n            {children}\n          </div>\n        ))}\n    </div>\n  );\n}\n",
      "type": "registry:ui",
      "target": ""
    }
  ],
  "tailwind": {
    "config": {
      "theme": {
        "extend": {
          "keyframes": {
            "marquee": {
              "from": {
                "transform": "translateX(0)"
              },
              "to": {
                "transform": "translateX(calc(-100% - var(--gap)))"
              }
            },
            "marquee-vertical": {
              "from": {
                "transform": "translateY(0)"
              },
              "to": {
                "transform": "translateY(calc(-100% - var(--gap)))"
              }
            }
          },
          "animation": {
            "marquee": "marquee var(--duration) infinite linear",
            "marquee-vertical": "marquee-vertical var(--duration) linear infinite"
          }
        }
      }
    }
  }
}
</file>

<file path="public/r/styles/default/meteors.json">
{
  "name": "meteors",
  "type": "registry:ui",
  "files": [
    {
      "path": "magicui/meteors.tsx",
      "content": "\"use client\";\n\nimport { useEffect, useState } from \"react\";\n\nimport { cn } from \"@/lib/utils\";\n\ninterface MeteorsProps {\n  number?: number;\n}\nexport const Meteors = ({ number = 20 }: MeteorsProps) => {\n  const [meteorStyles, setMeteorStyles] = useState<Array<React.CSSProperties>>(\n    [],\n  );\n\n  useEffect(() => {\n    const styles = [...new Array(number)].map(() => ({\n      top: -5,\n      left: Math.floor(Math.random() * window.innerWidth) + \"px\",\n      animationDelay: Math.random() * 1 + 0.2 + \"s\",\n      animationDuration: Math.floor(Math.random() * 8 + 2) + \"s\",\n    }));\n    setMeteorStyles(styles);\n  }, [number]);\n\n  return (\n    <>\n      {[...meteorStyles].map((style, idx) => (\n        // Meteor Head\n        <span\n          key={idx}\n          className={cn(\n            \"pointer-events-none absolute left-1/2 top-1/2 size-0.5 rotate-[215deg] animate-meteor rounded-full bg-slate-500 shadow-[0_0_0_1px_#ffffff10]\",\n          )}\n          style={style}\n        >\n          {/* Meteor Tail */}\n          <div className=\"pointer-events-none absolute top-1/2 -z-10 h-px w-[50px] -translate-y-1/2 bg-gradient-to-r from-slate-500 to-transparent\" />\n        </span>\n      ))}\n    </>\n  );\n};\n\nexport default Meteors;\n",
      "type": "registry:ui",
      "target": ""
    }
  ]
}
</file>

<file path="public/r/styles/default/neon-gradient-card.json">
{
  "name": "neon-gradient-card",
  "type": "registry:ui",
  "files": [
    {
      "path": "magicui/neon-gradient-card.tsx",
      "content": "\"use client\";\n\nimport {\n  CSSProperties,\n  ReactElement,\n  ReactNode,\n  useEffect,\n  useRef,\n  useState,\n} from \"react\";\n\nimport { cn } from \"@/lib/utils\";\n\ninterface NeonColorsProps {\n  firstColor: string;\n  secondColor: string;\n}\n\ninterface NeonGradientCardProps {\n  /**\n   * @default <div />\n   * @type ReactElement\n   * @description\n   * The component to be rendered as the card\n   * */\n  as?: ReactElement;\n  /**\n   * @default \"\"\n   * @type string\n   * @description\n   * The className of the card\n   */\n  className?: string;\n\n  /**\n   * @default \"\"\n   * @type ReactNode\n   * @description\n   * The children of the card\n   * */\n  children?: ReactNode;\n\n  /**\n   * @default 5\n   * @type number\n   * @description\n   * The size of the border in pixels\n   * */\n  borderSize?: number;\n\n  /**\n   * @default 20\n   * @type number\n   * @description\n   * The size of the radius in pixels\n   * */\n  borderRadius?: number;\n\n  /**\n   * @default \"{ firstColor: '#ff00aa', secondColor: '#00FFF1' }\"\n   * @type string\n   * @description\n   * The colors of the neon gradient\n   * */\n  neonColors?: NeonColorsProps;\n\n  [key: string]: any;\n}\n\nconst NeonGradientCard: React.FC<NeonGradientCardProps> = ({\n  className,\n  children,\n  borderSize = 2,\n  borderRadius = 20,\n  neonColors = {\n    firstColor: \"#ff00aa\",\n    secondColor: \"#00FFF1\",\n  },\n  ...props\n}) => {\n  const containerRef = useRef<HTMLDivElement>(null);\n  const [dimensions, setDimensions] = useState({ width: 0, height: 0 });\n\n  useEffect(() => {\n    const updateDimensions = () => {\n      if (containerRef.current) {\n        const { offsetWidth, offsetHeight } = containerRef.current;\n        setDimensions({ width: offsetWidth, height: offsetHeight });\n      }\n    };\n\n    updateDimensions();\n    window.addEventListener(\"resize\", updateDimensions);\n\n    return () => {\n      window.removeEventListener(\"resize\", updateDimensions);\n    };\n  }, []);\n\n  useEffect(() => {\n    if (containerRef.current) {\n      const { offsetWidth, offsetHeight } = containerRef.current;\n      setDimensions({ width: offsetWidth, height: offsetHeight });\n    }\n  }, [children]);\n\n  return (\n    <div\n      ref={containerRef}\n      style={\n        {\n          \"--border-size\": `${borderSize}px`,\n          \"--border-radius\": `${borderRadius}px`,\n          \"--neon-first-color\": neonColors.firstColor,\n          \"--neon-second-color\": neonColors.secondColor,\n          \"--card-width\": `${dimensions.width}px`,\n          \"--card-height\": `${dimensions.height}px`,\n          \"--card-content-radius\": `${borderRadius - borderSize}px`,\n          \"--pseudo-element-background-image\": `linear-gradient(0deg, ${neonColors.firstColor}, ${neonColors.secondColor})`,\n          \"--pseudo-element-width\": `${dimensions.width + borderSize * 2}px`,\n          \"--pseudo-element-height\": `${dimensions.height + borderSize * 2}px`,\n          \"--after-blur\": `${dimensions.width / 3}px`,\n        } as CSSProperties\n      }\n      className={cn(\n        \"relative z-10 size-full rounded-[var(--border-radius)]\",\n        className,\n      )}\n      {...props}\n    >\n      <div\n        className={cn(\n          \"relative size-full min-h-[inherit] rounded-[var(--card-content-radius)] bg-gray-100 p-6\",\n          \"before:absolute before:-left-[var(--border-size)] before:-top-[var(--border-size)] before:-z-10 before:block\",\n          \"before:h-[var(--pseudo-element-height)] before:w-[var(--pseudo-element-width)] before:rounded-[var(--border-radius)] before:content-['']\",\n          \"before:bg-[linear-gradient(0deg,var(--neon-first-color),var(--neon-second-color))] before:bg-[length:100%_200%]\",\n          \"before:animate-background-position-spin\",\n          \"after:absolute after:-left-[var(--border-size)] after:-top-[var(--border-size)] after:-z-10 after:block\",\n          \"after:h-[var(--pseudo-element-height)] after:w-[var(--pseudo-element-width)] after:rounded-[var(--border-radius)] after:blur-[var(--after-blur)] after:content-['']\",\n          \"after:bg-[linear-gradient(0deg,var(--neon-first-color),var(--neon-second-color))] after:bg-[length:100%_200%] after:opacity-80\",\n          \"after:animate-background-position-spin\",\n          \"dark:bg-neutral-900\",\n        )}\n      >\n        {children}\n      </div>\n    </div>\n  );\n};\n\nexport { NeonGradientCard };\n",
      "type": "registry:ui",
      "target": ""
    }
  ],
  "tailwind": {
    "config": {
      "theme": {
        "extend": {
          "animation": {
            "background-position-spin": "background-position-spin 3000ms infinite alternate"
          },
          "keyframes": {
            "background-position-spin": {
              "0%": {
                "backgroundPosition": "top center"
              },
              "100%": {
                "backgroundPosition": "bottom center"
              }
            }
          }
        }
      }
    }
  }
}
</file>

<file path="public/r/styles/default/number-ticker.json">
{
  "name": "number-ticker",
  "type": "registry:ui",
  "dependencies": [
    "framer-motion"
  ],
  "files": [
    {
      "path": "magicui/number-ticker.tsx",
      "content": "\"use client\";\n\nimport { useEffect, useRef } from \"react\";\nimport { useInView, useMotionValue, useSpring } from \"framer-motion\";\n\nimport { cn } from \"@/lib/utils\";\n\nexport default function NumberTicker({\n  value,\n  direction = \"up\",\n  delay = 0,\n  className,\n  decimalPlaces = 0,\n}: {\n  value: number;\n  direction?: \"up\" | \"down\";\n  className?: string;\n  delay?: number; // delay in s\n  decimalPlaces?: number;\n}) {\n  const ref = useRef<HTMLSpanElement>(null);\n  const motionValue = useMotionValue(direction === \"down\" ? value : 0);\n  const springValue = useSpring(motionValue, {\n    damping: 60,\n    stiffness: 100,\n  });\n  const isInView = useInView(ref, { once: true, margin: \"0px\" });\n\n  useEffect(() => {\n    isInView &&\n      setTimeout(() => {\n        motionValue.set(direction === \"down\" ? 0 : value);\n      }, delay * 1000);\n  }, [motionValue, isInView, delay, value, direction]);\n\n  useEffect(\n    () =>\n      springValue.on(\"change\", (latest) => {\n        if (ref.current) {\n          ref.current.textContent = Intl.NumberFormat(\"en-US\", {\n            minimumFractionDigits: decimalPlaces,\n            maximumFractionDigits: decimalPlaces,\n          }).format(Number(latest.toFixed(decimalPlaces)));\n        }\n      }),\n    [springValue, decimalPlaces],\n  );\n\n  return (\n    <span\n      className={cn(\n        \"inline-block tabular-nums text-black dark:text-white tracking-wider\",\n        className,\n      )}\n      ref={ref}\n    />\n  );\n}\n",
      "type": "registry:ui",
      "target": ""
    }
  ]
}
</file>

<file path="public/r/styles/default/orbiting-circles.json">
{
  "name": "orbiting-circles",
  "type": "registry:ui",
  "files": [
    {
      "path": "magicui/orbiting-circles.tsx",
      "content": "import { cn } from \"@/lib/utils\";\n\nexport interface OrbitingCirclesProps {\n  className?: string;\n  children?: React.ReactNode;\n  reverse?: boolean;\n  duration?: number;\n  delay?: number;\n  radius?: number;\n  path?: boolean;\n}\n\nexport default function OrbitingCircles({\n  className,\n  children,\n  reverse,\n  duration = 20,\n  delay = 10,\n  radius = 50,\n  path = true,\n}: OrbitingCirclesProps) {\n  return (\n    <>\n      {path && (\n        <svg\n          xmlns=\"http://www.w3.org/2000/svg\"\n          version=\"1.1\"\n          className=\"pointer-events-none absolute inset-0 size-full\"\n        >\n          <circle\n            className=\"stroke-black/10 stroke-1 dark:stroke-white/10\"\n            cx=\"50%\"\n            cy=\"50%\"\n            r={radius}\n            fill=\"none\"\n          />\n        </svg>\n      )}\n\n      <div\n        style={\n          {\n            \"--duration\": duration,\n            \"--radius\": radius,\n            \"--delay\": -delay,\n          } as React.CSSProperties\n        }\n        className={cn(\n          \"absolute flex size-full transform-gpu animate-orbit items-center justify-center rounded-full border bg-black/10 [animation-delay:calc(var(--delay)*1000ms)] dark:bg-white/10\",\n          { \"[animation-direction:reverse]\": reverse },\n          className,\n        )}\n      >\n        {children}\n      </div>\n    </>\n  );\n}\n",
      "type": "registry:ui",
      "target": ""
    }
  ],
  "tailwind": {
    "config": {
      "theme": {
        "extend": {
          "animation": {
            "orbit": "orbit calc(var(--duration)*1s) linear infinite"
          },
          "keyframes": {
            "orbit": {
              "0%": {
                "transform": "rotate(0deg) translateY(calc(var(--radius) * 1px)) rotate(0deg)"
              },
              "100%": {
                "transform": "rotate(360deg) translateY(calc(var(--radius) * 1px)) rotate(-360deg)"
              }
            }
          }
        }
      }
    }
  }
}
</file>

<file path="public/r/styles/default/particles.json">
{
  "name": "particles",
  "type": "registry:ui",
  "files": [
    {
      "path": "magicui/particles.tsx",
      "content": "\"use client\";\n\nimport React, { useEffect, useRef, useState } from \"react\";\n\ninterface MousePosition {\n  x: number;\n  y: number;\n}\n\nfunction MousePosition(): MousePosition {\n  const [mousePosition, setMousePosition] = useState<MousePosition>({\n    x: 0,\n    y: 0,\n  });\n\n  useEffect(() => {\n    const handleMouseMove = (event: MouseEvent) => {\n      setMousePosition({ x: event.clientX, y: event.clientY });\n    };\n\n    window.addEventListener(\"mousemove\", handleMouseMove);\n\n    return () => {\n      window.removeEventListener(\"mousemove\", handleMouseMove);\n    };\n  }, []);\n\n  return mousePosition;\n}\n\ninterface ParticlesProps {\n  className?: string;\n  quantity?: number;\n  staticity?: number;\n  ease?: number;\n  size?: number;\n  refresh?: boolean;\n  color?: string;\n  vx?: number;\n  vy?: number;\n}\nfunction hexToRgb(hex: string): number[] {\n  hex = hex.replace(\"#\", \"\");\n\n  if (hex.length === 3) {\n    hex = hex\n      .split(\"\")\n      .map((char) => char + char)\n      .join(\"\");\n  }\n\n  const hexInt = parseInt(hex, 16);\n  const red = (hexInt >> 16) & 255;\n  const green = (hexInt >> 8) & 255;\n  const blue = hexInt & 255;\n  return [red, green, blue];\n}\n\nconst Particles: React.FC<ParticlesProps> = ({\n  className = \"\",\n  quantity = 100,\n  staticity = 50,\n  ease = 50,\n  size = 0.4,\n  refresh = false,\n  color = \"#ffffff\",\n  vx = 0,\n  vy = 0,\n}) => {\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  const canvasContainerRef = useRef<HTMLDivElement>(null);\n  const context = useRef<CanvasRenderingContext2D | null>(null);\n  const circles = useRef<Circle[]>([]);\n  const mousePosition = MousePosition();\n  const mouse = useRef<{ x: number; y: number }>({ x: 0, y: 0 });\n  const canvasSize = useRef<{ w: number; h: number }>({ w: 0, h: 0 });\n  const dpr = typeof window !== \"undefined\" ? window.devicePixelRatio : 1;\n\n  useEffect(() => {\n    if (canvasRef.current) {\n      context.current = canvasRef.current.getContext(\"2d\");\n    }\n    initCanvas();\n    animate();\n    window.addEventListener(\"resize\", initCanvas);\n\n    return () => {\n      window.removeEventListener(\"resize\", initCanvas);\n    };\n  }, [color]);\n\n  useEffect(() => {\n    onMouseMove();\n  }, [mousePosition.x, mousePosition.y]);\n\n  useEffect(() => {\n    initCanvas();\n  }, [refresh]);\n\n  const initCanvas = () => {\n    resizeCanvas();\n    drawParticles();\n  };\n\n  const onMouseMove = () => {\n    if (canvasRef.current) {\n      const rect = canvasRef.current.getBoundingClientRect();\n      const { w, h } = canvasSize.current;\n      const x = mousePosition.x - rect.left - w / 2;\n      const y = mousePosition.y - rect.top - h / 2;\n      const inside = x < w / 2 && x > -w / 2 && y < h / 2 && y > -h / 2;\n      if (inside) {\n        mouse.current.x = x;\n        mouse.current.y = y;\n      }\n    }\n  };\n\n  type Circle = {\n    x: number;\n    y: number;\n    translateX: number;\n    translateY: number;\n    size: number;\n    alpha: number;\n    targetAlpha: number;\n    dx: number;\n    dy: number;\n    magnetism: number;\n  };\n\n  const resizeCanvas = () => {\n    if (canvasContainerRef.current && canvasRef.current && context.current) {\n      circles.current.length = 0;\n      canvasSize.current.w = canvasContainerRef.current.offsetWidth;\n      canvasSize.current.h = canvasContainerRef.current.offsetHeight;\n      canvasRef.current.width = canvasSize.current.w * dpr;\n      canvasRef.current.height = canvasSize.current.h * dpr;\n      canvasRef.current.style.width = `${canvasSize.current.w}px`;\n      canvasRef.current.style.height = `${canvasSize.current.h}px`;\n      context.current.scale(dpr, dpr);\n    }\n  };\n\n  const circleParams = (): Circle => {\n    const x = Math.floor(Math.random() * canvasSize.current.w);\n    const y = Math.floor(Math.random() * canvasSize.current.h);\n    const translateX = 0;\n    const translateY = 0;\n    const pSize = Math.floor(Math.random() * 2) + size;\n    const alpha = 0;\n    const targetAlpha = parseFloat((Math.random() * 0.6 + 0.1).toFixed(1));\n    const dx = (Math.random() - 0.5) * 0.1;\n    const dy = (Math.random() - 0.5) * 0.1;\n    const magnetism = 0.1 + Math.random() * 4;\n    return {\n      x,\n      y,\n      translateX,\n      translateY,\n      size: pSize,\n      alpha,\n      targetAlpha,\n      dx,\n      dy,\n      magnetism,\n    };\n  };\n\n  const rgb = hexToRgb(color);\n\n  const drawCircle = (circle: Circle, update = false) => {\n    if (context.current) {\n      const { x, y, translateX, translateY, size, alpha } = circle;\n      context.current.translate(translateX, translateY);\n      context.current.beginPath();\n      context.current.arc(x, y, size, 0, 2 * Math.PI);\n      context.current.fillStyle = `rgba(${rgb.join(\", \")}, ${alpha})`;\n      context.current.fill();\n      context.current.setTransform(dpr, 0, 0, dpr, 0, 0);\n\n      if (!update) {\n        circles.current.push(circle);\n      }\n    }\n  };\n\n  const clearContext = () => {\n    if (context.current) {\n      context.current.clearRect(\n        0,\n        0,\n        canvasSize.current.w,\n        canvasSize.current.h,\n      );\n    }\n  };\n\n  const drawParticles = () => {\n    clearContext();\n    const particleCount = quantity;\n    for (let i = 0; i < particleCount; i++) {\n      const circle = circleParams();\n      drawCircle(circle);\n    }\n  };\n\n  const remapValue = (\n    value: number,\n    start1: number,\n    end1: number,\n    start2: number,\n    end2: number,\n  ): number => {\n    const remapped =\n      ((value - start1) * (end2 - start2)) / (end1 - start1) + start2;\n    return remapped > 0 ? remapped : 0;\n  };\n\n  const animate = () => {\n    clearContext();\n    circles.current.forEach((circle: Circle, i: number) => {\n      // Handle the alpha value\n      const edge = [\n        circle.x + circle.translateX - circle.size, // distance from left edge\n        canvasSize.current.w - circle.x - circle.translateX - circle.size, // distance from right edge\n        circle.y + circle.translateY - circle.size, // distance from top edge\n        canvasSize.current.h - circle.y - circle.translateY - circle.size, // distance from bottom edge\n      ];\n      const closestEdge = edge.reduce((a, b) => Math.min(a, b));\n      const remapClosestEdge = parseFloat(\n        remapValue(closestEdge, 0, 20, 0, 1).toFixed(2),\n      );\n      if (remapClosestEdge > 1) {\n        circle.alpha += 0.02;\n        if (circle.alpha > circle.targetAlpha) {\n          circle.alpha = circle.targetAlpha;\n        }\n      } else {\n        circle.alpha = circle.targetAlpha * remapClosestEdge;\n      }\n      circle.x += circle.dx + vx;\n      circle.y += circle.dy + vy;\n      circle.translateX +=\n        (mouse.current.x / (staticity / circle.magnetism) - circle.translateX) /\n        ease;\n      circle.translateY +=\n        (mouse.current.y / (staticity / circle.magnetism) - circle.translateY) /\n        ease;\n\n      drawCircle(circle, true);\n\n      // circle gets out of the canvas\n      if (\n        circle.x < -circle.size ||\n        circle.x > canvasSize.current.w + circle.size ||\n        circle.y < -circle.size ||\n        circle.y > canvasSize.current.h + circle.size\n      ) {\n        // remove the circle from the array\n        circles.current.splice(i, 1);\n        // create a new circle\n        const newCircle = circleParams();\n        drawCircle(newCircle);\n        // update the circle position\n      }\n    });\n    window.requestAnimationFrame(animate);\n  };\n\n  return (\n    <div className={className} ref={canvasContainerRef} aria-hidden=\"true\">\n      <canvas ref={canvasRef} className=\"size-full\" />\n    </div>\n  );\n};\n\nexport default Particles;\n",
      "type": "registry:ui",
      "target": ""
    }
  ]
}
</file>

<file path="public/r/styles/default/pulsating-button.json">
{
  "name": "pulsating-button",
  "type": "registry:ui",
  "files": [
    {
      "path": "magicui/pulsating-button.tsx",
      "content": "\"use client\";\n\nimport React from \"react\";\n\nimport { cn } from \"@/lib/utils\";\n\ninterface PulsatingButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement> {\n  pulseColor?: string;\n  duration?: string;\n}\n\nexport default function PulsatingButton({\n  className,\n  children,\n  pulseColor = \"#0096ff\",\n  duration = \"1.5s\",\n  ...props\n}: PulsatingButtonProps) {\n  return (\n    <button\n      className={cn(\n        \"relative flex cursor-pointer items-center justify-center rounded-lg bg-blue-500 px-4 py-2 text-center text-white dark:bg-blue-500 dark:text-black\",\n        className,\n      )}\n      style={\n        {\n          \"--pulse-color\": pulseColor,\n          \"--duration\": duration,\n        } as React.CSSProperties\n      }\n      {...props}\n    >\n      <div className=\"relative z-10\">{children}</div>\n      <div className=\"absolute left-1/2 top-1/2 size-full -translate-x-1/2 -translate-y-1/2 animate-pulse rounded-lg bg-inherit\" />\n    </button>\n  );\n}\n",
      "type": "registry:ui",
      "target": ""
    }
  ],
  "tailwind": {
    "config": {
      "theme": {
        "extend": {
          "animation": {
            "pulse": "pulse var(--duration) ease-out infinite"
          },
          "keyframes": {
            "pulse": {
              "0%, 100%": {
                "boxShadow": "0 0 0 0 var(--pulse-color)"
              },
              "50%": {
                "boxShadow": "0 0 0 8px var(--pulse-color)"
              }
            }
          }
        }
      }
    }
  }
}
</file>

<file path="public/r/styles/default/rainbow-button.json">
{
  "name": "rainbow-button",
  "type": "registry:ui",
  "files": [
    {
      "path": "magicui/rainbow-button.tsx",
      "content": "import React from \"react\";\n\nimport { cn } from \"@/lib/utils\";\n\ninterface RainbowButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement> {}\n\nexport function RainbowButton({ children, ...props }: RainbowButtonProps) {\n  return (\n    <button\n      className={cn(\n        \"h-11 px-8 py-2 inline-flex items-center justify-center rounded-xl font-medium transition-colors focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 relative group animate-rainbow cursor-pointer border-0 bg-[length:200%] text-primary-foreground [background-clip:padding-box,border-box,border-box] [background-origin:border-box] [border:calc(0.08*1rem)_solid_transparent]\",\n\n        // before styles\n        \"before:absolute before:bottom-[-20%] before:left-1/2 before:z-0 before:h-1/5 before:w-3/5 before:-translate-x-1/2 before:animate-rainbow before:bg-[linear-gradient(90deg,hsl(var(--color-1)),hsl(var(--color-5)),hsl(var(--color-3)),hsl(var(--color-4)),hsl(var(--color-2)))] before:bg-[length:200%] before:[filter:blur(calc(0.8*1rem))]\",\n\n        // light mode colors\n        \"bg-[linear-gradient(#121213,#121213),linear-gradient(#121213_50%,rgba(18,18,19,0.6)_80%,rgba(18,18,19,0)),linear-gradient(90deg,hsl(var(--color-1)),hsl(var(--color-5)),hsl(var(--color-3)),hsl(var(--color-4)),hsl(var(--color-2)))]\",\n\n        // dark mode colors\n        \" dark:bg-[linear-gradient(#fff,#fff),linear-gradient(#fff_50%,rgba(255,255,255,0.6)_80%,rgba(0,0,0,0)),linear-gradient(90deg,hsl(var(--color-1)),hsl(var(--color-5)),hsl(var(--color-3)),hsl(var(--color-4)),hsl(var(--color-2)))]\",\n      )}\n      {...props}\n    >\n      {children}\n    </button>\n  );\n}\n",
      "type": "registry:ui",
      "target": ""
    }
  ],
  "tailwind": {
    "config": {
      "theme": {
        "extend": {
          "colors": {
            "color-1": "hsl(var(--color-1))",
            "color-2": "hsl(var(--color-2))",
            "color-3": "hsl(var(--color-3))",
            "color-4": "hsl(var(--color-4))",
            "color-5": "hsl(var(--color-5))"
          },
          "animation": {
            "rainbow": "rainbow var(--speed, 2s) infinite linear"
          },
          "keyframes": {
            "rainbow": {
              "0%": {
                "background-position": "0%"
              },
              "100%": {
                "background-position": "200%"
              }
            }
          }
        }
      }
    }
  },
  "cssVars": {
    "light": {
      "--color-1": "0 100% 63%",
      "--color-2": "270 100% 63%",
      "--color-3": "210 100% 63%",
      "--color-4": "195 100% 63%",
      "--color-5": "90 100% 63%"
    },
    "dark": {
      "--color-1": "0 100% 63%",
      "--color-2": "270 100% 63%",
      "--color-3": "210 100% 63%",
      "--color-4": "195 100% 63%",
      "--color-5": "90 100% 63%"
    }
  }
}
</file>

<file path="public/r/styles/default/retro-grid.json">
{
  "name": "retro-grid",
  "type": "registry:ui",
  "files": [
    {
      "path": "magicui/retro-grid.tsx",
      "content": "import { cn } from \"@/lib/utils\";\n\nexport default function RetroGrid({\n  className,\n  angle = 65,\n}: {\n  className?: string;\n  angle?: number;\n}) {\n  return (\n    <div\n      className={cn(\n        \"pointer-events-none absolute size-full overflow-hidden opacity-50 [perspective:200px]\",\n        className,\n      )}\n      style={{ \"--grid-angle\": `${angle}deg` } as React.CSSProperties}\n    >\n      {/* Grid */}\n      <div className=\"absolute inset-0 [transform:rotateX(var(--grid-angle))]\">\n        <div\n          className={cn(\n            \"animate-grid\",\n\n            \"[background-repeat:repeat] [background-size:60px_60px] [height:300vh] [inset:0%_0px] [margin-left:-50%] [transform-origin:100%_0_0] [width:600vw]\",\n\n            // Light Styles\n            \"[background-image:linear-gradient(to_right,rgba(0,0,0,0.3)_1px,transparent_0),linear-gradient(to_bottom,rgba(0,0,0,0.3)_1px,transparent_0)]\",\n\n            // Dark styles\n            \"dark:[background-image:linear-gradient(to_right,rgba(255,255,255,0.2)_1px,transparent_0),linear-gradient(to_bottom,rgba(255,255,255,0.2)_1px,transparent_0)]\",\n          )}\n        />\n      </div>\n\n      {/* Background Gradient */}\n      <div className=\"absolute inset-0 bg-gradient-to-t from-white to-transparent to-90% dark:from-black\" />\n    </div>\n  );\n}\n",
      "type": "registry:ui",
      "target": ""
    }
  ],
  "tailwind": {
    "config": {
      "theme": {
        "extend": {
          "animation": {
            "grid": "grid 15s linear infinite"
          },
          "keyframes": {
            "grid": {
              "0%": {
                "transform": "translateY(-50%)"
              },
              "100%": {
                "transform": "translateY(0)"
              }
            }
          }
        }
      }
    }
  }
}
</file>

<file path="public/r/styles/default/ripple.json">
{
  "name": "ripple",
  "type": "registry:ui",
  "files": [
    {
      "path": "magicui/ripple.tsx",
      "content": "import React, { CSSProperties } from \"react\";\n\nimport { cn } from \"@/lib/utils\";\n\ninterface RippleProps {\n  mainCircleSize?: number;\n  mainCircleOpacity?: number;\n  numCircles?: number;\n  className?: string;\n}\n\nconst Ripple = React.memo(function Ripple({\n  mainCircleSize = 210,\n  mainCircleOpacity = 0.24,\n  numCircles = 8,\n  className,\n}: RippleProps) {\n  return (\n    <div\n      className={cn(\n        \"absolute inset-0 bg-white/5 [mask-image:linear-gradient(to_bottom,white,transparent)]\",\n        className,\n      )}\n    >\n      {Array.from({ length: numCircles }, (_, i) => {\n        const size = mainCircleSize + i * 70;\n        const opacity = mainCircleOpacity - i * 0.03;\n        const animationDelay = `${i * 0.06}s`;\n        const borderStyle = i === numCircles - 1 ? \"dashed\" : \"solid\";\n        const borderOpacity = 5 + i * 5;\n\n        return (\n          <div\n            key={i}\n            className={`absolute animate-ripple rounded-full bg-foreground/25 shadow-xl border [--i:${i}]`}\n            style={\n              {\n                width: `${size}px`,\n                height: `${size}px`,\n                opacity,\n                animationDelay,\n                borderStyle,\n                borderWidth: \"1px\",\n                borderColor: `hsl(var(--foreground), ${borderOpacity / 100})`,\n                top: \"50%\",\n                left: \"50%\",\n                transform: \"translate(-50%, -50%) scale(1)\",\n              } as CSSProperties\n            }\n          />\n        );\n      })}\n    </div>\n  );\n});\n\nRipple.displayName = \"Ripple\";\n\nexport default Ripple;\n",
      "type": "registry:ui",
      "target": ""
    }
  ],
  "tailwind": {
    "config": {
      "theme": {
        "extend": {
          "animation": {
            "ripple": "ripple var(--duration,2s) ease calc(var(--i, 0)*.2s) infinite"
          },
          "keyframes": {
            "ripple": {
              "0%, 100%": {
                "transform": "translate(-50%, -50%) scale(1)"
              },
              "50%": {
                "transform": "translate(-50%, -50%) scale(0.9)"
              }
            }
          }
        }
      }
    }
  }
}
</file>

<file path="public/r/styles/default/safari.json">
{
  "name": "safari",
  "type": "registry:ui",
  "files": [
    {
      "path": "magicui/safari.tsx",
      "content": "import { SVGProps } from \"react\";\n\nexport interface SafariProps extends SVGProps<SVGSVGElement> {\n  url?: string;\n  src?: string;\n  width?: number;\n  height?: number;\n}\n\nexport default function Safari({\n  src,\n  url,\n  width = 1203,\n  height = 753,\n  ...props\n}: SafariProps) {\n  return (\n    <svg\n      width={width}\n      height={height}\n      viewBox={`0 0 ${width} ${height}`}\n      fill=\"none\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n      {...props}\n    >\n      <g clipPath=\"url(#path0)\">\n        <path\n          d=\"M0 52H1202V741C1202 747.627 1196.63 753 1190 753H12C5.37258 753 0 747.627 0 741V52Z\"\n          className=\"fill-[#E5E5E5] dark:fill-[#404040]\"\n        />\n        <path\n          fillRule=\"evenodd\"\n          clipRule=\"evenodd\"\n          d=\"M0 12C0 5.37258 5.37258 0 12 0H1190C1196.63 0 1202 5.37258 1202 12V52H0L0 12Z\"\n          className=\"fill-[#E5E5E5] dark:fill-[#404040]\"\n        />\n        <path\n          fillRule=\"evenodd\"\n          clipRule=\"evenodd\"\n          d=\"M1.06738 12C1.06738 5.92487 5.99225 1 12.0674 1H1189.93C1196.01 1 1200.93 5.92487 1200.93 12V51H1.06738V12Z\"\n          className=\"fill-white dark:fill-[#262626]\"\n        />\n        <circle\n          cx=\"27\"\n          cy=\"25\"\n          r=\"6\"\n          className=\"fill-[#E5E5E5] dark:fill-[#404040]\"\n        />\n        <circle\n          cx=\"47\"\n          cy=\"25\"\n          r=\"6\"\n          className=\"fill-[#E5E5E5] dark:fill-[#404040]\"\n        />\n        <circle\n          cx=\"67\"\n          cy=\"25\"\n          r=\"6\"\n          className=\"fill-[#E5E5E5] dark:fill-[#404040]\"\n        />\n        <path\n          d=\"M286 17C286 13.6863 288.686 11 292 11H946C949.314 11 952 13.6863 952 17V35C952 38.3137 949.314 41 946 41H292C288.686 41 286 38.3137 286 35V17Z\"\n          className=\"fill-[#E5E5E5] dark:fill-[#404040]\"\n        />\n        <g className=\"mix-blend-luminosity\">\n          <path\n            d=\"M566.269 32.0852H572.426C573.277 32.0852 573.696 31.6663 573.696 30.7395V25.9851C573.696 25.1472 573.353 24.7219 572.642 24.6521V23.0842C572.642 20.6721 571.036 19.5105 569.348 19.5105C567.659 19.5105 566.053 20.6721 566.053 23.0842V24.6711C565.393 24.7727 565 25.1917 565 25.9851V30.7395C565 31.6663 565.418 32.0852 566.269 32.0852ZM567.272 22.97C567.272 21.491 568.211 20.6785 569.348 20.6785C570.478 20.6785 571.423 21.491 571.423 22.97V24.6394L567.272 24.6458V22.97Z\"\n            fill=\"#A3A3A3\"\n          />\n        </g>\n        <g className=\"mix-blend-luminosity\">\n          <text\n            x=\"580\"\n            y=\"30\"\n            fill=\"#A3A3A3\"\n            fontSize=\"12\"\n            fontFamily=\"Arial, sans-serif\"\n          >\n            {url}\n          </text>\n        </g>\n        <g className=\"mix-blend-luminosity\">\n          <path\n            d=\"M265.5 33.8984C265.641 33.8984 265.852 33.8516 266.047 33.7422C270.547 31.2969 272.109 30.1641 272.109 27.3203V21.4219C272.109 20.4844 271.742 20.1484 270.961 19.8125C270.094 19.4453 267.18 18.4297 266.328 18.1406C266.07 18.0547 265.766 18 265.5 18C265.234 18 264.93 18.0703 264.672 18.1406C263.82 18.3828 260.906 19.4531 260.039 19.8125C259.258 20.1406 258.891 20.4844 258.891 21.4219V27.3203C258.891 30.1641 260.461 31.2812 264.945 33.7422C265.148 33.8516 265.359 33.8984 265.5 33.8984ZM265.922 19.5781C266.945 19.9766 269.172 20.7656 270.344 21.1875C270.562 21.2656 270.617 21.3828 270.617 21.6641V27.0234C270.617 29.3125 269.469 29.9375 265.945 32.0625C265.727 32.1875 265.617 32.2344 265.508 32.2344V19.4844C265.617 19.4844 265.734 19.5156 265.922 19.5781Z\"\n            fill=\"#A3A3A3\"\n          />\n        </g>\n        <g className=\"mix-blend-luminosity\">\n          <path\n            d=\"M936.273 24.9766C936.5 24.9766 936.68 24.9062 936.82 24.7578L940.023 21.5312C940.195 21.3594 940.273 21.1719 940.273 20.9531C940.273 20.7422 940.188 20.5391 940.023 20.3828L936.82 17.125C936.68 16.9688 936.5 16.8906 936.273 16.8906C935.852 16.8906 935.516 17.2422 935.516 17.6719C935.516 17.8828 935.594 18.0547 935.727 18.2031L937.594 20.0312C937.227 19.9766 936.852 19.9453 936.477 19.9453C932.609 19.9453 929.516 23.0391 929.516 26.9141C929.516 30.7891 932.633 33.9062 936.5 33.9062C940.375 33.9062 943.484 30.7891 943.484 26.9141C943.484 26.4453 943.156 26.1094 942.688 26.1094C942.234 26.1094 941.93 26.4453 941.93 26.9141C941.93 29.9297 939.516 32.3516 936.5 32.3516C933.492 32.3516 931.07 29.9297 931.07 26.9141C931.07 23.875 933.469 21.4688 936.477 21.4688C936.984 21.4688 937.453 21.5078 937.867 21.5781L935.734 23.6875C935.594 23.8281 935.516 24 935.516 24.2109C935.516 24.6406 935.852 24.9766 936.273 24.9766Z\"\n            fill=\"#A3A3A3\"\n          />\n        </g>\n        <g className=\"mix-blend-luminosity\">\n          <path\n            d=\"M1134 33.0156C1134.49 33.0156 1134.89 32.6094 1134.89 32.1484V27.2578H1139.66C1140.13 27.2578 1140.54 26.8594 1140.54 26.3672C1140.54 25.8828 1140.13 25.4766 1139.66 25.4766H1134.89V20.5859C1134.89 20.1172 1134.49 19.7188 1134 19.7188C1133.52 19.7188 1133.11 20.1172 1133.11 20.5859V25.4766H1128.34C1127.88 25.4766 1127.46 25.8828 1127.46 26.3672C1127.46 26.8594 1127.88 27.2578 1128.34 27.2578H1133.11V32.1484C1133.11 32.6094 1133.52 33.0156 1134 33.0156Z\"\n            fill=\"#A3A3A3\"\n          />\n        </g>\n        <g className=\"mix-blend-luminosity\">\n          <path\n            d=\"M1161.8 31.0703H1163.23V32.375C1163.23 34.0547 1164.12 34.9219 1165.81 34.9219H1174.2C1175.89 34.9219 1176.77 34.0547 1176.77 32.3828V24.0469C1176.77 22.375 1175.89 21.5 1174.2 21.5H1172.77V20.2578C1172.77 18.5859 1171.88 17.7109 1170.19 17.7109H1161.8C1160.1 17.7109 1159.23 18.5781 1159.23 20.2578V28.5234C1159.23 30.1953 1160.1 31.0703 1161.8 31.0703ZM1161.9 29.5078C1161.18 29.5078 1160.78 29.1328 1160.78 28.3828V20.3984C1160.78 19.6406 1161.18 19.2656 1161.9 19.2656H1170.09C1170.8 19.2656 1171.2 19.6406 1171.2 20.3984V21.5H1165.81C1164.12 21.5 1163.23 22.375 1163.23 24.0469V29.5078H1161.9ZM1165.91 33.3672C1165.19 33.3672 1164.8 32.9922 1164.8 32.2422V24.1875C1164.8 23.4297 1165.19 23.0625 1165.91 23.0625H1174.1C1174.81 23.0625 1175.21 23.4297 1175.21 24.1875V32.2422C1175.21 32.9922 1174.81 33.3672 1174.1 33.3672H1165.91Z\"\n            fill=\"#A3A3A3\"\n          />\n        </g>\n        <g className=\"mix-blend-luminosity\">\n          <path\n            d=\"M1099.51 28.4141C1099.91 28.4141 1100.24 28.0859 1100.24 27.6953V19.8359L1100.18 18.6797L1100.66 19.25L1101.75 20.4141C1101.88 20.5547 1102.06 20.625 1102.24 20.625C1102.6 20.625 1102.9 20.3672 1102.9 20C1102.9 19.8047 1102.82 19.6641 1102.69 19.5312L1100.06 17.0078C1099.88 16.8203 1099.7 16.7578 1099.51 16.7578C1099.32 16.7578 1099.14 16.8203 1098.95 17.0078L1096.33 19.5312C1096.2 19.6641 1096.12 19.8047 1096.12 20C1096.12 20.3672 1096.41 20.625 1096.77 20.625C1096.95 20.625 1097.14 20.5547 1097.27 20.4141L1098.35 19.25L1098.84 18.6719L1098.78 19.8359V27.6953C1098.78 28.0859 1099.11 28.4141 1099.51 28.4141ZM1095 34.6562H1104C1105.7 34.6562 1106.57 33.7812 1106.57 32.1094V24.4297C1106.57 22.7578 1105.7 21.8828 1104 21.8828H1101.89V23.4375H1103.9C1104.61 23.4375 1105.02 23.8125 1105.02 24.5625V31.9688C1105.02 32.7188 1104.61 33.0938 1103.9 33.0938H1095.1C1094.38 33.0938 1093.98 32.7188 1093.98 31.9688V24.5625C1093.98 23.8125 1094.38 23.4375 1095.1 23.4375H1097.13V21.8828H1095C1093.31 21.8828 1092.43 22.75 1092.43 24.4297V32.1094C1092.43 33.7812 1093.31 34.6562 1095 34.6562Z\"\n            fill=\"#A3A3A3\"\n          />\n        </g>\n        <g className=\"mix-blend-luminosity\">\n          <path\n            d=\"M99.5703 33.6016H112.938C114.633 33.6016 115.516 32.7266 115.516 31.0547V21.5469C115.516 19.875 114.633 19 112.938 19H99.5703C97.8828 19 97 19.8672 97 21.5469V31.0547C97 32.7266 97.8828 33.6016 99.5703 33.6016ZM99.6719 32.0469C98.9531 32.0469 98.5547 31.6719 98.5547 30.9141V21.6875C98.5547 20.9297 98.9531 20.5547 99.6719 20.5547H103.234V32.0469H99.6719ZM112.836 20.5547C113.555 20.5547 113.953 20.9297 113.953 21.6875V30.9141C113.953 31.6719 113.555 32.0469 112.836 32.0469H104.711V20.5547H112.836ZM101.703 23.4141C101.984 23.4141 102.219 23.1719 102.219 22.9062C102.219 22.6406 101.984 22.4062 101.703 22.4062H100.102C99.8203 22.4062 99.5859 22.6406 99.5859 22.9062C99.5859 23.1719 99.8203 23.4141 100.102 23.4141H101.703ZM101.703 25.5156C101.984 25.5156 102.219 25.2812 102.219 25.0078C102.219 24.7422 101.984 24.5078 101.703 24.5078H100.102C99.8203 24.5078 99.5859 24.7422 99.5859 25.0078C99.5859 25.2812 99.8203 25.5156 100.102 25.5156H101.703ZM101.703 27.6094C101.984 27.6094 102.219 27.3828 102.219 27.1094C102.219 26.8438 101.984 26.6172 101.703 26.6172H100.102C99.8203 26.6172 99.5859 26.8438 99.5859 27.1094C99.5859 27.3828 99.8203 27.6094 100.102 27.6094H101.703Z\"\n            fill=\"#A3A3A3\"\n          />\n        </g>\n        <g className=\"mix-blend-luminosity\">\n          <path\n            d=\"M143.914 32.5938C144.094 32.7656 144.312 32.8594 144.562 32.8594C145.086 32.8594 145.492 32.4531 145.492 31.9375C145.492 31.6797 145.391 31.4453 145.211 31.2656L139.742 25.9219L145.211 20.5938C145.391 20.4141 145.492 20.1719 145.492 19.9219C145.492 19.4062 145.086 19 144.562 19C144.312 19 144.094 19.0938 143.922 19.2656L137.844 25.2031C137.625 25.4062 137.516 25.6562 137.516 25.9297C137.516 26.2031 137.625 26.4375 137.836 26.6484L143.914 32.5938Z\"\n            fill=\"#A3A3A3\"\n          />\n        </g>\n        <g className=\"mix-blend-luminosity\">\n          <path\n            d=\"M168.422 32.8594C168.68 32.8594 168.891 32.7656 169.07 32.5938L175.148 26.6562C175.359 26.4375 175.469 26.2109 175.469 25.9297C175.469 25.6562 175.367 25.4141 175.148 25.2109L169.07 19.2656C168.891 19.0938 168.68 19 168.422 19C167.898 19 167.492 19.4062 167.492 19.9219C167.492 20.1719 167.602 20.4141 167.773 20.5938L173.25 25.9375L167.773 31.2656C167.594 31.4531 167.492 31.6797 167.492 31.9375C167.492 32.4531 167.898 32.8594 168.422 32.8594Z\"\n            fill=\"#A3A3A3\"\n          />\n        </g>\n        <image\n          href={src}\n          width=\"1200\"\n          height=\"700\"\n          x=\"1\"\n          y=\"52\"\n          preserveAspectRatio=\"xMidYMid slice\"\n          clipPath=\"url(#roundedBottom)\"\n        />\n      </g>\n      <defs>\n        <clipPath id=\"path0\">\n          <rect width={width} height={height} fill=\"white\" />\n        </clipPath>\n        <clipPath id=\"roundedBottom\">\n          <path\n            d=\"M1 52H1201V741C1201 747.075 1196.08 752 1190 752H12C5.92486 752 1 747.075 1 741V52Z\"\n            fill=\"white\"\n          />\n        </clipPath>\n      </defs>\n    </svg>\n  );\n}\n",
      "type": "registry:ui",
      "target": ""
    }
  ]
}
</file>

<file path="public/r/styles/default/scroll-based-velocity.json">
{
  "name": "scroll-based-velocity",
  "type": "registry:ui",
  "dependencies": [
    "framer-motion"
  ],
  "files": [
    {
      "path": "magicui/scroll-based-velocity.tsx",
      "content": "\"use client\";\n\nimport React, { useEffect, useRef, useState } from \"react\";\nimport {\n  motion,\n  useAnimationFrame,\n  useMotionValue,\n  useScroll,\n  useSpring,\n  useTransform,\n  useVelocity,\n} from \"framer-motion\";\n\nimport { cn } from \"@/lib/utils\";\n\ninterface VelocityScrollProps {\n  text: string;\n  default_velocity?: number;\n  className?: string;\n}\n\ninterface ParallaxProps {\n  children: string;\n  baseVelocity: number;\n  className?: string;\n}\n\nexport const wrap = (min: number, max: number, v: number) => {\n  const rangeSize = max - min;\n  return ((((v - min) % rangeSize) + rangeSize) % rangeSize) + min;\n};\n\nexport function VelocityScroll({\n  text,\n  default_velocity = 5,\n  className,\n}: VelocityScrollProps) {\n  function ParallaxText({\n    children,\n    baseVelocity = 100,\n    className,\n  }: ParallaxProps) {\n    const baseX = useMotionValue(0);\n    const { scrollY } = useScroll();\n    const scrollVelocity = useVelocity(scrollY);\n    const smoothVelocity = useSpring(scrollVelocity, {\n      damping: 50,\n      stiffness: 400,\n    });\n\n    const velocityFactor = useTransform(smoothVelocity, [0, 1000], [0, 5], {\n      clamp: false,\n    });\n\n    const [repetitions, setRepetitions] = useState(1);\n    const containerRef = useRef<HTMLDivElement>(null);\n    const textRef = useRef<HTMLSpanElement>(null);\n\n    useEffect(() => {\n      const calculateRepetitions = () => {\n        if (containerRef.current && textRef.current) {\n          const containerWidth = containerRef.current.offsetWidth;\n          const textWidth = textRef.current.offsetWidth;\n          const newRepetitions = Math.ceil(containerWidth / textWidth) + 2;\n          setRepetitions(newRepetitions);\n        }\n      };\n\n      calculateRepetitions();\n\n      window.addEventListener(\"resize\", calculateRepetitions);\n      return () => window.removeEventListener(\"resize\", calculateRepetitions);\n    }, [children]);\n\n    const x = useTransform(baseX, (v) => `${wrap(-100 / repetitions, 0, v)}%`);\n\n    const directionFactor = React.useRef<number>(1);\n    useAnimationFrame((t, delta) => {\n      let moveBy = directionFactor.current * baseVelocity * (delta / 1000);\n\n      if (velocityFactor.get() < 0) {\n        directionFactor.current = -1;\n      } else if (velocityFactor.get() > 0) {\n        directionFactor.current = 1;\n      }\n\n      moveBy += directionFactor.current * moveBy * velocityFactor.get();\n\n      baseX.set(baseX.get() + moveBy);\n    });\n\n    return (\n      <div\n        className=\"w-full overflow-hidden whitespace-nowrap\"\n        ref={containerRef}\n      >\n        <motion.div className={cn(\"inline-block\", className)} style={{ x }}>\n          {Array.from({ length: repetitions }).map((_, i) => (\n            <span key={i} ref={i === 0 ? textRef : null}>\n              {children}{\" \"}\n            </span>\n          ))}\n        </motion.div>\n      </div>\n    );\n  }\n\n  return (\n    <section className=\"relative w-full\">\n      <ParallaxText baseVelocity={default_velocity} className={className}>\n        {text}\n      </ParallaxText>\n      <ParallaxText baseVelocity={-default_velocity} className={className}>\n        {text}\n      </ParallaxText>\n    </section>\n  );\n}\n",
      "type": "registry:ui",
      "target": ""
    }
  ]
}
</file>

<file path="public/r/styles/default/shimmer-button.json">
{
  "name": "shimmer-button",
  "type": "registry:ui",
  "files": [
    {
      "path": "magicui/shimmer-button.tsx",
      "content": "import React, { CSSProperties } from \"react\";\n\nimport { cn } from \"@/lib/utils\";\n\nexport interface ShimmerButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement> {\n  shimmerColor?: string;\n  shimmerSize?: string;\n  borderRadius?: string;\n  shimmerDuration?: string;\n  background?: string;\n  className?: string;\n  children?: React.ReactNode;\n}\n\nconst ShimmerButton = React.forwardRef<HTMLButtonElement, ShimmerButtonProps>(\n  (\n    {\n      shimmerColor = \"#ffffff\",\n      shimmerSize = \"0.05em\",\n      shimmerDuration = \"3s\",\n      borderRadius = \"100px\",\n      background = \"rgba(0, 0, 0, 1)\",\n      className,\n      children,\n      ...props\n    },\n    ref,\n  ) => {\n    return (\n      <button\n        style={\n          {\n            \"--spread\": \"90deg\",\n            \"--shimmer-color\": shimmerColor,\n            \"--radius\": borderRadius,\n            \"--speed\": shimmerDuration,\n            \"--cut\": shimmerSize,\n            \"--bg\": background,\n          } as CSSProperties\n        }\n        className={cn(\n          \"group relative z-0 flex cursor-pointer items-center justify-center overflow-hidden whitespace-nowrap border border-white/10 px-6 py-3 text-white [background:var(--bg)] [border-radius:var(--radius)] dark:text-black\",\n          \"transform-gpu transition-transform duration-300 ease-in-out active:translate-y-px\",\n          className,\n        )}\n        ref={ref}\n        {...props}\n      >\n        {/* spark container */}\n        <div\n          className={cn(\n            \"-z-30 blur-[2px]\",\n            \"absolute inset-0 overflow-visible [container-type:size]\",\n          )}\n        >\n          {/* spark */}\n          <div className=\"absolute inset-0 h-[100cqh] animate-shimmer-slide [aspect-ratio:1] [border-radius:0] [mask:none]\">\n            {/* spark before */}\n            <div className=\"animate-spin-around absolute -inset-full w-auto rotate-0 [background:conic-gradient(from_calc(270deg-(var(--spread)*0.5)),transparent_0,var(--shimmer-color)_var(--spread),transparent_var(--spread))] [translate:0_0]\" />\n          </div>\n        </div>\n        {children}\n\n        {/* Highlight */}\n        <div\n          className={cn(\n            \"insert-0 absolute size-full\",\n\n            \"rounded-2xl px-4 py-1.5 text-sm font-medium shadow-[inset_0_-8px_10px_#ffffff1f]\",\n\n            // transition\n            \"transform-gpu transition-all duration-300 ease-in-out\",\n\n            // on hover\n            \"group-hover:shadow-[inset_0_-6px_10px_#ffffff3f]\",\n\n            // on click\n            \"group-active:shadow-[inset_0_-10px_10px_#ffffff3f]\",\n          )}\n        />\n\n        {/* backdrop */}\n        <div\n          className={cn(\n            \"absolute -z-20 [background:var(--bg)] [border-radius:var(--radius)] [inset:var(--cut)]\",\n          )}\n        />\n      </button>\n    );\n  },\n);\n\nShimmerButton.displayName = \"ShimmerButton\";\n\nexport default ShimmerButton;\n",
      "type": "registry:ui",
      "target": ""
    }
  ],
  "tailwind": {
    "config": {
      "theme": {
        "extend": {
          "animation": {
            "shimmer-slide": "shimmer-slide var(--speed) ease-in-out infinite alternate",
            "spin-around": "spin-around calc(var(--speed) * 2) infinite linear"
          },
          "keyframes": {
            "shimmer-slide": {
              "to": {
                "transform": "translate(calc(100cqw - 100%), 0)"
              }
            },
            "spin-around": {
              "0%": {
                "transform": "translateZ(0) rotate(0)"
              },
              "15%, 35%": {
                "transform": "translateZ(0) rotate(90deg)"
              },
              "65%, 85%": {
                "transform": "translateZ(0) rotate(270deg)"
              },
              "100%": {
                "transform": "translateZ(0) rotate(360deg)"
              }
            }
          }
        }
      }
    }
  }
}
</file>

<file path="public/r/styles/default/shine-border.json">
{
  "name": "shine-border",
  "type": "registry:ui",
  "files": [
    {
      "path": "magicui/shine-border.tsx",
      "content": "\"use client\";\n\nimport { cn } from \"@/lib/utils\";\n\ntype TColorProp = string | string[];\n\ninterface ShineBorderProps {\n  borderRadius?: number;\n  borderWidth?: number;\n  duration?: number;\n  color?: TColorProp;\n  className?: string;\n  children: React.ReactNode;\n}\n\n/**\n * @name Shine Border\n * @description It is an animated background border effect component with easy to use and configurable props.\n * @param borderRadius defines the radius of the border.\n * @param borderWidth defines the width of the border.\n * @param duration defines the animation duration to be applied on the shining border\n * @param color a string or string array to define border color.\n * @param className defines the class name to be applied to the component\n * @param children contains react node elements.\n */\nexport default function ShineBorder({\n  borderRadius = 8,\n  borderWidth = 1,\n  duration = 14,\n  color = \"#000000\",\n  className,\n  children,\n}: ShineBorderProps) {\n  return (\n    <div\n      style={\n        {\n          \"--border-radius\": `${borderRadius}px`,\n        } as React.CSSProperties\n      }\n      className={cn(\n        \"relative grid min-h-[60px] w-fit min-w-[300px] place-items-center rounded-[--border-radius] bg-white p-3 text-black dark:bg-black dark:text-white\",\n        className,\n      )}\n    >\n      <div\n        style={\n          {\n            \"--border-width\": `${borderWidth}px`,\n            \"--border-radius\": `${borderRadius}px`,\n            \"--duration\": `${duration}s`,\n            \"--mask-linear-gradient\": `linear-gradient(#fff 0 0) content-box, linear-gradient(#fff 0 0)`,\n            \"--background-radial-gradient\": `radial-gradient(transparent,transparent, ${color instanceof Array ? color.join(\",\") : color},transparent,transparent)`,\n          } as React.CSSProperties\n        }\n        className={`before:bg-shine-size before:absolute before:inset-0 before:aspect-square before:size-full before:rounded-[--border-radius] before:p-[--border-width] before:will-change-[background-position] before:content-[\"\"] before:![-webkit-mask-composite:xor] before:![mask-composite:exclude] before:[background-image:--background-radial-gradient] before:[background-size:300%_300%] before:[mask:--mask-linear-gradient] motion-safe:before:animate-shine`}\n      ></div>\n      {children}\n    </div>\n  );\n}\n",
      "type": "registry:ui",
      "target": ""
    }
  ],
  "tailwind": {
    "config": {
      "theme": {
        "extend": {
          "animation": {
            "shine": "shine var(--duration) infinite linear"
          },
          "keyframes": {
            "shine": {
              "0%": {
                "background-position": "0% 0%"
              },
              "50%": {
                "background-position": "100% 100%"
              },
              "to": {
                "background-position": "0% 0%"
              }
            }
          }
        }
      }
    }
  }
}
</file>

<file path="public/r/styles/default/shiny-button.json">
{
  "name": "shiny-button",
  "type": "registry:ui",
  "dependencies": [
    "framer-motion"
  ],
  "files": [
    {
      "path": "magicui/shiny-button.tsx",
      "content": "\"use client\";\n\nimport React from \"react\";\nimport { motion, type AnimationProps } from \"framer-motion\";\n\nimport { cn } from \"@/lib/utils\";\n\nconst animationProps = {\n  initial: { \"--x\": \"100%\", scale: 0.8 },\n  animate: { \"--x\": \"-100%\", scale: 1 },\n  whileTap: { scale: 0.95 },\n  transition: {\n    repeat: Infinity,\n    repeatType: \"loop\",\n    repeatDelay: 1,\n    type: \"spring\",\n    stiffness: 20,\n    damping: 15,\n    mass: 2,\n    scale: {\n      type: \"spring\",\n      stiffness: 200,\n      damping: 5,\n      mass: 0.5,\n    },\n  },\n} as AnimationProps;\ninterface ShinyButtonProps {\n  children: React.ReactNode;\n  className?: string;\n}\nconst ShinyButton = ({ children, className, ...props }: ShinyButtonProps) => {\n  return (\n    <motion.button\n      {...animationProps}\n      {...props}\n      className={cn(\n        \"relative rounded-lg px-6 py-2 font-medium backdrop-blur-xl transition-shadow duration-300 ease-in-out hover:shadow dark:bg-[radial-gradient(circle_at_50%_0%,hsl(var(--primary)/10%)_0%,transparent_60%)] dark:hover:shadow-[0_0_20px_hsl(var(--primary)/10%)]\",\n        className,\n      )}\n    >\n      <span\n        className=\"relative block size-full text-sm uppercase tracking-wide text-[rgb(0,0,0,65%)] dark:font-light dark:text-[rgb(255,255,255,90%)]\"\n        style={{\n          maskImage:\n            \"linear-gradient(-75deg,hsl(var(--primary)) calc(var(--x) + 20%),transparent calc(var(--x) + 30%),hsl(var(--primary)) calc(var(--x) + 100%))\",\n        }}\n      >\n        {children}\n      </span>\n      <span\n        style={{\n          mask: \"linear-gradient(rgb(0,0,0), rgb(0,0,0)) content-box,linear-gradient(rgb(0,0,0), rgb(0,0,0))\",\n          maskComposite: \"exclude\",\n        }}\n        className=\"absolute inset-0 z-10 block rounded-[inherit] bg-[linear-gradient(-75deg,hsl(var(--primary)/10%)_calc(var(--x)+20%),hsl(var(--primary)/50%)_calc(var(--x)+25%),hsl(var(--primary)/10%)_calc(var(--x)+100%))] p-px\"\n      ></span>\n    </motion.button>\n  );\n};\n\nexport default ShinyButton;\n",
      "type": "registry:ui",
      "target": ""
    }
  ]
}
</file>

<file path="public/r/styles/default/sparkles-text.json">
{
  "name": "sparkles-text",
  "type": "registry:ui",
  "dependencies": [
    "framer-motion"
  ],
  "files": [
    {
      "path": "magicui/sparkles-text.tsx",
      "content": "\"use client\";\n\nimport { CSSProperties, ReactElement, useEffect, useState } from \"react\";\nimport { motion } from \"framer-motion\";\n\nimport { cn } from \"@/lib/utils\";\n\ninterface Sparkle {\n  id: string;\n  x: string;\n  y: string;\n  color: string;\n  delay: number;\n  scale: number;\n  lifespan: number;\n}\n\ninterface SparklesTextProps {\n  /**\n   * @default <div />\n   * @type ReactElement\n   * @description\n   * The component to be rendered as the text\n   * */\n  as?: ReactElement;\n\n  /**\n   * @default \"\"\n   * @type string\n   * @description\n   * The className of the text\n   */\n  className?: string;\n\n  /**\n   * @required\n   * @type string\n   * @description\n   * The text to be displayed\n   * */\n  text: string;\n\n  /**\n   * @default 10\n   * @type number\n   * @description\n   * The count of sparkles\n   * */\n  sparklesCount?: number;\n\n  /**\n   * @default \"{first: '#9E7AFF', second: '#FE8BBB'}\"\n   * @type string\n   * @description\n   * The colors of the sparkles\n   * */\n  colors?: {\n    first: string;\n    second: string;\n  };\n}\n\nconst SparklesText: React.FC<SparklesTextProps> = ({\n  text,\n  colors = { first: \"#9E7AFF\", second: \"#FE8BBB\" },\n  className,\n  sparklesCount = 10,\n  ...props\n}) => {\n  const [sparkles, setSparkles] = useState<Sparkle[]>([]);\n\n  useEffect(() => {\n    const generateStar = (): Sparkle => {\n      const starX = `${Math.random() * 100}%`;\n      const starY = `${Math.random() * 100}%`;\n      const color = Math.random() > 0.5 ? colors.first : colors.second;\n      const delay = Math.random() * 2;\n      const scale = Math.random() * 1 + 0.3;\n      const lifespan = Math.random() * 10 + 5;\n      const id = `${starX}-${starY}-${Date.now()}`;\n      return { id, x: starX, y: starY, color, delay, scale, lifespan };\n    };\n\n    const initializeStars = () => {\n      const newSparkles = Array.from({ length: sparklesCount }, generateStar);\n      setSparkles(newSparkles);\n    };\n\n    const updateStars = () => {\n      setSparkles((currentSparkles) =>\n        currentSparkles.map((star) => {\n          if (star.lifespan <= 0) {\n            return generateStar();\n          } else {\n            return { ...star, lifespan: star.lifespan - 0.1 };\n          }\n        }),\n      );\n    };\n\n    initializeStars();\n    const interval = setInterval(updateStars, 100);\n\n    return () => clearInterval(interval);\n  }, [colors.first, colors.second]);\n\n  return (\n    <div\n      className={cn(\"text-6xl font-bold\", className)}\n      {...props}\n      style={\n        {\n          \"--sparkles-first-color\": `${colors.first}`,\n          \"--sparkles-second-color\": `${colors.second}`,\n        } as CSSProperties\n      }\n    >\n      <span className=\"relative inline-block\">\n        {sparkles.map((sparkle) => (\n          <Sparkle key={sparkle.id} {...sparkle} />\n        ))}\n        <strong>{text}</strong>\n      </span>\n    </div>\n  );\n};\n\nconst Sparkle: React.FC<Sparkle> = ({ id, x, y, color, delay, scale }) => {\n  return (\n    <motion.svg\n      key={id}\n      className=\"pointer-events-none absolute z-20\"\n      initial={{ opacity: 0, left: x, top: y }}\n      animate={{\n        opacity: [0, 1, 0],\n        scale: [0, scale, 0],\n        rotate: [75, 120, 150],\n      }}\n      transition={{ duration: 0.8, repeat: Infinity, delay }}\n      width=\"21\"\n      height=\"21\"\n      viewBox=\"0 0 21 21\"\n    >\n      <path\n        d=\"M9.82531 0.843845C10.0553 0.215178 10.9446 0.215178 11.1746 0.843845L11.8618 2.72026C12.4006 4.19229 12.3916 6.39157 13.5 7.5C14.6084 8.60843 16.8077 8.59935 18.2797 9.13822L20.1561 9.82534C20.7858 10.0553 20.7858 10.9447 20.1561 11.1747L18.2797 11.8618C16.8077 12.4007 14.6084 12.3916 13.5 13.5C12.3916 14.6084 12.4006 16.8077 11.8618 18.2798L11.1746 20.1562C10.9446 20.7858 10.0553 20.7858 9.82531 20.1562L9.13819 18.2798C8.59932 16.8077 8.60843 14.6084 7.5 13.5C6.39157 12.3916 4.19225 12.4007 2.72023 11.8618L0.843814 11.1747C0.215148 10.9447 0.215148 10.0553 0.843814 9.82534L2.72023 9.13822C4.19225 8.59935 6.39157 8.60843 7.5 7.5C8.60843 6.39157 8.59932 4.19229 9.13819 2.72026L9.82531 0.843845Z\"\n        fill={color}\n      />\n    </motion.svg>\n  );\n};\n\nexport default SparklesText;\n",
      "type": "registry:ui",
      "target": ""
    }
  ]
}
</file>

<file path="public/r/styles/default/text-reveal.json">
{
  "name": "text-reveal",
  "type": "registry:ui",
  "dependencies": [
    "framer-motion"
  ],
  "files": [
    {
      "path": "magicui/text-reveal.tsx",
      "content": "\"use client\";\n\nimport { FC, ReactNode, useRef } from \"react\";\nimport { motion, useScroll, useTransform } from \"framer-motion\";\n\nimport { cn } from \"@/lib/utils\";\n\ninterface TextRevealByWordProps {\n  text: string;\n  className?: string;\n}\n\nexport const TextRevealByWord: FC<TextRevealByWordProps> = ({\n  text,\n  className,\n}) => {\n  const targetRef = useRef<HTMLDivElement | null>(null);\n\n  const { scrollYProgress } = useScroll({\n    target: targetRef,\n  });\n  const words = text.split(\" \");\n\n  return (\n    <div ref={targetRef} className={cn(\"relative z-0 h-[200vh]\", className)}>\n      <div\n        className={\n          \"sticky top-0 mx-auto flex h-[50%] max-w-4xl items-center bg-transparent px-[1rem] py-[5rem]\"\n        }\n      >\n        <p\n          ref={targetRef}\n          className={\n            \"flex flex-wrap p-5 text-2xl font-bold text-black/20 dark:text-white/20 md:p-8 md:text-3xl lg:p-10 lg:text-4xl xl:text-5xl\"\n          }\n        >\n          {words.map((word, i) => {\n            const start = i / words.length;\n            const end = start + 1 / words.length;\n            return (\n              <Word key={i} progress={scrollYProgress} range={[start, end]}>\n                {word}\n              </Word>\n            );\n          })}\n        </p>\n      </div>\n    </div>\n  );\n};\n\ninterface WordProps {\n  children: ReactNode;\n  progress: any;\n  range: [number, number];\n}\n\nconst Word: FC<WordProps> = ({ children, progress, range }) => {\n  const opacity = useTransform(progress, range, [0, 1]);\n  return (\n    <span className=\"xl:lg-3 relative mx-1 lg:mx-2.5\">\n      <span className={\"absolute opacity-30\"}>{children}</span>\n      <motion.span\n        style={{ opacity: opacity }}\n        className={\"text-black dark:text-white\"}\n      >\n        {children}\n      </motion.span>\n    </span>\n  );\n};\n\nexport default TextRevealByWord;\n",
      "type": "registry:ui",
      "target": ""
    }
  ]
}
</file>

<file path="public/r/styles/default/tweet-card.json">
{
  "name": "tweet-card",
  "type": "registry:ui",
  "dependencies": [
    "react-tweet"
  ],
  "files": [
    {
      "path": "magicui/tweet-card.tsx",
      "content": "import { Suspense } from \"react\";\nimport {\n  enrichTweet,\n  type EnrichedTweet,\n  type TweetProps,\n  type TwitterComponents,\n} from \"react-tweet\";\nimport { getTweet, type Tweet } from \"react-tweet/api\";\n\nimport { cn } from \"@/lib/utils\";\n\ninterface TwitterIconProps {\n  className?: string;\n  [key: string]: any;\n}\nconst Twitter = ({ className, ...props }: TwitterIconProps) => (\n  <svg\n    stroke=\"currentColor\"\n    fill=\"currentColor\"\n    strokeWidth=\"0\"\n    viewBox=\"0 0 24 24\"\n    height=\"1em\"\n    width=\"1em\"\n    xmlns=\"http://www.w3.org/2000/svg\"\n    className={className}\n    {...props}\n  >\n    <g>\n      <path fill=\"none\" d=\"M0 0h24v24H0z\"></path>\n      <path d=\"M22.162 5.656a8.384 8.384 0 0 1-2.402.658A4.196 4.196 0 0 0 21.6 4c-.82.488-1.719.83-2.656 1.015a4.182 4.182 0 0 0-7.126 3.814 11.874 11.874 0 0 1-8.62-4.37 4.168 4.168 0 0 0-.566 2.103c0 1.45.738 2.731 1.86 3.481a4.168 4.168 0 0 1-1.894-.523v.052a4.185 4.185 0 0 0 3.355 4.101 4.21 4.21 0 0 1-1.89.072A4.185 4.185 0 0 0 7.97 16.65a8.394 8.394 0 0 1-6.191 1.732 11.83 11.83 0 0 0 6.41 1.88c7.693 0 11.9-6.373 11.9-11.9 0-.18-.005-.362-.013-.54a8.496 8.496 0 0 0 2.087-2.165z\"></path>\n    </g>\n  </svg>\n);\n\nconst Verified = ({ className, ...props }: TwitterIconProps) => (\n  <svg\n    aria-label=\"Verified Account\"\n    viewBox=\"0 0 24 24\"\n    className={className}\n    {...props}\n  >\n    <g fill=\"currentColor\">\n      <path d=\"M22.5 12.5c0-1.58-.875-2.95-2.148-3.6.154-.435.238-.905.238-1.4 0-2.21-1.71-3.998-3.818-3.998-.47 0-.92.084-1.336.25C14.818 2.415 13.51 1.5 12 1.5s-2.816.917-3.437 2.25c-.415-.165-.866-.25-1.336-.25-2.11 0-3.818 1.79-3.818 4 0 .494.083.964.237 1.4-1.272.65-2.147 2.018-2.147 3.6 0 1.495.782 2.798 1.942 3.486-.02.17-.032.34-.032.514 0 2.21 1.708 4 3.818 4 .47 0 .92-.086 1.335-.25.62 1.334 1.926 2.25 3.437 2.25 1.512 0 2.818-.916 3.437-2.25.415.163.865.248 1.336.248 2.11 0 3.818-1.79 3.818-4 0-.174-.012-.344-.033-.513 1.158-.687 1.943-1.99 1.943-3.484zm-6.616-3.334l-4.334 6.5c-.145.217-.382.334-.625.334-.143 0-.288-.04-.416-.126l-.115-.094-2.415-2.415c-.293-.293-.293-.768 0-1.06s.768-.294 1.06 0l1.77 1.767 3.825-5.74c.23-.345.696-.436 1.04-.207.346.23.44.696.21 1.04z\" />\n    </g>\n  </svg>\n);\n\nexport const truncate = (str: string | null, length: number) => {\n  if (!str || str.length <= length) return str;\n  return `${str.slice(0, length - 3)}...`;\n};\n\nconst Skeleton = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => {\n  return (\n    <div className={cn(\"rounded-md bg-primary/10\", className)} {...props} />\n  );\n};\n\nexport const TweetSkeleton = ({\n  className,\n  ...props\n}: {\n  className?: string;\n  [key: string]: any;\n}) => (\n  <div\n    className={cn(\n      \"flex size-full max-h-max min-w-72 flex-col gap-2 rounded-lg border p-4\",\n      className,\n    )}\n    {...props}\n  >\n    <div className=\"flex flex-row gap-2\">\n      <Skeleton className=\"size-10 shrink-0 rounded-full\" />\n      <Skeleton className=\"h-10 w-full\" />\n    </div>\n    <Skeleton className=\"h-20 w-full\" />\n  </div>\n);\n\nexport const TweetNotFound = ({\n  className,\n  ...props\n}: {\n  className?: string;\n  [key: string]: any;\n}) => (\n  <div\n    className={cn(\n      \"flex size-full flex-col items-center justify-center gap-2 rounded-lg border p-4\",\n      className,\n    )}\n    {...props}\n  >\n    <h3>Tweet not found</h3>\n  </div>\n);\n\nexport const TweetHeader = ({ tweet }: { tweet: EnrichedTweet }) => (\n  <div className=\"flex flex-row justify-between tracking-tight\">\n    <div className=\"flex items-center space-x-2\">\n      <a href={tweet.user.url} target=\"_blank\" rel=\"noreferrer\">\n        <img\n          title={`Profile picture of ${tweet.user.name}`}\n          alt={tweet.user.screen_name}\n          height={48}\n          width={48}\n          src={tweet.user.profile_image_url_https}\n          className=\"overflow-hidden rounded-full border border-transparent\"\n        />\n      </a>\n      <div>\n        <a\n          href={tweet.user.url}\n          target=\"_blank\"\n          rel=\"noreferrer\"\n          className=\"flex items-center whitespace-nowrap font-semibold\"\n        >\n          {truncate(tweet.user.name, 20)}\n          {tweet.user.verified ||\n            (tweet.user.is_blue_verified && (\n              <Verified className=\"ml-1 inline size-4 text-blue-500\" />\n            ))}\n        </a>\n        <div className=\"flex items-center space-x-1\">\n          <a\n            href={tweet.user.url}\n            target=\"_blank\"\n            rel=\"noreferrer\"\n            className=\"text-sm text-gray-500 transition-all duration-75\"\n          >\n            @{truncate(tweet.user.screen_name, 16)}\n          </a>\n        </div>\n      </div>\n    </div>\n    <a href={tweet.url} target=\"_blank\" rel=\"noreferrer\">\n      <span className=\"sr-only\">Link to tweet</span>\n      <Twitter className=\"size-5 items-start text-[#3BA9EE] transition-all ease-in-out hover:scale-105\" />\n    </a>\n  </div>\n);\n\nexport const TweetBody = ({ tweet }: { tweet: EnrichedTweet }) => (\n  <div className=\"break-words leading-normal tracking-tighter\">\n    {tweet.entities.map((entity, idx) => {\n      switch (entity.type) {\n        case \"url\":\n        case \"symbol\":\n        case \"hashtag\":\n        case \"mention\":\n          return (\n            <a\n              key={idx}\n              href={entity.href}\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n              className=\"text-sm font-normal text-gray-500\"\n            >\n              <span>{entity.text}</span>\n            </a>\n          );\n        case \"text\":\n          return (\n            <span\n              key={idx}\n              className=\"text-sm font-normal\"\n              dangerouslySetInnerHTML={{ __html: entity.text }}\n            />\n          );\n      }\n    })}\n  </div>\n);\n\nexport const TweetMedia = ({ tweet }: { tweet: EnrichedTweet }) => (\n  <div className=\"flex flex-1 items-center justify-center\">\n    {tweet.video && (\n      <video\n        poster={tweet.video.poster}\n        autoPlay\n        loop\n        muted\n        playsInline\n        className=\"rounded-xl border shadow-sm\"\n      >\n        <source src={tweet.video.variants[0].src} type=\"video/mp4\" />\n        Your browser does not support the video tag.\n      </video>\n    )}\n    {tweet.photos && (\n      <div className=\"relative flex transform-gpu snap-x snap-mandatory gap-4 overflow-x-auto\">\n        <div className=\"shrink-0 snap-center sm:w-2\" />\n        {tweet.photos.map((photo) => (\n          <img\n            key={photo.url}\n            src={photo.url}\n            title={\"Photo by \" + tweet.user.name}\n            alt={tweet.text}\n            className=\"h-64 w-5/6 shrink-0 snap-center snap-always rounded-xl border object-cover shadow-sm\"\n          />\n        ))}\n        <div className=\"shrink-0 snap-center sm:w-2\" />\n      </div>\n    )}\n    {!tweet.video &&\n      !tweet.photos &&\n      // @ts-ignore\n      tweet?.card?.binding_values?.thumbnail_image_large?.image_value.url && (\n        <img\n          // @ts-ignore\n          src={tweet.card.binding_values.thumbnail_image_large.image_value.url}\n          className=\"h-64 rounded-xl border object-cover shadow-sm\"\n        />\n      )}\n  </div>\n);\n\nexport const MagicTweet = ({\n  tweet,\n  components,\n  className,\n  ...props\n}: {\n  tweet: Tweet;\n  components?: TwitterComponents;\n  className?: string;\n}) => {\n  const enrichedTweet = enrichTweet(tweet);\n  return (\n    <div\n      className={cn(\n        \"relative flex size-full max-w-lg flex-col gap-2 overflow-hidden rounded-lg border p-4 backdrop-blur-md\",\n        className,\n      )}\n      {...props}\n    >\n      <TweetHeader tweet={enrichedTweet} />\n      <TweetBody tweet={enrichedTweet} />\n      <TweetMedia tweet={enrichedTweet} />\n    </div>\n  );\n};\n\n/**\n * TweetCard (Server Side Only)\n */\nexport const TweetCard = async ({\n  id,\n  components,\n  fallback = <TweetSkeleton />,\n  onError,\n  ...props\n}: TweetProps & {\n  className?: string;\n}) => {\n  const tweet = id\n    ? await getTweet(id).catch((err) => {\n        if (onError) {\n          onError(err);\n        } else {\n          console.error(err);\n        }\n      })\n    : undefined;\n\n  if (!tweet) {\n    const NotFound = components?.TweetNotFound || TweetNotFound;\n    return <NotFound {...props} />;\n  }\n\n  return (\n    <Suspense fallback={fallback}>\n      <MagicTweet tweet={tweet} {...props} />\n    </Suspense>\n  );\n};\n\nexport default TweetCard;\n",
      "type": "registry:ui",
      "target": ""
    }
  ]
}
</file>

<file path="public/r/styles/default/typing-animation.json">
{
  "name": "typing-animation",
  "type": "registry:ui",
  "files": [
    {
      "path": "magicui/typing-animation.tsx",
      "content": "\"use client\";\n\nimport { useEffect, useState } from \"react\";\n\nimport { cn } from \"@/lib/utils\";\n\ninterface TypingAnimationProps {\n  text: string;\n  duration?: number;\n  className?: string;\n}\n\nexport default function TypingAnimation({\n  text,\n  duration = 200,\n  className,\n}: TypingAnimationProps) {\n  const [displayedText, setDisplayedText] = useState<string>(\"\");\n  const [i, setI] = useState<number>(0);\n\n  useEffect(() => {\n    const typingEffect = setInterval(() => {\n      if (i < text.length) {\n        setDisplayedText(text.substring(0, i + 1));\n        setI(i + 1);\n      } else {\n        clearInterval(typingEffect);\n      }\n    }, duration);\n\n    return () => {\n      clearInterval(typingEffect);\n    };\n  }, [duration, i]);\n\n  return (\n    <h1\n      className={cn(\n        \"font-display text-center text-4xl font-bold leading-[5rem] tracking-[-0.02em] drop-shadow-sm\",\n        className,\n      )}\n    >\n      {displayedText ? displayedText : text}\n    </h1>\n  );\n}\n",
      "type": "registry:ui",
      "target": ""
    }
  ]
}
</file>

<file path="public/r/styles/default/word-fade-in.json">
{
  "name": "word-fade-in",
  "type": "registry:ui",
  "dependencies": [
    "framer-motion"
  ],
  "files": [
    {
      "path": "magicui/word-fade-in.tsx",
      "content": "\"use client\";\n\nimport { motion, Variants } from \"framer-motion\";\n\nimport { cn } from \"@/lib/utils\";\n\ninterface WordFadeInProps {\n  words: string;\n  className?: string;\n  delay?: number;\n  variants?: Variants;\n}\n\nexport default function WordFadeIn({\n  words,\n  delay = 0.15,\n  variants = {\n    hidden: { opacity: 0 },\n    visible: (i: any) => ({\n      y: 0,\n      opacity: 1,\n      transition: { delay: i * delay },\n    }),\n  },\n  className,\n}: WordFadeInProps) {\n  const _words = words.split(\" \");\n\n  return (\n    <motion.h1\n      variants={variants}\n      initial=\"hidden\"\n      animate=\"visible\"\n      className={cn(\n        \"font-display text-center text-4xl font-bold tracking-[-0.02em] text-black drop-shadow-sm dark:text-white md:text-7xl md:leading-[5rem]\",\n        className,\n      )}\n    >\n      {_words.map((word, i) => (\n        <motion.span key={word} variants={variants} custom={i}>\n          {word}{\" \"}\n        </motion.span>\n      ))}\n    </motion.h1>\n  );\n}\n",
      "type": "registry:ui",
      "target": ""
    }
  ]
}
</file>

<file path="public/r/styles/default/word-pull-up.json">
{
  "name": "word-pull-up",
  "type": "registry:ui",
  "dependencies": [
    "framer-motion"
  ],
  "files": [
    {
      "path": "magicui/word-pull-up.tsx",
      "content": "\"use client\";\n\nimport { motion, Variants } from \"framer-motion\";\n\nimport { cn } from \"@/lib/utils\";\n\ninterface WordPullUpProps {\n  words: string;\n  delayMultiple?: number;\n  wrapperFramerProps?: Variants;\n  framerProps?: Variants;\n  className?: string;\n}\n\nexport default function WordPullUp({\n  words,\n  wrapperFramerProps = {\n    hidden: { opacity: 0 },\n    show: {\n      opacity: 1,\n      transition: {\n        staggerChildren: 0.2,\n      },\n    },\n  },\n  framerProps = {\n    hidden: { y: 20, opacity: 0 },\n    show: { y: 0, opacity: 1 },\n  },\n  className,\n}: WordPullUpProps) {\n  return (\n    <motion.h1\n      variants={wrapperFramerProps}\n      initial=\"hidden\"\n      animate=\"show\"\n      className={cn(\n        \"font-display text-center text-4xl font-bold leading-[5rem] tracking-[-0.02em] drop-shadow-sm\",\n        className,\n      )}\n    >\n      {words.split(\" \").map((word, i) => (\n        <motion.span\n          key={i}\n          variants={framerProps}\n          style={{ display: \"inline-block\", paddingRight: \"8px\" }}\n        >\n          {word === \"\" ? <span>&nbsp;</span> : word}\n        </motion.span>\n      ))}\n    </motion.h1>\n  );\n}\n",
      "type": "registry:ui",
      "target": ""
    }
  ]
}
</file>

<file path="public/r/styles/default/word-rotate.json">
{
  "name": "word-rotate",
  "type": "registry:ui",
  "dependencies": [
    "framer-motion"
  ],
  "files": [
    {
      "path": "magicui/word-rotate.tsx",
      "content": "\"use client\";\n\nimport { useEffect, useState } from \"react\";\nimport { AnimatePresence, HTMLMotionProps, motion } from \"framer-motion\";\n\nimport { cn } from \"@/lib/utils\";\n\ninterface WordRotateProps {\n  words: string[];\n  duration?: number;\n  framerProps?: HTMLMotionProps<\"h1\">;\n  className?: string;\n}\n\nexport default function WordRotate({\n  words,\n  duration = 2500,\n  framerProps = {\n    initial: { opacity: 0, y: -50 },\n    animate: { opacity: 1, y: 0 },\n    exit: { opacity: 0, y: 50 },\n    transition: { duration: 0.25, ease: \"easeOut\" },\n  },\n  className,\n}: WordRotateProps) {\n  const [index, setIndex] = useState(0);\n\n  useEffect(() => {\n    const interval = setInterval(() => {\n      setIndex((prevIndex) => (prevIndex + 1) % words.length);\n    }, duration);\n\n    // Clean up interval on unmount\n    return () => clearInterval(interval);\n  }, [words, duration]);\n\n  return (\n    <div className=\"overflow-hidden py-2\">\n      <AnimatePresence mode=\"wait\">\n        <motion.h1\n          key={words[index]}\n          className={cn(className)}\n          {...framerProps}\n        >\n          {words[index]}\n        </motion.h1>\n      </AnimatePresence>\n    </div>\n  );\n}\n",
      "type": "registry:ui",
      "target": ""
    }
  ]
}
</file>

<file path="public/r/styles/index.json">
[
  {
    "name": "default",
    "label": "Default"
  }
]
</file>

<file path="public/r/themes/gray.json">
{
  "name": "gray",
  "label": "Gray",
  "cssVars": {
    "light": {
      "background": "0 0% 100%",
      "foreground": "224 71.4% 4.1%",
      "card": "0 0% 100%",
      "card-foreground": "224 71.4% 4.1%",
      "popover": "0 0% 100%",
      "popover-foreground": "224 71.4% 4.1%",
      "primary": "220.9 39.3% 11%",
      "primary-foreground": "210 20% 98%",
      "secondary": "220 14.3% 95.9%",
      "secondary-foreground": "220.9 39.3% 11%",
      "muted": "220 14.3% 95.9%",
      "muted-foreground": "220 8.9% 46.1%",
      "accent": "220 14.3% 95.9%",
      "accent-foreground": "220.9 39.3% 11%",
      "destructive": "0 84.2% 60.2%",
      "destructive-foreground": "210 20% 98%",
      "border": "220 13% 91%",
      "input": "220 13% 91%",
      "ring": "224 71.4% 4.1%",
      "chart-1": "12 76% 61%",
      "chart-2": "173 58% 39%",
      "chart-3": "197 37% 24%",
      "chart-4": "43 74% 66%",
      "chart-5": "27 87% 67%"
    },
    "dark": {
      "background": "224 71.4% 4.1%",
      "foreground": "210 20% 98%",
      "card": "224 71.4% 4.1%",
      "card-foreground": "210 20% 98%",
      "popover": "224 71.4% 4.1%",
      "popover-foreground": "210 20% 98%",
      "primary": "210 20% 98%",
      "primary-foreground": "220.9 39.3% 11%",
      "secondary": "215 27.9% 16.9%",
      "secondary-foreground": "210 20% 98%",
      "muted": "215 27.9% 16.9%",
      "muted-foreground": "217.9 10.6% 64.9%",
      "accent": "215 27.9% 16.9%",
      "accent-foreground": "210 20% 98%",
      "destructive": "0 62.8% 30.6%",
      "destructive-foreground": "210 20% 98%",
      "border": "215 27.9% 16.9%",
      "input": "215 27.9% 16.9%",
      "ring": "216 12.2% 83.9%",
      "chart-1": "220 70% 50%",
      "chart-2": "160 60% 45%",
      "chart-3": "30 80% 55%",
      "chart-4": "280 65% 60%",
      "chart-5": "340 75% 55%"
    }
  }
}
</file>

<file path="public/r/themes/neutral.json">
{
  "name": "neutral",
  "label": "Neutral",
  "cssVars": {
    "light": {
      "background": "0 0% 100%",
      "foreground": "0 0% 3.9%",
      "card": "0 0% 100%",
      "card-foreground": "0 0% 3.9%",
      "popover": "0 0% 100%",
      "popover-foreground": "0 0% 3.9%",
      "primary": "0 0% 9%",
      "primary-foreground": "0 0% 98%",
      "secondary": "0 0% 96.1%",
      "secondary-foreground": "0 0% 9%",
      "muted": "0 0% 96.1%",
      "muted-foreground": "0 0% 45.1%",
      "accent": "0 0% 96.1%",
      "accent-foreground": "0 0% 9%",
      "destructive": "0 84.2% 60.2%",
      "destructive-foreground": "0 0% 98%",
      "border": "0 0% 89.8%",
      "input": "0 0% 89.8%",
      "ring": "0 0% 3.9%",
      "chart-1": "12 76% 61%",
      "chart-2": "173 58% 39%",
      "chart-3": "197 37% 24%",
      "chart-4": "43 74% 66%",
      "chart-5": "27 87% 67%"
    },
    "dark": {
      "background": "0 0% 3.9%",
      "foreground": "0 0% 98%",
      "card": "0 0% 3.9%",
      "card-foreground": "0 0% 98%",
      "popover": "0 0% 3.9%",
      "popover-foreground": "0 0% 98%",
      "primary": "0 0% 98%",
      "primary-foreground": "0 0% 9%",
      "secondary": "0 0% 14.9%",
      "secondary-foreground": "0 0% 98%",
      "muted": "0 0% 14.9%",
      "muted-foreground": "0 0% 63.9%",
      "accent": "0 0% 14.9%",
      "accent-foreground": "0 0% 98%",
      "destructive": "0 62.8% 30.6%",
      "destructive-foreground": "0 0% 98%",
      "border": "0 0% 14.9%",
      "input": "0 0% 14.9%",
      "ring": "0 0% 83.1%",
      "chart-1": "220 70% 50%",
      "chart-2": "160 60% 45%",
      "chart-3": "30 80% 55%",
      "chart-4": "280 65% 60%",
      "chart-5": "340 75% 55%"
    }
  }
}
</file>

<file path="public/r/themes/slate.json">
{
  "name": "slate",
  "label": "Slate",
  "cssVars": {
    "light": {
      "background": "0 0% 100%",
      "foreground": "222.2 84% 4.9%",
      "card": "0 0% 100%",
      "card-foreground": "222.2 84% 4.9%",
      "popover": "0 0% 100%",
      "popover-foreground": "222.2 84% 4.9%",
      "primary": "222.2 47.4% 11.2%",
      "primary-foreground": "210 40% 98%",
      "secondary": "210 40% 96.1%",
      "secondary-foreground": "222.2 47.4% 11.2%",
      "muted": "210 40% 96.1%",
      "muted-foreground": "215.4 16.3% 46.9%",
      "accent": "210 40% 96.1%",
      "accent-foreground": "222.2 47.4% 11.2%",
      "destructive": "0 84.2% 60.2%",
      "destructive-foreground": "210 40% 98%",
      "border": "214.3 31.8% 91.4%",
      "input": "214.3 31.8% 91.4%",
      "ring": "222.2 84% 4.9%",
      "chart-1": "12 76% 61%",
      "chart-2": "173 58% 39%",
      "chart-3": "197 37% 24%",
      "chart-4": "43 74% 66%",
      "chart-5": "27 87% 67%"
    },
    "dark": {
      "background": "222.2 84% 4.9%",
      "foreground": "210 40% 98%",
      "card": "222.2 84% 4.9%",
      "card-foreground": "210 40% 98%",
      "popover": "222.2 84% 4.9%",
      "popover-foreground": "210 40% 98%",
      "primary": "210 40% 98%",
      "primary-foreground": "222.2 47.4% 11.2%",
      "secondary": "217.2 32.6% 17.5%",
      "secondary-foreground": "210 40% 98%",
      "muted": "217.2 32.6% 17.5%",
      "muted-foreground": "215 20.2% 65.1%",
      "accent": "217.2 32.6% 17.5%",
      "accent-foreground": "210 40% 98%",
      "destructive": "0 62.8% 30.6%",
      "destructive-foreground": "210 40% 98%",
      "border": "217.2 32.6% 17.5%",
      "input": "217.2 32.6% 17.5%",
      "ring": "212.7 26.8% 83.9%",
      "chart-1": "220 70% 50%",
      "chart-2": "160 60% 45%",
      "chart-3": "30 80% 55%",
      "chart-4": "280 65% 60%",
      "chart-5": "340 75% 55%"
    }
  }
}
</file>

<file path="public/r/themes/stone.json">
{
  "name": "stone",
  "label": "Stone",
  "cssVars": {
    "light": {
      "background": "0 0% 100%",
      "foreground": "20 14.3% 4.1%",
      "card": "0 0% 100%",
      "card-foreground": "20 14.3% 4.1%",
      "popover": "0 0% 100%",
      "popover-foreground": "20 14.3% 4.1%",
      "primary": "24 9.8% 10%",
      "primary-foreground": "60 9.1% 97.8%",
      "secondary": "60 4.8% 95.9%",
      "secondary-foreground": "24 9.8% 10%",
      "muted": "60 4.8% 95.9%",
      "muted-foreground": "25 5.3% 44.7%",
      "accent": "60 4.8% 95.9%",
      "accent-foreground": "24 9.8% 10%",
      "destructive": "0 84.2% 60.2%",
      "destructive-foreground": "60 9.1% 97.8%",
      "border": "20 5.9% 90%",
      "input": "20 5.9% 90%",
      "ring": "20 14.3% 4.1%",
      "chart-1": "12 76% 61%",
      "chart-2": "173 58% 39%",
      "chart-3": "197 37% 24%",
      "chart-4": "43 74% 66%",
      "chart-5": "27 87% 67%"
    },
    "dark": {
      "background": "20 14.3% 4.1%",
      "foreground": "60 9.1% 97.8%",
      "card": "20 14.3% 4.1%",
      "card-foreground": "60 9.1% 97.8%",
      "popover": "20 14.3% 4.1%",
      "popover-foreground": "60 9.1% 97.8%",
      "primary": "60 9.1% 97.8%",
      "primary-foreground": "24 9.8% 10%",
      "secondary": "12 6.5% 15.1%",
      "secondary-foreground": "60 9.1% 97.8%",
      "muted": "12 6.5% 15.1%",
      "muted-foreground": "24 5.4% 63.9%",
      "accent": "12 6.5% 15.1%",
      "accent-foreground": "60 9.1% 97.8%",
      "destructive": "0 62.8% 30.6%",
      "destructive-foreground": "60 9.1% 97.8%",
      "border": "12 6.5% 15.1%",
      "input": "12 6.5% 15.1%",
      "ring": "24 5.7% 82.9%",
      "chart-1": "220 70% 50%",
      "chart-2": "160 60% 45%",
      "chart-3": "30 80% 55%",
      "chart-4": "280 65% 60%",
      "chart-5": "340 75% 55%"
    }
  }
}
</file>

<file path="public/r/themes/zinc.json">
{
  "name": "zinc",
  "label": "Zinc",
  "cssVars": {
    "light": {
      "background": "0 0% 100%",
      "foreground": "240 10% 3.9%",
      "card": "0 0% 100%",
      "card-foreground": "240 10% 3.9%",
      "popover": "0 0% 100%",
      "popover-foreground": "240 10% 3.9%",
      "primary": "240 5.9% 10%",
      "primary-foreground": "0 0% 98%",
      "secondary": "240 4.8% 95.9%",
      "secondary-foreground": "240 5.9% 10%",
      "muted": "240 4.8% 95.9%",
      "muted-foreground": "240 3.8% 46.1%",
      "accent": "240 4.8% 95.9%",
      "accent-foreground": "240 5.9% 10%",
      "destructive": "0 84.2% 60.2%",
      "destructive-foreground": "0 0% 98%",
      "border": "240 5.9% 90%",
      "input": "240 5.9% 90%",
      "ring": "240 10% 3.9%",
      "chart-1": "12 76% 61%",
      "chart-2": "173 58% 39%",
      "chart-3": "197 37% 24%",
      "chart-4": "43 74% 66%",
      "chart-5": "27 87% 67%"
    },
    "dark": {
      "background": "240 10% 3.9%",
      "foreground": "0 0% 98%",
      "card": "240 10% 3.9%",
      "card-foreground": "0 0% 98%",
      "popover": "240 10% 3.9%",
      "popover-foreground": "0 0% 98%",
      "primary": "0 0% 98%",
      "primary-foreground": "240 5.9% 10%",
      "secondary": "240 3.7% 15.9%",
      "secondary-foreground": "0 0% 98%",
      "muted": "240 3.7% 15.9%",
      "muted-foreground": "240 5% 64.9%",
      "accent": "240 3.7% 15.9%",
      "accent-foreground": "0 0% 98%",
      "destructive": "0 62.8% 30.6%",
      "destructive-foreground": "0 0% 98%",
      "border": "240 3.7% 15.9%",
      "input": "240 3.7% 15.9%",
      "ring": "240 4.9% 83.9%",
      "chart-1": "220 70% 50%",
      "chart-2": "160 60% 45%",
      "chart-3": "30 80% 55%",
      "chart-4": "280 65% 60%",
      "chart-5": "340 75% 55%"
    }
  }
}
</file>

<file path="public/r/themes.css">
.theme-zinc {
  --background: 0 0% 100%;
  --foreground: 240 10% 3.9%;

  --muted: 240 4.8% 95.9%;
  --muted-foreground: 240 3.8% 46.1%;

  --popover: 0 0% 100%;
  --popover-foreground: 240 10% 3.9%;

  --card: 0 0% 100%;
  --card-foreground: 240 10% 3.9%;

  --border: 240 5.9% 90%;
  --input: 240 5.9% 90%;

  --primary: 240 5.9% 10%;
  --primary-foreground: 0 0% 98%;

  --secondary: 240 4.8% 95.9%;
  --secondary-foreground: 240 5.9% 10%;

  --accent: 240 4.8% 95.9%;
  --accent-foreground: 240 5.9% 10%;

  --destructive: 0 84.2% 60.2%;
  --destructive-foreground: 0 0% 98%;

  --ring: 240 5.9% 10%;

  --radius: 0.5rem;
}

.dark .theme-zinc {
  --background: 240 10% 3.9%;
  --foreground: 0 0% 98%;

  --muted: 240 3.7% 15.9%;
  --muted-foreground: 240 5% 64.9%;

  --popover: 240 10% 3.9%;
  --popover-foreground: 0 0% 98%;

  --card: 240 10% 3.9%;
  --card-foreground: 0 0% 98%;

  --border: 240 3.7% 15.9%;
  --input: 240 3.7% 15.9%;

  --primary: 0 0% 98%;
  --primary-foreground: 240 5.9% 10%;

  --secondary: 240 3.7% 15.9%;
  --secondary-foreground: 0 0% 98%;

  --accent: 240 3.7% 15.9%;
  --accent-foreground: 0 0% 98%;

  --destructive: 0 62.8% 30.6%;
  --destructive-foreground: 0 0% 98%;

  --ring: 240 4.9% 83.9%;
}

.theme-slate {
  --background: 0 0% 100%;
  --foreground: 222.2 84% 4.9%;

  --muted: 210 40% 96.1%;
  --muted-foreground: 215.4 16.3% 46.9%;

  --popover: 0 0% 100%;
  --popover-foreground: 222.2 84% 4.9%;

  --card: 0 0% 100%;
  --card-foreground: 222.2 84% 4.9%;

  --border: 214.3 31.8% 91.4%;
  --input: 214.3 31.8% 91.4%;

  --primary: 222.2 47.4% 11.2%;
  --primary-foreground: 210 40% 98%;

  --secondary: 210 40% 96.1%;
  --secondary-foreground: 222.2 47.4% 11.2%;

  --accent: 210 40% 96.1%;
  --accent-foreground: 222.2 47.4% 11.2%;

  --destructive: 0 84.2% 60.2%;
  --destructive-foreground: 210 40% 98%;

  --ring: 222.2 84% 4.9%;

  --radius: 0.5rem;
}

.dark .theme-slate {
  --background: 222.2 84% 4.9%;
  --foreground: 210 40% 98%;

  --muted: 217.2 32.6% 17.5%;
  --muted-foreground: 215 20.2% 65.1%;

  --popover: 222.2 84% 4.9%;
  --popover-foreground: 210 40% 98%;

  --card: 222.2 84% 4.9%;
  --card-foreground: 210 40% 98%;

  --border: 217.2 32.6% 17.5%;
  --input: 217.2 32.6% 17.5%;

  --primary: 210 40% 98%;
  --primary-foreground: 222.2 47.4% 11.2%;

  --secondary: 217.2 32.6% 17.5%;
  --secondary-foreground: 210 40% 98%;

  --accent: 217.2 32.6% 17.5%;
  --accent-foreground: 210 40% 98%;

  --destructive: 0 62.8% 30.6%;
  --destructive-foreground: 210 40% 98%;

  --ring: 212.7 26.8% 83.9;
}

.theme-stone {
  --background: 0 0% 100%;
  --foreground: 20 14.3% 4.1%;

  --muted: 60 4.8% 95.9%;
  --muted-foreground: 25 5.3% 44.7%;

  --popover: 0 0% 100%;
  --popover-foreground: 20 14.3% 4.1%;

  --card: 0 0% 100%;
  --card-foreground: 20 14.3% 4.1%;

  --border: 20 5.9% 90%;
  --input: 20 5.9% 90%;

  --primary: 24 9.8% 10%;
  --primary-foreground: 60 9.1% 97.8%;

  --secondary: 60 4.8% 95.9%;
  --secondary-foreground: 24 9.8% 10%;

  --accent: 60 4.8% 95.9%;
  --accent-foreground: 24 9.8% 10%;

  --destructive: 0 84.2% 60.2%;
  --destructive-foreground: 60 9.1% 97.8%;

  --ring: 20 14.3% 4.1%;

  --radius: 0.95rem;
}

.dark .theme-stone {
  --background: 20 14.3% 4.1%;
  --foreground: 60 9.1% 97.8%;

  --muted: 12 6.5% 15.1%;
  --muted-foreground: 24 5.4% 63.9%;

  --popover: 20 14.3% 4.1%;
  --popover-foreground: 60 9.1% 97.8%;

  --card: 20 14.3% 4.1%;
  --card-foreground: 60 9.1% 97.8%;

  --border: 12 6.5% 15.1%;
  --input: 12 6.5% 15.1%;

  --primary: 60 9.1% 97.8%;
  --primary-foreground: 24 9.8% 10%;

  --secondary: 12 6.5% 15.1%;
  --secondary-foreground: 60 9.1% 97.8%;

  --accent: 12 6.5% 15.1%;
  --accent-foreground: 60 9.1% 97.8%;

  --destructive: 0 62.8% 30.6%;
  --destructive-foreground: 60 9.1% 97.8%;

  --ring: 24 5.7% 82.9%;
}

.theme-gray {
  --background: 0 0% 100%;
  --foreground: 224 71.4% 4.1%;

  --muted: 220 14.3% 95.9%;
  --muted-foreground: 220 8.9% 46.1%;

  --popover: 0 0% 100%;
  --popover-foreground: 224 71.4% 4.1%;

  --card: 0 0% 100%;
  --card-foreground: 224 71.4% 4.1%;

  --border: 220 13% 91%;
  --input: 220 13% 91%;

  --primary: 220.9 39.3% 11%;
  --primary-foreground: 210 20% 98%;

  --secondary: 220 14.3% 95.9%;
  --secondary-foreground: 220.9 39.3% 11%;

  --accent: 220 14.3% 95.9%;
  --accent-foreground: 220.9 39.3% 11%;

  --destructive: 0 84.2% 60.2%;
  --destructive-foreground: 210 20% 98%;

  --ring: 224 71.4% 4.1%;

  --radius: 0.35rem;
}

.dark .theme-gray {
  --background: 224 71.4% 4.1%;
  --foreground: 210 20% 98%;

  --muted: 215 27.9% 16.9%;
  --muted-foreground: 217.9 10.6% 64.9%;

  --popover: 224 71.4% 4.1%;
  --popover-foreground: 210 20% 98%;

  --card: 224 71.4% 4.1%;
  --card-foreground: 210 20% 98%;

  --border: 215 27.9% 16.9%;
  --input: 215 27.9% 16.9%;

  --primary: 210 20% 98%;
  --primary-foreground: 220.9 39.3% 11%;

  --secondary: 215 27.9% 16.9%;
  --secondary-foreground: 210 20% 98%;

  --accent: 215 27.9% 16.9%;
  --accent-foreground: 210 20% 98%;

  --destructive: 0 62.8% 30.6%;
  --destructive-foreground: 210 20% 98%;

  --ring: 216 12.2% 83.9%;
}

.theme-neutral {
  --background: 0 0% 100%;
  --foreground: 0 0% 3.9%;

  --muted: 0 0% 96.1%;
  --muted-foreground: 0 0% 45.1%;

  --popover: 0 0% 100%;
  --popover-foreground: 0 0% 3.9%;

  --card: 0 0% 100%;
  --card-foreground: 0 0% 3.9%;

  --border: 0 0% 89.8%;
  --input: 0 0% 89.8%;

  --primary: 0 0% 9%;
  --primary-foreground: 0 0% 98%;

  --secondary: 0 0% 96.1%;
  --secondary-foreground: 0 0% 9%;

  --accent: 0 0% 96.1%;
  --accent-foreground: 0 0% 9%;

  --destructive: 0 84.2% 60.2%;
  --destructive-foreground: 0 0% 98%;

  --ring: 0 0% 3.9%;

  --radius: ;
}

.dark .theme-neutral {
  --background: 0 0% 3.9%;
  --foreground: 0 0% 98%;

  --muted: 0 0% 14.9%;
  --muted-foreground: 0 0% 63.9%;

  --popover: 0 0% 3.9%;
  --popover-foreground: 0 0% 98%;

  --card: 0 0% 3.9%;
  --card-foreground: 0 0% 98%;

  --border: 0 0% 14.9%;
  --input: 0 0% 14.9%;

  --primary: 0 0% 98%;
  --primary-foreground: 0 0% 9%;

  --secondary: 0 0% 14.9%;
  --secondary-foreground: 0 0% 98%;

  --accent: 0 0% 14.9%;
  --accent-foreground: 0 0% 98%;

  --destructive: 0 62.8% 30.6%;
  --destructive-foreground: 0 0% 98%;

  --ring: 0 0% 83.1%;
}

.theme-red {
  --background: 0 0% 100%;
  --foreground: 0 0% 3.9%;

  --muted: 0 0% 96.1%;
  --muted-foreground: 0 0% 45.1%;

  --popover: 0 0% 100%;
  --popover-foreground: 0 0% 3.9%;

  --card: 0 0% 100%;
  --card-foreground: 0 0% 3.9%;

  --border: 0 0% 89.8%;
  --input: 0 0% 89.8%;

  --primary: 0 72.2% 50.6%;
  --primary-foreground: 0 85.7% 97.3%;

  --secondary: 0 0% 96.1%;
  --secondary-foreground: 0 0% 9%;

  --accent: 0 0% 96.1%;
  --accent-foreground: 0 0% 9%;

  --destructive: 0 84.2% 60.2%;
  --destructive-foreground: 0 0% 98%;

  --ring: 0 72.2% 50.6%;

  --radius: 0.4rem;
}

.dark .theme-red {
  --background: 0 0% 3.9%;
  --foreground: 0 0% 98%;

  --muted: 0 0% 14.9%;
  --muted-foreground: 0 0% 63.9%;

  --popover: 0 0% 3.9%;
  --popover-foreground: 0 0% 98%;

  --card: 0 0% 3.9%;
  --card-foreground: 0 0% 98%;

  --border: 0 0% 14.9%;
  --input: 0 0% 14.9%;

  --primary: 0 72.2% 50.6%;
  --primary-foreground: 0 85.7% 97.3%;

  --secondary: 0 0% 14.9%;
  --secondary-foreground: 0 0% 98%;

  --accent: 0 0% 14.9%;
  --accent-foreground: 0 0% 98%;

  --destructive: 0 62.8% 30.6%;
  --destructive-foreground: 0 0% 98%;

  --ring: 0 72.2% 50.6%;
}

.theme-rose {
  --background: 0 0% 100%;
  --foreground: 240 10% 3.9%;

  --muted: 240 4.8% 95.9%;
  --muted-foreground: 240 3.8% 46.1%;

  --popover: 0 0% 100%;
  --popover-foreground: 240 10% 3.9%;

  --card: 0 0% 100%;
  --card-foreground: 240 10% 3.9%;

  --border: 240 5.9% 90%;
  --input: 240 5.9% 90%;

  --primary: 346.8 77.2% 49.8%;
  --primary-foreground: 355.7 100% 97.3%;

  --secondary: 240 4.8% 95.9%;
  --secondary-foreground: 240 5.9% 10%;

  --accent: 240 4.8% 95.9%;
  --accent-foreground: 240 5.9% 10%;

  --destructive: 0 84.2% 60.2%;
  --destructive-foreground: 0 0% 98%;

  --ring: 346.8 77.2% 49.8%;

  --radius: 0.5rem;
}

.dark .theme-rose {
  --background: 20 14.3% 4.1%;
  --foreground: 0 0% 95%;

  --muted: 0 0% 15%;
  --muted-foreground: 240 5% 64.9%;

  --popover: 0 0% 9%;
  --popover-foreground: 0 0% 95%;

  --card: 24 9.8% 10%;
  --card-foreground: 0 0% 95%;

  --border: 240 3.7% 15.9%;
  --input: 240 3.7% 15.9%;

  --primary: 346.8 77.2% 49.8%;
  --primary-foreground: 355.7 100% 97.3%;

  --secondary: 240 3.7% 15.9%;
  --secondary-foreground: 0 0% 98%;

  --accent: 12 6.5% 15.1%;
  --accent-foreground: 0 0% 98%;

  --destructive: 0 62.8% 30.6%;
  --destructive-foreground: 0 85.7% 97.3%;

  --ring: 346.8 77.2% 49.8%;
}

.theme-orange {
  --background: 0 0% 100%;
  --foreground: 20 14.3% 4.1%;

  --muted: 60 4.8% 95.9%;
  --muted-foreground: 25 5.3% 44.7%;

  --popover: 0 0% 100%;
  --popover-foreground: 20 14.3% 4.1%;

  --card: 0 0% 100%;
  --card-foreground: 20 14.3% 4.1%;

  --border: 20 5.9% 90%;
  --input: 20 5.9% 90%;

  --primary: 24.6 95% 53.1%;
  --primary-foreground: 60 9.1% 97.8%;

  --secondary: 60 4.8% 95.9%;
  --secondary-foreground: 24 9.8% 10%;

  --accent: 60 4.8% 95.9%;
  --accent-foreground: 24 9.8% 10%;

  --destructive: 0 84.2% 60.2%;
  --destructive-foreground: 60 9.1% 97.8%;

  --ring: 24.6 95% 53.1%;

  --radius: 0.95rem;
}

.dark .theme-orange {
  --background: 20 14.3% 4.1%;
  --foreground: 60 9.1% 97.8%;

  --muted: 12 6.5% 15.1%;
  --muted-foreground: 24 5.4% 63.9%;

  --popover: 20 14.3% 4.1%;
  --popover-foreground: 60 9.1% 97.8%;

  --card: 20 14.3% 4.1%;
  --card-foreground: 60 9.1% 97.8%;

  --border: 12 6.5% 15.1%;
  --input: 12 6.5% 15.1%;

  --primary: 20.5 90.2% 48.2%;
  --primary-foreground: 60 9.1% 97.8%;

  --secondary: 12 6.5% 15.1%;
  --secondary-foreground: 60 9.1% 97.8%;

  --accent: 12 6.5% 15.1%;
  --accent-foreground: 60 9.1% 97.8%;

  --destructive: 0 72.2% 50.6%;
  --destructive-foreground: 60 9.1% 97.8%;

  --ring: 20.5 90.2% 48.2%;
}

.theme-green {
  --background: 0 0% 100%;
  --foreground: 240 10% 3.9%;

  --muted: 240 4.8% 95.9%;
  --muted-foreground: 240 3.8% 46.1%;

  --popover: 0 0% 100%;
  --popover-foreground: 240 10% 3.9%;

  --card: 0 0% 100%;
  --card-foreground: 240 10% 3.9%;

  --border: 240 5.9% 90%;
  --input: 240 5.9% 90%;

  --primary: 142.1 76.2% 36.3%;
  --primary-foreground: 355.7 100% 97.3%;

  --secondary: 240 4.8% 95.9%;
  --secondary-foreground: 240 5.9% 10%;

  --accent: 240 4.8% 95.9%;
  --accent-foreground: 240 5.9% 10%;

  --destructive: 0 84.2% 60.2%;
  --destructive-foreground: 0 0% 98%;

  --ring: 142.1 76.2% 36.3%;

  --radius: ;
}

.dark .theme-green {
  --background: 20 14.3% 4.1%;
  --foreground: 0 0% 95%;

  --muted: 0 0% 15%;
  --muted-foreground: 240 5% 64.9%;

  --popover: 0 0% 9%;
  --popover-foreground: 0 0% 95%;

  --card: 24 9.8% 10%;
  --card-foreground: 0 0% 95%;

  --border: 240 3.7% 15.9%;
  --input: 240 3.7% 15.9%;

  --primary: 142.1 70.6% 45.3%;
  --primary-foreground: 144.9 80.4% 10%;

  --secondary: 240 3.7% 15.9%;
  --secondary-foreground: 0 0% 98%;

  --accent: 12 6.5% 15.1%;
  --accent-foreground: 0 0% 98%;

  --destructive: 0 62.8% 30.6%;
  --destructive-foreground: 0 85.7% 97.3%;

  --ring: 142.4 71.8% 29.2%;
}

.theme-blue {
  --background: 0 0% 100%;
  --foreground: 222.2 84% 4.9%;

  --muted: 210 40% 96.1%;
  --muted-foreground: 215.4 16.3% 46.9%;

  --popover: 0 0% 100%;
  --popover-foreground: 222.2 84% 4.9%;

  --card: 0 0% 100%;
  --card-foreground: 222.2 84% 4.9%;

  --border: 214.3 31.8% 91.4%;
  --input: 214.3 31.8% 91.4%;

  --primary: 221.2 83.2% 53.3%;
  --primary-foreground: 210 40% 98%;

  --secondary: 210 40% 96.1%;
  --secondary-foreground: 222.2 47.4% 11.2%;

  --accent: 210 40% 96.1%;
  --accent-foreground: 222.2 47.4% 11.2%;

  --destructive: 0 84.2% 60.2%;
  --destructive-foreground: 210 40% 98%;

  --ring: 221.2 83.2% 53.3%;

  --radius: ;
}

.dark .theme-blue {
  --background: 222.2 84% 4.9%;
  --foreground: 210 40% 98%;

  --muted: 217.2 32.6% 17.5%;
  --muted-foreground: 215 20.2% 65.1%;

  --popover: 222.2 84% 4.9%;
  --popover-foreground: 210 40% 98%;

  --card: 222.2 84% 4.9%;
  --card-foreground: 210 40% 98%;

  --border: 217.2 32.6% 17.5%;
  --input: 217.2 32.6% 17.5%;

  --primary: 217.2 91.2% 59.8%;
  --primary-foreground: 222.2 47.4% 11.2%;

  --secondary: 217.2 32.6% 17.5%;
  --secondary-foreground: 210 40% 98%;

  --accent: 217.2 32.6% 17.5%;
  --accent-foreground: 210 40% 98%;

  --destructive: 0 62.8% 30.6%;
  --destructive-foreground: 210 40% 98%;

  --ring: 224.3 76.3% 48%;
}

.theme-yellow {
  --background: 0 0% 100%;
  --foreground: 20 14.3% 4.1%;

  --muted: 60 4.8% 95.9%;
  --muted-foreground: 25 5.3% 44.7%;

  --popover: 0 0% 100%;
  --popover-foreground: 20 14.3% 4.1%;

  --card: 0 0% 100%;
  --card-foreground: 20 14.3% 4.1%;

  --border: 20 5.9% 90%;
  --input: 20 5.9% 90%;

  --primary: 47.9 95.8% 53.1%;
  --primary-foreground: 26 83.3% 14.1%;

  --secondary: 60 4.8% 95.9%;
  --secondary-foreground: 24 9.8% 10%;

  --accent: 60 4.8% 95.9%;
  --accent-foreground: 24 9.8% 10%;

  --destructive: 0 84.2% 60.2%;
  --destructive-foreground: 60 9.1% 97.8%;

  --ring: 20 14.3% 4.1%;

  --radius: 0.95rem;
}

.dark .theme-yellow {
  --background: 20 14.3% 4.1%;
  --foreground: 60 9.1% 97.8%;

  --muted: 12 6.5% 15.1%;
  --muted-foreground: 24 5.4% 63.9%;

  --popover: 20 14.3% 4.1%;
  --popover-foreground: 60 9.1% 97.8%;

  --card: 20 14.3% 4.1%;
  --card-foreground: 60 9.1% 97.8%;

  --border: 12 6.5% 15.1%;
  --input: 12 6.5% 15.1%;

  --primary: 47.9 95.8% 53.1%;
  --primary-foreground: 26 83.3% 14.1%;

  --secondary: 12 6.5% 15.1%;
  --secondary-foreground: 60 9.1% 97.8%;

  --accent: 12 6.5% 15.1%;
  --accent-foreground: 60 9.1% 97.8%;

  --destructive: 0 62.8% 30.6%;
  --destructive-foreground: 60 9.1% 97.8%;

  --ring: 35.5 91.7% 32.9%;
}

.theme-violet {
  --background: 0 0% 100%;
  --foreground: 224 71.4% 4.1%;

  --muted: 220 14.3% 95.9%;
  --muted-foreground: 220 8.9% 46.1%;

  --popover: 0 0% 100%;
  --popover-foreground: 224 71.4% 4.1%;

  --card: 0 0% 100%;
  --card-foreground: 224 71.4% 4.1%;

  --border: 220 13% 91%;
  --input: 220 13% 91%;

  --primary: 262.1 83.3% 57.8%;
  --primary-foreground: 210 20% 98%;

  --secondary: 220 14.3% 95.9%;
  --secondary-foreground: 220.9 39.3% 11%;

  --accent: 220 14.3% 95.9%;
  --accent-foreground: 220.9 39.3% 11%;

  --destructive: 0 84.2% 60.2%;
  --destructive-foreground: 210 20% 98%;

  --ring: 262.1 83.3% 57.8%;

  --radius: ;
}

.dark .theme-violet {
  --background: 224 71.4% 4.1%;
  --foreground: 210 20% 98%;

  --muted: 215 27.9% 16.9%;
  --muted-foreground: 217.9 10.6% 64.9%;

  --popover: 224 71.4% 4.1%;
  --popover-foreground: 210 20% 98%;

  --card: 224 71.4% 4.1%;
  --card-foreground: 210 20% 98%;

  --border: 215 27.9% 16.9%;
  --input: 215 27.9% 16.9%;

  --primary: 263.4 70% 50.4%;
  --primary-foreground: 210 20% 98%;

  --secondary: 215 27.9% 16.9%;
  --secondary-foreground: 210 20% 98%;

  --accent: 215 27.9% 16.9%;
  --accent-foreground: 210 20% 98%;

  --destructive: 0 62.8% 30.6%;
  --destructive-foreground: 210 20% 98%;

  --ring: 263.4 70% 50.4%;
}
</file>

<file path="public/site.webmanifest">
{
  "name": " BehindUI",
  "short_name": "BehindUI",
  "icons": [
    {
      "src": "/android-chrome-192x192.png",
      "sizes": "192x192",
      "type": "image/png"
    },
    {
      "src": "/android-chrome-512x512.png",
      "sizes": "512x512",
      "type": "image/png"
    }
  ],
  "theme_color": "#ffffff",
  "background_color": "#ffffff",
  "display": "standalone"
}
</file>

<file path="registry/default/blocks/card-01/components/post-card.tsx">
import Link from "next/link";
import Image from "next/image";
import { cn } from "@/lib/utils";

interface Post {
  author: string;
  title: string;
  description: string;
  channel: string;
  comments: number;
}

export function PostCard() {
  return (
    <div className="my-4 flex flex-col gap-6 lg:-mx-4 xl:-mx-6 2xl:-mx-8">
      <div className="group/posts relative flex items-center justify-center">
        <PostItem
          className="group-hover/posts:delay-[150ms] absolute  top-3.5 z-[1] max-w-[calc(100%-1rem)] opacity-50 transition-all delay-100 group-hover/posts:-translate-y-4 group-hover/posts:opacity-0"
          post={null}
        />
        <PostItem
          className="group-hover/posts:delay-[250ms] absolute left-[1rem] top-5 z-[1] max-w-[calc(100%-2rem)] opacity-50 transition-all delay-100 group-hover/posts:-translate-y-4 group-hover/posts:opacity-0"
          post={null}
        />

        <Link href="https://www.behindui.xyz/" target="_blank">
          <PostItem
            className="z-[3] bg-primary transition-all group-hover/posts:shadow"
            post={{
              author: "https://github.com/BroKarim.png",
              title: "Inside Our Work · August 2028",
              description:
                "Hey chat Appreciate you being here and giving us your thoughts",
              channel: "Read More",
              comments: 34,
            }}
          />
        </Link>
      </div>
      <div className="flex justify-center">
        <ClickToSee />
      </div>
    </div>
  );
}

function PostItem({
  post,
  className,
}: {
  post: Post | null;
  className?: string;
}) {
  return (
    <div
      className={cn(
        "group relative flex min-h-16 w-full select-none scroll-m-1 gap-3 rounded-xl border-[0.5px] bg-primary/20 px-4 py-3 text-white shadow-[1px_1px_1px_rgba(255,255,255,0.6)]",
        "[--shadow-light:theme(colors.orange.300)]", // Variabel warna shadow light
        "[--dark:theme(colors.orange.700)]",
        className,
      )}
    >
      {post && (
        <>
          <div className="mt-0.5 flex items-start self-start">
            <Image
              alt={post.title}
              src={post.author}
              width={80}
              height={80}
              className="h-10 w-10 rounded-full"
            />
          </div>

          <div className="flex flex-1 flex-row items-center gap-3">
            <div className="flex flex-1 items-center">
              <div className="flex flex-1 flex-col gap-0.5">
                <p className="break-anywhere mr-2 line-clamp-1 text-[15px]">
                  {post.title}
                </p>

                <div className="flex items-center">
                  <span className="h-4.5 mr-2 mt-px flex items-center justify-center self-start rounded bg-black/[0.04] px-1.5 text-[10px] font-semibold uppercase  dark:bg-white/10">
                    {post.comments}
                  </span>

                  <p className="break-anywhere line-clamp-1 flex-1">
                    {post.description}
                  </p>
                </div>
              </div>
            </div>

            <div className="self-center">
              <ProjectTag channel={post.channel} />
            </div>
          </div>
        </>
      )}
    </div>
  );
}

function ProjectTag({ channel }: { channel: string }) {
  return (
    <span className="text-quaternary relative flex h-6 items-center gap-1 rounded-full border-[0.5px] px-2">
      <p className="flex-none">{channel}</p>
    </span>
  );
}

function ClickToSee() {
  return (
    <svg
      className="text-quaternary"
      width="285"
      height="33"
      viewBox="0 0 285 33"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
    >
      <path
        className="opacity-50"
        d="M185.86 6.57894C184.978 6.48893 184.525 7.01378 183.949 7.24244C183.556 7.40204 183.125 7.55315 182.72 7.5574C181.852 7.56508 181.322 6.53102 181.821 5.85164C182.078 5.51503 182.4 5.19924 182.752 4.96346C184.972 3.48659 187.206 2.0159 189.461 0.571366C189.871 0.30257 190.377 0.134598 190.871 0.0281462C191.621 -0.140368 192.328 0.472433 192.315 1.20839C192.312 1.41526 192.278 1.63363 192.24 1.84201C191.846 3.87576 191.475 5.91185 191.042 7.93711C190.941 8.40921 190.742 8.89583 190.467 9.30779C189.941 10.1002 189.07 10.0402 188.582 9.20766C188.447 8.97298 188.376 8.69145 188.214 8.26141C187.863 8.56486 187.609 8.75228 187.387 8.99586C185.969 10.5357 184.562 12.0718 183.158 13.6178C180.026 17.0495 176.089 19.3001 171.828 21.0327C170.496 21.5691 169.057 21.9408 167.637 22.0879C165.413 22.3212 163.169 22.3792 160.943 22.3618C158.436 22.3365 156.369 21.2311 154.652 19.4799C154.367 19.1875 154.103 18.7958 154.014 18.4066C153.953 18.1212 154.092 17.6576 154.312 17.4717C154.533 17.2858 155.026 17.237 155.294 17.3641C155.737 17.5514 156.126 17.907 156.511 18.2189C158.089 19.4746 159.874 20.0807 161.911 19.9979C164.002 19.906 166.103 19.9932 168.16 19.5029C172.697 18.4088 176.636 16.1921 180.015 13.0444C181.855 11.3334 183.479 9.38456 185.198 7.53656C185.437 7.2753 185.598 6.96322 185.86 6.57894Z"
        fill="currentColor"
      />
      <path
        d="M0.292969 21.3008C0.292969 21.0534 0.390625 20.8385 0.585938 20.6562C0.794271 20.4609 0.950521 20.3307 1.05469 20.2656C1.17188 20.1875 1.25 20.1289 1.28906 20.0898C1.35417 21.2747 2.15495 21.8672 3.69141 21.8672C4.90234 21.8672 6.3151 21.4896 7.92969 20.7344C9.07552 20.2135 9.84375 19.6797 10.2344 19.1328C10.3646 18.9635 10.4297 18.8268 10.4297 18.7227C10.4297 18.6055 10.4102 18.5143 10.3711 18.4492L2.26562 16.6328C2.03125 16.5807 1.80339 16.4701 1.58203 16.3008C1.17839 16.0143 0.976562 15.7539 0.976562 15.5195C0.976562 14.6211 1.61458 13.8073 2.89062 13.0781C4.29688 12.2839 6.17839 11.6849 8.53516 11.2812C9.06901 11.1901 9.46615 11.138 9.72656 11.125C9.80469 11.151 9.92188 11.1771 10.0781 11.2031C10.2474 11.2161 10.4167 11.2422 10.5859 11.2812C10.9896 11.3724 11.1589 11.5417 11.0938 11.7891C11.0938 12.2318 10.2474 12.5833 8.55469 12.8438C6.36719 13.1693 5 13.4427 4.45312 13.6641C3.91927 13.8854 3.52865 14.1133 3.28125 14.3477C3.04688 14.582 2.92318 14.862 2.91016 15.1875C2.91016 15.2526 3.0599 15.3242 3.35938 15.4023C3.65885 15.4805 4.01693 15.5781 4.43359 15.6953C4.85026 15.7995 5.39062 15.9427 6.05469 16.125C7.66927 16.5677 9.64844 17.1276 11.9922 17.8047C12.1224 18.0911 12.1875 18.3581 12.1875 18.6055C12.1875 19.2956 11.7839 19.9596 10.9766 20.5977C10.0651 21.3138 8.80208 21.9193 7.1875 22.4141C5.84635 22.8177 4.77865 23.0195 3.98438 23.0195C3.32031 23.0195 2.6888 22.9023 2.08984 22.668C1.49089 22.4336 1.04167 22.2057 0.742188 21.9844C0.442708 21.763 0.292969 21.5352 0.292969 21.3008Z"
        fill="currentColor"
      />
      <path
        d="M17.3633 21.6328C18.5091 21.6328 20.2344 21.112 22.5391 20.0703C22.6823 20.0703 22.7995 20.1224 22.8906 20.2266C22.9818 20.3177 23.0273 20.4284 23.0273 20.5586C22.5065 21.444 21.5104 22.1341 20.0391 22.6289C18.5677 23.1237 17.194 23.2083 15.918 22.8828C14.4727 22.5052 13.5938 21.6914 13.2812 20.4414C13.2552 20.194 13.2422 19.862 13.2422 19.4453C13.2422 19.0286 13.3464 18.4818 13.5547 17.8047C13.776 17.1146 14.1471 16.4635 14.668 15.8516C15.1888 15.2396 15.8008 14.7578 16.5039 14.4062C17.207 14.0547 17.9557 13.8789 18.75 13.8789C19.5052 13.8789 20.3516 14.1393 21.2891 14.6602C21.7318 14.9076 22.0833 15.1875 22.3438 15.5C22.6042 15.8125 22.7344 16.1315 22.7344 16.457C22.7344 16.5482 22.7279 16.6393 22.7148 16.7305C22.6888 17.5247 22.3047 18.026 21.5625 18.2344C21.237 18.3255 20.8594 18.3711 20.4297 18.3711L17.6172 18.2539C16.6797 18.2539 15.9635 18.4557 15.4688 18.8594C15.1823 19.0807 14.9805 19.4128 14.8633 19.8555C15.1888 21.0404 16.0221 21.6328 17.3633 21.6328ZM20.8398 15.5977C20.5534 15.3893 20.2539 15.2396 19.9414 15.1484C19.6289 15.0573 19.3685 15.0117 19.1602 15.0117C18.9518 15.0117 18.6133 15.0833 18.1445 15.2266C17.6758 15.3568 17.2591 15.5065 16.8945 15.6758C15.9961 16.0924 15.5469 16.5286 15.5469 16.9844C16.5885 17.0755 17.3698 17.1211 17.8906 17.1211C19.3359 17.1211 20.3125 16.9974 20.8203 16.75C21.1328 16.6198 21.2891 16.457 21.2891 16.2617C21.2891 16.0273 21.1393 15.806 20.8398 15.5977Z"
        fill="currentColor"
      />
      <path
        d="M28.1836 21.6328C29.3294 21.6328 31.0547 21.112 33.3594 20.0703C33.5026 20.0703 33.6198 20.1224 33.7109 20.2266C33.8021 20.3177 33.8477 20.4284 33.8477 20.5586C33.3268 21.444 32.3307 22.1341 30.8594 22.6289C29.388 23.1237 28.0143 23.2083 26.7383 22.8828C25.293 22.5052 24.4141 21.6914 24.1016 20.4414C24.0755 20.194 24.0625 19.862 24.0625 19.4453C24.0625 19.0286 24.1667 18.4818 24.375 17.8047C24.5964 17.1146 24.9674 16.4635 25.4883 15.8516C26.0091 15.2396 26.6211 14.7578 27.3242 14.4062C28.0273 14.0547 28.776 13.8789 29.5703 13.8789C30.3255 13.8789 31.1719 14.1393 32.1094 14.6602C32.5521 14.9076 32.9036 15.1875 33.1641 15.5C33.4245 15.8125 33.5547 16.1315 33.5547 16.457C33.5547 16.5482 33.5482 16.6393 33.5352 16.7305C33.5091 17.5247 33.125 18.026 32.3828 18.2344C32.0573 18.3255 31.6797 18.3711 31.25 18.3711L28.4375 18.2539C27.5 18.2539 26.7839 18.4557 26.2891 18.8594C26.0026 19.0807 25.8008 19.4128 25.6836 19.8555C26.0091 21.0404 26.8424 21.6328 28.1836 21.6328ZM31.6602 15.5977C31.3737 15.3893 31.0742 15.2396 30.7617 15.1484C30.4492 15.0573 30.1888 15.0117 29.9805 15.0117C29.7721 15.0117 29.4336 15.0833 28.9648 15.2266C28.4961 15.3568 28.0794 15.5065 27.7148 15.6758C26.8164 16.0924 26.3672 16.5286 26.3672 16.9844C27.4089 17.0755 28.1901 17.1211 28.7109 17.1211C30.1562 17.1211 31.1328 16.9974 31.6406 16.75C31.9531 16.6198 32.1094 16.457 32.1094 16.2617C32.1094 16.0273 31.9596 15.806 31.6602 15.5977Z"
        fill="currentColor"
      />
      <path
        d="M50.7031 19.7578C49.7266 21.2943 48.4245 22.2448 46.7969 22.6094C46.4193 22.6875 46.0742 22.7266 45.7617 22.7266C45.4622 22.7266 45.2083 22.7266 45 22.7266C44.8047 22.7135 44.5833 22.681 44.3359 22.6289C44.0885 22.5768 43.8607 22.4922 43.6523 22.375C43.1706 22.1016 42.9297 21.7174 42.9297 21.2227C42.8776 20.9883 42.8516 20.7279 42.8516 20.4414C42.8516 20.1419 42.9167 19.7513 43.0469 19.2695C43.1771 18.7878 43.4115 18.2669 43.75 17.707C44.1016 17.1471 44.5247 16.6328 45.0195 16.1641C46.0482 15.1745 47.1615 14.5365 48.3594 14.25C48.7109 14.1719 49.0299 14.1328 49.3164 14.1328C49.6159 14.1328 49.8828 14.1523 50.1172 14.1914C50.8724 14.1914 51.3802 14.7057 51.6406 15.7344C51.8099 16.3854 51.9076 17.2969 51.9336 18.4688C51.9727 19.6276 52.0052 20.526 52.0312 21.1641C52.0703 21.7891 52.1549 22.362 52.2852 22.8828H51.1328C51.0807 22.5312 51.0417 22.2188 51.0156 21.9453C50.9896 21.6719 50.9635 21.418 50.9375 21.1836C50.8724 20.6367 50.7943 20.1615 50.7031 19.7578ZM50.625 16.7305C50.625 15.9753 50.2539 15.5977 49.5117 15.5977C49.4206 15.5846 49.3294 15.5781 49.2383 15.5781C48.2878 15.5781 47.2852 16.0339 46.2305 16.9453C45.7357 17.362 45.3125 17.8307 44.9609 18.3516C44.4401 19.0938 44.1797 19.7578 44.1797 20.3438C44.1797 21.112 44.6224 21.5677 45.5078 21.7109C46.6797 21.6849 47.7995 21.151 48.8672 20.1094C49.3229 19.6536 49.7005 19.1589 50 18.625C50.4167 17.9089 50.625 17.2773 50.625 16.7305Z"
        fill="currentColor"
      />
      <path
        d="M70.8008 15.8711C70.2539 15.4805 69.5508 15.2852 68.6914 15.2852C67.8841 15.2852 67.1354 15.4349 66.4453 15.7344C65.1432 16.2812 64.2513 16.9844 63.7695 17.8438C63.5612 18.2344 63.457 18.651 63.457 19.0938C63.457 19.1719 63.457 19.3932 63.457 19.7578C63.457 20.1094 63.5221 20.5911 63.6523 21.2031C63.7826 21.8021 63.8477 22.4141 63.8477 23.0391C63.5742 23.0521 63.3529 23.0846 63.1836 23.1367C63.0143 23.1888 62.8711 23.2148 62.7539 23.2148C62.6367 23.2148 62.5326 23.1628 62.4414 23.0586C62.3633 22.9544 62.2721 22.7526 62.168 22.4531C62.1549 22.375 62.1289 22.1536 62.0898 21.7891C62.0508 21.4245 61.9987 20.9818 61.9336 20.4609C61.8815 19.9401 61.8164 19.3737 61.7383 18.7617C61.6732 18.1367 61.6081 17.5247 61.543 16.9258C61.3997 15.6237 61.2891 14.6667 61.2109 14.0547C61.2109 13.7422 61.4388 13.5859 61.8945 13.5859C62.168 13.5859 62.3828 13.7031 62.5391 13.9375C62.6953 14.1589 62.819 14.4193 62.9102 14.7188C63.0013 15.0052 63.0599 15.2917 63.0859 15.5781C63.125 15.8646 63.1576 16.0664 63.1836 16.1836C64.9023 14.6471 67.0378 13.8789 69.5898 13.8789C69.8763 13.8789 70.1758 13.8854 70.4883 13.8984C70.5664 13.8854 70.6641 13.8789 70.7812 13.8789C70.8984 13.8789 71.0156 13.957 71.1328 14.1133C71.276 14.2956 71.3477 14.5169 71.3477 14.7773C71.3477 15.4284 71.1654 15.793 70.8008 15.8711Z"
        fill="currentColor"
      />
      <path
        d="M76.2305 21.6328C77.3763 21.6328 79.1016 21.112 81.4062 20.0703C81.5495 20.0703 81.6667 20.1224 81.7578 20.2266C81.849 20.3177 81.8945 20.4284 81.8945 20.5586C81.3737 21.444 80.3776 22.1341 78.9062 22.6289C77.4349 23.1237 76.0612 23.2083 74.7852 22.8828C73.3398 22.5052 72.4609 21.6914 72.1484 20.4414C72.1224 20.194 72.1094 19.862 72.1094 19.4453C72.1094 19.0286 72.2135 18.4818 72.4219 17.8047C72.6432 17.1146 73.0143 16.4635 73.5352 15.8516C74.056 15.2396 74.668 14.7578 75.3711 14.4062C76.0742 14.0547 76.8229 13.8789 77.6172 13.8789C78.3724 13.8789 79.2188 14.1393 80.1562 14.6602C80.599 14.9076 80.9505 15.1875 81.2109 15.5C81.4714 15.8125 81.6016 16.1315 81.6016 16.457C81.6016 16.5482 81.5951 16.6393 81.582 16.7305C81.556 17.5247 81.1719 18.026 80.4297 18.2344C80.1042 18.3255 79.7266 18.3711 79.2969 18.3711L76.4844 18.2539C75.5469 18.2539 74.8307 18.4557 74.3359 18.8594C74.0495 19.0807 73.8477 19.4128 73.7305 19.8555C74.056 21.0404 74.8893 21.6328 76.2305 21.6328ZM79.707 15.5977C79.4206 15.3893 79.1211 15.2396 78.8086 15.1484C78.4961 15.0573 78.2357 15.0117 78.0273 15.0117C77.819 15.0117 77.4805 15.0833 77.0117 15.2266C76.543 15.3568 76.1263 15.5065 75.7617 15.6758C74.8633 16.0924 74.4141 16.5286 74.4141 16.9844C75.4557 17.0755 76.237 17.1211 76.7578 17.1211C78.2031 17.1211 79.1797 16.9974 79.6875 16.75C80 16.6198 80.1562 16.457 80.1562 16.2617C80.1562 16.0273 80.0065 15.806 79.707 15.5977Z"
        fill="currentColor"
      />
      <path
        d="M90.7422 19.7578C89.7656 21.2943 88.4635 22.2448 86.8359 22.6094C86.4583 22.6875 86.1133 22.7266 85.8008 22.7266C85.5013 22.7266 85.2474 22.7266 85.0391 22.7266C84.8438 22.7135 84.6224 22.681 84.375 22.6289C84.1276 22.5768 83.8997 22.4922 83.6914 22.375C83.2096 22.1016 82.9688 21.7174 82.9688 21.2227C82.9167 20.9883 82.8906 20.7279 82.8906 20.4414C82.8906 20.1419 82.9557 19.7513 83.0859 19.2695C83.2161 18.7878 83.4505 18.2669 83.7891 17.707C84.1406 17.1471 84.5638 16.6328 85.0586 16.1641C86.0872 15.1745 87.2005 14.5365 88.3984 14.25C88.75 14.1719 89.069 14.1328 89.3555 14.1328C89.6549 14.1328 89.9219 14.1523 90.1562 14.1914C90.9115 14.1914 91.4193 14.7057 91.6797 15.7344C91.849 16.3854 91.9466 17.2969 91.9727 18.4688C92.0117 19.6276 92.0443 20.526 92.0703 21.1641C92.1094 21.7891 92.194 22.362 92.3242 22.8828H91.1719C91.1198 22.5312 91.0807 22.2188 91.0547 21.9453C91.0286 21.6719 91.0026 21.418 90.9766 21.1836C90.9115 20.6367 90.8333 20.1615 90.7422 19.7578ZM90.6641 16.7305C90.6641 15.9753 90.293 15.5977 89.5508 15.5977C89.4596 15.5846 89.3685 15.5781 89.2773 15.5781C88.3268 15.5781 87.3242 16.0339 86.2695 16.9453C85.7747 17.362 85.3516 17.8307 85 18.3516C84.4792 19.0938 84.2188 19.7578 84.2188 20.3438C84.2188 21.112 84.6615 21.5677 85.5469 21.7109C86.7188 21.6849 87.8385 21.151 88.9062 20.1094C89.362 19.6536 89.7396 19.1589 90.0391 18.625C90.4557 17.9089 90.6641 17.2773 90.6641 16.7305Z"
        fill="currentColor"
      />
      <path
        d="M93.5938 15.4219C93.5677 14.7188 93.5417 14.0938 93.5156 13.5469C93.4896 12.987 93.4701 12.5768 93.457 12.3164C93.457 12.043 93.3529 11.3854 93.1445 10.3438C93.2617 10.1875 93.3724 10.0378 93.4766 9.89453C93.5938 9.7513 93.7565 9.67969 93.9648 9.67969C94.4206 9.67969 94.7721 11.6003 95.0195 15.4414C95.1497 17.668 95.2148 19.8945 95.2148 22.1211C95.2148 22.7201 94.7982 23.0195 93.9648 23.0195L93.8086 23C93.8086 22.3229 93.7891 21.457 93.75 20.4023C93.7109 19.3477 93.6784 18.4297 93.6523 17.6484C93.6393 16.8672 93.6198 16.125 93.5938 15.4219Z"
        fill="currentColor"
      />
      <path
        d="M106.27 15.168C108.04 14.556 109.57 14.25 110.859 14.25C112.5 14.25 113.594 14.6797 114.141 15.5391C114.388 15.9427 114.512 16.3789 114.512 16.8477C114.512 17.4987 114.303 18.1693 113.887 18.8594C113.483 19.5495 112.943 20.1745 112.266 20.7344C110.69 22.0234 108.776 22.8242 106.523 23.1367C106.523 23.2799 106.523 23.5078 106.523 23.8203C106.536 24.1458 106.543 24.5039 106.543 24.8945C106.556 25.2852 106.562 25.7018 106.562 26.1445C106.576 26.5872 106.589 27.0104 106.602 27.4141C106.641 28.4167 106.667 28.9896 106.68 29.1328C106.706 29.276 106.719 29.3932 106.719 29.4844C106.719 29.8099 106.615 30.0508 106.406 30.207C106.198 30.3763 105.924 30.4609 105.586 30.4609C105.521 30.4609 105.456 30.4609 105.391 30.4609L105.078 14.7578C105.195 14.5885 105.352 14.5104 105.547 14.5234C105.742 14.5365 105.898 14.5885 106.016 14.6797C106.133 14.7708 106.217 14.9336 106.27 15.168ZM111.973 15.8516C111.543 15.6302 111.081 15.5195 110.586 15.5195C110.104 15.5195 109.622 15.5651 109.141 15.6562C108.047 15.8646 107.24 16.3268 106.719 17.043C106.484 17.3815 106.367 17.7982 106.367 18.293C106.367 18.3451 106.367 18.3971 106.367 18.4492V21.8281C109.049 21.2292 110.951 20.3958 112.07 19.3281C112.721 18.7161 113.047 18.0846 113.047 17.4336C113.047 16.7435 112.689 16.2161 111.973 15.8516Z"
        fill="currentColor"
      />
      <path
        d="M116.016 19.2891C116.016 17.7526 116.68 16.5156 118.008 15.5781C119.062 14.8359 120.332 14.3867 121.816 14.2305C121.895 14.2305 122.077 14.2305 122.363 14.2305C122.65 14.2305 123.034 14.3151 123.516 14.4844C124.583 14.849 125.312 15.4935 125.703 16.418C125.859 16.7826 125.938 17.0951 125.938 17.3555C125.938 17.6029 125.931 17.7786 125.918 17.8828C125.918 19.5104 125.299 20.793 124.062 21.7305C122.917 22.5898 121.484 23.0195 119.766 23.0195C118.529 23.0195 117.591 22.7331 116.953 22.1602C116.328 21.5872 116.016 20.6302 116.016 19.2891ZM117.363 19.7578C117.363 20.5651 117.578 21.112 118.008 21.3984C118.333 21.6068 118.88 21.7109 119.648 21.7109C120.417 21.7109 121.094 21.6523 121.68 21.5352C122.266 21.418 122.786 21.2161 123.242 20.9297C124.219 20.3047 124.707 19.3346 124.707 18.0195C124.707 17.2383 124.499 16.6003 124.082 16.1055C123.626 15.5716 123.027 15.3047 122.285 15.3047C121.777 15.3958 121.263 15.4935 120.742 15.5977C120.234 15.7018 119.753 15.9036 119.297 16.2031C118.307 16.8411 117.663 18.026 117.363 19.7578Z"
        fill="currentColor"
      />
      <path
        d="M133.457 17.9609C134.889 17.9609 135.605 18.3255 135.605 19.0547C135.605 19.6016 135.208 20.2396 134.414 20.9688C133.229 22.0495 131.634 22.9154 129.629 23.5664C129.538 23.5664 129.434 23.4753 129.316 23.293C129.212 23.1107 129.128 22.974 129.062 22.8828C129.01 22.7786 128.971 22.7135 128.945 22.6875C130.443 22.1927 131.673 21.5938 132.637 20.8906C133.288 20.4219 133.613 20.0378 133.613 19.7383C133.613 19.4388 133.229 19.2891 132.461 19.2891C131.693 19.2891 130.566 19.4714 129.082 19.8359C128.405 19.8099 127.819 19.569 127.324 19.1133C126.895 18.7096 126.68 18.306 126.68 17.9023C126.68 17.4857 126.797 17.1081 127.031 16.7695C127.266 16.418 127.578 16.0924 127.969 15.793C128.359 15.4935 128.815 15.2201 129.336 14.9727C130.612 14.3607 131.934 14.0547 133.301 14.0547C133.704 14.0547 134.095 14.0938 134.473 14.1719C134.785 14.1719 134.967 14.3086 135.02 14.582C135.072 14.8555 135.098 15.3047 135.098 15.9297C134.329 15.5781 133.464 15.4023 132.5 15.4023C131.302 15.4023 130.312 15.6432 129.531 16.125C128.724 16.5938 128.307 17.2057 128.281 17.9609C128.281 18.3255 128.548 18.5078 129.082 18.5078L130.508 18.3516C131.732 18.0911 132.715 17.9609 133.457 17.9609Z"
        fill="currentColor"
      />
      <path
        d="M139.766 21.125L139.805 18C139.805 17.5052 139.759 17.082 139.668 16.7305H136.641L136.602 15.3828H139.531V10.3438C139.57 10.2266 139.648 10.1094 139.766 9.99219C139.948 9.8099 140.098 9.71875 140.215 9.71875C140.345 9.71875 140.456 9.73177 140.547 9.75781C140.638 9.78385 140.736 9.875 140.84 10.0312C141.048 10.8906 141.152 12.1862 141.152 13.918C141.152 14.3477 141.172 14.7708 141.211 15.1875C141.628 15.1354 142.044 15.1094 142.461 15.1094C142.461 15.1094 142.799 15.1094 143.477 15.1094C143.724 15.1094 143.952 15.0964 144.16 15.0703L144.102 16.4766L141.25 16.3984L141.348 23.1367C141.113 23.2409 140.911 23.293 140.742 23.293C140.091 23.293 139.766 22.5703 139.766 21.125Z"
        fill="currentColor"
      />
    </svg>
  );
}
</file>

<file path="registry/registry-colors.ts">
export const colors = {
  inherit: "inherit",
  current: "currentColor",
  transparent: "transparent",
  black: {
    hex: "#000000",
    rgb: "rgb(0,0,0)",
    hsl: "hsl(0,0%,0%)",
  },
  white: {
    hex: "#ffffff",
    rgb: "rgb(255,255,255)",
    hsl: "hsl(0,0%,100%)",
  },
  slate: [
    {
      scale: 50,
      hex: "#f8fafc",
      rgb: "rgb(248,250,252)",
      hsl: "hsl(210,40%,98%)",
    },
    {
      scale: 100,
      hex: "#f1f5f9",
      rgb: "rgb(241,245,249)",
      hsl: "hsl(210,40%,96.1%)",
    },
    {
      scale: 200,
      hex: "#e2e8f0",
      rgb: "rgb(226,232,240)",
      hsl: "hsl(214.3,31.8%,91.4%)",
    },
    {
      scale: 300,
      hex: "#cbd5e1",
      rgb: "rgb(203,213,225)",
      hsl: "hsl(212.7,26.8%,83.9%)",
    },
    {
      scale: 400,
      hex: "#94a3b8",
      rgb: "rgb(148,163,184)",
      hsl: "hsl(215,20.2%,65.1%)",
    },
    {
      scale: 500,
      hex: "#64748b",
      rgb: "rgb(100,116,139)",
      hsl: "hsl(215.4,16.3%,46.9%)",
    },
    {
      scale: 600,
      hex: "#475569",
      rgb: "rgb(71,85,105)",
      hsl: "hsl(215.3,19.3%,34.5%)",
    },
    {
      scale: 700,
      hex: "#334155",
      rgb: "rgb(51,65,85)",
      hsl: "hsl(215.3,25%,26.7%)",
    },
    {
      scale: 800,
      hex: "#1e293b",
      rgb: "rgb(30,41,59)",
      hsl: "hsl(217.2,32.6%,17.5%)",
    },
    {
      scale: 900,
      hex: "#0f172a",
      rgb: "rgb(15,23,42)",
      hsl: "hsl(222.2,47.4%,11.2%)",
    },
    {
      scale: 950,
      hex: "#020617",
      rgb: "rgb(2,6,23)",
      hsl: "hsl(222.2,84%,4.9%)",
    },
  ],
  gray: [
    {
      scale: 50,
      hex: "#f9fafb",
      rgb: "rgb(249,250,251)",
      hsl: "hsl(210,20%,98%)",
    },
    {
      scale: 100,
      hex: "#f3f4f6",
      rgb: "rgb(243,244,246)",
      hsl: "hsl(220,14.3%,95.9%)",
    },
    {
      scale: 200,
      hex: "#e5e7eb",
      rgb: "rgb(229,231,235)",
      hsl: "hsl(220,13%,91%)",
    },
    {
      scale: 300,
      hex: "#d1d5db",
      rgb: "rgb(209,213,219)",
      hsl: "hsl(216,12.2%,83.9%)",
    },
    {
      scale: 400,
      hex: "#9ca3af",
      rgb: "rgb(156,163,175)",
      hsl: "hsl(217.9,10.6%,64.9%)",
    },
    {
      scale: 500,
      hex: "#6b7280",
      rgb: "rgb(107,114,128)",
      hsl: "hsl(220,8.9%,46.1%)",
    },
    {
      scale: 600,
      hex: "#4b5563",
      rgb: "rgb(75,85,99)",
      hsl: "hsl(215,13.8%,34.1%)",
    },
    {
      scale: 700,
      hex: "#374151",
      rgb: "rgb(55,65,81)",
      hsl: "hsl(216.9,19.1%,26.7%)",
    },
    {
      scale: 800,
      hex: "#1f2937",
      rgb: "rgb(31,41,55)",
      hsl: "hsl(215,27.9%,16.9%)",
    },
    {
      scale: 900,
      hex: "#111827",
      rgb: "rgb(17,24,39)",
      hsl: "hsl(220.9,39.3%,11%)",
    },
    {
      scale: 950,
      hex: "#030712",
      rgb: "rgb(3,7,18)",
      hsl: "hsl(224,71.4%,4.1%)",
    },
  ],
  zinc: [
    {
      scale: 50,
      hex: "#fafafa",
      rgb: "rgb(250,250,250)",
      hsl: "hsl(0,0%,98%)",
    },
    {
      scale: 100,
      hex: "#f4f4f5",
      rgb: "rgb(244,244,245)",
      hsl: "hsl(240,4.8%,95.9%)",
    },
    {
      scale: 200,
      hex: "#e4e4e7",
      rgb: "rgb(228,228,231)",
      hsl: "hsl(240,5.9%,90%)",
    },
    {
      scale: 300,
      hex: "#d4d4d8",
      rgb: "rgb(212,212,216)",
      hsl: "hsl(240,4.9%,83.9%)",
    },
    {
      scale: 400,
      hex: "#a1a1aa",
      rgb: "rgb(161,161,170)",
      hsl: "hsl(240,5%,64.9%)",
    },
    {
      scale: 500,
      hex: "#71717a",
      rgb: "rgb(113,113,122)",
      hsl: "hsl(240,3.8%,46.1%)",
    },
    {
      scale: 600,
      hex: "#52525b",
      rgb: "rgb(82,82,91)",
      hsl: "hsl(240,5.2%,33.9%)",
    },
    {
      scale: 700,
      hex: "#3f3f46",
      rgb: "rgb(63,63,70)",
      hsl: "hsl(240,5.3%,26.1%)",
    },
    {
      scale: 800,
      hex: "#27272a",
      rgb: "rgb(39,39,42)",
      hsl: "hsl(240,3.7%,15.9%)",
    },
    {
      scale: 900,
      hex: "#18181b",
      rgb: "rgb(24,24,27)",
      hsl: "hsl(240,5.9%,10%)",
    },
    {
      scale: 950,
      hex: "#09090b",
      rgb: "rgb(9,9,11)",
      hsl: "hsl(240,10%,3.9%)",
    },
  ],
  neutral: [
    {
      scale: 50,
      hex: "#fafafa",
      rgb: "rgb(250,250,250)",
      hsl: "hsl(0,0%,98%)",
    },
    {
      scale: 100,
      hex: "#f5f5f5",
      rgb: "rgb(245,245,245)",
      hsl: "hsl(0,0%,96.1%)",
    },
    {
      scale: 200,
      hex: "#e5e5e5",
      rgb: "rgb(229,229,229)",
      hsl: "hsl(0,0%,89.8%)",
    },
    {
      scale: 300,
      hex: "#d4d4d4",
      rgb: "rgb(212,212,212)",
      hsl: "hsl(0,0%,83.1%)",
    },
    {
      scale: 400,
      hex: "#a3a3a3",
      rgb: "rgb(163,163,163)",
      hsl: "hsl(0,0%,63.9%)",
    },
    {
      scale: 500,
      hex: "#737373",
      rgb: "rgb(115,115,115)",
      hsl: "hsl(0,0%,45.1%)",
    },
    {
      scale: 600,
      hex: "#525252",
      rgb: "rgb(82,82,82)",
      hsl: "hsl(0,0%,32.2%)",
    },
    {
      scale: 700,
      hex: "#404040",
      rgb: "rgb(64,64,64)",
      hsl: "hsl(0,0%,25.1%)",
    },
    {
      scale: 800,
      hex: "#262626",
      rgb: "rgb(38,38,38)",
      hsl: "hsl(0,0%,14.9%)",
    },
    {
      scale: 900,
      hex: "#171717",
      rgb: "rgb(23,23,23)",
      hsl: "hsl(0,0%,9%)",
    },
    {
      scale: 950,
      hex: "#0a0a0a",
      rgb: "rgb(10,10,10)",
      hsl: "hsl(0,0%,3.9%)",
    },
  ],
  stone: [
    {
      scale: 50,
      hex: "#fafaf9",
      rgb: "rgb(250,250,249)",
      hsl: "hsl(60,9.1%,97.8%)",
    },
    {
      scale: 100,
      hex: "#f5f5f4",
      rgb: "rgb(245,245,244)",
      hsl: "hsl(60,4.8%,95.9%)",
    },
    {
      scale: 200,
      hex: "#e7e5e4",
      rgb: "rgb(231,229,228)",
      hsl: "hsl(20,5.9%,90%)",
    },
    {
      scale: 300,
      hex: "#d6d3d1",
      rgb: "rgb(214,211,209)",
      hsl: "hsl(24,5.7%,82.9%)",
    },
    {
      scale: 400,
      hex: "#a8a29e",
      rgb: "rgb(168,162,158)",
      hsl: "hsl(24,5.4%,63.9%)",
    },
    {
      scale: 500,
      hex: "#78716c",
      rgb: "rgb(120,113,108)",
      hsl: "hsl(25,5.3%,44.7%)",
    },
    {
      scale: 600,
      hex: "#57534e",
      rgb: "rgb(87,83,78)",
      hsl: "hsl(33.3,5.5%,32.4%)",
    },
    {
      scale: 700,
      hex: "#44403c",
      rgb: "rgb(68,64,60)",
      hsl: "hsl(30,6.3%,25.1%)",
    },
    {
      scale: 800,
      hex: "#292524",
      rgb: "rgb(41,37,36)",
      hsl: "hsl(12,6.5%,15.1%)",
    },
    {
      scale: 900,
      hex: "#1c1917",
      rgb: "rgb(28,25,23)",
      hsl: "hsl(24,9.8%,10%)",
    },
    {
      scale: 950,
      hex: "#0c0a09",
      rgb: "rgb(12,10,9)",
      hsl: "hsl(20,14.3%,4.1%)",
    },
  ],
  red: [
    {
      scale: 50,
      hex: "#fef2f2",
      rgb: "rgb(254,242,242)",
      hsl: "hsl(0,85.7%,97.3%)",
    },
    {
      scale: 100,
      hex: "#fee2e2",
      rgb: "rgb(254,226,226)",
      hsl: "hsl(0,93.3%,94.1%)",
    },
    {
      scale: 200,
      hex: "#fecaca",
      rgb: "rgb(254,202,202)",
      hsl: "hsl(0,96.3%,89.4%)",
    },
    {
      scale: 300,
      hex: "#fca5a5",
      rgb: "rgb(252,165,165)",
      hsl: "hsl(0,93.5%,81.8%)",
    },
    {
      scale: 400,
      hex: "#f87171",
      rgb: "rgb(248,113,113)",
      hsl: "hsl(0,90.6%,70.8%)",
    },
    {
      scale: 500,
      hex: "#ef4444",
      rgb: "rgb(239,68,68)",
      hsl: "hsl(0,84.2%,60.2%)",
    },
    {
      scale: 600,
      hex: "#dc2626",
      rgb: "rgb(220,38,38)",
      hsl: "hsl(0,72.2%,50.6%)",
    },
    {
      scale: 700,
      hex: "#b91c1c",
      rgb: "rgb(185,28,28)",
      hsl: "hsl(0,73.7%,41.8%)",
    },
    {
      scale: 800,
      hex: "#991b1b",
      rgb: "rgb(153,27,27)",
      hsl: "hsl(0,70%,35.3%)",
    },
    {
      scale: 900,
      hex: "#7f1d1d",
      rgb: "rgb(127,29,29)",
      hsl: "hsl(0,62.8%,30.6%)",
    },
    {
      scale: 950,
      hex: "#450a0a",
      rgb: "rgb(69,10,10)",
      hsl: "hsl(0,74.7%,15.5%)",
    },
  ],
  orange: [
    {
      scale: 50,
      hex: "#fff7ed",
      rgb: "rgb(255,247,237)",
      hsl: "hsl(33.3,100%,96.5%)",
    },
    {
      scale: 100,
      hex: "#ffedd5",
      rgb: "rgb(255,237,213)",
      hsl: "hsl(34.3,100%,91.8%)",
    },
    {
      scale: 200,
      hex: "#fed7aa",
      rgb: "rgb(254,215,170)",
      hsl: "hsl(32.1,97.7%,83.1%)",
    },
    {
      scale: 300,
      hex: "#fdba74",
      rgb: "rgb(253,186,116)",
      hsl: "hsl(30.7,97.2%,72.4%)",
    },
    {
      scale: 400,
      hex: "#fb923c",
      rgb: "rgb(251,146,60)",
      hsl: "hsl(27,96%,61%)",
    },
    {
      scale: 500,
      hex: "#f97316",
      rgb: "rgb(249,115,22)",
      hsl: "hsl(24.6,95%,53.1%)",
    },
    {
      scale: 600,
      hex: "#ea580c",
      rgb: "rgb(234,88,12)",
      hsl: "hsl(20.5,90.2%,48.2%)",
    },
    {
      scale: 700,
      hex: "#c2410c",
      rgb: "rgb(194,65,12)",
      hsl: "hsl(17.5,88.3%,40.4%)",
    },
    {
      scale: 800,
      hex: "#9a3412",
      rgb: "rgb(154,52,18)",
      hsl: "hsl(15,79.1%,33.7%)",
    },
    {
      scale: 900,
      hex: "#7c2d12",
      rgb: "rgb(124,45,18)",
      hsl: "hsl(15.3,74.6%,27.8%)",
    },
    {
      scale: 950,
      hex: "#431407",
      rgb: "rgb(67,20,7)",
      hsl: "hsl(13,81.1%,14.5%)",
    },
  ],
  amber: [
    {
      scale: 50,
      hex: "#fffbeb",
      rgb: "rgb(255,251,235)",
      hsl: "hsl(48,100%,96.1%)",
    },
    {
      scale: 100,
      hex: "#fef3c7",
      rgb: "rgb(254,243,199)",
      hsl: "hsl(48,96.5%,88.8%)",
    },
    {
      scale: 200,
      hex: "#fde68a",
      rgb: "rgb(253,230,138)",
      hsl: "hsl(48,96.6%,76.7%)",
    },
    {
      scale: 300,
      hex: "#fcd34d",
      rgb: "rgb(252,211,77)",
      hsl: "hsl(45.9,96.7%,64.5%)",
    },
    {
      scale: 400,
      hex: "#fbbf24",
      rgb: "rgb(251,191,36)",
      hsl: "hsl(43.3,96.4%,56.3%)",
    },
    {
      scale: 500,
      hex: "#f59e0b",
      rgb: "rgb(245,158,11)",
      hsl: "hsl(37.7,92.1%,50.2%)",
    },
    {
      scale: 600,
      hex: "#d97706",
      rgb: "rgb(217,119,6)",
      hsl: "hsl(32.1,94.6%,43.7%)",
    },
    {
      scale: 700,
      hex: "#b45309",
      rgb: "rgb(180,83,9)",
      hsl: "hsl(26,90.5%,37.1%)",
    },
    {
      scale: 800,
      hex: "#92400e",
      rgb: "rgb(146,64,14)",
      hsl: "hsl(22.7,82.5%,31.4%)",
    },
    {
      scale: 900,
      hex: "#78350f",
      rgb: "rgb(120,53,15)",
      hsl: "hsl(21.7,77.8%,26.5%)",
    },
    {
      scale: 950,
      hex: "#451a03",
      rgb: "rgb(69,26,3)",
      hsl: "hsl(20.9,91.7%,14.1%)",
    },
  ],
  yellow: [
    {
      scale: 50,
      hex: "#fefce8",
      rgb: "rgb(254,252,232)",
      hsl: "hsl(54.5,91.7%,95.3%)",
    },
    {
      scale: 100,
      hex: "#fef9c3",
      rgb: "rgb(254,249,195)",
      hsl: "hsl(54.9,96.7%,88%)",
    },
    {
      scale: 200,
      hex: "#fef08a",
      rgb: "rgb(254,240,138)",
      hsl: "hsl(52.8,98.3%,76.9%)",
    },
    {
      scale: 300,
      hex: "#fde047",
      rgb: "rgb(253,224,71)",
      hsl: "hsl(50.4,97.8%,63.5%)",
    },
    {
      scale: 400,
      hex: "#facc15",
      rgb: "rgb(250,204,21)",
      hsl: "hsl(47.9,95.8%,53.1%)",
    },
    {
      scale: 500,
      hex: "#eab308",
      rgb: "rgb(234,179,8)",
      hsl: "hsl(45.4,93.4%,47.5%)",
    },
    {
      scale: 600,
      hex: "#ca8a04",
      rgb: "rgb(202,138,4)",
      hsl: "hsl(40.6,96.1%,40.4%)",
    },
    {
      scale: 700,
      hex: "#a16207",
      rgb: "rgb(161,98,7)",
      hsl: "hsl(35.5,91.7%,32.9%)",
    },
    {
      scale: 800,
      hex: "#854d0e",
      rgb: "rgb(133,77,14)",
      hsl: "hsl(31.8,81%,28.8%)",
    },
    {
      scale: 900,
      hex: "#713f12",
      rgb: "rgb(113,63,18)",
      hsl: "hsl(28.4,72.5%,25.7%)",
    },
    {
      scale: 950,
      hex: "#422006",
      rgb: "rgb(66,32,6)",
      hsl: "hsl(26,83.3%,14.1%)",
    },
  ],
  lime: [
    {
      scale: 50,
      hex: "#f7fee7",
      rgb: "rgb(247,254,231)",
      hsl: "hsl(78.3,92%,95.1%)",
    },
    {
      scale: 100,
      hex: "#ecfccb",
      rgb: "rgb(236,252,203)",
      hsl: "hsl(79.6,89.1%,89.2%)",
    },
    {
      scale: 200,
      hex: "#d9f99d",
      rgb: "rgb(217,249,157)",
      hsl: "hsl(80.9,88.5%,79.6%)",
    },
    {
      scale: 300,
      hex: "#bef264",
      rgb: "rgb(190,242,100)",
      hsl: "hsl(82,84.5%,67.1%)",
    },
    {
      scale: 400,
      hex: "#a3e635",
      rgb: "rgb(163,230,53)",
      hsl: "hsl(82.7,78%,55.5%)",
    },
    {
      scale: 500,
      hex: "#84cc16",
      rgb: "rgb(132,204,22)",
      hsl: "hsl(83.7,80.5%,44.3%)",
    },
    {
      scale: 600,
      hex: "#65a30d",
      rgb: "rgb(101,163,13)",
      hsl: "hsl(84.8,85.2%,34.5%)",
    },
    {
      scale: 700,
      hex: "#4d7c0f",
      rgb: "rgb(77,124,15)",
      hsl: "hsl(85.9,78.4%,27.3%)",
    },
    {
      scale: 800,
      hex: "#3f6212",
      rgb: "rgb(63,98,18)",
      hsl: "hsl(86.3,69%,22.7%)",
    },
    {
      scale: 900,
      hex: "#365314",
      rgb: "rgb(54,83,20)",
      hsl: "hsl(87.6,61.2%,20.2%)",
    },
    {
      scale: 950,
      hex: "#1a2e05",
      rgb: "rgb(26,46,5)",
      hsl: "hsl(89.3,80.4%,10%)",
    },
  ],
  green: [
    {
      scale: 50,
      hex: "#f0fdf4",
      rgb: "rgb(240,253,244)",
      hsl: "hsl(138.5,76.5%,96.7%)",
    },
    {
      scale: 100,
      hex: "#dcfce7",
      rgb: "rgb(220,252,231)",
      hsl: "hsl(140.6,84.2%,92.5%)",
    },
    {
      scale: 200,
      hex: "#bbf7d0",
      rgb: "rgb(187,247,208)",
      hsl: "hsl(141,78.9%,85.1%)",
    },
    {
      scale: 300,
      hex: "#86efac",
      rgb: "rgb(134,239,172)",
      hsl: "hsl(141.7,76.6%,73.1%)",
    },
    {
      scale: 400,
      hex: "#4ade80",
      rgb: "rgb(74,222,128)",
      hsl: "hsl(141.9,69.2%,58%)",
    },
    {
      scale: 500,
      hex: "#22c55e",
      rgb: "rgb(34,197,94)",
      hsl: "hsl(142.1,70.6%,45.3%)",
    },
    {
      scale: 600,
      hex: "#16a34a",
      rgb: "rgb(22,163,74)",
      hsl: "hsl(142.1,76.2%,36.3%)",
    },
    {
      scale: 700,
      hex: "#15803d",
      rgb: "rgb(21,128,61)",
      hsl: "hsl(142.4,71.8%,29.2%)",
    },
    {
      scale: 800,
      hex: "#166534",
      rgb: "rgb(22,101,52)",
      hsl: "hsl(142.8,64.2%,24.1%)",
    },
    {
      scale: 900,
      hex: "#14532d",
      rgb: "rgb(20,83,45)",
      hsl: "hsl(143.8,61.2%,20.2%)",
    },
    {
      scale: 950,
      hex: "#052e16",
      rgb: "rgb(5,46,22)",
      hsl: "hsl(144.9,80.4%,10%)",
    },
  ],
  emerald: [
    {
      scale: 50,
      hex: "#ecfdf5",
      rgb: "rgb(236,253,245)",
      hsl: "hsl(151.8,81%,95.9%)",
    },
    {
      scale: 100,
      hex: "#d1fae5",
      rgb: "rgb(209,250,229)",
      hsl: "hsl(149.3,80.4%,90%)",
    },
    {
      scale: 200,
      hex: "#a7f3d0",
      rgb: "rgb(167,243,208)",
      hsl: "hsl(152.4,76%,80.4%)",
    },
    {
      scale: 300,
      hex: "#6ee7b7",
      rgb: "rgb(110,231,183)",
      hsl: "hsl(156.2,71.6%,66.9%)",
    },
    {
      scale: 400,
      hex: "#34d399",
      rgb: "rgb(52,211,153)",
      hsl: "hsl(158.1,64.4%,51.6%)",
    },
    {
      scale: 500,
      hex: "#10b981",
      rgb: "rgb(16,185,129)",
      hsl: "hsl(160.1,84.1%,39.4%)",
    },
    {
      scale: 600,
      hex: "#059669",
      rgb: "rgb(5,150,105)",
      hsl: "hsl(161.4,93.5%,30.4%)",
    },
    {
      scale: 700,
      hex: "#047857",
      rgb: "rgb(4,120,87)",
      hsl: "hsl(162.9,93.5%,24.3%)",
    },
    {
      scale: 800,
      hex: "#065f46",
      rgb: "rgb(6,95,70)",
      hsl: "hsl(163.1,88.1%,19.8%)",
    },
    {
      scale: 900,
      hex: "#064e3b",
      rgb: "rgb(6,78,59)",
      hsl: "hsl(164.2,85.7%,16.5%)",
    },
    {
      scale: 950,
      hex: "#022c22",
      rgb: "rgb(2,44,34)",
      hsl: "hsl(165.7,91.3%,9%)",
    },
  ],
  teal: [
    {
      scale: 50,
      hex: "#f0fdfa",
      rgb: "rgb(240,253,250)",
      hsl: "hsl(166.2,76.5%,96.7%)",
    },
    {
      scale: 100,
      hex: "#ccfbf1",
      rgb: "rgb(204,251,241)",
      hsl: "hsl(167.2,85.5%,89.2%)",
    },
    {
      scale: 200,
      hex: "#99f6e4",
      rgb: "rgb(153,246,228)",
      hsl: "hsl(168.4,83.8%,78.2%)",
    },
    {
      scale: 300,
      hex: "#5eead4",
      rgb: "rgb(94,234,212)",
      hsl: "hsl(170.6,76.9%,64.3%)",
    },
    {
      scale: 400,
      hex: "#2dd4bf",
      rgb: "rgb(45,212,191)",
      hsl: "hsl(172.5,66%,50.4%)",
    },
    {
      scale: 500,
      hex: "#14b8a6",
      rgb: "rgb(20,184,166)",
      hsl: "hsl(173.4,80.4%,40%)",
    },
    {
      scale: 600,
      hex: "#0d9488",
      rgb: "rgb(13,148,136)",
      hsl: "hsl(174.7,83.9%,31.6%)",
    },
    {
      scale: 700,
      hex: "#0f766e",
      rgb: "rgb(15,118,110)",
      hsl: "hsl(175.3,77.4%,26.1%)",
    },
    {
      scale: 800,
      hex: "#115e59",
      rgb: "rgb(17,94,89)",
      hsl: "hsl(176.1,69.4%,21.8%)",
    },
    {
      scale: 900,
      hex: "#134e4a",
      rgb: "rgb(19,78,74)",
      hsl: "hsl(175.9,60.8%,19%)",
    },
    {
      scale: 950,
      hex: "#042f2e",
      rgb: "rgb(4,47,46)",
      hsl: "hsl(178.6,84.3%,10%)",
    },
  ],
  cyan: [
    {
      scale: 50,
      hex: "#ecfeff",
      rgb: "rgb(236,254,255)",
      hsl: "hsl(183.2,100%,96.3%)",
    },
    {
      scale: 100,
      hex: "#cffafe",
      rgb: "rgb(207,250,254)",
      hsl: "hsl(185.1,95.9%,90.4%)",
    },
    {
      scale: 200,
      hex: "#a5f3fc",
      rgb: "rgb(165,243,252)",
      hsl: "hsl(186.2,93.5%,81.8%)",
    },
    {
      scale: 300,
      hex: "#67e8f9",
      rgb: "rgb(103,232,249)",
      hsl: "hsl(187,92.4%,69%)",
    },
    {
      scale: 400,
      hex: "#22d3ee",
      rgb: "rgb(34,211,238)",
      hsl: "hsl(187.9,85.7%,53.3%)",
    },
    {
      scale: 500,
      hex: "#06b6d4",
      rgb: "rgb(6,182,212)",
      hsl: "hsl(188.7,94.5%,42.7%)",
    },
    {
      scale: 600,
      hex: "#0891b2",
      rgb: "rgb(8,145,178)",
      hsl: "hsl(191.6,91.4%,36.5%)",
    },
    {
      scale: 700,
      hex: "#0e7490",
      rgb: "rgb(14,116,144)",
      hsl: "hsl(192.9,82.3%,31%)",
    },
    {
      scale: 800,
      hex: "#155e75",
      rgb: "rgb(21,94,117)",
      hsl: "hsl(194.4,69.6%,27.1%)",
    },
    {
      scale: 900,
      hex: "#164e63",
      rgb: "rgb(22,78,99)",
      hsl: "hsl(196.4,63.6%,23.7%)",
    },
    {
      scale: 950,
      hex: "#083344",
      rgb: "rgb(8,51,68)",
      hsl: "hsl(197,78.9%,14.9%)",
    },
  ],
  sky: [
    {
      scale: 50,
      hex: "#f0f9ff",
      rgb: "rgb(240,249,255)",
      hsl: "hsl(204,100%,97.1%)",
    },
    {
      scale: 100,
      hex: "#e0f2fe",
      rgb: "rgb(224,242,254)",
      hsl: "hsl(204,93.8%,93.7%)",
    },
    {
      scale: 200,
      hex: "#bae6fd",
      rgb: "rgb(186,230,253)",
      hsl: "hsl(200.6,94.4%,86.1%)",
    },
    {
      scale: 300,
      hex: "#7dd3fc",
      rgb: "rgb(125,211,252)",
      hsl: "hsl(199.4,95.5%,73.9%)",
    },
    {
      scale: 400,
      hex: "#38bdf8",
      rgb: "rgb(56,189,248)",
      hsl: "hsl(198.4,93.2%,59.6%)",
    },
    {
      scale: 500,
      hex: "#0ea5e9",
      rgb: "rgb(14,165,233)",
      hsl: "hsl(198.6,88.7%,48.4%)",
    },
    {
      scale: 600,
      hex: "#0284c7",
      rgb: "rgb(2,132,199)",
      hsl: "hsl(200.4,98%,39.4%)",
    },
    {
      scale: 700,
      hex: "#0369a1",
      rgb: "rgb(3,105,161)",
      hsl: "hsl(201.3,96.3%,32.2%)",
    },
    {
      scale: 800,
      hex: "#075985",
      rgb: "rgb(7,89,133)",
      hsl: "hsl(201,90%,27.5%)",
    },
    {
      scale: 900,
      hex: "#0c4a6e",
      rgb: "rgb(12,74,110)",
      hsl: "hsl(202,80.3%,23.9%)",
    },
    {
      scale: 950,
      hex: "#082f49",
      rgb: "rgb(8,47,73)",
      hsl: "hsl(204,80.2%,15.9%)",
    },
  ],
  blue: [
    {
      scale: 50,
      hex: "#eff6ff",
      rgb: "rgb(239,246,255)",
      hsl: "hsl(213.8,100%,96.9%)",
    },
    {
      scale: 100,
      hex: "#dbeafe",
      rgb: "rgb(219,234,254)",
      hsl: "hsl(214.3,94.6%,92.7%)",
    },
    {
      scale: 200,
      hex: "#bfdbfe",
      rgb: "rgb(191,219,254)",
      hsl: "hsl(213.3,96.9%,87.3%)",
    },
    {
      scale: 300,
      hex: "#93c5fd",
      rgb: "rgb(147,197,253)",
      hsl: "hsl(211.7,96.4%,78.4%)",
    },
    {
      scale: 400,
      hex: "#60a5fa",
      rgb: "rgb(96,165,250)",
      hsl: "hsl(213.1,93.9%,67.8%)",
    },
    {
      scale: 500,
      hex: "#3b82f6",
      rgb: "rgb(59,130,246)",
      hsl: "hsl(217.2,91.2%,59.8%)",
    },
    {
      scale: 600,
      hex: "#2563eb",
      rgb: "rgb(37,99,235)",
      hsl: "hsl(221.2,83.2%,53.3%)",
    },
    {
      scale: 700,
      hex: "#1d4ed8",
      rgb: "rgb(29,78,216)",
      hsl: "hsl(224.3,76.3%,48%)",
    },
    {
      scale: 800,
      hex: "#1e40af",
      rgb: "rgb(30,64,175)",
      hsl: "hsl(225.9,70.7%,40.2%)",
    },
    {
      scale: 900,
      hex: "#1e3a8a",
      rgb: "rgb(30,58,138)",
      hsl: "hsl(224.4,64.3%,32.9%)",
    },
    {
      scale: 950,
      hex: "#172554",
      rgb: "rgb(23,37,84)",
      hsl: "hsl(226.2,57%,21%)",
    },
  ],
  indigo: [
    {
      scale: 50,
      hex: "#eef2ff",
      rgb: "rgb(238,242,255)",
      hsl: "hsl(225.9,100%,96.7%)",
    },
    {
      scale: 100,
      hex: "#e0e7ff",
      rgb: "rgb(224,231,255)",
      hsl: "hsl(226.5,100%,93.9%)",
    },
    {
      scale: 200,
      hex: "#c7d2fe",
      rgb: "rgb(199,210,254)",
      hsl: "hsl(228,96.5%,88.8%)",
    },
    {
      scale: 300,
      hex: "#a5b4fc",
      rgb: "rgb(165,180,252)",
      hsl: "hsl(229.7,93.5%,81.8%)",
    },
    {
      scale: 400,
      hex: "#818cf8",
      rgb: "rgb(129,140,248)",
      hsl: "hsl(234.5,89.5%,73.9%)",
    },
    {
      scale: 500,
      hex: "#6366f1",
      rgb: "rgb(99,102,241)",
      hsl: "hsl(238.7,83.5%,66.7%)",
    },
    {
      scale: 600,
      hex: "#4f46e5",
      rgb: "rgb(79,70,229)",
      hsl: "hsl(243.4,75.4%,58.6%)",
    },
    {
      scale: 700,
      hex: "#4338ca",
      rgb: "rgb(67,56,202)",
      hsl: "hsl(244.5,57.9%,50.6%)",
    },
    {
      scale: 800,
      hex: "#3730a3",
      rgb: "rgb(55,48,163)",
      hsl: "hsl(243.7,54.5%,41.4%)",
    },
    {
      scale: 900,
      hex: "#312e81",
      rgb: "rgb(49,46,129)",
      hsl: "hsl(242.2,47.4%,34.3%)",
    },
    {
      scale: 950,
      hex: "#1e1b4b",
      rgb: "rgb(30,27,75)",
      hsl: "hsl(243.8,47.1%,20%)",
    },
  ],
  violet: [
    {
      scale: 50,
      hex: "#f5f3ff",
      rgb: "rgb(245,243,255)",
      hsl: "hsl(250,100%,97.6%)",
    },
    {
      scale: 100,
      hex: "#ede9fe",
      rgb: "rgb(237,233,254)",
      hsl: "hsl(251.4,91.3%,95.5%)",
    },
    {
      scale: 200,
      hex: "#ddd6fe",
      rgb: "rgb(221,214,254)",
      hsl: "hsl(250.5,95.2%,91.8%)",
    },
    {
      scale: 300,
      hex: "#c4b5fd",
      rgb: "rgb(196,181,253)",
      hsl: "hsl(252.5,94.7%,85.1%)",
    },
    {
      scale: 400,
      hex: "#a78bfa",
      rgb: "rgb(167,139,250)",
      hsl: "hsl(255.1,91.7%,76.3%)",
    },
    {
      scale: 500,
      hex: "#8b5cf6",
      rgb: "rgb(139,92,246)",
      hsl: "hsl(258.3,89.5%,66.3%)",
    },
    {
      scale: 600,
      hex: "#7c3aed",
      rgb: "rgb(124,58,237)",
      hsl: "hsl(262.1,83.3%,57.8%)",
    },
    {
      scale: 700,
      hex: "#6d28d9",
      rgb: "rgb(109,40,217)",
      hsl: "hsl(263.4,70%,50.4%)",
    },
    {
      scale: 800,
      hex: "#5b21b6",
      rgb: "rgb(91,33,182)",
      hsl: "hsl(263.4,69.3%,42.2%)",
    },
    {
      scale: 900,
      hex: "#4c1d95",
      rgb: "rgb(76,29,149)",
      hsl: "hsl(263.5,67.4%,34.9%)",
    },
    {
      scale: 950,
      hex: "#1e1b4b",
      rgb: "rgb(46,16,101)",
      hsl: "hsl(261.2,72.6%,22.9%)",
    },
  ],
  purple: [
    {
      scale: 50,
      hex: "#faf5ff",
      rgb: "rgb(250,245,255)",
      hsl: "hsl(270,100%,98%)",
    },
    {
      scale: 100,
      hex: "#f3e8ff",
      rgb: "rgb(243,232,255)",
      hsl: "hsl(268.7,100%,95.5%)",
    },
    {
      scale: 200,
      hex: "#e9d5ff",
      rgb: "rgb(233,213,255)",
      hsl: "hsl(268.6,100%,91.8%)",
    },
    {
      scale: 300,
      hex: "#d8b4fe",
      rgb: "rgb(216,180,254)",
      hsl: "hsl(269.2,97.4%,85.1%)",
    },
    {
      scale: 400,
      hex: "#c084fc",
      rgb: "rgb(192,132,252)",
      hsl: "hsl(270,95.2%,75.3%)",
    },
    {
      scale: 500,
      hex: "#a855f7",
      rgb: "rgb(168,85,247)",
      hsl: "hsl(270.7,91%,65.1%)",
    },
    {
      scale: 600,
      hex: "#9333ea",
      rgb: "rgb(147,51,234)",
      hsl: "hsl(271.5,81.3%,55.9%)",
    },
    {
      scale: 700,
      hex: "#7e22ce",
      rgb: "rgb(126,34,206)",
      hsl: "hsl(272.1,71.7%,47.1%)",
    },
    {
      scale: 800,
      hex: "#6b21a8",
      rgb: "rgb(107,33,168)",
      hsl: "hsl(272.9,67.2%,39.4%)",
    },
    {
      scale: 900,
      hex: "#581c87",
      rgb: "rgb(88,28,135)",
      hsl: "hsl(273.6,65.6%,32%)",
    },
    {
      scale: 950,
      hex: "#3b0764",
      rgb: "rgb(59,7,100)",
      hsl: "hsl(273.5,86.9%,21%)",
    },
  ],
  fuchsia: [
    {
      scale: 50,
      hex: "#fdf4ff",
      rgb: "rgb(253,244,255)",
      hsl: "hsl(289.1,100%,97.8%)",
    },
    {
      scale: 100,
      hex: "#fae8ff",
      rgb: "rgb(250,232,255)",
      hsl: "hsl(287,100%,95.5%)",
    },
    {
      scale: 200,
      hex: "#f5d0fe",
      rgb: "rgb(245,208,254)",
      hsl: "hsl(288.3,95.8%,90.6%)",
    },
    {
      scale: 300,
      hex: "#f0abfc",
      rgb: "rgb(240,171,252)",
      hsl: "hsl(291.1,93.1%,82.9%)",
    },
    {
      scale: 400,
      hex: "#e879f9",
      rgb: "rgb(232,121,249)",
      hsl: "hsl(292,91.4%,72.5%)",
    },
    {
      scale: 500,
      hex: "#d946ef",
      rgb: "rgb(217,70,239)",
      hsl: "hsl(292.2,84.1%,60.6%)",
    },
    {
      scale: 600,
      hex: "#c026d3",
      rgb: "rgb(192,38,211)",
      hsl: "hsl(293.4,69.5%,48.8%)",
    },
    {
      scale: 700,
      hex: "#a21caf",
      rgb: "rgb(162,28,175)",
      hsl: "hsl(294.7,72.4%,39.8%)",
    },
    {
      scale: 800,
      hex: "#86198f",
      rgb: "rgb(134,25,143)",
      hsl: "hsl(295.4,70.2%,32.9%)",
    },
    {
      scale: 900,
      hex: "#701a75",
      rgb: "rgb(112,26,117)",
      hsl: "hsl(296.7,63.6%,28%)",
    },
    {
      scale: 950,
      hex: "#4a044e",
      rgb: "rgb(74,4,78)",
      hsl: "hsl(296.8,90.2%,16.1%)",
    },
  ],
  pink: [
    {
      scale: 50,
      hex: "#fdf2f8",
      rgb: "rgb(253,242,248)",
      hsl: "hsl(327.3,73.3%,97.1%)",
    },
    {
      scale: 100,
      hex: "#fce7f3",
      rgb: "rgb(252,231,243)",
      hsl: "hsl(325.7,77.8%,94.7%)",
    },
    {
      scale: 200,
      hex: "#fbcfe8",
      rgb: "rgb(251,207,232)",
      hsl: "hsl(325.9,84.6%,89.8%)",
    },
    {
      scale: 300,
      hex: "#f9a8d4",
      rgb: "rgb(249,168,212)",
      hsl: "hsl(327.4,87.1%,81.8%)",
    },
    {
      scale: 400,
      hex: "#f472b6",
      rgb: "rgb(244,114,182)",
      hsl: "hsl(328.6,85.5%,70.2%)",
    },
    {
      scale: 500,
      hex: "#ec4899",
      rgb: "rgb(236,72,153)",
      hsl: "hsl(330.4,81.2%,60.4%)",
    },
    {
      scale: 600,
      hex: "#db2777",
      rgb: "rgb(219,39,119)",
      hsl: "hsl(333.3,71.4%,50.6%)",
    },
    {
      scale: 700,
      hex: "#be185d",
      rgb: "rgb(190,24,93)",
      hsl: "hsl(335.1,77.6%,42%)",
    },
    {
      scale: 800,
      hex: "#9d174d",
      rgb: "rgb(157,23,77)",
      hsl: "hsl(335.8,74.4%,35.3%)",
    },
    {
      scale: 900,
      hex: "#831843",
      rgb: "rgb(131,24,67)",
      hsl: "hsl(335.9,69%,30.4%)",
    },
    {
      scale: 950,
      hex: "#500724",
      rgb: "rgb(80,7,36)",
      hsl: "hsl(336.2,83.9%,17.1%)",
    },
  ],
  rose: [
    {
      scale: 50,
      hex: "#fff1f2",
      rgb: "rgb(255,241,242)",
      hsl: "hsl(355.7,100%,97.3%)",
    },
    {
      scale: 100,
      hex: "#ffe4e6",
      rgb: "rgb(255,228,230)",
      hsl: "hsl(355.6,100%,94.7%)",
    },
    {
      scale: 200,
      hex: "#fecdd3",
      rgb: "rgb(254,205,211)",
      hsl: "hsl(352.7,96.1%,90%)",
    },
    {
      scale: 300,
      hex: "#fda4af",
      rgb: "rgb(253,164,175)",
      hsl: "hsl(352.6,95.7%,81.8%)",
    },
    {
      scale: 400,
      hex: "#fb7185",
      rgb: "rgb(251,113,133)",
      hsl: "hsl(351.3,94.5%,71.4%)",
    },
    {
      scale: 500,
      hex: "#f43f5e",
      rgb: "rgb(244,63,94)",
      hsl: "hsl(349.7,89.2%,60.2%)",
    },
    {
      scale: 600,
      hex: "#e11d48",
      rgb: "rgb(225,29,72)",
      hsl: "hsl(346.8,77.2%,49.8%)",
    },
    {
      scale: 700,
      hex: "#be123c",
      rgb: "rgb(190,18,60)",
      hsl: "hsl(345.3,82.7%,40.8%)",
    },
    {
      scale: 800,
      hex: "#9f1239",
      rgb: "rgb(159,18,57)",
      hsl: "hsl(343.4,79.7%,34.7%)",
    },
    {
      scale: 900,
      hex: "#881337",
      rgb: "rgb(136,19,55)",
      hsl: "hsl(341.5,75.5%,30.4%)",
    },
    {
      scale: 950,
      hex: "#4c0519",
      rgb: "rgb(76,5,25)",
      hsl: "hsl(343.1,87.7%,15.9%)",
    },
  ],
};

export const colorMapping = {
  light: {
    background: "white",
    foreground: "{{base}}-950",
    card: "white",
    "card-foreground": "{{base}}-950",
    popover: "white",
    "popover-foreground": "{{base}}-950",
    primary: "{{base}}-900",
    "primary-foreground": "{{base}}-50",
    secondary: "{{base}}-100",
    "secondary-foreground": "{{base}}-900",
    muted: "{{base}}-100",
    "muted-foreground": "{{base}}-500",
    accent: "{{base}}-100",
    "accent-foreground": "{{base}}-900",
    destructive: "red-500",
    "destructive-foreground": "{{base}}-50",
    border: "{{base}}-200",
    input: "{{base}}-200",
    ring: "{{base}}-950",
    "chart-1": "12 76% 61%",
    "chart-2": "173 58% 39%",
    "chart-3": "197 37% 24%",
    "chart-4": "43 74% 66%",
    "chart-5": "27 87% 67%",
  },
  dark: {
    background: "{{base}}-950",
    foreground: "{{base}}-50",
    card: "{{base}}-950",
    "card-foreground": "{{base}}-50",
    popover: "{{base}}-950",
    "popover-foreground": "{{base}}-50",
    primary: "{{base}}-50",
    "primary-foreground": "{{base}}-900",
    secondary: "{{base}}-800",
    "secondary-foreground": "{{base}}-50",
    muted: "{{base}}-800",
    "muted-foreground": "{{base}}-400",
    accent: "{{base}}-800",
    "accent-foreground": "{{base}}-50",
    destructive: "red-900",
    "destructive-foreground": "{{base}}-50",
    border: "{{base}}-800",
    input: "{{base}}-800",
    ring: "{{base}}-300",
    "chart-1": "220 70% 50%",
    "chart-2": "160 60% 45%",
    "chart-3": "30 80% 55%",
    "chart-4": "280 65% 60%",
    "chart-5": "340 75% 55%",
  },
} as const;
</file>

<file path="registry/registry-styles.ts">
export const styles = [
  {
    name: "default",
    label: "Default",
  },
] as const;

export type Style = (typeof styles)[number];
</file>

<file path="store/preferences-store.tsx">
import { create } from "zustand";
import { persist } from "zustand/middleware";
import { ColorFormat } from "@/types";

type PackageManager = "pnpm" | "npm" | "yarn" | "bun";

interface PreferencesStore {
  tailwindVersion: "3" | "4";
  colorFormat: ColorFormat;
  packageManager: PackageManager;
  setTailwindVersion: (version: "3" | "4") => void;
  setColorFormat: (format: ColorFormat) => void;
  setPackageManager: (pm: PackageManager) => void;
}

export const usePreferencesStore = create<PreferencesStore>()(
  persist(
    (set) => ({
      tailwindVersion: "4",
      colorFormat: "oklch",
      packageManager: "pnpm",
      setTailwindVersion: (version: "3" | "4") => {
        set({ tailwindVersion: version });
      },
      setColorFormat: (format: ColorFormat) => {
        set({ colorFormat: format });
      },
      setPackageManager: (pm: PackageManager) => {
        set({ packageManager: pm });
      },
    }),
    {
      name: "preferences-storage", // unique name for localStorage
    }
  )
);
</file>

<file path="types/next-auth.d.ts">
import { User } from "next-auth";

import "next-auth/jwt";

type UserId = string;

declare module "next-auth/jwt" {
  interface JWT {
    id: UserId;
  }
}

declare module "next-auth" {
  interface Session {
    user: User & {
      id: UserId;
    };
  }
}
</file>

<file path="types/unist.ts">
import type { Node } from "unist";
export interface UnistNode extends Node {
  type: string;
  name?: string;
  tagName?: string;
  value?: string;
  properties?: {
    __rawString__?: string;
    __className__?: string;
    __event__?: string;
    [key: string]: unknown;
  } & NpmCommands;
  attributes?: {
    name: string;
    value: unknown;
    type?: string;
  }[];
  children?: UnistNode[];
}

export interface UnistTree extends UnistNode {
  children: UnistNode[];
}

export interface NpmCommands {
  __npmCommand__?: string;
  __yarnCommand__?: string;
  __pnpmCommand__?: string;
  __bunCommand__?: string;
}
</file>

<file path="utils/theme-fonts.ts">
import { ThemeEditorState } from "@/types/editor";

const sansSerifFontNames = ["Inter", "Roboto", "Open Sans", "Poppins", "Montserrat", "Outfit", "Plus Jakarta Sans", "DM Sans", "Geist", "Oxanium", "Architects Daughter"];

const serifFontNames = ["Merriweather", "Playfair Display", "Lora", "Source Serif Pro", "Libre Baskerville", "Space Grotesk"];

const monoFontNames = ["JetBrains Mono", "Fira Code", "Source Code Pro", "IBM Plex Mono", "Roboto Mono", "Space Mono", "Geist Mono"];

export const fonts: Record<string, string> = {
  // Sans-serif fonts
  Inter: "Inter, sans-serif",
  Roboto: "Roboto, sans-serif",
  "Open Sans": "Open Sans, sans-serif",
  Poppins: "Poppins, sans-serif",
  Montserrat: "Montserrat, sans-serif",
  Outfit: "Outfit, sans-serif",
  "Plus Jakarta Sans": "Plus Jakarta Sans, sans-serif",
  "DM Sans": "DM Sans, sans-serif",
  "IBM Plex Sans": "IBM Plex Sans, sans-serif",
  Geist: "Geist, sans-serif",
  Oxanium: "Oxanium, sans-serif",
  "Architects Daughter": "Architects Daughter, sans-serif",

  // Serif fonts
  Merriweather: "Merriweather, serif",
  "Playfair Display": "Playfair Display, serif",
  Lora: "Lora, serif",
  "Source Serif Pro": "Source Serif Pro, serif",
  "Libre Baskerville": "Libre Baskerville, serif",
  "Space Grotesk": "Space Grotesk, serif",

  // Monospace fonts
  "JetBrains Mono": "JetBrains Mono, monospace",
  "Fira Code": "Fira Code, monospace",
  "Source Code Pro": "Source Code Pro, monospace",
  "IBM Plex Mono": "IBM Plex Mono, monospace",
  "Roboto Mono": "Roboto Mono, monospace",
  "Space Mono": "Space Mono, monospace",
  "Geist Mono": "Geist Mono, monospace",
};

export const sansSerifFonts = Object.fromEntries(Object.entries(fonts).filter(([key]) => sansSerifFontNames.includes(key)));
export const serifFonts = Object.fromEntries(Object.entries(fonts).filter(([key]) => serifFontNames.includes(key)));
export const monoFonts = Object.fromEntries(Object.entries(fonts).filter(([key]) => monoFontNames.includes(key)));

export const getAppliedThemeFont = (state: ThemeEditorState, fontKey: "font-sans" | "font-serif" | "font-mono"): string | null => {
  const fontSans = state.styles.light[fontKey];
  // find key of font in fonts object based on value
  const key = Object.keys(fonts).find((key) => fonts[key].includes(fontSans));
  return key ? key : null;
};
</file>

<file path="utils/theme-style-generator.ts">
import { ThemeEditorState } from "@/types/editor";
import { colorFormatter } from "./color-converter";
import { ColorFormat } from "@/types";
import { getShadowMap } from "./shadow";
import { defaultLightThemeStyles } from "@/config/theme-tweakcn";
import { ThemeStyles } from "@/types/theme-tweakcn";

type ThemeMode = "light" | "dark";

const generateColorVariables = (themeStyles: ThemeStyles, mode: ThemeMode, formatColor: (color: string) => string): string => {
  const styles = themeStyles[mode];
  return `
  --background: ${formatColor(styles.background)};
  --foreground: ${formatColor(styles.foreground)};
  --card: ${formatColor(styles.card)};
  --card-foreground: ${formatColor(styles["card-foreground"])};
  --popover: ${formatColor(styles.popover)};
  --popover-foreground: ${formatColor(styles["popover-foreground"])};
  --primary: ${formatColor(styles.primary)};
  --primary-foreground: ${formatColor(styles["primary-foreground"])};
  --secondary: ${formatColor(styles.secondary)};
  --secondary-foreground: ${formatColor(styles["secondary-foreground"])};
  --muted: ${formatColor(styles.muted)};
  --muted-foreground: ${formatColor(styles["muted-foreground"])};
  --accent: ${formatColor(styles.accent)};
  --accent-foreground: ${formatColor(styles["accent-foreground"])};
  --destructive: ${formatColor(styles.destructive)};
  --destructive-foreground: ${formatColor(styles["destructive-foreground"])};
  --border: ${formatColor(styles.border)};
  --input: ${formatColor(styles.input)};
  --ring: ${formatColor(styles.ring)};
  --chart-1: ${formatColor(styles["chart-1"])};
  --chart-2: ${formatColor(styles["chart-2"])};
  --chart-3: ${formatColor(styles["chart-3"])};
  --chart-4: ${formatColor(styles["chart-4"])};
  --chart-5: ${formatColor(styles["chart-5"])};
  --sidebar: ${formatColor(styles.sidebar)};
  --sidebar-foreground: ${formatColor(styles["sidebar-foreground"])};
  --sidebar-primary: ${formatColor(styles["sidebar-primary"])};
  --sidebar-primary-foreground: ${formatColor(styles["sidebar-primary-foreground"])};
  --sidebar-accent: ${formatColor(styles["sidebar-accent"])};
  --sidebar-accent-foreground: ${formatColor(styles["sidebar-accent-foreground"])};
  --sidebar-border: ${formatColor(styles["sidebar-border"])};
  --sidebar-ring: ${formatColor(styles["sidebar-ring"])};`;
};

const generateFontVariables = (themeStyles: ThemeStyles, mode: ThemeMode): string => {
  const styles = themeStyles[mode];
  return `
  --font-sans: ${styles["font-sans"]};
  --font-serif: ${styles["font-serif"]};
  --font-mono: ${styles["font-mono"]};`;
};

const generateShadowVariables = (shadowMap: Record<string, string>): string => {
  return `
  --shadow-2xs: ${shadowMap["shadow-2xs"]};
  --shadow-xs: ${shadowMap["shadow-xs"]};
  --shadow-sm: ${shadowMap["shadow-sm"]};
  --shadow: ${shadowMap["shadow"]};
  --shadow-md: ${shadowMap["shadow-md"]};
  --shadow-lg: ${shadowMap["shadow-lg"]};
  --shadow-xl: ${shadowMap["shadow-xl"]};
  --shadow-2xl: ${shadowMap["shadow-2xl"]};`;
};

const generateTrackingVariables = (themeStyles: ThemeStyles): string => {
  const styles = themeStyles["light"];
  if (styles["letter-spacing"] === "0em") {
    return "";
  }
  return `

  --tracking-tighter: calc(var(--tracking-normal) - 0.05em);
  --tracking-tight: calc(var(--tracking-normal) - 0.025em);
  --tracking-normal: var(--tracking-normal);
  --tracking-wide: calc(var(--tracking-normal) + 0.025em);
  --tracking-wider: calc(var(--tracking-normal) + 0.05em);
  --tracking-widest: calc(var(--tracking-normal) + 0.1em);`;
};

const generateThemeVariables = (themeStyles: ThemeStyles, mode: ThemeMode, formatColor: (color: string) => string): string => {
  const selector = mode === "dark" ? ".dark" : ":root";
  const colorVars = generateColorVariables(themeStyles, mode, formatColor);
  const fontVars = generateFontVariables(themeStyles, mode);
  const radiusVar = `\n  --radius: ${themeStyles[mode].radius};`;
  const shadowVars = generateShadowVariables(getShadowMap({ styles: themeStyles, currentMode: mode }));
  const spacingVar = mode === "light" && themeStyles["light"].spacing !== defaultLightThemeStyles.spacing ? `\n  --spacing: ${themeStyles["light"].spacing};` : "";

  const trackingVars = mode === "light" && themeStyles["light"]["letter-spacing"] !== defaultLightThemeStyles["letter-spacing"] ? `\n  --tracking-normal: ${themeStyles["light"]["letter-spacing"]};` : "";

  return selector + " {" + colorVars + fontVars + radiusVar + shadowVars + trackingVars + spacingVar + "\n}";
};

const generateTailwindV4ThemeInline = (themeStyles: ThemeStyles): string => {
  return `@theme inline {
  --color-background: var(--background);
  --color-foreground: var(--foreground);
  --color-card: var(--card);
  --color-card-foreground: var(--card-foreground);
  --color-popover: var(--popover);
  --color-popover-foreground: var(--popover-foreground);
  --color-primary: var(--primary);
  --color-primary-foreground: var(--primary-foreground);
  --color-secondary: var(--secondary);
  --color-secondary-foreground: var(--secondary-foreground);
  --color-muted: var(--muted);
  --color-muted-foreground: var(--muted-foreground);
  --color-accent: var(--accent);
  --color-accent-foreground: var(--accent-foreground);
  --color-destructive: var(--destructive);
  --color-destructive-foreground: var(--destructive-foreground);
  --color-border: var(--border);
  --color-input: var(--input);
  --color-ring: var(--ring);
  --color-chart-1: var(--chart-1);
  --color-chart-2: var(--chart-2);
  --color-chart-3: var(--chart-3);
  --color-chart-4: var(--chart-4);
  --color-chart-5: var(--chart-5);
  --color-sidebar: var(--sidebar);
  --color-sidebar-foreground: var(--sidebar-foreground);
  --color-sidebar-primary: var(--sidebar-primary);
  --color-sidebar-primary-foreground: var(--sidebar-primary-foreground);
  --color-sidebar-accent: var(--sidebar-accent);
  --color-sidebar-accent-foreground: var(--sidebar-accent-foreground);
  --color-sidebar-border: var(--sidebar-border);
  --color-sidebar-ring: var(--sidebar-ring);

  --font-sans: var(--font-sans);
  --font-mono: var(--font-mono);
  --font-serif: var(--font-serif);

  --radius-sm: calc(var(--radius) - 4px);
  --radius-md: calc(var(--radius) - 2px);
  --radius-lg: var(--radius);
  --radius-xl: calc(var(--radius) + 4px);

  --shadow-2xs: var(--shadow-2xs);
  --shadow-xs: var(--shadow-xs);
  --shadow-sm: var(--shadow-sm);
  --shadow: var(--shadow);
  --shadow-md: var(--shadow-md);
  --shadow-lg: var(--shadow-lg);
  --shadow-xl: var(--shadow-xl);
  --shadow-2xl: var(--shadow-2xl);${generateTrackingVariables(themeStyles)}
}`;
};

export const generateThemeCode = (themeEditorState: ThemeEditorState, colorFormat: ColorFormat = "hsl", tailwindVersion: "3" | "4" = "3"): string => {
  if (!themeEditorState || !("light" in themeEditorState.styles) || !("dark" in themeEditorState.styles)) {
    throw new Error("Invalid theme styles: missing light or dark mode");
  }

  const themeStyles = themeEditorState.styles as ThemeStyles;
  const formatColor = (color: string) => colorFormatter(color, colorFormat, tailwindVersion);

  const lightTheme = generateThemeVariables(themeStyles, "light", formatColor);
  const darkTheme = generateThemeVariables(themeStyles, "dark", formatColor);
//   const tailwindV4Theme = tailwindVersion === "4" ? `\n\n${generateTailwindV4ThemeInline(themeStyles)}` : "";

  const bodyLetterSpacing = themeStyles["light"]["letter-spacing"] !== "0em" ? "\n\nbody {\n  letter-spacing: var(--tracking-normal);\n}" : "";

  return `${lightTheme}\n\n${darkTheme}${bodyLetterSpacing}`;
};
</file>

<file path=".commitlintrc.json">
{
  "extends": ["@commitlint/config-conventional"]
}
</file>

<file path=".eslintrc.json">
{
  "$schema": "https://json.schemastore.org/eslintrc",
  "root": true,
  "extends": ["next/core-web-vitals", "prettier", "plugin:tailwindcss/recommended"],
  "plugins": ["tailwindcss"],
  "rules": {
    "@next/next/no-html-link-for-pages": "off",
    "tailwindcss/no-custom-classname": "off",
    "tailwindcss/classnames-order": "error",
    "tailwindcss/no-contradicting-classname": "off",
    "react/display-name": "off"
  },
  "settings": {
    "tailwindcss": {
      "callees": ["cn", "cva"],
      "config": "tailwind.config.cjs"
    },
    "next": {
      "rootDir": ["app/*/"]
    }
  },
  "overrides": [
    {
      "files": ["*.ts", "*.tsx"],
      "parser": "@typescript-eslint/parser"
    }
  ]
}
</file>

<file path=".gitattributes">
* text=auto eol=lf
</file>

<file path=".gitignore">
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.js

# testing
/coverage

# next.js
/.next/
/out/

# production
/build

# misc
.DS_Store
*.pem

# IDE Files
.idea

# debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# local env files
.env*
.env*.local
!.env.example

# vercel
.vercel

# typescript
*.tsbuildinfo
next-env.d.ts

.content-collections

#note
🚀GUIDE.txt

#explanation
PENJELASAN.txt
</file>

<file path=".prettier.config.cjs">
/** @type {import('prettier').Config} */
module.exports = {
  endOfLine: "lf",
  semi: false,
  singleQuote: false,
  tabWidth: 2,
  trailingComma: "es5",
  importOrder: [
    "^(react/(.*)$)|^(react$)",
    "^(next/(.*)$)|^(next$)",
    "<THIRD_PARTY_MODULES>",
    "",
    "^types$",
    "^@/types/(.*)$",
    "^@/config/(.*)$",
    "^@/lib/(.*)$",
    "^@/hooks/(.*)$",
    "^@/components/ui/(.*)$",
    "^@/components/(.*)$",
    "^@/registry/(.*)$",
    "^@/styles/(.*)$",
    "^@/app/(.*)$",
    "",
    "^[./]",
  ],
  importOrderSeparation: false,
  importOrderSortSpecifiers: true,
  importOrderBuiltinModulesToTop: true,
  importOrderParserPlugins: ["typescript", "jsx", "decorators-legacy"],
  importOrderMergeDuplicateImports: true,
  importOrderCombineTypeAndValueImports: true,
  plugins: ["@ianvs/prettier-plugin-sort-imports"],
};
</file>

<file path=".prettierignore">
yarn.lock
node_modules
.next
.content-collections
</file>

<file path=".yarnrc.yml">
os: ["arm64", "x64"]
</file>

<file path="components.json">
{
  "$schema": "https://ui.shadcn.com/schema.json",
  "style": "new-york",
  "rsc": true,
  "tailwind": {
    "config": "tailwind.config.js",
    "css": "app/globals.css",
    "baseColor": "neutral",
    "cssVariables": true
  },
  "aliases": {
    "components": "@/components",
    "utils": "@/lib/utils"
  }
}
</file>

<file path="env.mjs">
import { createEnv } from "@t3-oss/env-nextjs";
import { z } from "zod";

export const env = createEnv({
  /*
   * Serverside Environment variables, not available on the client.
   * Will throw if you access these variables on the client.
   */
  server: {},
  /*
   * Environment variables available on the client (and server).
   *
   * 💡 You'll get type errors if these are not prefixed with NEXT_PUBLIC_.
   */
  client: {
    NEXT_PUBLIC_APP_URL: z.string().min(1),
  },

  /*
   * Due to how Next.js bundles environment variables on Edge and Client,
   * we need to manually destructure them to make sure all are included in bundle.
   *
   * 💡 You'll get type errors if not all variables from `server` & `client` are included here.
   */
  runtimeEnv: {
    NEXT_PUBLIC_APP_URL: process.env.NEXT_PUBLIC_APP_URL,
  },
});
</file>

<file path="middleware.ts">
import { NextResponse } from "next/server";
import type { NextRequest } from "next/server";

export const config = {
  matcher: ["/((?!_next|api|[\\w-]+\\.\\w+).*)"],
};

export default async function middleware(req: NextRequest) {
  const engyneSubdomain = "behindui"; // change this to your Engyne subdomain
  const url = req.nextUrl.clone();

  const { pathname } = req.nextUrl;

  const hostname = req.headers.get("host");
  if (!hostname)
    return new Response(null, {
      status: 400,
      statusText: "No hostname found in request headers",
    });

  if (pathname === "/engyne-sitemap.xml") {
    return NextResponse.rewrite(
      new URL(pathname, `https://${engyneSubdomain}.engyne.page`),
    );
  }

  if (pathname.startsWith("/blog") || pathname.startsWith("/tags")) {
    return NextResponse.rewrite(
      new URL(pathname, `https://${engyneSubdomain}.engyne.page`),
    );
  }
  if (pathname.startsWith("/_engyne")) {
    return NextResponse.rewrite(
      new URL(pathname, `https://${engyneSubdomain}.engyne.page`),
    );
  }

  return NextResponse.next();
}
</file>

<file path="postcss.config.cjs">
module.exports = {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
    ...(process.env.NODE_ENV === "production" ? { cssnano: {} } : {}),
  },
};
</file>

<file path="__registry__/default/blocks/bento-01/page.tsx">
"use client";

import { Card, CardContent } from "@/components/ui/card";
import { useAnimations } from "./hooks/useAnimation";
import { motion } from "framer-motion";
import { MoveUpRight } from "lucide-react";
import Image from "next/image";
import AnimatedEmoji from "./components/animated-emoji";
import Logo from "./components/logo";

export default function MainLayout() {
  const { cardIdentity, cardSlogan, cardProduct, verticalCard, quoteCard } =
    useAnimations();

  return (
    <>
      <div className="max-w-screen  bg-backgroud z-50 h-screen p-4  2xl:overflow-visible">
        <div className="grid grid-cols-4 grid-rows-8 gap-5 text-primary lg:grid-cols-3">
          <div className=" col-span-full h-full w-full lg:col-span-1 lg:col-start-2 lg:row-span-2 lg:row-start-2">
            <Card className=" h-full w-full">
              <CardContent className="flex h-full  w-full items-center justify-center gap-2">
                <Logo className="h-auto w-48" />
              </CardContent>
            </Card>
          </div>
          <motion.div
            className=" group relative col-span-full p-0  lg:col-span-2 lg:row-span-1 lg:row-start-1"
            {...cardIdentity}
          >
            <Card className=" h-full w-full text-primary">
              <CardContent className="flex h-full items-end justify-start gap-2 px-8">
                <div className="w-80 text-xl ">
                  Discover our new eco-friendly skincare collection designs to
                  nourish your skin
                </div>
                <button className="dark:border-knight absolute  right-2 top-2 h-10 w-10 rounded-full border-2 border-transparent bg-primary p-2 transition-all duration-500 ease-in-out group-hover:w-40 group-hover:bg-primary md:h-[2.75rem] md:w-[2.75rem]">
                  <div className="flex items-center justify-center">
                    <span className="md:text-medium animate-fade invisible mr-1 hidden text-nowrap text-sm text-black  group-hover:visible group-hover:block ">
                      Order Now
                    </span>
                    <MoveUpRight className="text-black" />
                  </div>
                </button>
              </CardContent>
            </Card>
          </motion.div>
          <motion.div
            className=" col-span-full row-start-2 row-end-3 rounded-full  p-0 lg:col-span-1 lg:col-start-1 lg:row-start-2"
            {...cardSlogan}
          >
            <Card className=" h-full w-full bg-blue-300 text-primary">
              <CardContent className="flex h-full items-center justify-center p-0">
                <h2 className="text-center text-2xl font-bold  lg:text-3xl">
                  Beauty & Care
                </h2>
              </CardContent>
            </Card>
          </motion.div>
          <motion.div
            className="col-span-2 hidden justify-center rounded-full  p-0 lg:col-span-1 lg:col-start-3 lg:row-span-1 lg:row-start-3 lg:flex"
            {...cardProduct}
          >
            <Card className="flex h-full w-full items-center justify-center bg-blue-300 text-primary">
              <CardContent className=" flex items-center justify-center p-0 ">
                <div className="text-center text-3xl font-bold">
                  Serum & Treatment
                </div>
              </CardContent>
            </Card>
          </motion.div>

          <motion.div
            className="col-span-full p-0 lg:col-span-1 lg:col-start-1 lg:row-span-2 lg:row-start-3"
            {...verticalCard}
          >
            <Card className="h-full w-full">
              <CardContent className="flex h-full items-center justify-center p-0">
                <AnimatedEmoji />
              </CardContent>
            </Card>
          </motion.div>

          <motion.div
            className="relative hidden rounded-xl  lg:col-start-3 lg:row-span-2 lg:row-start-1 lg:block lg:h-[350px]"
            {...verticalCard}
          >
            <Image
              src="https://images.unsplash.com/photo-1724084120131-3f2e0d11a288?q=80&w=2940&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D"
              priority={true}
              alt="profile image"
              fill
              style={{
                width: "100%",
                height: "100%",
                objectFit: "cover",
                borderRadius: "15px",
              }}
            />
          </motion.div>
          <motion.div
            className="relative col-span-full  lg:col-span-2 lg:col-start-2 lg:row-span-1 lg:row-start-4"
            {...quoteCard}
          >
            <Card className="h-full w-full">
              <div className="absolute inset-0">
                <Image
                  src="https://images.unsplash.com/photo-1584949514123-474cfa705dfe?q=80&w=2787&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D"
                  priority={true}
                  alt="profile image"
                  fill
                  style={{
                    width: "100%",
                    height: "100%",
                    objectFit: "cover",
                    borderRadius: "15px",
                  }}
                />
              </div>
              <div className="absolute inset-0 rounded-[15px] bg-black/30"></div>

              {/* Text Container with Center Alignment */}
              <div className="relative z-10 flex h-full  w-full items-center justify-center gap-1 px-4 text-center text-primary ">
                <p className="text-xl font-light">your secret</p>

                {/* Horizontal Line */}
                <div className="my-3 h-px bg-primary md:w-40"></div>

                <p className="text-xl font-light">beauty</p>
              </div>
            </Card>
          </motion.div>
        </div>
      </div>
    </>
  );
}
</file>

<file path="__registry__/default/blocks/card-01/page.tsx">
import { cn } from "@/lib/utils";
import { PostCard } from "./components/post-card";

export default function Page() {
  return (
    <>
      <div className="max-w-screen  bg-backgroud z-50 p-4  2xl:overflow-visible">
        <div className="3xl:gap-36 4xl:gap-40 xl:gap-18 3xl:py-32 4xl:py-36 isolate mx-auto flex w-full max-w-2xl flex-col gap-20 px-4 py-12 md:gap-24 md:px-6 md:py-16 lg:gap-28 lg:px-8 lg:py-20 xl:py-24 2xl:gap-32 2xl:py-28">
          <Section>
            <SectionHeading className="lg:text-center">
              Posts are the sweet spots between chat and docs
            </SectionHeading>
            <PostCard />
          </Section>
        </div>
      </div>
    </>
  );
}

export function Section({
  children,
  className,
}: {
  children: React.ReactNode;
  className?: string;
}) {
  return (
    <section className={cn("flex flex-col gap-4", className)}>
      {children}
    </section>
  );
}

export function SectionHeading({
  children,
  className,
}: {
  children: React.ReactNode;
  className?: string;
}) {
  return (
    <h3
      className={cn(
        "scroll-mt-20 text-balance text-[clamp(1.5rem,_3vw,_1.8rem)] font-semibold leading-[1.2] -tracking-[0.5px]",
        className,
      )}
    >
      {children}
    </h3>
  );
}
</file>

<file path="__registry__/default/blocks/portofolio-03/page.tsx">
import { WorkExperience } from "./components/work-experiences";

const Index = () => {
  return (
    <div className="max-w-screen bg-backgroud z-50 flex min-h-screen items-center justify-center p-4">
      <WorkExperience />
    </div>
  );
};

export default Index;
</file>

<file path="__registry__/default/blocks/tool-01/main.tsx">
import { Header } from "./components/header";
import { Banner } from "./components/banner";
import { Review } from "./components/review";
import { OpenSource } from "./components/open-source";

export default function HomeLayout() {
  return (
    <div className="flex flex-col ">
      <div className="container mx-auto border-x">
        <Header />
        <div className="divide-y">
          <Banner />
          <div className="grid divide-y sm:grid-cols-3 sm:divide-x sm:divide-y-0">
            <div className="sm:col-span-2">
              <Review />
            </div>
            <div className="sm:col-span-1">
              <OpenSource />
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}
</file>

<file path="__registry__/default/blocks/tool-02/page.tsx">
import React from "react";
import { Compare } from "./components/compare";
const Index = () => {
  return (
    <>
      <div className="max-w-screen bg-backgroud z-50 flex min-h-screen items-center justify-center p-4">
        <div className="rounded-3xl border border-neutral-200 bg-neutral-100 p-4  dark:border-neutral-800 dark:bg-neutral-900">
          <Compare
            firstImage="https://assets.aceternity.com/code-problem.png"
            secondImage="https://assets.aceternity.com/code-solution.png"
            firstImageClassName="object-cover object-left-top"
            secondImageClassname="object-cover object-left-top"
            className="h-[250px] w-[200px] md:h-[500px] md:w-[500px]"
            slideMode="hover"
          />
        </div>
      </div>
    </>
  );
};

export default Index;
</file>

<file path="__registry__/icons.tsx">
// @ts-nocheck
// This file is autogenerated by scripts/build-registry.ts
// Do not edit this file directly.
import * as React from "react"

export const Icons = {
  "AlertCircle": {
  lucide: React.lazy(() => import("lucide-react").then(mod => ({
    default: mod.AlertCircle
  }))),
  radix: React.lazy(() => import("@radix-ui/react-icons").then(mod => ({
    default: mod.ExclamationTriangleIcon
  }))),
},  "ArrowLeft": {
  lucide: React.lazy(() => import("lucide-react").then(mod => ({
    default: mod.ArrowLeft
  }))),
  radix: React.lazy(() => import("@radix-ui/react-icons").then(mod => ({
    default: mod.ArrowLeftIcon
  }))),
},  "ArrowRight": {
  lucide: React.lazy(() => import("lucide-react").then(mod => ({
    default: mod.ArrowRight
  }))),
  radix: React.lazy(() => import("@radix-ui/react-icons").then(mod => ({
    default: mod.ArrowRightIcon
  }))),
},  "ArrowUpDown": {
  lucide: React.lazy(() => import("lucide-react").then(mod => ({
    default: mod.ArrowUpDown
  }))),
  radix: React.lazy(() => import("@radix-ui/react-icons").then(mod => ({
    default: mod.CaretSortIcon
  }))),
},  "BellRing": {
  lucide: React.lazy(() => import("lucide-react").then(mod => ({
    default: mod.BellRing
  }))),
  radix: React.lazy(() => import("@radix-ui/react-icons").then(mod => ({
    default: mod.BellIcon
  }))),
},  "Bold": {
  lucide: React.lazy(() => import("lucide-react").then(mod => ({
    default: mod.Bold
  }))),
  radix: React.lazy(() => import("@radix-ui/react-icons").then(mod => ({
    default: mod.FontBoldIcon
  }))),
},  "Calculator": {
  lucide: React.lazy(() => import("lucide-react").then(mod => ({
    default: mod.Calculator
  }))),
  radix: React.lazy(() => import("@radix-ui/react-icons").then(mod => ({
    default: mod.ComponentPlaceholderIcon
  }))),
},  "Calendar": {
  lucide: React.lazy(() => import("lucide-react").then(mod => ({
    default: mod.Calendar
  }))),
  radix: React.lazy(() => import("@radix-ui/react-icons").then(mod => ({
    default: mod.CalendarIcon
  }))),
},  "Check": {
  lucide: React.lazy(() => import("lucide-react").then(mod => ({
    default: mod.Check
  }))),
  radix: React.lazy(() => import("@radix-ui/react-icons").then(mod => ({
    default: mod.CheckIcon
  }))),
},  "ChevronDown": {
  lucide: React.lazy(() => import("lucide-react").then(mod => ({
    default: mod.ChevronDown
  }))),
  radix: React.lazy(() => import("@radix-ui/react-icons").then(mod => ({
    default: mod.ChevronDownIcon
  }))),
},  "ChevronLeft": {
  lucide: React.lazy(() => import("lucide-react").then(mod => ({
    default: mod.ChevronLeft
  }))),
  radix: React.lazy(() => import("@radix-ui/react-icons").then(mod => ({
    default: mod.ChevronLeftIcon
  }))),
},  "ChevronRight": {
  lucide: React.lazy(() => import("lucide-react").then(mod => ({
    default: mod.ChevronRight
  }))),
  radix: React.lazy(() => import("@radix-ui/react-icons").then(mod => ({
    default: mod.ChevronRightIcon
  }))),
},  "ChevronUp": {
  lucide: React.lazy(() => import("lucide-react").then(mod => ({
    default: mod.ChevronUp
  }))),
  radix: React.lazy(() => import("@radix-ui/react-icons").then(mod => ({
    default: mod.ChevronUpIcon
  }))),
},  "ChevronsUpDown": {
  lucide: React.lazy(() => import("lucide-react").then(mod => ({
    default: mod.ChevronsUpDown
  }))),
  radix: React.lazy(() => import("@radix-ui/react-icons").then(mod => ({
    default: mod.CaretSortIcon
  }))),
},  "Circle": {
  lucide: React.lazy(() => import("lucide-react").then(mod => ({
    default: mod.Circle
  }))),
  radix: React.lazy(() => import("@radix-ui/react-icons").then(mod => ({
    default: mod.DotFilledIcon
  }))),
},  "Copy": {
  lucide: React.lazy(() => import("lucide-react").then(mod => ({
    default: mod.Copy
  }))),
  radix: React.lazy(() => import("@radix-ui/react-icons").then(mod => ({
    default: mod.CopyIcon
  }))),
},  "CreditCard": {
  lucide: React.lazy(() => import("lucide-react").then(mod => ({
    default: mod.CreditCard
  }))),
  radix: React.lazy(() => import("@radix-ui/react-icons").then(mod => ({
    default: mod.ComponentPlaceholderIcon
  }))),
},  "GripVertical": {
  lucide: React.lazy(() => import("lucide-react").then(mod => ({
    default: mod.GripVertical
  }))),
  radix: React.lazy(() => import("@radix-ui/react-icons").then(mod => ({
    default: mod.DragHandleDots2Icon
  }))),
},  "Italic": {
  lucide: React.lazy(() => import("lucide-react").then(mod => ({
    default: mod.Italic
  }))),
  radix: React.lazy(() => import("@radix-ui/react-icons").then(mod => ({
    default: mod.FontItalicIcon
  }))),
},  "Loader2": {
  lucide: React.lazy(() => import("lucide-react").then(mod => ({
    default: mod.Loader2
  }))),
  radix: React.lazy(() => import("@radix-ui/react-icons").then(mod => ({
    default: mod.ReloadIcon
  }))),
},  "Mail": {
  lucide: React.lazy(() => import("lucide-react").then(mod => ({
    default: mod.Mail
  }))),
  radix: React.lazy(() => import("@radix-ui/react-icons").then(mod => ({
    default: mod.EnvelopeClosedIcon
  }))),
},  "MailOpen": {
  lucide: React.lazy(() => import("lucide-react").then(mod => ({
    default: mod.MailOpen
  }))),
  radix: React.lazy(() => import("@radix-ui/react-icons").then(mod => ({
    default: mod.EnvelopeOpenIcon
  }))),
},  "Minus": {
  lucide: React.lazy(() => import("lucide-react").then(mod => ({
    default: mod.Minus
  }))),
  radix: React.lazy(() => import("@radix-ui/react-icons").then(mod => ({
    default: mod.MinusIcon
  }))),
},  "Moon": {
  lucide: React.lazy(() => import("lucide-react").then(mod => ({
    default: mod.Moon
  }))),
  radix: React.lazy(() => import("@radix-ui/react-icons").then(mod => ({
    default: mod.MoonIcon
  }))),
},  "MoreHorizontal": {
  lucide: React.lazy(() => import("lucide-react").then(mod => ({
    default: mod.MoreHorizontal
  }))),
  radix: React.lazy(() => import("@radix-ui/react-icons").then(mod => ({
    default: mod.DotsHorizontalIcon
  }))),
},  "PanelLeft": {
  lucide: React.lazy(() => import("lucide-react").then(mod => ({
    default: mod.PanelLeft
  }))),
  radix: React.lazy(() => import("@radix-ui/react-icons").then(mod => ({
    default: mod.ViewVerticalIcon
  }))),
},  "Plus": {
  lucide: React.lazy(() => import("lucide-react").then(mod => ({
    default: mod.Plus
  }))),
  radix: React.lazy(() => import("@radix-ui/react-icons").then(mod => ({
    default: mod.PlusIcon
  }))),
},  "Search": {
  lucide: React.lazy(() => import("lucide-react").then(mod => ({
    default: mod.Search
  }))),
  radix: React.lazy(() => import("@radix-ui/react-icons").then(mod => ({
    default: mod.MagnifyingGlassIcon
  }))),
},  "Send": {
  lucide: React.lazy(() => import("lucide-react").then(mod => ({
    default: mod.Send
  }))),
  radix: React.lazy(() => import("@radix-ui/react-icons").then(mod => ({
    default: mod.PaperPlaneIcon
  }))),
},  "Settings": {
  lucide: React.lazy(() => import("lucide-react").then(mod => ({
    default: mod.Settings
  }))),
  radix: React.lazy(() => import("@radix-ui/react-icons").then(mod => ({
    default: mod.GearIcon
  }))),
},  "Slash": {
  lucide: React.lazy(() => import("lucide-react").then(mod => ({
    default: mod.Slash
  }))),
  radix: React.lazy(() => import("@radix-ui/react-icons").then(mod => ({
    default: mod.SlashIcon
  }))),
},  "Smile": {
  lucide: React.lazy(() => import("lucide-react").then(mod => ({
    default: mod.Smile
  }))),
  radix: React.lazy(() => import("@radix-ui/react-icons").then(mod => ({
    default: mod.FaceIcon
  }))),
},  "Sun": {
  lucide: React.lazy(() => import("lucide-react").then(mod => ({
    default: mod.Sun
  }))),
  radix: React.lazy(() => import("@radix-ui/react-icons").then(mod => ({
    default: mod.SunIcon
  }))),
},  "Terminal": {
  lucide: React.lazy(() => import("lucide-react").then(mod => ({
    default: mod.Terminal
  }))),
  radix: React.lazy(() => import("@radix-ui/react-icons").then(mod => ({
    default: mod.RocketIcon
  }))),
},  "Underline": {
  lucide: React.lazy(() => import("lucide-react").then(mod => ({
    default: mod.Underline
  }))),
  radix: React.lazy(() => import("@radix-ui/react-icons").then(mod => ({
    default: mod.UnderlineIcon
  }))),
},  "User": {
  lucide: React.lazy(() => import("lucide-react").then(mod => ({
    default: mod.User
  }))),
  radix: React.lazy(() => import("@radix-ui/react-icons").then(mod => ({
    default: mod.PersonIcon
  }))),
},  "X": {
  lucide: React.lazy(() => import("lucide-react").then(mod => ({
    default: mod.X
  }))),
  radix: React.lazy(() => import("@radix-ui/react-icons").then(mod => ({
    default: mod.Cross2Icon
  }))),
},
}
</file>

<file path="app/(view)/view/styles/[style]/[name]/page.tsx">
import * as React from "react";
import { Metadata } from "next";
import { notFound } from "next/navigation";
import { ThemeWrapper } from "@/components/theme-wrapper";

import { siteConfig } from "@/config/site";
import { getAllBlockIds } from "@/lib/block";
import { absoluteUrl, cn } from "@/lib/utils";
import { Style, styles } from "@/registry/registry-styles";

import "@/styles/mdx.css";

import { getRegistryItem, getRegistryComponent } from "@/lib/registry-utils";

const getCachedRegistryItem = React.cache(async (name: string, style: Style["name"]) => {
  return await getRegistryItem(name, style);
});

export const dynamicParams = false;

export async function generateMetadata({
  params,
}: {
  params: {
    style: Style["name"];
    name: string;
  };
}): Promise<Metadata> {
  const { name, style } = params;
  const item = await getCachedRegistryItem(name, style);

  if (!item) {
    return {};
  }

  const title = item.name;
  const description = item.description;

  return {
    title: `${item.name}${item.description ? ` - ${item.description}` : ""}`,
    description,
    openGraph: {
      title,
      description,
      type: "article",
      url: absoluteUrl(`/blocks/${style}/${item.name}`),
      images: [
        {
          url: siteConfig.ogImage,
          width: 1200,
          height: 630,
          alt: siteConfig.name,
        },
      ],
    },
    twitter: {
      card: "summary_large_image",
      title,
      description,
      images: [siteConfig.ogImage],
      creator: "@shadcn",
    },
  };
}

export async function generateStaticParams() {
  const blockIds = await getAllBlockIds();
  return styles
    .map((style) =>
      blockIds.map((name) => ({
        style: style.name,
        name,
      }))
    )
    .flat();
}

export default async function BlockPage({
  params,
}: {
  params: {
    style: Style["name"];
    name: string;
  };
}) {
  const { name, style } = params;
  const item = await getCachedRegistryItem(name, style);
  const Component = getRegistryComponent(name, style);

  if (!item || !Component) {
    return notFound();
  }

  return (
    <>
      <div className={cn(" bg-background", item.meta?.container)}>
        <ThemeWrapper >
          <Component  />
        </ThemeWrapper>
      </div>
    </>
  );
}
</file>

<file path="app/sitemap.ts">
import { MetadataRoute } from "next";
import { headers } from "next/headers";

export default function sitemap(): MetadataRoute.Sitemap {
  const headersList = headers();
  let domain = headersList.get("host") as string;
  let protocol = "https";

  return [
    {
      url: `${protocol}://${domain}`,
      lastModified: new Date(),
    },
  ];
}
</file>

<file path="components/registry/component-render.tsx">
import React, { useEffect, useState } from "react";
import dynamic from "next/dynamic";

export function ComponentRenderer({ file }: { file: { path: string; type: string } }) {
  const [Component, setComponent] = useState<React.ComponentType | null>(null);
  const [error, setError] = useState<string | null>(null);
  const [isLoading, setIsLoading] = useState(true);
  useEffect(() => {
    // Extract the component path from the file path
    const pathParts = file.path.split("/");
    const exampleIndex = pathParts.indexOf("example");

    if (exampleIndex >= 0 && exampleIndex + 1 < pathParts.length) {
      const componentName = pathParts[exampleIndex + 1];

      // Dynamically import the component
      const importComponent = async () => {
        try {
          setIsLoading(true);
          // Use dynamic import with the componentName variable in scope
          const DynamicComponent = dynamic(() => import(`@/registry/default/example/${componentName}`).then((mod) => mod.default), { ssr: false });
          setComponent(() => DynamicComponent);
          setError(null);
        } catch (err) {
          console.error("Error loading component:", err);
          setError(`Failed to load component: ${componentName}`);
        } finally {
          setIsLoading(false);
        }
      };

      importComponent();
    } else {
      setError("Invalid file path format");
      setIsLoading(false);
    }
  }, [file.path]);

  // Use Next.js dynamic import to load the component
  if (error) return <div className="text-red-500">{error}</div>;
  if (isLoading) return <div className="rounded border border-gray-200 p-4">Loading component...</div>;
  if (!Component) return <div className="text-red-500">Component could not be loaded</div>;

  return (
    <div className="rounded border border-gray-200 p-4">
      <Component />
    </div>
  );
}
</file>

<file path="components/ui/badge.tsx">
import * as React from "react";
import { cva, type VariantProps } from "class-variance-authority";

import { cn } from "@/lib/utils";

const badgeVariants = cva("inline-flex items-center rounded-md border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2", {
  variants: {
    variant: {
      default: "border-transparent bg-primary text-primary-foreground shadow hover:bg-primary/80",
      secondary: "border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80",
      destructive: "border-transparent bg-destructive text-destructive-foreground shadow hover:bg-destructive/80",
      accent: " border-[1px] border-black/10 bg-gradient-to-b from-indigo-300/90 to-indigo-500 p-[1px] transition duration-300 ease-in-out dark:border-[2px] dark:border-primary dark:from-indigo-200/70 dark:to-indigo-500 ",
      outline: "text-foreground",
    },
  },
  defaultVariants: {
    variant: "default",
  },
});

export interface BadgeProps
  extends React.HTMLAttributes<HTMLDivElement>,
    VariantProps<typeof badgeVariants> {}

function Badge({ className, variant, ...props }: BadgeProps) {
  return (
    <div className={cn(badgeVariants({ variant }), className)} {...props} />
  );
}

export { Badge, badgeVariants };
</file>

<file path="components/ui/button.tsx">
import * as React from "react";
import { Slot } from "@radix-ui/react-slot";
import { cva, type VariantProps } from "class-variance-authority";

import { cn } from "@/lib/utils";

const buttonVariants = cva(
  "inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
  {
    variants: {
      variant: {
        default: "bg-primary text-primary-foreground shadow hover:bg-primary/90",
        destructive: "bg-destructive text-destructive-foreground shadow-sm hover:bg-destructive/90",
        outline: "border border-input bg-background shadow-sm hover:bg-accent hover:text-accent-foreground",
        secondary: "bg-secondary text-secondary-foreground shadow-sm hover:bg-secondary/80",
        ghost: "hover:bg-accent hover:text-accent-foreground",
        link: "text-primary underline-offset-4 hover:underline",
        gradient: "bg-fd-background from-fd-primary to-fd-primary/60 text-fd-primary-foreground shadow-fd-background/20 hover:bg-fd-primary/90 bg-gradient-to-b shadow-inner",
      },
      size: {
        default: "h-9 px-4 py-2",
        sm: "h-8 rounded-md px-3 text-xs",
        lg: "h-10 rounded-md px-8",
        icon: "h-9 w-9",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
);

export interface ButtonProps extends React.ButtonHTMLAttributes<HTMLButtonElement>, VariantProps<typeof buttonVariants> {
  asChild?: boolean;
}

const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(({ className, variant, size, asChild = false, ...props }, ref) => {
  const Comp = asChild ? Slot : "button";
  return <Comp className={cn(buttonVariants({ variant, size, className }))} ref={ref} {...props} />;
});
Button.displayName = "Button";

export { Button, buttonVariants };
</file>

<file path="components/ui/calendar.tsx">
"use client";

import * as React from "react";
import { DayPicker } from "react-day-picker";

import { cn } from "@/lib/utils";
import { buttonVariants } from "@/components/ui/button";
import { ChevronLeftIcon, ChevronRightIcon } from "@radix-ui/react-icons";
export type CalendarProps = React.ComponentProps<typeof DayPicker>;

function Calendar({ className, classNames, showOutsideDays = true, ...props }: CalendarProps) {
  return (
    <DayPicker
      showOutsideDays={showOutsideDays}
      className={cn("p-3", className)}
      classNames={{
        months: "flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0",
        month: "space-y-4",
        caption: "flex justify-center pt-1 relative items-center",
        caption_label: "text-sm font-medium",
        nav: "space-x-1 flex items-center",
        nav_button: cn(buttonVariants({ variant: "outline" }), "h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100"),
        nav_button_previous: "absolute left-1",
        nav_button_next: "absolute right-1",
        table: "w-full border-collapse space-y-1",
        head_row: "flex",
        head_cell: "text-muted-foreground rounded-md w-8 font-normal text-[0.8rem]",
        row: "flex w-full mt-2",
        cell: cn(
          "relative p-0 text-center text-sm focus-within:relative focus-within:z-20 [&:has([aria-selected])]:bg-accent [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected].day-range-end)]:rounded-r-md",
          props.mode === "range"
            ? "[&:has(>.day-range-end)]:rounded-r-md [&:has(>.day-range-start)]:rounded-l-md first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md"
            : "[&:has([aria-selected])]:rounded-md"
        ),
        day: cn(buttonVariants({ variant: "ghost" }), "h-8 w-8 p-0 font-normal aria-selected:opacity-100"),
        day_range_start: "day-range-start",
        day_range_end: "day-range-end",
        day_selected: "bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground",
        day_today: "bg-accent text-accent-foreground",
        day_outside: "day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground",
        day_disabled: "text-muted-foreground opacity-50",
        day_range_middle: "aria-selected:bg-accent aria-selected:text-accent-foreground",
        day_hidden: "invisible",
        ...classNames,
      }}
      components={{
        IconLeft: ({ className, ...props }) => <ChevronLeftIcon className={cn("h-4 w-4")} />,
        IconRight: ({ className, ...props }) => <ChevronRightIcon className={cn("h-4 w-4", className)}  />,
      }}
      {...props}
    />
  );
}
Calendar.displayName = "Calendar";

export { Calendar };
</file>

<file path="components/ui/chart.tsx">
"use client"

import * as React from "react"
import * as RechartsPrimitive from "recharts"

import { cn } from "@/lib/utils"

// Format: { THEME_NAME: CSS_SELECTOR }
const THEMES = { light: "", dark: ".dark" } as const

export type ChartConfig = {
  [k in string]: {
    label?: React.ReactNode
    icon?: React.ComponentType
  } & (
    | { color?: string; theme?: never }
    | { color?: never; theme: Record<keyof typeof THEMES, string> }
  )
}

type ChartContextProps = {
  config: ChartConfig
}

const ChartContext = React.createContext<ChartContextProps | null>(null)

function useChart() {
  const context = React.useContext(ChartContext)

  if (!context) {
    throw new Error("useChart must be used within a <ChartContainer />")
  }

  return context
}

const ChartContainer = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & {
    config: ChartConfig
    children: React.ComponentProps<
      typeof RechartsPrimitive.ResponsiveContainer
    >["children"]
  }
>(({ id, className, children, config, ...props }, ref) => {
  const uniqueId = React.useId()
  const chartId = `chart-${id || uniqueId.replace(/:/g, "")}`

  return (
    <ChartContext.Provider value={{ config }}>
      <div
        data-chart={chartId}
        ref={ref}
        className={cn(
          "flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none",
          className
        )}
        {...props}
      >
        <ChartStyle id={chartId} config={config} />
        <RechartsPrimitive.ResponsiveContainer>
          {children}
        </RechartsPrimitive.ResponsiveContainer>
      </div>
    </ChartContext.Provider>
  )
})
ChartContainer.displayName = "Chart"

const ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {
  const colorConfig = Object.entries(config).filter(
    ([, config]) => config.theme || config.color
  )

  if (!colorConfig.length) {
    return null
  }

  return (
    <style
      dangerouslySetInnerHTML={{
        __html: Object.entries(THEMES)
          .map(
            ([theme, prefix]) => `
${prefix} [data-chart=${id}] {
${colorConfig
  .map(([key, itemConfig]) => {
    const color =
      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||
      itemConfig.color
    return color ? `  --color-${key}: ${color};` : null
  })
  .join("\n")}
}
`
          )
          .join("\n"),
      }}
    />
  )
}

const ChartTooltip = RechartsPrimitive.Tooltip

const ChartTooltipContent = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &
    React.ComponentProps<"div"> & {
      hideLabel?: boolean
      hideIndicator?: boolean
      indicator?: "line" | "dot" | "dashed"
      nameKey?: string
      labelKey?: string
    }
>(
  (
    {
      active,
      payload,
      className,
      indicator = "dot",
      hideLabel = false,
      hideIndicator = false,
      label,
      labelFormatter,
      labelClassName,
      formatter,
      color,
      nameKey,
      labelKey,
    },
    ref
  ) => {
    const { config } = useChart()

    const tooltipLabel = React.useMemo(() => {
      if (hideLabel || !payload?.length) {
        return null
      }

      const [item] = payload
      const key = `${labelKey || item.dataKey || item.name || "value"}`
      const itemConfig = getPayloadConfigFromPayload(config, item, key)
      const value =
        !labelKey && typeof label === "string"
          ? config[label as keyof typeof config]?.label || label
          : itemConfig?.label

      if (labelFormatter) {
        return (
          <div className={cn("font-medium", labelClassName)}>
            {labelFormatter(value, payload)}
          </div>
        )
      }

      if (!value) {
        return null
      }

      return <div className={cn("font-medium", labelClassName)}>{value}</div>
    }, [
      label,
      labelFormatter,
      payload,
      hideLabel,
      labelClassName,
      config,
      labelKey,
    ])

    if (!active || !payload?.length) {
      return null
    }

    const nestLabel = payload.length === 1 && indicator !== "dot"

    return (
      <div
        ref={ref}
        className={cn(
          "grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl",
          className
        )}
      >
        {!nestLabel ? tooltipLabel : null}
        <div className="grid gap-1.5">
          {payload.map((item, index) => {
            const key = `${nameKey || item.name || item.dataKey || "value"}`
            const itemConfig = getPayloadConfigFromPayload(config, item, key)
            const indicatorColor = color || item.payload.fill || item.color

            return (
              <div
                key={item.dataKey}
                className={cn(
                  "flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground",
                  indicator === "dot" && "items-center"
                )}
              >
                {formatter && item?.value !== undefined && item.name ? (
                  formatter(item.value, item.name, item, index, item.payload)
                ) : (
                  <>
                    {itemConfig?.icon ? (
                      <itemConfig.icon />
                    ) : (
                      !hideIndicator && (
                        <div
                          className={cn(
                            "shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]",
                            {
                              "h-2.5 w-2.5": indicator === "dot",
                              "w-1": indicator === "line",
                              "w-0 border-[1.5px] border-dashed bg-transparent":
                                indicator === "dashed",
                              "my-0.5": nestLabel && indicator === "dashed",
                            }
                          )}
                          style={
                            {
                              "--color-bg": indicatorColor,
                              "--color-border": indicatorColor,
                            } as React.CSSProperties
                          }
                        />
                      )
                    )}
                    <div
                      className={cn(
                        "flex flex-1 justify-between leading-none",
                        nestLabel ? "items-end" : "items-center"
                      )}
                    >
                      <div className="grid gap-1.5">
                        {nestLabel ? tooltipLabel : null}
                        <span className="text-muted-foreground">
                          {itemConfig?.label || item.name}
                        </span>
                      </div>
                      {item.value && (
                        <span className="font-mono font-medium tabular-nums text-foreground">
                          {item.value.toLocaleString()}
                        </span>
                      )}
                    </div>
                  </>
                )}
              </div>
            )
          })}
        </div>
      </div>
    )
  }
)
ChartTooltipContent.displayName = "ChartTooltip"

const ChartLegend = RechartsPrimitive.Legend

const ChartLegendContent = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> &
    Pick<RechartsPrimitive.LegendProps, "payload" | "verticalAlign"> & {
      hideIcon?: boolean
      nameKey?: string
    }
>(
  (
    { className, hideIcon = false, payload, verticalAlign = "bottom", nameKey },
    ref
  ) => {
    const { config } = useChart()

    if (!payload?.length) {
      return null
    }

    return (
      <div
        ref={ref}
        className={cn(
          "flex items-center justify-center gap-4",
          verticalAlign === "top" ? "pb-3" : "pt-3",
          className
        )}
      >
        {payload.map((item) => {
          const key = `${nameKey || item.dataKey || "value"}`
          const itemConfig = getPayloadConfigFromPayload(config, item, key)

          return (
            <div
              key={item.value}
              className={cn(
                "flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground"
              )}
            >
              {itemConfig?.icon && !hideIcon ? (
                <itemConfig.icon />
              ) : (
                <div
                  className="h-2 w-2 shrink-0 rounded-[2px]"
                  style={{
                    backgroundColor: item.color,
                  }}
                />
              )}
              {itemConfig?.label}
            </div>
          )
        })}
      </div>
    )
  }
)
ChartLegendContent.displayName = "ChartLegend"

// Helper to extract item config from a payload.
function getPayloadConfigFromPayload(
  config: ChartConfig,
  payload: unknown,
  key: string
) {
  if (typeof payload !== "object" || payload === null) {
    return undefined
  }

  const payloadPayload =
    "payload" in payload &&
    typeof payload.payload === "object" &&
    payload.payload !== null
      ? payload.payload
      : undefined

  let configLabelKey: string = key

  if (
    key in payload &&
    typeof payload[key as keyof typeof payload] === "string"
  ) {
    configLabelKey = payload[key as keyof typeof payload] as string
  } else if (
    payloadPayload &&
    key in payloadPayload &&
    typeof payloadPayload[key as keyof typeof payloadPayload] === "string"
  ) {
    configLabelKey = payloadPayload[
      key as keyof typeof payloadPayload
    ] as string
  }

  return configLabelKey in config
    ? config[configLabelKey]
    : config[key as keyof typeof config]
}

export {
  ChartContainer,
  ChartTooltip,
  ChartTooltipContent,
  ChartLegend,
  ChartLegendContent,
  ChartStyle,
}
</file>

<file path="components/ui/texture-button.tsx">
"use client";

import * as React from "react";
import { Slot } from "@radix-ui/react-slot";
import { cva } from "class-variance-authority";

import { cn } from "@/lib/utils";

const buttonVariantsOuter = cva("", {
  variants: {
    variant: {
      primary: "w-full border border-[1px] border-black/10 bg-gradient-to-b from-black/70 to-black p-[1px] transition duration-300 ease-in-out dark:border-[2px] dark:border-black dark:from-white dark:to-white/80 ",
      accent: "w-full border-[1px] border-black/10 bg-gradient-to-b from-indigo-300/90 to-indigo-500 p-[1px] transition duration-300 ease-in-out dark:border-[2px] dark:border-neutral-950 dark:from-indigo-200/70 dark:to-indigo-500 ",
      destructive: "w-full border-[1px] border-black/10 bg-gradient-to-b from-red-300/90 to-red-500 p-[1px] transition duration-300 ease-in-out dark:border-[2px] dark:border-neutral-950 dark:from-red-300/90 dark:to-red-500 ",
      secondary: "w-full border-[1px] border-black/20 bg-white/50 p-[1px] transition duration-300 ease-in-out dark:border-[2px] dark:border-neutral-950 dark:bg-neutral-600/50 ",
      minimal:
        "group  w-full border-[1px] border-black/20 bg-white/50 to-white p-[1px] hover:bg-gradient-to-t hover:from-neutral-100  active:bg-neutral-200 dark:border-[2px] dark:border-neutral-950 dark:bg-neutral-600/80 dark:hover:from-neutral-600/50 dark:hover:to-neutral-600/70 dark:active:bg-neutral-800",
      icon: "group rounded-full border border-black/10 bg-white/50 to-white p-[1px] hover:bg-gradient-to-t hover:from-neutral-100 active:bg-neutral-200 dark:border-neutral-950 dark:bg-neutral-600/50 dark:hover:from-neutral-700 dark:hover:to-neutral-600 dark:active:bg-neutral-800",
    },
    size: {
      sm: "rounded-[6px]",
      default: "rounded-[12px]",
      lg: "rounded-[12px]",
      icon: "rounded-full",
    },
  },
  defaultVariants: {
    variant: "primary",
    size: "default",
  },
});

const innerDivVariants = cva("flex h-full w-full items-center justify-center text-muted-foreground", {
  variants: {
    variant: {
      primary:
        "gap-2 bg-gradient-to-b from-neutral-800 to-black  text-sm text-white/90 transition duration-300 ease-in-out hover:from-stone-800 hover:to-neutral-800/70 active:bg-gradient-to-b  active:from-black active:to-black dark:from-neutral-200 dark:to-neutral-50 dark:text-black/80 dark:hover:from-stone-200 dark:hover:to-neutral-200 dark:active:from-stone-300 dark:active:to-neutral-300 ",
      accent:
        "gap-2 bg-gradient-to-b from-indigo-400 to-indigo-600 text-sm text-white/90 transition duration-300 ease-in-out hover:bg-gradient-to-b hover:from-indigo-400/70 hover:to-indigo-600/70 active:bg-gradient-to-b active:from-indigo-400/80 active:to-indigo-600/80 dark:hover:from-indigo-400/70 dark:hover:to-indigo-600/70 dark:active:from-indigo-400 dark:active:to-indigo-600",
      destructive:
        "gap-2 bg-gradient-to-b from-red-400/60 to-red-500/60 text-sm text-white/90 transition duration-300 ease-in-out hover:bg-gradient-to-b hover:from-red-400/70 hover:to-red-600/70 active:bg-gradient-to-b active:from-red-400/80 active:to-red-600/80 dark:hover:from-red-400/70 dark:hover:to-red-500/80 dark:active:from-red-400 dark:active:to-red-500",
      secondary:
        "bg-gradient-to-b from-neutral-100/80 to-neutral-200/50 text-sm transition duration-300 ease-in-out hover:bg-gradient-to-b hover:from-neutral-200/40 hover:to-neutral-300/60 active:bg-gradient-to-b active:from-neutral-200/60 active:to-neutral-300/70 dark:from-neutral-800 dark:to-neutral-700/50 dark:hover:from-neutral-700 dark:hover:to-neutral-700/60 dark:active:from-neutral-800 dark:active:to-neutral-700",
      minimal:
        "bg-gradient-to-b from-white to-neutral-50/50 text-sm transition duration-300 ease-in-out group-hover:bg-gradient-to-b group-hover:from-neutral-50/50 group-hover:to-neutral-100/60 group-active:bg-gradient-to-b group-active:from-neutral-100/60 group-active:to-neutral-100/90 dark:from-neutral-800 dark:to-neutral-700/50 dark:group-hover:from-neutral-700 dark:group-hover:to-neutral-700/60 dark:group-active:from-neutral-800 dark:group-active:to-neutral-700",
      icon: "rounded-full bg-gradient-to-b from-white to-neutral-50/50 group-active:bg-neutral-200 dark:from-neutral-800 dark:to-neutral-700/50 dark:group-active:bg-neutral-800",
    },
    size: {
      sm: "rounded-[4px] px-4 py-1 text-xs",
      default: "rounded-[10px] px-4 py-2 text-sm",
      lg: "rounded-[10px] px-4 py-2 text-base",
      icon: " rounded-full p-1",
    },
  },
  defaultVariants: {
    variant: "primary",
    size: "default",
  },
});

export interface UnifiedButtonProps extends React.ButtonHTMLAttributes<HTMLButtonElement> {
  variant?: "primary" | "secondary" | "accent" | "destructive" | "minimal" | "icon";
  size?: "default" | "sm" | "lg" | "icon";
  asChild?: boolean;
}

const TextureButton = React.forwardRef<HTMLButtonElement, UnifiedButtonProps>(({ children, variant = "primary", size = "default", asChild = false, className, ...props }, ref) => {
  const Comp = asChild ? Slot : "button";

  return (
    <Comp className={cn(buttonVariantsOuter({ variant, size }), className)} ref={ref} {...props}>
      <div className={cn(innerDivVariants({ variant, size }))}>{children}</div>
    </Comp>
  );
});

TextureButton.displayName = "TextureButton";

export { TextureButton };
</file>

<file path="components/ui/toggle-group.tsx">
"use client"

import * as React from "react"
import * as ToggleGroupPrimitive from "@radix-ui/react-toggle-group"
import { type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"
import { toggleVariants } from "@/components/ui/toggle"

const ToggleGroupContext = React.createContext<
  VariantProps<typeof toggleVariants>
>({
  size: "default",
  variant: "default",
})

const ToggleGroup = React.forwardRef<
  React.ElementRef<typeof ToggleGroupPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &
    VariantProps<typeof toggleVariants>
>(({ className, variant, size, children, ...props }, ref) => (
  <ToggleGroupPrimitive.Root
    ref={ref}
    className={cn("flex items-center justify-center gap-1", className)}
    {...props}
  >
    <ToggleGroupContext.Provider value={{ variant, size }}>
      {children}
    </ToggleGroupContext.Provider>
  </ToggleGroupPrimitive.Root>
))

ToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName

const ToggleGroupItem = React.forwardRef<
  React.ElementRef<typeof ToggleGroupPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &
    VariantProps<typeof toggleVariants>
>(({ className, children, variant, size, ...props }, ref) => {
  const context = React.useContext(ToggleGroupContext)

  return (
    <ToggleGroupPrimitive.Item
      ref={ref}
      className={cn(
        toggleVariants({
          variant: context.variant || variant,
          size: context.size || size,
        }),
        className
      )}
      {...props}
    >
      {children}
    </ToggleGroupPrimitive.Item>
  )
})

ToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName

export { ToggleGroup, ToggleGroupItem }
</file>

<file path="components/copy-button.tsx">
"use client";

import * as React from "react";
import { DropdownMenuTriggerProps } from "@radix-ui/react-dropdown-menu";
import { CheckIcon, ClipboardIcon } from "lucide-react";
import { NpmCommands } from "types/unist";

import { Event, trackEvent } from "@/lib/events";
import { cn } from "@/lib/utils";
import { Button, ButtonProps } from "./ui/button";
import { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger } from "./ui/dropdown-menu";

interface CopyButtonProps extends ButtonProps {
  value: string;
  src?: string;
  event?: Event["name"];
}

export async function copyToClipboardWithMeta(value: string, event?: Event) {
  navigator.clipboard.writeText(value);
  if (event) {
    trackEvent(event);
  }
}

export function CopyButton({ value, className, src, variant = "ghost", event, ...props }: CopyButtonProps) {
  const [hasCopied, setHasCopied] = React.useState(false);

  React.useEffect(() => {
    setTimeout(() => {
      setHasCopied(false);
    }, 2000);
  }, [hasCopied]);

  return (
    <Button
      size="icon"
      variant={variant}
      className={cn("relative z-10 h-6 w-6 text-zinc-50 hover:bg-zinc-700 hover:text-zinc-50 [&_svg]:h-3 [&_svg]:w-3", className)}
      onClick={() => {
        copyToClipboardWithMeta(
          value,
          event
            ? {
                name: event,
                properties: {
                  code: value,
                },
              }
            : undefined
        );
        setHasCopied(true);
      }}
      {...props}
    >
      <span className="sr-only">Copy</span>
      {hasCopied ? <CheckIcon /> : <ClipboardIcon />}
    </Button>
  );
}

interface CopyWithClassNamesProps extends DropdownMenuTriggerProps {
  value: string;
  classNames: string;
  className?: string;
}

export function CopyWithClassNames({ value, classNames, className, ...props }: CopyWithClassNamesProps) {
  const [hasCopied, setHasCopied] = React.useState(false);

  React.useEffect(() => {
    setTimeout(() => {
      setHasCopied(false);
    }, 2000);
  }, [hasCopied]);

  const copyToClipboard = React.useCallback((value: string) => {
    copyToClipboardWithMeta(value);
    setHasCopied(true);
  }, []);

  return (
    <DropdownMenu>
      <DropdownMenuTrigger asChild>
        <Button size="icon" variant="ghost" className={cn("relative z-10 h-6 w-6 text-zinc-50 hover:bg-zinc-700 hover:text-zinc-50", className)}>
          {hasCopied ? <CheckIcon className="h-3 w-3" /> : <ClipboardIcon className="h-3 w-3" />}
          <span className="sr-only">Copy</span>
        </Button>
      </DropdownMenuTrigger>
      <DropdownMenuContent align="end">
        <DropdownMenuItem onClick={() => copyToClipboard(value)}>Component</DropdownMenuItem>
        <DropdownMenuItem onClick={() => copyToClipboard(classNames)}>Classname</DropdownMenuItem>
      </DropdownMenuContent>
    </DropdownMenu>
  );
}

interface CopyNpmCommandButtonProps extends DropdownMenuTriggerProps {
  commands: Required<NpmCommands>;
}

export function CopyNpmCommandButton({ commands, className, ...props }: CopyNpmCommandButtonProps) {
  const [hasCopied, setHasCopied] = React.useState(false);

  React.useEffect(() => {
    setTimeout(() => {
      setHasCopied(false);
    }, 2000);
  }, [hasCopied]);

  const copyCommand = React.useCallback((value: string, pm: "npm" | "pnpm" | "yarn" | "bun") => {
    copyToClipboardWithMeta(value, {
      name: "copy_npm_command",
      properties: {
        command: value,
        pm,
      },
    });
    setHasCopied(true);
  }, []);

  return (
    <DropdownMenu>
      <DropdownMenuTrigger asChild>
        <Button size="icon" variant="ghost" className={cn("relative z-10 h-6 w-6 text-zinc-50 hover:bg-zinc-700 hover:text-zinc-50", className)}>
          {hasCopied ? <CheckIcon className="h-3 w-3" /> : <ClipboardIcon className="h-3 w-3" />}
          <span className="sr-only">Copy</span>
        </Button>
      </DropdownMenuTrigger>
      <DropdownMenuContent align="end">
        <DropdownMenuItem onClick={() => copyCommand(commands.__npmCommand__, "npm")}>npm</DropdownMenuItem>
        <DropdownMenuItem onClick={() => copyCommand(commands.__yarnCommand__, "yarn")}>yarn</DropdownMenuItem>
        <DropdownMenuItem onClick={() => copyCommand(commands.__pnpmCommand__, "pnpm")}>pnpm</DropdownMenuItem>
        <DropdownMenuItem onClick={() => copyCommand(commands.__bunCommand__, "bun")}>bun</DropdownMenuItem>
      </DropdownMenuContent>
    </DropdownMenu>
  );
}
</file>

<file path="components/site-footer.tsx">
import { siteConfig } from "@/config/site";

export function SiteFooter() {
  return (
    <footer className="relative border py-6 md:py-0">
      <div
        className="absolute top-0 h-px w-full"
        style={{
          background: "radial-gradient(50% 100% at 50% 100%,rgba(255,255,255,.32) 0%,rgba(255,255,255,0) 100%)",
        }}
      ></div>
      <div className="container flex flex-col items-center justify-between gap-4 md:h-12 md:flex-row">
        <p className="text-center text-sm leading-loose text-muted-foreground md:text-left">
          Brought to you by{" "}
          <a href={siteConfig.links.twitter} target="_blank" rel="noreferrer" className="font-medium underline underline-offset-4">
            BroKariim
          </a>
          .
        </p>
      </div>
    </footer>
  );
}
</file>

<file path="components/theme-provider-tweakcn.tsx">
"use client";

import { createContext, useContext, useEffect } from "react";

type Theme = "dark" | "light";

type ThemeProviderProps = {
  children: React.ReactNode;
  defaultTheme?: Theme;
};

type Coords = { x: number; y: number };

type ThemeProviderState = {
  theme: Theme;
  setTheme: (theme: Theme) => void;
  toggleTheme: (coords?: Coords) => void;
};

const initialState: ThemeProviderState = {
  theme: "light",
  setTheme: () => null,
  toggleTheme: () => null,
};

const ThemeProviderContext = createContext<ThemeProviderState>(initialState);

export const useTheme = () => {
  const context = useContext(ThemeProviderContext);

  if (context === undefined) {
    throw new Error("useTheme must be used within a ThemeProvider");
  }

  return context;
};
</file>

<file path="components/theme-provider.tsx">
"use client";

import { createContext, useContext, useEffect } from "react";
import { useEditorStore } from "@/store/editor-store";
import { applyThemeToElement } from "@/utils/apply-theme";

type Theme = "dark" | "light";

type ThemeProviderProps = {
  children: React.ReactNode;
  defaultTheme?: Theme;
};

type Coords = { x: number; y: number };

type ThemeProviderState = {
  theme: Theme;
  setTheme: (theme: Theme) => void;
  toggleTheme: (coords?: Coords) => void;
};

const initialState: ThemeProviderState = {
  theme: "light",
  setTheme: () => null,
  toggleTheme: () => null,
};

const ThemeProviderContext = createContext<ThemeProviderState>(initialState);

export function ThemeProvider({ children, defaultTheme = "light", ...props }: ThemeProviderProps) {
  const { themeState, setThemeState } = useEditorStore();

  // Handle theme preset from URL
  // useThemePresetFromUrl();

  useEffect(() => {
    if (!themeState.currentMode) {
      setThemeState({ ...themeState, currentMode: defaultTheme });
    }
  }, [defaultTheme]);

  useEffect(() => {
    const root = document.documentElement;
    if (!root) return;

    applyThemeToElement(themeState, root);
  }, [themeState]);

  const handleThemeChange = (newMode: Theme) => {
    const root = document.documentElement;

    // Sync dengan class Tailwind
    if (newMode === "dark") {
      root.classList.add("dark");
    } else {
      root.classList.remove("dark");
    }

    setThemeState({ ...themeState, currentMode: newMode });
  };

  const handleThemeToggle = (coords?: Coords) => {
    const root = document.documentElement;
    const newMode = themeState.currentMode === "light" ? "dark" : "light";

    const prefersReducedMotion = window.matchMedia("(prefers-reduced-motion: reduce)").matches;

    if (!document.startViewTransition || prefersReducedMotion) {
      handleThemeChange(newMode);
      return;
    }

    if (coords) {
      root.style.setProperty("--x", `${coords.x}px`);
      root.style.setProperty("--y", `${coords.y}px`);
    }

    document.startViewTransition(() => {
      handleThemeChange(newMode);
    });
  };

  const value: ThemeProviderState = {
    theme: themeState.currentMode,
    setTheme: handleThemeChange,
    toggleTheme: handleThemeToggle,
  };

  return (
    <ThemeProviderContext.Provider {...props} value={value}>
      {children}
    </ThemeProviderContext.Provider>
  );
}

export const useTheme = () => {
  const context = useContext(ThemeProviderContext);

  if (context === undefined) {
    throw new Error("useTheme must be used within a ThemeProvider");
  }

  return context;
};
</file>

<file path="config/site.ts">
export const siteConfig = {
  name: "Behind UI",
  url: "https://www.behindui.xyz/",
  ogImage: "https://res.cloudinary.com/dctl5pihh/image/upload/v1735979399/og-image_sncs7w.png",
  description: "Beautiful UI components and templates to make your landing page look stunning.",
  links: {
    twitter: "https://x.com/BroKariim",
    github: "https://github.com/BroKarim",
    instagram: "https://www.instagram.com/brokariim/",
    threads: "https://www.threads.net/@brokariim",
  },
  keywords: ["React", "Tailwind CSS", "Framer Motion", "Landing Page", "Components", "Next.js"],
};

export type SiteConfig = typeof siteConfig;
</file>

<file path="config/theme-tweakcn.ts">
import { ThemeEditorState } from "@/types/editor";

export const COMMON_STYLES = ["font-sans", "font-serif", "font-mono", "radius", "shadow-opacity", "shadow-blur", "shadow-spread", "shadow-offset-x", "shadow-offset-y", "letter-spacing", "spacing"];

export const DEFAULT_FONT_SANS =
  "ui-sans-serif, system-ui, -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial, 'Noto Sans', sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Noto Color Emoji'";

export const DEFAULT_FONT_SERIF = 'ui-serif, Georgia, Cambria, "Times New Roman", Times, serif';

export const DEFAULT_FONT_MONO = 'ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, "Liberation Mono", "Courier New", monospace';

// Default light theme styles
export const defaultLightThemeStyles = {
  background: "hsl(0 0% 100%)",
  foreground: "hsl(0 0% 14.5%)",
  card: "hsl(0 0% 100%)",
  "card-foreground": "hsl(0 0% 14.5%)",
  popover: "hsl(0 0% 100%)",
  "popover-foreground": "hsl(0 0% 14.5%)",
  primary: "hsl(0 0% 20.5%)",
  "primary-foreground": "hsl(0 0% 98.5%)",
  secondary: "hsl(0 0% 97%)",
  "secondary-foreground": "hsl(0 0% 20.5%)",
  muted: "hsl(0 0% 97%)",
  "muted-foreground": "hsl(0 0% 55.6%)",
  accent: "hsl(0 0% 97%)",
  "accent-foreground": "hsl(0 0% 20.5%)",
  destructive: "hsl(0 80% 57.7%)",
  "destructive-foreground": "hsl(0 0% 100%)",
  border: "hsl(0 0% 92.2%)",
  input: "hsl(0 0% 92.2%)",
  ring: "hsl(0 0% 70.8%)",
  "chart-1": "hsl(41 78% 64.6%)",
  "chart-2": "hsl(185 68% 60%)",
  "chart-3": "hsl(227 65% 39.8%)",
  "chart-4": "hsl(84 63% 82.8%)",
  "chart-5": "hsl(70 68% 76.9%)",
  radius: "0.625rem",
  sidebar: "hsl(0 0% 98.5%)",
  "sidebar-foreground": "hsl(0 0% 14.5%)",
  "sidebar-primary": "hsl(0 0% 20.5%)",
  "sidebar-primary-foreground": "hsl(0 0% 98.5%)",
  "sidebar-accent": "hsl(0 0% 97%)",
  "sidebar-accent-foreground": "hsl(0 0% 20.5%)",
  "sidebar-border": "hsl(0 0% 92.2%)",
  "sidebar-ring": "hsl(0 0% 70.8%)",
  "font-sans": DEFAULT_FONT_SANS,
  "font-serif": DEFAULT_FONT_SERIF,
  "font-mono": DEFAULT_FONT_MONO,

  "shadow-color": "hsl(0 0% 0%)",
  "shadow-opacity": "0.1",
  "shadow-blur": "3px",
  "shadow-spread": "0px",
  "shadow-offset-x": "0",
  "shadow-offset-y": "1px",

  "letter-spacing": "0em",
  spacing: "0.25rem",
};

// Default dark theme styles
export const defaultDarkThemeStyles = {
  ...defaultLightThemeStyles,
  background: "hsl(240 10% 3.9%)",
  foreground: "hsl(0 0% 98%)",
  card: "hsl(240 10% 3.9%)",
  "card-foreground": "hsl(0 0% 98%)",
  popover: "hsl(240 10% 3.9%)",
  "popover-foreground": "hsl(0 0% 98%)",
  primary: "hsl(0 0% 98%)",
  "primary-foreground": "hsl(240 5.9% 10%)",
  secondary: "hsl(240 3.7% 15.9%)",
  "secondary-foreground": "hsl(0 0% 98%)",
  muted: "hsl(240 3.7% 15.9%)",
  "muted-foreground": "hsl(240 5% 64.9%)",
  accent: "hsl(240 3.7% 15.9%)",
  "accent-foreground": "hsl(0 0% 98%)",
  destructive: "hsl(0 62.8% 30.6%)",
  "destructive-foreground": "hsl(0 85.7% 97.3%)",
  border: "hsl(240 3.7% 15.9%)",
  input: "hsl(240 3.7% 15.9%)",
  ring: "hsl(240 4.9% 83.9%)",
  "chart-1": "hsl(220 70% 50%)",
  "chart-2": "hsl(160 60% 45%)",
  "chart-3": "hsl(30 80% 55%)",
  "chart-4": "hsl(280 65% 60%)",
  "chart-5": "hsl(340 75% 55%)",
  // Actual has radius but not in Expected, keeping it as is
  radius: "0.625rem",
  // Converting sidebar-related variables to match Actual format
  sidebar: "hsl(240 5.9% 10%)",
  "sidebar-foreground": "hsl(240 4.8% 95.9%)",
  "sidebar-primary": "hsl(224.3 76.3% 48%)",
  "sidebar-primary-foreground": "hsl(0 0% 100%)",
  "sidebar-accent": "hsl(240 3.7% 15.9%)",
  "sidebar-accent-foreground": "hsl(240 4.8% 95.9%)",
  "sidebar-border": "hsl(240 3.7% 15.9%)",
  "sidebar-ring": "hsl(240 4.9% 83.9%)",

  "shadow-color": "hsl(0 0% 0%)",

  "letter-spacing": "0em",
  spacing: "0.25rem",
};

// Default theme state
export const defaultThemeState: ThemeEditorState = {
  styles: {
    light: defaultLightThemeStyles,
    dark: defaultDarkThemeStyles,
  },
  currentMode: typeof window !== "undefined" && window.matchMedia("(prefers-color-scheme: dark)").matches ? "dark" : "light",
  hslAdjustments: {
    hueShift: 0,
    saturationScale: 1,
    lightnessScale: 1,
  },
};
</file>

<file path="hooks/use-copy-to-clipboard.ts">
"use client";

import * as React from "react";

export function useCopyToClipboard({
  timeout = 2000,
  onCopy,
}: {
  timeout?: number;
  onCopy?: () => void;
} = {}) {
  const [isCopied, setIsCopied] = React.useState(false);

  const copyToClipboard = (value: string) => {
    if (typeof window === "undefined" || !navigator.clipboard.writeText) {
      return;
    }

    if (!value) return;

    navigator.clipboard.writeText(value).then(() => {
      setIsCopied(true);

      if (onCopy) {
        onCopy();
      }

      setTimeout(() => {
        setIsCopied(false);
      }, timeout);
    }, console.error);
  };

  return { isCopied, copyToClipboard };
}
</file>

<file path="hooks/use-mobile.tsx">
import * as React from "react"

const MOBILE_BREAKPOINT = 768

export function useIsMobile() {
  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)

  React.useEffect(() => {
    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)
    const onChange = () => {
      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)
    }
    mql.addEventListener("change", onChange)
    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)
    return () => mql.removeEventListener("change", onChange)
  }, [])

  return !!isMobile
}
</file>

<file path="lib/events.ts">
import posthog from "posthog-js";
import { z } from "zod";

const eventSchema = z.object({
  name: z.enum(["copy_npm_command", "copy_usage_code", "copy_source_code", "copy_block_code", "copy_theme_code"]),
  // declare type AllowedPropertyValues = string | number | boolean | null
  properties: z.record(z.union([z.string(), z.number(), z.boolean(), z.null()])).optional(),
});

export type Event = z.infer<typeof eventSchema>;

export function trackEvent(input: Event): void {
  const event = eventSchema.parse(input);
  if (event) {
    posthog.capture(event.name, event.properties);
  }
}
</file>

<file path="lib/font.ts">
import { JetBrains_Mono as FontMono, Roboto, Lora } from "next/font/google";
import { GeistSans } from "geist/font/sans";
import localFont from "next/font/local";

export const fontSans = GeistSans;

export const fontClash = localFont({ src: "../assets/fonts/ClashDisplay-Bold.otf" });

export const fontMono = FontMono({
  subsets: ["latin"],
  variable: "--font-mono",
});
export const fontRoboto = Roboto({
  subsets: ["latin"],
  display: "swap",
  weight: ["400", "500", "700"],
  variable: "--font-roboto",
});

export const fontSerif = Lora({
  subsets: ["latin"],
  variable: "--font-serif",
  display: "swap",
});
</file>

<file path="lib/highlight-code.ts">
import { codeToHtml } from "shiki";

export async function highlightCode(code: string) {
  const html = await codeToHtml(code, {
    lang: "jsx",
    theme: "github-dark-default",
    transformers: [
      {
        code(node) {
          node.properties["data-line-numbers"] = "";
        },
      },
    ],
  });

  return html;
}
</file>

<file path="lib/theme-preset-helper.ts">
import { defaultThemeState } from "@/config/theme-tweakcn";
import { ThemeStyles } from "@/types/theme-tweakcn";

export function themeColorsToCssVariables(colors: Record<string, string>): Record<string, string> {
  const cssVars = colors
    ? Object.fromEntries(
        Object.entries(colors).map(([name, value]) => {
          if (value === undefined) return [];
          const cssName = themeColorNameToCssVariable(name);
          return [cssName, value];
        })
      )
    : {};

  // for (const key of Array.from({ length: 5 }, (_, index) => index)) {
  //   cssVars[`--chart-${key + 1}`] =
  //     cssVars[`--chart-${key + 1}`] ||
  //     `${cssVars["--primary"]} / ${100 - key * 20}%`
  // }

  return cssVars;
}

export function themeColorNameToCssVariable(name: string) {
  return `--${name.replace(/([a-z])([A-Z])/g, "$1-$2").toLowerCase()}`;
}
</file>

<file path="lib/theme-preset-tweakcn.ts">
import { ThemePreset } from "@/types/theme-tweakcn";

export const defaultPresets: Record<string, ThemePreset> = {
  "modern-minimal": {
    label: "Modern Minimal",
    styles: {
      light: {
        background: "#ffffff",
        foreground: "#333333",
        card: "#ffffff",
        "card-foreground": "#333333",
        popover: "#ffffff",
        "popover-foreground": "#333333",
        primary: "#3b82f6",
        "primary-foreground": "#ffffff",
        secondary: "#f3f4f6",
        "secondary-foreground": "#4b5563",
        muted: "#f9fafb",
        "muted-foreground": "#6b7280",
        accent: "#e0f2fe",
        "accent-foreground": "#1e3a8a",
        destructive: "#ef4444",
        "destructive-foreground": "#ffffff",
        border: "#e5e7eb",
        input: "#e5e7eb",
        ring: "#3b82f6",
        "chart-1": "#3b82f6",
        "chart-2": "#2563eb",
        "chart-3": "#1d4ed8",
        "chart-4": "#1e40af",
        "chart-5": "#1e3a8a",
        radius: "0.375rem",
        sidebar: "#f9fafb",
        "sidebar-foreground": "#333333",
        "sidebar-primary": "#3b82f6",
        "sidebar-primary-foreground": "#ffffff",
        "sidebar-accent": "#e0f2fe",
        "sidebar-accent-foreground": "#1e3a8a",
        "sidebar-border": "#e5e7eb",
        "sidebar-ring": "#3b82f6",
        "font-sans": "Inter, sans-serif",
        "font-serif": "Source Serif 4, serif",
        "font-mono": "JetBrains Mono, monospace",
      },
      dark: {
        background: "#171717",
        foreground: "#e5e5e5",
        card: "#262626",
        "card-foreground": "#e5e5e5",
        popover: "#262626",
        "popover-foreground": "#e5e5e5",
        primary: "#3b82f6",
        "primary-foreground": "#ffffff",
        secondary: "#262626",
        "secondary-foreground": "#e5e5e5",
        muted: "#262626",
        "muted-foreground": "#a3a3a3",
        accent: "#1e3a8a",
        "accent-foreground": "#bfdbfe",
        destructive: "#ef4444",
        "destructive-foreground": "#ffffff",
        border: "#404040",
        input: "#404040",
        ring: "#3b82f6",
        "chart-1": "#60a5fa",
        "chart-2": "#3b82f6",
        "chart-3": "#2563eb",
        "chart-4": "#1d4ed8",
        "chart-5": "#1e40af",
        radius: "0.375rem",
        sidebar: "#171717",
        "sidebar-foreground": "#e5e5e5",
        "sidebar-primary": "#3b82f6",
        "sidebar-primary-foreground": "#ffffff",
        "sidebar-accent": "#1e3a8a",
        "sidebar-accent-foreground": "#bfdbfe",
        "sidebar-border": "#404040",
        "sidebar-ring": "#3b82f6",
      },
    },
  },

  "t3-chat": {
    label: "T3 Chat",
    createdAt: "2025-04-19",
    styles: {
      light: {
        background: "#faf5fa",
        foreground: "#501854",
        card: "#faf5fa",
        "card-foreground": "#501854",
        popover: "#ffffff",
        "popover-foreground": "#501854",
        primary: "#a84370",
        "primary-foreground": "#ffffff",
        secondary: "#f1c4e6",
        "secondary-foreground": "#77347c",
        muted: "#f6e5f3",
        "muted-foreground": "#834588",
        accent: "#f1c4e6",
        "accent-foreground": "#77347c",
        destructive: "#ab4347",
        "destructive-foreground": "#ffffff",
        border: "#efbdeb",
        input: "#e7c1dc",
        ring: "#db2777",
        "chart-1": "#d926a2",
        "chart-2": "#6c12b9",
        "chart-3": "#274754",
        "chart-4": "#e8c468",
        "chart-5": "#f4a462",
        sidebar: "#f3e4f6",
        "sidebar-foreground": "#ac1668",
        "sidebar-primary": "#454554",
        "sidebar-primary-foreground": "#faf1f7",
        "sidebar-accent": "#f8f8f7",
        "sidebar-accent-foreground": "#454554",
        "sidebar-border": "#eceae9",
        "sidebar-ring": "#db2777",
        radius: "0.5rem",
      },
      dark: {
        background: "#221d27",
        foreground: "#d2c4de",
        card: "#2c2632",
        "card-foreground": "#dbc5d2",
        popover: "#100a0e",
        "popover-foreground": "#f8f1f5",
        primary: "#a3004c",
        "primary-foreground": "#efc0d8",
        secondary: "#362d3d",
        "secondary-foreground": "#d4c7e1",
        muted: "#28222d",
        "muted-foreground": "#c2b6cf",
        accent: "#463753",
        "accent-foreground": "#f8f1f5",
        destructive: "#301015",
        "destructive-foreground": "#ffffff",
        border: "#3b3237",
        input: "#3e343c",
        ring: "#db2777",
        "chart-1": "#a84370",
        "chart-2": "#934dcb",
        "chart-3": "#e88c30",
        "chart-4": "#af57db",
        "chart-5": "#e23670",
        sidebar: "#181117",
        "sidebar-foreground": "#e0cad6",
        "sidebar-primary": "#1d4ed8",
        "sidebar-primary-foreground": "#ffffff",
        "sidebar-accent": "#261922",
        "sidebar-accent-foreground": "#f4f4f5",
        "sidebar-border": "#000000",
        "sidebar-ring": "#db2777",
      },
    },
  },

  twitter: {
    label: "Twitter",
    createdAt: "2025-04-24",
    styles: {
      light: {
        background: "#ffffff",
        foreground: "#0f1419",
        card: "#f7f8f8",
        "card-foreground": "#0f1419",
        popover: "#ffffff",
        "popover-foreground": "#0f1419",
        primary: "#1e9df1",
        "primary-foreground": "#ffffff",
        secondary: "#0f1419",
        "secondary-foreground": "#ffffff",
        muted: "#E5E5E6",
        "muted-foreground": "#0f1419",
        accent: "#E3ECF6",
        "accent-foreground": "#1e9df1",
        destructive: "#f4212e",
        "destructive-foreground": "#ffffff",
        border: "#e1eaef",
        input: "#f7f9fa",
        ring: "#1da1f2",
        "chart-1": "#1e9df1",
        "chart-2": "#00b87a",
        "chart-3": "#f7b928",
        "chart-4": "#17bf63",
        "chart-5": "#e0245e",
        sidebar: "#f7f8f8",
        "sidebar-foreground": "#0f1419",
        "sidebar-primary": "#1e9df1",
        "sidebar-primary-foreground": "#ffffff",
        "sidebar-accent": "#E3ECF6",
        "sidebar-accent-foreground": "#1e9df1",
        "sidebar-border": "#e1e8ed",
        "sidebar-ring": "#1da1f2",
        "font-sans": "Open Sans, sans-serif",
        "font-serif": "Georgia, serif",
        "font-mono": "Menlo, monospace",
        radius: "1.3rem",
        "shadow-color": "rgba(29,161,242,0.15)",
        "shadow-opacity": "0",
        "shadow-blur": "0px",
        "shadow-spread": "0px",
        "shadow-offset-x": "0px",
        "shadow-offset-y": "2px",
      },
      dark: {
        background: "#000000",
        foreground: "#e7e9ea",
        card: "#17181c",
        "card-foreground": "#d9d9d9",
        popover: "#000000",
        "popover-foreground": "#e7e9ea",
        primary: "#1c9cf0",
        "primary-foreground": "#ffffff",
        secondary: "#f0f3f4",
        "secondary-foreground": "#0f1419",
        muted: "#181818",
        "muted-foreground": "#72767a",
        accent: "#061622",
        "accent-foreground": "#1c9cf0",
        destructive: "#f4212e",
        "destructive-foreground": "#ffffff",
        border: "#242628",
        input: "#22303c",
        ring: "#1da1f2",
        "chart-1": "#1e9df1",
        "chart-2": "#00b87a",
        "chart-3": "#f7b928",
        "chart-4": "#17bf63",
        "chart-5": "#e0245e",
        sidebar: "#17181c",
        "sidebar-foreground": "#d9d9d9",
        "sidebar-primary": "#1da1f2",
        "sidebar-primary-foreground": "#ffffff",
        "sidebar-accent": "#061622",
        "sidebar-accent-foreground": "#1c9cf0",
        "sidebar-border": "#38444d",
        "sidebar-ring": "#1da1f2",
        "shadow-color": "rgba(29,161,242,0.25)",
      },
    },
  },

  "mocha-mousse": {
    label: "Mocha Mousse",
    createdAt: "2025-04-24",
    styles: {
      light: {
        background: "#F1F0E5",
        foreground: "#56453F",
        card: "#F1F0E5",
        "card-foreground": "#56453F",
        popover: "#FFFFFF",
        "popover-foreground": "#56453F",
        primary: "#A37764",
        "primary-foreground": "#FFFFFF",
        secondary: "#BAAB92",
        "secondary-foreground": "#ffffff",
        muted: "#E4C7B8",
        "muted-foreground": "#8A655A",
        accent: "#E4C7B8",
        "accent-foreground": "#56453F",
        destructive: "#1f1a17",
        "destructive-foreground": "#FFFFFF",
        border: "#BAAB92",
        input: "#BAAB92",
        ring: "#A37764",
        "chart-1": "#A37764",
        "chart-2": "#8A655A",
        "chart-3": "#C39E88",
        "chart-4": "#BAAB92",
        "chart-5": "#A28777",
        sidebar: "#ebd6cb",
        "sidebar-foreground": "#56453F",
        "sidebar-primary": "#A37764",
        "sidebar-primary-foreground": "#FFFFFF",
        "sidebar-accent": "#C39E88",
        "sidebar-accent-foreground": "#ffffff",
        "sidebar-border": "#A28777",
        "sidebar-ring": "#A37764",
        "font-sans": "DM Sans, sans-serif",
        "font-serif": "Georgia, serif",
        "font-mono": "Menlo, monospace",
        radius: "0.5rem",
        "shadow-color": "hsl(20 18% 51% / 0.4)",
        "shadow-opacity": "0.11",
        "shadow-blur": "0px",
        "shadow-spread": "0px",
        "shadow-offset-x": "2px",
        "shadow-offset-y": "2px",
      },
      dark: {
        background: "#2d2521",
        foreground: "#F1F0E5",
        card: "#3c332e",
        "card-foreground": "#F1F0E5",
        popover: "#3c332e",
        "popover-foreground": "#F1F0E5",
        primary: "#C39E88",
        "primary-foreground": "#2d2521",
        secondary: "#8A655A",
        "secondary-foreground": "#F1F0E5",
        muted: "#56453F",
        "muted-foreground": "#c5aa9b",
        accent: "#BAAB92",
        "accent-foreground": "#2d2521",
        destructive: "#E57373",
        "destructive-foreground": "#2d2521",
        border: "#56453F",
        input: "#56453F",
        ring: "#C39E88",
        "chart-1": "#C39E88",
        "chart-2": "#BAAB92",
        "chart-3": "#A37764",
        "chart-4": "#8A655A",
        "chart-5": "#A28777",
        sidebar: "#1f1a17",
        "sidebar-foreground": "#F1F0E5",
        "sidebar-primary": "#C39E88",
        "sidebar-primary-foreground": "#1f1a17",
        "sidebar-accent": "#BAAB92",
        "sidebar-accent-foreground": "#1f1a17",
        "sidebar-border": "#56453F",
        "sidebar-ring": "#C39E88",
        "shadow-color": "hsl(20 18% 30% / 0.5)",
      },
    },
  },

  bubblegum: {
    label: "Bubblegum",
    createdAt: "2025-04-18",
    styles: {
      light: {
        background: "#f6e6ee",
        foreground: "#5b5b5b",
        card: "#fdedc9",
        "card-foreground": "#5b5b5b",
        popover: "#ffffff",
        "popover-foreground": "#5b5b5b",
        primary: "#d04f99",
        "primary-foreground": "#ffffff",
        secondary: "#8acfd1",
        "secondary-foreground": "#333333",
        muted: "#b2e1eb",
        "muted-foreground": "#7a7a7a",
        accent: "#fbe2a7",
        "accent-foreground": "#333333",
        destructive: "#f96f70",
        "destructive-foreground": "#ffffff",
        border: "#d04f99",
        input: "#e4e4e4",
        ring: "#e670ab",
        "chart-1": "#e670ab",
        "chart-2": "#84d2e2",
        "chart-3": "#fbe2a7",
        "chart-4": "#f3a0ca",
        "chart-5": "#d7488e",
        sidebar: "#f8d8ea",
        "sidebar-foreground": "#333333",
        "sidebar-primary": "#ec4899",
        "sidebar-primary-foreground": "#ffffff",
        "sidebar-accent": "#f9a8d4",
        "sidebar-accent-foreground": "#333333",
        "sidebar-border": "#f3e8ff",
        "sidebar-ring": "#ec4899",
        "font-sans": "Poppins, sans-serif",
        "font-serif": "Lora, serif",
        "font-mono": "Fira Code, monospace",
        radius: "0.4rem",
        "shadow-color": "hsl(325.78 58.18% 56.86% / 0.5)",
        "shadow-opacity": "1.0",
        "shadow-blur": "0px",
        "shadow-spread": "0px",
        "shadow-offset-x": "3px",
        "shadow-offset-y": "3px",
      },
      dark: {
        background: "#12242e",
        foreground: "#f3e3ea",
        card: "#1c2e38",
        "card-foreground": "#f3e3ea",
        popover: "#1c2e38",
        "popover-foreground": "#f3e3ea",
        primary: "#fbe2a7",
        "primary-foreground": "#12242e",
        secondary: "#e4a2b1",
        "secondary-foreground": "#12242e",
        muted: "#24272b",
        "muted-foreground": "#e4a2b1",
        accent: "#c67b96",
        "accent-foreground": "#f3e3ea",
        destructive: "#e35ea4",
        "destructive-foreground": "#12242e",
        border: "#324859",
        input: "#20333d",
        ring: "#50afb6",
        "chart-1": "#50afb6",
        "chart-2": "#e4a2b1",
        "chart-3": "#c67b96",
        "chart-4": "#175c6c",
        "chart-5": "#24272b",
        sidebar: "#101f28",
        "sidebar-foreground": "#f3f4f6",
        "sidebar-primary": "#ec4899",
        "sidebar-primary-foreground": "#ffffff",
        "sidebar-accent": "#f9a8d4",
        "sidebar-accent-foreground": "#1f2937",
        "sidebar-border": "#374151",
        "sidebar-ring": "#ec4899",
        "font-sans": "Poppins, sans-serif",
        "font-serif": "Lora, serif",
        "font-mono": "Fira Code, monospace",
        "shadow-color": "#324859",
      },
    },
  },

  "amethyst-haze": {
    label: "Amethyst Haze",
    createdAt: "2025-05-08",
    styles: {
      light: {
        background: "#f8f7fa",
        foreground: "#3d3c4f",
        card: "#ffffff",
        "card-foreground": "#3d3c4f",
        popover: "#ffffff",
        "popover-foreground": "#3d3c4f",
        primary: "#8a79ab",
        "primary-foreground": "#f8f7fa",
        secondary: "#dfd9ec",
        "secondary-foreground": "#3d3c4f",
        muted: "#dcd9e3",
        "muted-foreground": "#6b6880",
        accent: "#e6a5b8",
        "accent-foreground": "#4b2e36",
        destructive: "#d95c5c",
        "destructive-foreground": "#f8f7fa",
        border: "#cec9d9",
        input: "#eae7f0",
        ring: "#8a79ab",
        "chart-1": "#8a79ab",
        "chart-2": "#e6a5b8",
        "chart-3": "#77b8a1",
        "chart-4": "#f0c88d",
        "chart-5": "#a0bbe3",
        sidebar: "#f1eff5",
        "sidebar-foreground": "#3d3c4f",
        "sidebar-primary": "#8a79ab",
        "sidebar-primary-foreground": "#f8f7fa",
        "sidebar-accent": "#e6a5b8",
        "sidebar-accent-foreground": "#4b2e36",
        "sidebar-border": "#d7d2e0",
        "sidebar-ring": "#8a79ab",
        "font-sans": "Geist, sans-serif",
        "font-serif": '"Lora", Georgia, serif',
        "font-mono": '"Fira Code", "Courier New", monospace',
        radius: "0.5rem",
        "shadow-color": "hsl(0 0% 0%)",
        "shadow-opacity": "0.06",
        "shadow-blur": "5px",
        "shadow-spread": "1px",
        "shadow-offset-x": "1px",
        "shadow-offset-y": "2px",
        "letter-spacing": "0em",
        spacing: "0.25rem",
      },
      dark: {
        background: "#1a1823",
        foreground: "#e0ddef",
        card: "#232030",
        "card-foreground": "#e0ddef",
        popover: "#232030",
        "popover-foreground": "#e0ddef",
        primary: "#a995c9",
        "primary-foreground": "#1a1823",
        secondary: "#5a5370",
        "secondary-foreground": "#e0ddef",
        muted: "#242031",
        "muted-foreground": "#a09aad",
        accent: "#372e3f",
        "accent-foreground": "#f2b8c6",
        destructive: "#e57373",
        "destructive-foreground": "#1a1823",
        border: "#302c40",
        input: "#2a273a",
        ring: "#a995c9",
        "chart-1": "#a995c9",
        "chart-2": "#f2b8c6",
        "chart-3": "#77b8a1",
        "chart-4": "#f0c88d",
        "chart-5": "#a0bbe3",
        sidebar: "#16141e",
        "sidebar-foreground": "#e0ddef",
        "sidebar-primary": "#a995c9",
        "sidebar-primary-foreground": "#1a1823",
        "sidebar-accent": "#372e3f",
        "sidebar-accent-foreground": "#f2b8c6",
        "sidebar-border": "#2a273a",
        "sidebar-ring": "#a995c9",
      },
    },
  },

  "doom-64": {
    label: "Doom 64",
    createdAt: "2025-04-28",
    styles: {
      light: {
        background: "#cccccc",
        foreground: "#1f1f1f",
        card: "#b0b0b0",
        "card-foreground": "#1f1f1f",
        popover: "#b0b0b0",
        "popover-foreground": "#1f1f1f",
        primary: "#b71c1c",
        "primary-foreground": "#ffffff",
        secondary: "#556b2f",
        "secondary-foreground": "#ffffff",
        muted: "#b8b8b8",
        "muted-foreground": "#4a4a4a",
        accent: "#4682b4",
        "accent-foreground": "#ffffff",
        destructive: "#ff6f00",
        "destructive-foreground": "#000000",
        border: "#505050",
        input: "#505050",
        ring: "#b71c1c",
        "chart-1": "#b71c1c",
        "chart-2": "#556b2f",
        "chart-3": "#4682b4",
        "chart-4": "#ff6f00",
        "chart-5": "#8d6e63",
        sidebar: "#b0b0b0",
        "sidebar-foreground": "#1f1f1f",
        "sidebar-primary": "#b71c1c",
        "sidebar-primary-foreground": "#ffffff",
        "sidebar-accent": "#4682b4",
        "sidebar-accent-foreground": "#ffffff",
        "sidebar-border": "#505050",
        "sidebar-ring": "#b71c1c",
        "font-sans": '"Oxanium", sans-serif',
        "font-serif": 'ui-serif, Georgia, Cambria, "Times New Roman", Times, serif',
        "font-mono": '"Source Code Pro", monospace',
        radius: "0px",
        "shadow-color": "hsl(0 0% 0%)",
        "shadow-opacity": "0.4",
        "shadow-blur": "4px",
        "shadow-spread": "0px",
        "shadow-offset-x": "0px",
        "shadow-offset-y": "2px",
        "letter-spacing": "0em",
        spacing: "0.25rem",
      },
      dark: {
        background: "#1a1a1a",
        foreground: "#e0e0e0",
        card: "#2a2a2a",
        "card-foreground": "#e0e0e0",
        popover: "#2a2a2a",
        "popover-foreground": "#e0e0e0",
        primary: "#e53935",
        "primary-foreground": "#ffffff",
        secondary: "#689f38",
        "secondary-foreground": "#000000",
        muted: "#252525",
        "muted-foreground": "#a0a0a0",
        accent: "#64b5f6",
        "accent-foreground": "#000000",
        destructive: "#ffa000",
        "destructive-foreground": "#000000",
        border: "#4a4a4a",
        input: "#4a4a4a",
        ring: "#e53935",
        "chart-1": "#e53935",
        "chart-2": "#689f38",
        "chart-3": "#64b5f6",
        "chart-4": "#ffa000",
        "chart-5": "#a1887f",
        sidebar: "#141414",
        "sidebar-foreground": "#e0e0e0",
        "sidebar-primary": "#e53935",
        "sidebar-primary-foreground": "#ffffff",
        "sidebar-accent": "#64b5f6",
        "sidebar-accent-foreground": "#000000",
        "sidebar-border": "#4a4a4a",
        "sidebar-ring": "#e53935",
        "font-sans": '"Oxanium", sans-serif',
        "font-serif": 'ui-serif, Georgia, Cambria, "Times New Roman", Times, serif',
        "font-mono": '"Source Code Pro", monospace',
        radius: "0px",
        "shadow-color": "hsl(0 0% 0%)",
        "shadow-opacity": "0.6",
        "shadow-blur": "5px",
        "shadow-spread": "0px",
        "shadow-offset-x": "0px",
        "shadow-offset-y": "2px",
        "letter-spacing": "0em",
        spacing: "0.25rem",
      },
    },
  },

  catppuccin: {
    label: "Catppuccin",
    createdAt: "2025-04-18",
    styles: {
      light: {
        background: "#eff1f5",
        foreground: "#4c4f69",
        card: "#ffffff",
        "card-foreground": "#4c4f69",
        popover: "#ccd0da",
        "popover-foreground": "#4c4f69",
        primary: "#8839ef",
        "primary-foreground": "#ffffff",
        secondary: "#ccd0da",
        "secondary-foreground": "#4c4f69",
        muted: "#dce0e8",
        "muted-foreground": "#6c6f85",
        accent: "#04a5e5",
        "accent-foreground": "#ffffff",
        destructive: "#d20f39",
        "destructive-foreground": "#ffffff",
        border: "#bcc0cc",
        input: "#ccd0da",
        ring: "#8839ef",
        "chart-1": "#8839ef",
        "chart-2": "#04a5e5",
        "chart-3": "#40a02b",
        "chart-4": "#fe640b",
        "chart-5": "#dc8a78",
        sidebar: "#e6e9ef",
        "sidebar-foreground": "#4c4f69",
        "sidebar-primary": "#8839ef",
        "sidebar-primary-foreground": "#ffffff",
        "sidebar-accent": "#04a5e5",
        "sidebar-accent-foreground": "#ffffff",
        "sidebar-border": "#bcc0cc",
        "sidebar-ring": "#8839ef",
        "font-sans": "Montserrat, sans-serif",
        "font-serif": "Georgia, serif",
        "font-mono": "Fira Code, monospace",
        radius: "0.35rem",
        "shadow-color": "hsl(240 30% 25%)",
        "shadow-opacity": "0.12",
        "shadow-blur": "6px",
        "shadow-spread": "0px",
        "shadow-offset-x": "0px",
        "shadow-offset-y": "4px",
      },
      dark: {
        background: "#181825",
        foreground: "#cdd6f4",
        card: "#1e1e2e",
        "card-foreground": "#cdd6f4",
        popover: "#45475a",
        "popover-foreground": "#cdd6f4",
        primary: "#cba6f7",
        "primary-foreground": "#1e1e2e",
        secondary: "#585b70",
        "secondary-foreground": "#cdd6f4",
        muted: "#292c3c",
        "muted-foreground": "#a6adc8",
        accent: "#89dceb",
        "accent-foreground": "#1e1e2e",
        destructive: "#f38ba8",
        "destructive-foreground": "#1e1e2e",
        border: "#313244",
        input: "#313244",
        ring: "#cba6f7",
        "chart-1": "#cba6f7",
        "chart-2": "#89dceb",
        "chart-3": "#a6e3a1",
        "chart-4": "#fab387",
        "chart-5": "#f5e0dc",
        sidebar: "#11111b",
        "sidebar-foreground": "#cdd6f4",
        "sidebar-primary": "#cba6f7",
        "sidebar-primary-foreground": "#1e1e2e",
        "sidebar-accent": "#89dceb",
        "sidebar-accent-foreground": "#1e1e2e",
        "sidebar-border": "#45475a",
        "sidebar-ring": "#cba6f7",
      },
    },
  },

  graphite: {
    label: "Graphite",
    createdAt: "2025-04-17",
    styles: {
      light: {
        background: "#f0f0f0",
        foreground: "#333333",
        card: "#f5f5f5",
        "card-foreground": "#333333",
        popover: "#f5f5f5",
        "popover-foreground": "#333333",
        primary: "#606060",
        "primary-foreground": "#ffffff",
        secondary: "#e0e0e0",
        "secondary-foreground": "#333333",
        muted: "#d9d9d9",
        "muted-foreground": "#666666",
        accent: "#c0c0c0",
        "accent-foreground": "#333333",
        destructive: "#cc3333",
        "destructive-foreground": "#ffffff",
        border: "#d0d0d0",
        input: "#e0e0e0",
        ring: "#606060",
        "chart-1": "#606060",
        "chart-2": "#476666",
        "chart-3": "#909090",
        "chart-4": "#a8a8a8",
        "chart-5": "#c0c0c0",
        sidebar: "#eaeaea",
        "sidebar-foreground": "#333333",
        "sidebar-primary": "#606060",
        "sidebar-primary-foreground": "#ffffff",
        "sidebar-accent": "#c0c0c0",
        "sidebar-accent-foreground": "#333333",
        "sidebar-border": "#d0d0d0",
        "sidebar-ring": "#606060",
        "font-sans": "Montserrat, sans-serif",
        "font-serif": "Georgia, serif",
        "font-mono": "Fira Code, monospace",
        radius: "0.35rem",
        "shadow-color": "hsl(0 0% 20% / 0.1)",
        "shadow-opacity": "0.15",
        "shadow-blur": "0px",
        "shadow-spread": "0px",
        "shadow-offset-x": "0px",
        "shadow-offset-y": "2px",
      },
      dark: {
        background: "#1a1a1a",
        foreground: "#d9d9d9",
        card: "#202020",
        "card-foreground": "#d9d9d9",
        popover: "#202020",
        "popover-foreground": "#d9d9d9",
        primary: "#a0a0a0",
        "primary-foreground": "#1a1a1a",
        secondary: "#303030",
        "secondary-foreground": "#d9d9d9",
        muted: "#2a2a2a",
        "muted-foreground": "#808080",
        accent: "#404040",
        "accent-foreground": "#d9d9d9",
        destructive: "#e06666",
        "destructive-foreground": "#ffffff",
        border: "#353535",
        input: "#303030",
        ring: "#a0a0a0",
        "chart-1": "#a0a0a0",
        "chart-2": "#7e9ca0",
        "chart-3": "#707070",
        "chart-4": "#585858",
        "chart-5": "#404040",
        sidebar: "#1f1f1f",
        "sidebar-foreground": "#d9d9d9",
        "sidebar-primary": "#a0a0a0",
        "sidebar-primary-foreground": "#1a1a1a",
        "sidebar-accent": "#404040",
        "sidebar-accent-foreground": "#d9d9d9",
        "sidebar-border": "#353535",
        "sidebar-ring": "#a0a0a0",
        "font-sans": "Inter, sans-serif",
        "font-serif": "Georgia, serif",
        "font-mono": "Fira Code, monospace",
      },
    },
  },

  perpetuity: {
    label: "Perpetuity",
    createdAt: "2025-04-01",
    styles: {
      light: {
        background: "#e8f0f0",
        foreground: "#0a4a55",
        card: "#f2f7f7",
        "card-foreground": "#0a4a55",
        popover: "#f2f7f7",
        "popover-foreground": "#0a4a55",
        primary: "#06858e",
        "primary-foreground": "#ffffff",
        secondary: "#d9eaea",
        "secondary-foreground": "#0a4a55",
        muted: "#e0eaea",
        "muted-foreground": "#427a7e",
        accent: "#c9e5e7",
        "accent-foreground": "#0a4a55",
        destructive: "#d13838",
        "destructive-foreground": "#ffffff",
        border: "#cde0e2",
        input: "#d9eaea",
        ring: "#06858e",
        "chart-1": "#06858e",
        "chart-2": "#1e9ea6",
        "chart-3": "#37b6be",
        "chart-4": "#5dc7ce",
        "chart-5": "#8ad8dd",
        sidebar: "#daebed",
        "sidebar-foreground": "#0a4a55",
        "sidebar-primary": "#06858e",
        "sidebar-primary-foreground": "#ffffff",
        "sidebar-accent": "#c9e5e7",
        "sidebar-accent-foreground": "#0a4a55",
        "sidebar-border": "#cde0e2",
        "sidebar-ring": "#06858e",
        "font-sans": "Courier New, monospace",
        "font-serif": "Courier New, monospace",
        "font-mono": "Courier New, monospace",
        radius: "0.125rem",
        "shadow-color": "hsl(185 70% 30% / 0.15)",
        "shadow-opacity": "0.15",
        "shadow-blur": "2px",
        "shadow-spread": "0px",
        "shadow-offset-x": "1px",
        "shadow-offset-y": "1px",
      },
      dark: {
        background: "#0a1a20",
        foreground: "#4de8e8",
        card: "#0c2025",
        "card-foreground": "#4de8e8",
        popover: "#0c2025",
        "popover-foreground": "#4de8e8",
        primary: "#4de8e8",
        "primary-foreground": "#0a1a20",
        secondary: "#164955",
        "secondary-foreground": "#4de8e8",
        muted: "#0f3039",
        "muted-foreground": "#36a5a5",
        accent: "#164955",
        "accent-foreground": "#4de8e8",
        destructive: "#e83c3c",
        "destructive-foreground": "#f2f2f2",
        border: "#164955",
        input: "#164955",
        ring: "#4de8e8",
        "chart-1": "#4de8e8",
        "chart-2": "#36a5a5",
        "chart-3": "#2d8a8a",
        "chart-4": "#19595e",
        "chart-5": "#0e383c",
        sidebar: "#0a1a20",
        "sidebar-foreground": "#4de8e8",
        "sidebar-primary": "#4de8e8",
        "sidebar-primary-foreground": "#0a1a20",
        "sidebar-accent": "#164955",
        "sidebar-accent-foreground": "#4de8e8",
        "sidebar-border": "#164955",
        "sidebar-ring": "#4de8e8",
        "font-sans": "Source Code Pro, monospace",
        "font-serif": "Source Code Pro, monospace",
        "font-mono": "Source Code Pro, monospace",
        radius: "0.125rem",
        "shadow-color": "hsl(180 70% 60% / 0.2)",
        "shadow-opacity": "0.2",
        "shadow-blur": "2px",
        "shadow-spread": "0px",
        "shadow-offset-x": "1px",
        "shadow-offset-y": "1px",
      },
    },
  },
  "kodama-grove": {
    label: "Kodama Grove",
    styles: {
      light: {
        background: "#e4d7b0",
        foreground: "#5c4b3e",
        card: "#e7dbbf",
        "card-foreground": "#5c4b3e",
        popover: "#f3ead2",
        "popover-foreground": "#5c4b3e",
        primary: "#8d9d4f",
        "primary-foreground": "#fdfbf6",
        secondary: "#decea0",
        "secondary-foreground": "#5c4b3e",
        muted: "#decea0",
        "muted-foreground": "#85766a",
        accent: "#dbc894",
        "accent-foreground": "#5c4b3e",
        destructive: "#d98b7e",
        "destructive-foreground": "#faf8f2",
        border: "#b19681",
        input: "#dbc894",
        ring: "#9db18c",
        "chart-1": "#9db18c",
        "chart-2": "#8a9f7b",
        "chart-3": "#bac9b4",
        "chart-4": "#71856a",
        "chart-5": "#5e6e58",
        sidebar: "#e2d1a2",
        "sidebar-foreground": "#5c4b3e",
        "sidebar-primary": "#9db18c",
        "sidebar-primary-foreground": "#fdfbf6",
        "sidebar-accent": "#eae5d9",
        "sidebar-accent-foreground": "#5c4b3e",
        "sidebar-border": "#e5e0d4",
        "sidebar-ring": "#9db18c",
        "font-sans": "Merriweather, serif",
        "font-serif": "Source Serif 4, serif",
        "font-mono": "JetBrains Mono, monospace",
        radius: "0.425rem",
        "shadow-color": "hsl(88 22% 35% / 0.15)",
        "shadow-opacity": "0.15",
        "shadow-blur": "2px",
        "shadow-spread": "0px",
        "shadow-offset-x": "3px",
        "shadow-offset-y": "3px",
      },
      dark: {
        background: "#3a3529",
        foreground: "#ede4d4",
        card: "#413c33",
        "card-foreground": "#ede4d4",
        popover: "#413c33",
        "popover-foreground": "#ede4d4",
        primary: "#8a9f7b",
        "primary-foreground": "#2a2521",
        secondary: "#5a5345",
        "secondary-foreground": "#ede4d4",
        muted: "#4a4439",
        "muted-foreground": "#a8a096",
        accent: "#a18f5c",
        "accent-foreground": "#2a2521",
        destructive: "#b5766a",
        "destructive-foreground": "#f0e9db",
        border: "#5a5345",
        input: "#5a5345",
        ring: "#8a9f7b",
        "chart-1": "#8a9f7b",
        "chart-2": "#9db18c",
        "chart-3": "#71856a",
        "chart-4": "#a18f5c",
        "chart-5": "#5e6e58",
        sidebar: "#3a3529",
        "sidebar-foreground": "#ede4d4",
        "sidebar-primary": "#8a9f7b",
        "sidebar-primary-foreground": "#2a2521",
        "sidebar-accent": "#a18f5c",
        "sidebar-accent-foreground": "#2a2521",
        "sidebar-border": "#5a5345",
        "sidebar-ring": "#8a9f7b",
      },
    },
  },

  "cosmic-night": {
    label: "Cosmic Night",
    createdAt: "2025-04-04",
    styles: {
      light: {
        background: "#f5f5ff",
        foreground: "#2a2a4a",
        card: "#ffffff",
        "card-foreground": "#2a2a4a",
        popover: "#ffffff",
        "popover-foreground": "#2a2a4a",
        primary: "#6e56cf",
        "primary-foreground": "#ffffff",
        secondary: "#e4dfff",
        "secondary-foreground": "#4a4080",
        muted: "#f0f0fa",
        "muted-foreground": "#6c6c8a",
        accent: "#d8e6ff",
        "accent-foreground": "#2a2a4a",
        destructive: "#ff5470",
        "destructive-foreground": "#ffffff",
        border: "#e0e0f0",
        input: "#e0e0f0",
        ring: "#6e56cf",
        "chart-1": "#6e56cf",
        "chart-2": "#9e8cfc",
        "chart-3": "#5d5fef",
        "chart-4": "#7c75fa",
        "chart-5": "#4740b3",
        radius: "0.5rem",
        sidebar: "#f0f0fa",
        "sidebar-foreground": "#2a2a4a",
        "sidebar-primary": "#6e56cf",
        "sidebar-primary-foreground": "#ffffff",
        "sidebar-accent": "#d8e6ff",
        "sidebar-accent-foreground": "#2a2a4a",
        "sidebar-border": "#e0e0f0",
        "sidebar-ring": "#6e56cf",
        "font-sans": "Inter, sans-serif",
        "font-serif": "Georgia, serif",
        "font-mono": "JetBrains Mono, monospace",
        "shadow-color": "hsl(240 30% 25%)",
        "shadow-opacity": "0.12",
        "shadow-blur": "10px",
        "shadow-spread": "0px",
        "shadow-offset-x": "0px",
        "shadow-offset-y": "4px",
      },
      dark: {
        background: "#0f0f1a",
        foreground: "#e2e2f5",
        card: "#1a1a2e",
        "card-foreground": "#e2e2f5",
        popover: "#1a1a2e",
        "popover-foreground": "#e2e2f5",
        primary: "#a48fff",
        "primary-foreground": "#0f0f1a",
        secondary: "#2d2b55",
        "secondary-foreground": "#c4c2ff",
        muted: "#222244",
        "muted-foreground": "#a0a0c0",
        accent: "#303060",
        "accent-foreground": "#e2e2f5",
        destructive: "#ff5470",
        "destructive-foreground": "#ffffff",
        border: "#303052",
        input: "#303052",
        ring: "#a48fff",
        "chart-1": "#a48fff",
        "chart-2": "#7986cb",
        "chart-3": "#64b5f6",
        "chart-4": "#4db6ac",
        "chart-5": "#ff79c6",
        radius: "0.5rem",
        sidebar: "#1a1a2e",
        "sidebar-foreground": "#e2e2f5",
        "sidebar-primary": "#a48fff",
        "sidebar-primary-foreground": "#0f0f1a",
        "sidebar-accent": "#303060",
        "sidebar-accent-foreground": "#e2e2f5",
        "sidebar-border": "#303052",
        "sidebar-ring": "#a48fff",
      },
    },
  },

  tangerine: {
    label: "Tangerine",
    createdAt: "2025-04-09",
    styles: {
      light: {
        background: "#e8ebed",
        foreground: "#333333",
        card: "#ffffff",
        "card-foreground": "#333333",
        popover: "#ffffff",
        "popover-foreground": "#333333",
        primary: "#e05d38",
        "primary-foreground": "#ffffff",
        secondary: "#f3f4f6",
        "secondary-foreground": "#4b5563",
        muted: "#f9fafb",
        "muted-foreground": "#6b7280",
        accent: "#d6e4f0",
        "accent-foreground": "#1e3a8a",
        destructive: "#ef4444",
        "destructive-foreground": "#ffffff",
        border: "#dcdfe2",
        input: "#f4f5f7",
        ring: "#e05d38",
        "chart-1": "#86a7c8",
        "chart-2": "#eea591",
        "chart-3": "#5a7ca6",
        "chart-4": "#466494",
        "chart-5": "#334c82",
        sidebar: "#dddfe2",
        "sidebar-foreground": "#333333",
        "sidebar-primary": "#e05d38",
        "sidebar-primary-foreground": "#ffffff",
        "sidebar-accent": "#d6e4f0",
        "sidebar-accent-foreground": "#1e3a8a",
        "sidebar-border": "#e5e7eb",
        "sidebar-ring": "#e05d38",
        "font-sans": "Inter, sans-serif",
        "font-serif": "Source Serif 4, serif",
        "font-mono": "JetBrains Mono, monospace",
        radius: "0.75rem",
        "shadow-color": "hsl(0 0% 0%)",
        "shadow-opacity": "0.1",
        "shadow-blur": "3px",
        "shadow-spread": "0px",
        "shadow-offset-x": "0px",
        "shadow-offset-y": "1px",
      },
      dark: {
        background: "#1c2433",
        foreground: "#e5e5e5",
        card: "#2a3040",
        "card-foreground": "#e5e5e5",
        popover: "#262b38",
        "popover-foreground": "#e5e5e5",
        primary: "#e05d38",
        "primary-foreground": "#ffffff",
        secondary: "#2a303e",
        "secondary-foreground": "#e5e5e5",
        muted: "#2a303e",
        "muted-foreground": "#a3a3a3",
        accent: "#2a3656",
        "accent-foreground": "#bfdbfe",
        destructive: "#ef4444",
        "destructive-foreground": "#ffffff",
        border: "#3d4354",
        input: "#3d4354",
        ring: "#e05d38",
        "chart-1": "#86a7c8",
        "chart-2": "#e6a08f",
        "chart-3": "#5a7ca6",
        "chart-4": "#466494",
        "chart-5": "#334c82",
        sidebar: "#2a303f",
        "sidebar-foreground": "#e5e5e5",
        "sidebar-primary": "#e05d38",
        "sidebar-primary-foreground": "#ffffff",
        "sidebar-accent": "#2a3656",
        "sidebar-accent-foreground": "#bfdbfe",
        "sidebar-border": "#3d4354",
        "sidebar-ring": "#e05d38",
      },
    },
  },

  "quantum-rose": {
    label: "Quantum Rose",
    createdAt: "2025-04-03",
    styles: {
      light: {
        background: "#fff0f8",
        foreground: "#91185c",
        card: "#fff7fc",
        "card-foreground": "#91185c",
        popover: "#fff7fc",
        "popover-foreground": "#91185c",
        primary: "#e6067a",
        "primary-foreground": "#ffffff",
        secondary: "#ffd6ff",
        "secondary-foreground": "#91185c",
        muted: "#ffe3f2",
        "muted-foreground": "#c04283",
        accent: "#ffc1e3",
        "accent-foreground": "#91185c",
        destructive: "#d13869",
        "destructive-foreground": "#ffffff",
        border: "#ffc7e6",
        input: "#ffd6ff",
        ring: "#e6067a",
        "chart-1": "#e6067a",
        "chart-2": "#c44b97",
        "chart-3": "#9969b6",
        "chart-4": "#7371bf",
        "chart-5": "#5e84ff",
        sidebar: "#ffedf6",
        "sidebar-foreground": "#91185c",
        "sidebar-primary": "#e6067a",
        "sidebar-primary-foreground": "#ffffff",
        "sidebar-accent": "#ffc1e3",
        "sidebar-accent-foreground": "#91185c",
        "sidebar-border": "#ffddf0",
        "sidebar-ring": "#e6067a",
        "font-sans": "Poppins, sans-serif",
        "font-serif": "Playfair Display, serif",
        "font-mono": "Space Mono, monospace",
        radius: "0.5rem",
        "shadow-color": "hsl(330 70% 30% / 0.12)",
        "shadow-opacity": "0.18",
        "shadow-blur": "0px",
        "shadow-spread": "0px",
        "shadow-offset-x": "0px",
        "shadow-offset-y": "3px",
      },
      dark: {
        background: "#1a0922",
        foreground: "#ffb3ff",
        card: "#2a1435",
        "card-foreground": "#ffb3ff",
        popover: "#2a1435",
        "popover-foreground": "#ffb3ff",
        primary: "#ff6bef",
        "primary-foreground": "#180518",
        secondary: "#46204f",
        "secondary-foreground": "#ffb3ff",
        muted: "#331941",
        "muted-foreground": "#d67ad6",
        accent: "#5a1f5d",
        "accent-foreground": "#ffb3ff",
        destructive: "#ff2876",
        "destructive-foreground": "#f9f9f9",
        border: "#4a1b5f",
        input: "#46204f",
        ring: "#ff6bef",
        "chart-1": "#ff6bef",
        "chart-2": "#c359e3",
        "chart-3": "#9161ff",
        "chart-4": "#6f73e2",
        "chart-5": "#547aff",
        sidebar: "#1c0d25",
        "sidebar-foreground": "#ffb3ff",
        "sidebar-primary": "#ff6bef",
        "sidebar-primary-foreground": "#180518",
        "sidebar-accent": "#5a1f5d",
        "sidebar-accent-foreground": "#ffb3ff",
        "sidebar-border": "#4a1b5f",
        "sidebar-ring": "#ff6bef",
        "font-sans": "Quicksand, sans-serif",
        "font-serif": "Playfair Display, serif",
        "font-mono": "Space Mono, monospace",
        "shadow-color": "hsl(300 80% 50% / 0.25)",
      },
    },
  },

  nature: {
    label: "Nature",
    styles: {
      light: {
        background: "#f8f5f0",
        foreground: "#3e2723",
        card: "#f8f5f0",
        "card-foreground": "#3e2723",
        popover: "#f8f5f0",
        "popover-foreground": "#3e2723",
        primary: "#2e7d32",
        "primary-foreground": "#ffffff",
        secondary: "#e8f5e9",
        "secondary-foreground": "#1b5e20",
        muted: "#f0e9e0",
        "muted-foreground": "#6d4c41",
        accent: "#c8e6c9",
        "accent-foreground": "#1b5e20",
        destructive: "#c62828",
        "destructive-foreground": "#ffffff",
        border: "#e0d6c9",
        input: "#e0d6c9",
        ring: "#2e7d32",
        "chart-1": "#4caf50",
        "chart-2": "#388e3c",
        "chart-3": "#2e7d32",
        "chart-4": "#1b5e20",
        "chart-5": "#0a1f0c",
        radius: "0.5rem",
        sidebar: "#f0e9e0",
        "sidebar-foreground": "#3e2723",
        "sidebar-primary": "#2e7d32",
        "sidebar-primary-foreground": "#ffffff",
        "sidebar-accent": "#c8e6c9",
        "sidebar-accent-foreground": "#1b5e20",
        "sidebar-border": "#e0d6c9",
        "sidebar-ring": "#2e7d32",
        "font-sans": "Montserrat, sans-serif",
        "font-serif": "Merriweather, serif",
        "font-mono": "Source Code Pro, monospace",
      },
      dark: {
        background: "#1c2a1f",
        foreground: "#f0ebe5",
        card: "#2d3a2e",
        "card-foreground": "#f0ebe5",
        popover: "#2d3a2e",
        "popover-foreground": "#f0ebe5",
        primary: "#4caf50",
        "primary-foreground": "#0a1f0c",
        secondary: "#3e4a3d",
        "secondary-foreground": "#d7e0d6",
        muted: "#2d3a2e",
        "muted-foreground": "#d7cfc4",
        accent: "#388e3c",
        "accent-foreground": "#f0ebe5",
        destructive: "#c62828",
        "destructive-foreground": "#f0ebe5",
        border: "#3e4a3d",
        input: "#3e4a3d",
        ring: "#4caf50",
        "chart-1": "#81c784",
        "chart-2": "#66bb6a",
        "chart-3": "#4caf50",
        "chart-4": "#43a047",
        "chart-5": "#388e3c",
        radius: "0.5rem",
        sidebar: "#1c2a1f",
        "sidebar-foreground": "#f0ebe5",
        "sidebar-primary": "#4caf50",
        "sidebar-primary-foreground": "#0a1f0c",
        "sidebar-accent": "#388e3c",
        "sidebar-accent-foreground": "#f0ebe5",
        "sidebar-border": "#3e4a3d",
        "sidebar-ring": "#4caf50",
      },
    },
  },

  "bold-tech": {
    label: "Bold Tech",
    styles: {
      light: {
        background: "#ffffff",
        foreground: "#312e81",
        card: "#ffffff",
        "card-foreground": "#312e81",
        popover: "#ffffff",
        "popover-foreground": "#312e81",
        primary: "#8b5cf6",
        "primary-foreground": "#ffffff",
        secondary: "#f3f0ff",
        "secondary-foreground": "#4338ca",
        muted: "#f5f3ff",
        "muted-foreground": "#7c3aed",
        accent: "#dbeafe",
        "accent-foreground": "#1e40af",
        destructive: "#ef4444",
        "destructive-foreground": "#ffffff",
        border: "#e0e7ff",
        input: "#e0e7ff",
        ring: "#8b5cf6",
        "chart-1": "#8b5cf6",
        "chart-2": "#7c3aed",
        "chart-3": "#6d28d9",
        "chart-4": "#5b21b6",
        "chart-5": "#4c1d95",
        radius: "0.625rem",
        sidebar: "#f5f3ff",
        "sidebar-foreground": "#312e81",
        "sidebar-primary": "#8b5cf6",
        "sidebar-primary-foreground": "#ffffff",
        "sidebar-accent": "#dbeafe",
        "sidebar-accent-foreground": "#1e40af",
        "sidebar-border": "#e0e7ff",
        "sidebar-ring": "#8b5cf6",
        "font-sans": "Roboto, sans-serif",
        "font-serif": "Playfair Display, serif",
        "font-mono": "Fira Code, monospace",
        "shadow-color": "hsl(255 86% 66%)",
        "shadow-opacity": "0.2",
        "shadow-blur": "4px",
        "shadow-spread": "0px",
        "shadow-offset-x": "2px",
        "shadow-offset-y": "2px",
      },
      dark: {
        background: "#0f172a",
        foreground: "#e0e7ff",
        card: "#1e1b4b",
        "card-foreground": "#e0e7ff",
        popover: "#1e1b4b",
        "popover-foreground": "#e0e7ff",
        primary: "#8b5cf6",
        "primary-foreground": "#ffffff",
        secondary: "#1e1b4b",
        "secondary-foreground": "#e0e7ff",
        muted: "#1e1b4b",
        "muted-foreground": "#c4b5fd",
        accent: "#4338ca",
        "accent-foreground": "#e0e7ff",
        destructive: "#ef4444",
        "destructive-foreground": "#ffffff",
        border: "#2e1065",
        input: "#2e1065",
        ring: "#8b5cf6",
        "chart-1": "#a78bfa",
        "chart-2": "#8b5cf6",
        "chart-3": "#7c3aed",
        "chart-4": "#6d28d9",
        "chart-5": "#5b21b6",
        radius: "0.625rem",
        sidebar: "#0f172a",
        "sidebar-foreground": "#e0e7ff",
        "sidebar-primary": "#8b5cf6",
        "sidebar-primary-foreground": "#ffffff",
        "sidebar-accent": "#4338ca",
        "sidebar-accent-foreground": "#e0e7ff",
        "sidebar-border": "#2e1065",
        "sidebar-ring": "#8b5cf6",
      },
    },
  },

  "elegant-luxury": {
    label: "Elegant Luxury",
    styles: {
      light: {
        background: "#faf7f5",
        foreground: "#1a1a1a",
        card: "#faf7f5",
        "card-foreground": "#1a1a1a",
        popover: "#faf7f5",
        "popover-foreground": "#1a1a1a",
        primary: "#9b2c2c",
        "primary-foreground": "#ffffff",
        secondary: "#fdf2d6",
        "secondary-foreground": "#805500",
        muted: "#f0ebe8",
        "muted-foreground": "#57534e",
        accent: "#fef3c7",
        "accent-foreground": "#7f1d1d",
        destructive: "#991b1b",
        "destructive-foreground": "#ffffff",
        border: "#f5e8d2",
        input: "#f5e8d2",
        ring: "#9b2c2c",
        "chart-1": "#b91c1c",
        "chart-2": "#9b2c2c",
        "chart-3": "#7f1d1d",
        "chart-4": "#b45309",
        "chart-5": "#92400e",
        radius: "0.375rem",
        sidebar: "#f0ebe8",
        "sidebar-foreground": "#1a1a1a",
        "sidebar-primary": "#9b2c2c",
        "sidebar-primary-foreground": "#ffffff",
        "sidebar-accent": "#fef3c7",
        "sidebar-accent-foreground": "#7f1d1d",
        "sidebar-border": "#f5e8d2",
        "sidebar-ring": "#9b2c2c",
        "font-sans": "Poppins, sans-serif",
        "font-serif": "Libre Baskerville, serif",
        "font-mono": "IBM Plex Mono, monospace",
        "shadow-color": "hsl(0 63% 18%)",
        "shadow-opacity": "0.12",
        "shadow-blur": "16px",
        "shadow-spread": "-2px",
        "shadow-offset-x": "1px",
        "shadow-offset-y": "1px",
      },
      dark: {
        background: "#1c1917",
        foreground: "#f5f5f4",
        card: "#292524",
        "card-foreground": "#f5f5f4",
        popover: "#292524",
        "popover-foreground": "#f5f5f4",
        primary: "#b91c1c",
        "primary-foreground": "#faf7f5",
        secondary: "#92400e",
        "secondary-foreground": "#fef3c7",
        muted: "#292524",
        "muted-foreground": "#d6d3d1",
        accent: "#b45309",
        "accent-foreground": "#fef3c7",
        destructive: "#ef4444",
        "destructive-foreground": "#ffffff",
        border: "#44403c",
        input: "#44403c",
        ring: "#b91c1c",
        "chart-1": "#f87171",
        "chart-2": "#ef4444",
        "chart-3": "#dc2626",
        "chart-4": "#fbbf24",
        "chart-5": "#f59e0b",
        radius: "0.375rem",
        sidebar: "#1c1917",
        "sidebar-foreground": "#f5f5f4",
        "sidebar-primary": "#b91c1c",
        "sidebar-primary-foreground": "#faf7f5",
        "sidebar-accent": "#b45309",
        "sidebar-accent-foreground": "#fef3c7",
        "sidebar-border": "#44403c",
        "sidebar-ring": "#b91c1c",
      },
    },
  },

  "amber-minimal": {
    label: "Amber Minimal",
    createdAt: "2025-04-27",
    styles: {
      light: {
        background: "#ffffff",
        foreground: "#262626",
        card: "#ffffff",
        "card-foreground": "#262626",
        popover: "#ffffff",
        "popover-foreground": "#262626",
        primary: "#f59e0b",
        "primary-foreground": "#000000",
        secondary: "#f3f4f6",
        "secondary-foreground": "#4b5563",
        muted: "#f9fafb",
        "muted-foreground": "#6b7280",
        accent: "#fffbeb",
        "accent-foreground": "#92400e",
        destructive: "#ef4444",
        "destructive-foreground": "#ffffff",
        border: "#e5e7eb",
        input: "#e5e7eb",
        ring: "#f59e0b",
        "chart-1": "#f59e0b",
        "chart-2": "#d97706",
        "chart-3": "#b45309",
        "chart-4": "#92400e",
        "chart-5": "#78350f",
        sidebar: "#f9fafb",
        "sidebar-foreground": "#262626",
        "sidebar-primary": "#f59e0b",
        "sidebar-primary-foreground": "#ffffff",
        "sidebar-accent": "#fffbeb",
        "sidebar-accent-foreground": "#92400e",
        "sidebar-border": "#e5e7eb",
        "sidebar-ring": "#f59e0b",
        "font-sans": "Inter, sans-serif",
        "font-serif": "Source Serif 4, serif",
        "font-mono": "JetBrains Mono, monospace",
        radius: "0.375rem",
        "shadow-color": "hsl(0 0% 0%)",
        "shadow-opacity": "0.1",
        "shadow-blur": "8px",
        "shadow-spread": "-1px",
        "shadow-offset-x": "0px",
        "shadow-offset-y": "4px",
        "letter-spacing": "0em",
        spacing: "0.25rem",
      },
      dark: {
        background: "#171717",
        foreground: "#e5e5e5",
        card: "#262626",
        "card-foreground": "#e5e5e5",
        popover: "#262626",
        "popover-foreground": "#e5e5e5",
        primary: "#f59e0b",
        "primary-foreground": "#000000",
        secondary: "#262626",
        "secondary-foreground": "#e5e5e5",
        muted: "#262626",
        "muted-foreground": "#a3a3a3",
        accent: "#92400e",
        "accent-foreground": "#fde68a",
        destructive: "#ef4444",
        "destructive-foreground": "#ffffff",
        border: "#404040",
        input: "#404040",
        ring: "#f59e0b",
        "chart-1": "#fbbf24",
        "chart-2": "#d97706",
        "chart-3": "#92400e",
        "chart-4": "#b45309",
        "chart-5": "#92400e",
        sidebar: "#0f0f0f",
        "sidebar-foreground": "#e5e5e5",
        "sidebar-primary": "#f59e0b",
        "sidebar-primary-foreground": "#ffffff",
        "sidebar-accent": "#92400e",
        "sidebar-accent-foreground": "#fde68a",
        "sidebar-border": "#404040",
        "sidebar-ring": "#f59e0b",
      },
    },
  },

  supabase: {
    label: "Supabase",
    createdAt: "2025-04-27",
    styles: {
      light: {
        background: "#fcfcfc",
        foreground: "#171717",
        card: "#fcfcfc",
        "card-foreground": "#171717",
        popover: "#fcfcfc",
        "popover-foreground": "#525252",
        primary: "#72e3ad",
        "primary-foreground": "#1e2723",
        secondary: "#fdfdfd",
        "secondary-foreground": "#171717",
        muted: "#ededed",
        "muted-foreground": "#202020",
        accent: "#ededed",
        "accent-foreground": "#202020",
        destructive: "#ca3214",
        "destructive-foreground": "#fffcfc",
        border: "#dfdfdf",
        input: "#f6f6f6",
        ring: "#72e3ad",
        "chart-1": "#72e3ad",
        "chart-2": "#3b82f6",
        "chart-3": "#8b5cf6",
        "chart-4": "#f59e0b",
        "chart-5": "#10b981",
        sidebar: "#fcfcfc",
        "sidebar-foreground": "#707070",
        "sidebar-primary": "#72e3ad",
        "sidebar-primary-foreground": "#1e2723",
        "sidebar-accent": "#ededed",
        "sidebar-accent-foreground": "#202020",
        "sidebar-border": "#dfdfdf",
        "sidebar-ring": "#72e3ad",
        "font-sans": "Outfit, sans-serif",
        "font-serif": 'ui-serif, Georgia, Cambria, "Times New Roman", Times, serif',
        "font-mono": "monospace",
        radius: "0.5rem",
        "shadow-color": "#000000",
        "shadow-opacity": "0.17",
        "shadow-blur": "3px",
        "shadow-spread": "0px",
        "shadow-offset-x": "0px",
        "shadow-offset-y": "1px",
        "letter-spacing": "0.025em",
      },
      dark: {
        background: "#121212",
        foreground: "#e2e8f0",
        card: "#171717",
        "card-foreground": "#e2e8f0",
        popover: "#242424",
        "popover-foreground": "#a9a9a9",
        primary: "#006239",
        "primary-foreground": "#dde8e3",
        secondary: "#242424",
        "secondary-foreground": "#fafafa",
        muted: "#1f1f1f",
        "muted-foreground": "#a2a2a2",
        accent: "#313131",
        "accent-foreground": "#fafafa",
        destructive: "#541c15",
        "destructive-foreground": "#ede9e8",
        border: "#292929",
        input: "#242424",
        ring: "#4ade80",
        "chart-1": "#4ade80",
        "chart-2": "#60a5fa",
        "chart-3": "#a78bfa",
        "chart-4": "#fbbf24",
        "chart-5": "#2dd4bf",
        sidebar: "#121212",
        "sidebar-foreground": "#898989",
        "sidebar-primary": "#006239",
        "sidebar-primary-foreground": "#dde8e3",
        "sidebar-accent": "#313131",
        "sidebar-accent-foreground": "#fafafa",
        "sidebar-border": "#292929",
        "sidebar-ring": "#4ade80",
      },
    },
  },

  "neo-brutalism": {
    label: "Neo Brutalism",
    styles: {
      light: {
        background: "#ffffff",
        foreground: "#000000",
        card: "#ffffff",
        "card-foreground": "#000000",
        popover: "#ffffff",
        "popover-foreground": "#000000",
        primary: "#ff3333",
        "primary-foreground": "#ffffff",
        secondary: "#ffff00",
        "secondary-foreground": "#000000",
        muted: "#f0f0f0",
        "muted-foreground": "#333333",
        accent: "#0066ff",
        "accent-foreground": "#ffffff",
        destructive: "#000000",
        "destructive-foreground": "#ffffff",
        border: "#000000",
        input: "#000000",
        ring: "#ff3333",
        "chart-1": "#ff3333",
        "chart-2": "#ffff00",
        "chart-3": "#0066ff",
        "chart-4": "#00cc00",
        "chart-5": "#cc00cc",
        radius: "0px",
        sidebar: "#f0f0f0",
        "sidebar-foreground": "#000000",
        "sidebar-primary": "#ff3333",
        "sidebar-primary-foreground": "#ffffff",
        "sidebar-accent": "#0066ff",
        "sidebar-accent-foreground": "#ffffff",
        "sidebar-border": "#000000",
        "sidebar-ring": "#ff3333",
        "font-sans": "DM Sans, sans-serif",
        "font-mono": "Space Mono, monospace",
        "shadow-color": "hsl(0 0% 0%)",
        "shadow-opacity": "1",
        "shadow-blur": "0px",
        "shadow-spread": "0px",
        "shadow-offset-x": "4px",
        "shadow-offset-y": "4px",
      },
      dark: {
        background: "#000000",
        foreground: "#ffffff",
        card: "#333333",
        "card-foreground": "#ffffff",
        popover: "#333333",
        "popover-foreground": "#ffffff",
        primary: "#ff6666",
        "primary-foreground": "#000000",
        secondary: "#ffff33",
        "secondary-foreground": "#000000",
        muted: "#333333",
        "muted-foreground": "#cccccc",
        accent: "#3399ff",
        "accent-foreground": "#000000",
        destructive: "#ffffff",
        "destructive-foreground": "#000000",
        border: "#ffffff",
        input: "#ffffff",
        ring: "#ff6666",
        "chart-1": "#ff6666",
        "chart-2": "#ffff33",
        "chart-3": "#3399ff",
        "chart-4": "#33cc33",
        "chart-5": "#cc33cc",
        radius: "0px",
        sidebar: "#000000",
        "sidebar-foreground": "#ffffff",
        "sidebar-primary": "#ff6666",
        "sidebar-primary-foreground": "#000000",
        "sidebar-accent": "#3399ff",
        "sidebar-accent-foreground": "#000000",
        "sidebar-border": "#ffffff",
        "sidebar-ring": "#ff6666",
      },
    },
  },

  "solar-dusk": {
    label: "Solar Dusk",
    createdAt: "2025-04-12",
    styles: {
      light: {
        background: "#FDFBF7",
        foreground: "#4A3B33",
        card: "#F8F4EE",
        "card-foreground": "#4A3B33",
        popover: "#F8F4EE",
        "popover-foreground": "#4A3B33",
        primary: "#B45309",
        "primary-foreground": "#FFFFFF",
        secondary: "#E4C090",
        "secondary-foreground": "#57534E",
        muted: "#F1E9DA",
        "muted-foreground": "#78716C",
        accent: "#f2daba",
        "accent-foreground": "#57534E",
        destructive: "#991B1B",
        "destructive-foreground": "#FFFFFF",
        border: "#E4D9BC",
        input: "#E4D9BC",
        ring: "#B45309",
        "chart-1": "#B45309",
        "chart-2": "#78716C",
        "chart-3": "#A16207",
        "chart-4": "#78716C",
        "chart-5": "#CA8A04",
        radius: "0.3rem",
        sidebar: "#F1E9DA",
        "sidebar-foreground": "#4A3B33",
        "sidebar-primary": "#B45309",
        "sidebar-primary-foreground": "#FFFFFF",
        "sidebar-accent": "#A16207",
        "sidebar-accent-foreground": "#FFFFFF",
        "sidebar-border": "#E4D9BC",
        "sidebar-ring": "#B45309",
        "font-sans": "Oxanium, sans-serif",
        "font-serif": "Merriweather, serif",
        "font-mono": "Fira Code, monospace",
        "shadow-color": "hsl(28 18% 25%)",
        "shadow-opacity": "0.18",
        "shadow-blur": "3px",
        "shadow-spread": "0px",
        "shadow-offset-x": "0px",
        "shadow-offset-y": "2px",
      },
      dark: {
        background: "#1C1917",
        foreground: "#F5F5F4",
        card: "#292524",
        "card-foreground": "#F5F5F4",
        popover: "#292524",
        "popover-foreground": "#F5F5F4",
        primary: "#F97316",
        "primary-foreground": "#FFFFFF",
        secondary: "#57534E",
        "secondary-foreground": "#E7E5E4",
        muted: "#292524",
        "muted-foreground": "#A8A29E",
        accent: "#1e4252",
        "accent-foreground": "#E7E5E4",
        destructive: "#DC2626",
        "destructive-foreground": "#FFFFFF",
        border: "#44403C",
        input: "#44403C",
        ring: "#F97316",
        "chart-1": "#F97316",
        "chart-2": "#0EA5E9",
        "chart-3": "#EAB308",
        "chart-4": "#A8A29E",
        "chart-5": "#78716C",
        radius: "0.3rem",
        sidebar: "#292524",
        "sidebar-foreground": "#F5F5F4",
        "sidebar-primary": "#F97316",
        "sidebar-primary-foreground": "#FFFFFF",
        "sidebar-accent": "#0EA5E9",
        "sidebar-accent-foreground": "#0C2A4D",
        "sidebar-border": "#44403C",
        "sidebar-ring": "#F97316",
        "shadow-color": "hsl(0 0% 5%)",
      },
    },
  },

  claymorphism: {
    label: "Claymorphism",
    styles: {
      light: {
        background: "#e7e5e4",
        foreground: "#1e293b",
        card: "#f5f5f4",
        "card-foreground": "#1e293b",
        popover: "#f5f5f4",
        "popover-foreground": "#1e293b",
        primary: "#6366f1",
        "primary-foreground": "#ffffff",
        secondary: "#d6d3d1",
        "secondary-foreground": "#4b5563",
        muted: "#e7e5e4",
        "muted-foreground": "#6b7280",
        accent: "#f3e5f5",
        "accent-foreground": "#374151",
        destructive: "#ef4444",
        "destructive-foreground": "#ffffff",
        border: "#d6d3d1",
        input: "#d6d3d1",
        ring: "#6366f1",
        "chart-1": "#6366f1",
        "chart-2": "#4f46e5",
        "chart-3": "#4338ca",
        "chart-4": "#3730a3",
        "chart-5": "#312e81",
        radius: "1.25rem",
        sidebar: "#d6d3d1",
        "sidebar-foreground": "#1e293b",
        "sidebar-primary": "#6366f1",
        "sidebar-primary-foreground": "#ffffff",
        "sidebar-accent": "#f3e5f5",
        "sidebar-accent-foreground": "#374151",
        "sidebar-border": "#d6d3d1",
        "sidebar-ring": "#6366f1",
        "font-sans": "Plus Jakarta Sans, sans-serif",
        "font-serif": "Lora, serif",
        "font-mono": "Roboto Mono, monospace",
        "shadow-color": "hsl(240 4% 60%)",
        "shadow-opacity": "0.18",
        "shadow-blur": "10px",
        "shadow-spread": "4px",
        "shadow-offset-x": "2px",
        "shadow-offset-y": "2px",
      },
      dark: {
        background: "#1e1b18",
        foreground: "#e2e8f0",
        card: "#2c2825",
        "card-foreground": "#e2e8f0",
        popover: "#2c2825",
        "popover-foreground": "#e2e8f0",
        primary: "#818cf8",
        "primary-foreground": "#1e1b18",
        secondary: "#3a3633",
        "secondary-foreground": "#d1d5db",
        muted: "#2c2825",
        "muted-foreground": "#9ca3af",
        accent: "#484441",
        "accent-foreground": "#d1d5db",
        destructive: "#ef4444",
        "destructive-foreground": "#1e1b18",
        border: "#3a3633",
        input: "#3a3633",
        ring: "#818cf8",
        "chart-1": "#818cf8",
        "chart-2": "#6366f1",
        "chart-3": "#4f46e5",
        "chart-4": "#4338ca",
        "chart-5": "#3730a3",
        radius: "1.25rem",
        sidebar: "#3a3633",
        "sidebar-foreground": "#e2e8f0",
        "sidebar-primary": "#818cf8",
        "sidebar-primary-foreground": "#1e1b18",
        "sidebar-accent": "#484441",
        "sidebar-accent-foreground": "#d1d5db",
        "sidebar-border": "#3a3633",
        "sidebar-ring": "#818cf8",
        "shadow-color": "hsl(0 0% 0%)",
      },
    },
  },

  cyberpunk: {
    label: "Cyberpunk",
    styles: {
      light: {
        background: "#f8f9fa",
        foreground: "#0c0c1d",
        card: "#ffffff",
        "card-foreground": "#0c0c1d",
        popover: "#ffffff",
        "popover-foreground": "#0c0c1d",
        primary: "#ff00c8",
        "primary-foreground": "#ffffff",
        secondary: "#f0f0ff",
        "secondary-foreground": "#0c0c1d",
        muted: "#f0f0ff",
        "muted-foreground": "#0c0c1d",
        accent: "#00ffcc",
        "accent-foreground": "#0c0c1d",
        destructive: "#ff3d00",
        "destructive-foreground": "#ffffff",
        border: "#dfe6e9",
        input: "#dfe6e9",
        ring: "#ff00c8",
        "chart-1": "#ff00c8",
        "chart-2": "#9000ff",
        "chart-3": "#00e5ff",
        "chart-4": "#00ffcc",
        "chart-5": "#ffe600",
        radius: "0.5rem",
        sidebar: "#f0f0ff",
        "sidebar-foreground": "#0c0c1d",
        "sidebar-primary": "#ff00c8",
        "sidebar-primary-foreground": "#ffffff",
        "sidebar-accent": "#00ffcc",
        "sidebar-accent-foreground": "#0c0c1d",
        "sidebar-border": "#dfe6e9",
        "sidebar-ring": "#ff00c8",
        "font-sans": "Outfit, sans-serif",
        "font-mono": "Fira Code, monospace",
        "shadow-color": "hsl(0 0% 0%)",
        "shadow-opacity": "0.1",
        "shadow-blur": "8px",
        "shadow-spread": "-2px",
        "shadow-offset-x": "0px",
        "shadow-offset-y": "4px",
      },
      dark: {
        background: "#0c0c1d",
        foreground: "#eceff4",
        card: "#1e1e3f",
        "card-foreground": "#eceff4",
        popover: "#1e1e3f",
        "popover-foreground": "#eceff4",
        primary: "#ff00c8",
        "primary-foreground": "#ffffff",
        secondary: "#1e1e3f",
        "secondary-foreground": "#eceff4",
        muted: "#1e1e3f",
        "muted-foreground": "#8085a6",
        accent: "#00ffcc",
        "accent-foreground": "#0c0c1d",
        destructive: "#ff3d00",
        "destructive-foreground": "#ffffff",
        border: "#2e2e5e",
        input: "#2e2e5e",
        ring: "#ff00c8",
        "chart-1": "#ff00c8",
        "chart-2": "#9000ff",
        "chart-3": "#00e5ff",
        "chart-4": "#00ffcc",
        "chart-5": "#ffe600",
        radius: "0.5rem",
        sidebar: "#0c0c1d",
        "sidebar-foreground": "#eceff4",
        "sidebar-primary": "#ff00c8",
        "sidebar-primary-foreground": "#ffffff",
        "sidebar-accent": "#00ffcc",
        "sidebar-accent-foreground": "#0c0c1d",
        "sidebar-border": "#2e2e5e",
        "sidebar-ring": "#ff00c8",
      },
    },
  },
  "pastel-dreams": {
    label: "Pastel Dreams",
    styles: {
      light: {
        background: "#f7f3f9",
        foreground: "#374151",
        card: "#ffffff",
        "card-foreground": "#374151",
        popover: "#ffffff",
        "popover-foreground": "#374151",
        primary: "#a78bfa",
        "primary-foreground": "#ffffff",
        secondary: "#e9d8fd",
        "secondary-foreground": "#4b5563",
        muted: "#f3e8ff",
        "muted-foreground": "#6b7280",
        accent: "#f3e5f5",
        "accent-foreground": "#374151",
        destructive: "#fca5a5",
        "destructive-foreground": "#ffffff",
        border: "#e9d8fd",
        input: "#e9d8fd",
        ring: "#a78bfa",
        "chart-1": "#a78bfa",
        "chart-2": "#8b5cf6",
        "chart-3": "#7c3aed",
        "chart-4": "#6d28d9",
        "chart-5": "#5b21b6",
        radius: "1.5rem",
        sidebar: "#e9d8fd",
        "sidebar-foreground": "#374151",
        "sidebar-primary": "#a78bfa",
        "sidebar-primary-foreground": "#ffffff",
        "sidebar-accent": "#f3e5f5",
        "sidebar-accent-foreground": "#374151",
        "sidebar-border": "#e9d8fd",
        "sidebar-ring": "#a78bfa",
        "font-sans": "Open Sans, sans-serif",
        "font-serif": "Source Serif 4, serif",
        "font-mono": "IBM Plex Mono, monospace",
        "shadow-color": "hsl(0 0% 0%)",
        "shadow-opacity": "0.08",
        "shadow-blur": "16px",
        "shadow-spread": "-4px",
        "shadow-offset-x": "0px",
        "shadow-offset-y": "8px",
      },
      dark: {
        background: "#1c1917",
        foreground: "#e0e7ff",
        card: "#2d2535",
        "card-foreground": "#e0e7ff",
        popover: "#2d2535",
        "popover-foreground": "#e0e7ff",
        primary: "#c0aafd",
        "primary-foreground": "#1c1917",
        secondary: "#3f324a",
        "secondary-foreground": "#d1d5db",
        muted: "#2d2535",
        "muted-foreground": "#9ca3af",
        accent: "#4a3d5a",
        "accent-foreground": "#d1d5db",
        destructive: "#fca5a5",
        "destructive-foreground": "#1c1917",
        border: "#3f324a",
        input: "#3f324a",
        ring: "#c0aafd",
        "chart-1": "#c0aafd",
        "chart-2": "#a78bfa",
        "chart-3": "#8b5cf6",
        "chart-4": "#7c3aed",
        "chart-5": "#6d28d9",
        radius: "1.5rem",
        sidebar: "#3f324a",
        "sidebar-foreground": "#e0e7ff",
        "sidebar-primary": "#c0aafd",
        "sidebar-primary-foreground": "#1c1917",
        "sidebar-accent": "#4a3d5a",
        "sidebar-accent-foreground": "#d1d5db",
        "sidebar-border": "#3f324a",
        "sidebar-ring": "#c0aafd",
      },
    },
  },

  "clean-slate": {
    label: "Clean Slate",
    styles: {
      light: {
        background: "#f8fafc",
        foreground: "#1e293b",
        card: "#ffffff",
        "card-foreground": "#1e293b",
        popover: "#ffffff",
        "popover-foreground": "#1e293b",
        primary: "#6366f1",
        "primary-foreground": "#ffffff",
        secondary: "#e5e7eb",
        "secondary-foreground": "#374151",
        muted: "#f3f4f6",
        "muted-foreground": "#6b7280",
        accent: "#e0e7ff",
        "accent-foreground": "#374151",
        destructive: "#ef4444",
        "destructive-foreground": "#ffffff",
        border: "#d1d5db",
        input: "#d1d5db",
        ring: "#6366f1",
        "chart-1": "#6366f1",
        "chart-2": "#4f46e5",
        "chart-3": "#4338ca",
        "chart-4": "#3730a3",
        "chart-5": "#312e81",
        radius: "0.5rem",
        sidebar: "#f3f4f6",
        "sidebar-foreground": "#1e293b",
        "sidebar-primary": "#6366f1",
        "sidebar-primary-foreground": "#ffffff",
        "sidebar-accent": "#e0e7ff",
        "sidebar-accent-foreground": "#374151",
        "sidebar-border": "#d1d5db",
        "sidebar-ring": "#6366f1",
        "font-sans": "Inter, sans-serif",
        "font-serif": "Merriweather, serif",
        "font-mono": "JetBrains Mono, monospace",
        "shadow-color": "hsl(0 0% 0%)",
        "shadow-opacity": "0.1",
        "shadow-blur": "8px",
        "shadow-spread": "-1px",
        "shadow-offset-x": "0px",
        "shadow-offset-y": "4px",
      },
      dark: {
        background: "#0f172a",
        foreground: "#e2e8f0",
        card: "#1e293b",
        "card-foreground": "#e2e8f0",
        popover: "#1e293b",
        "popover-foreground": "#e2e8f0",
        primary: "#818cf8",
        "primary-foreground": "#0f172a",
        secondary: "#2d3748",
        "secondary-foreground": "#d1d5db",
        muted: "#1e293b",
        "muted-foreground": "#9ca3af",
        accent: "#374151",
        "accent-foreground": "#d1d5db",
        destructive: "#ef4444",
        "destructive-foreground": "#0f172a",
        border: "#4b5563",
        input: "#4b5563",
        ring: "#818cf8",
        "chart-1": "#818cf8",
        "chart-2": "#6366f1",
        "chart-3": "#4f46e5",
        "chart-4": "#4338ca",
        "chart-5": "#3730a3",
        radius: "0.5rem",
        sidebar: "#1e293b",
        "sidebar-foreground": "#e2e8f0",
        "sidebar-primary": "#818cf8",
        "sidebar-primary-foreground": "#0f172a",
        "sidebar-accent": "#374151",
        "sidebar-accent-foreground": "#d1d5db",
        "sidebar-border": "#4b5563",
        "sidebar-ring": "#818cf8",
      },
    },
  },

  caffeine: {
    label: "Caffeine",
    styles: {
      light: {
        background: "#f9f9f9",
        foreground: "#202020",
        card: "#fcfcfc",
        "card-foreground": "#202020",
        popover: "#fcfcfc",
        "popover-foreground": "#202020",
        primary: "#644a40",
        "primary-foreground": "#ffffff",
        secondary: "#ffdfb5",
        "secondary-foreground": "#582d1d",
        muted: "#efefef",
        "muted-foreground": "#646464",
        accent: "#e8e8e8",
        "accent-foreground": "#202020",
        destructive: "#e54d2e",
        "destructive-foreground": "#ffffff",
        border: "#d8d8d8",
        input: "#d8d8d8",
        ring: "#644a40",
        "chart-1": "#644a40",
        "chart-2": "#ffdfb5",
        "chart-3": "#e8e8e8",
        "chart-4": "#ffe6c4",
        "chart-5": "#66493e",
        sidebar: "#fbfbfb",
        "sidebar-foreground": "#252525",
        "sidebar-primary": "#343434",
        "sidebar-primary-foreground": "#fbfbfb",
        "sidebar-accent": "#f7f7f7",
        "sidebar-accent-foreground": "#343434",
        "sidebar-border": "#ebebeb",
        "sidebar-ring": "#b5b5b5",
        radius: "0.5rem",
      },
      dark: {
        background: "#111111",
        foreground: "#eeeeee",
        card: "#191919",
        "card-foreground": "#eeeeee",
        popover: "#191919",
        "popover-foreground": "#eeeeee",
        primary: "#ffe0c2",
        "primary-foreground": "#081a1b",
        secondary: "#393028",
        "secondary-foreground": "#ffe0c2",
        muted: "#222222",
        "muted-foreground": "#b4b4b4",
        accent: "#2a2a2a",
        "accent-foreground": "#eeeeee",
        destructive: "#e54d2e",
        "destructive-foreground": "#ffffff",
        border: "#201e18",
        input: "#484848",
        ring: "#ffe0c2",
        "chart-1": "#ffe0c2",
        "chart-2": "#393028",
        "chart-3": "#2a2a2a",
        "chart-4": "#42382e",
        "chart-5": "#ffe0c1",
        sidebar: "#18181b",
        "sidebar-foreground": "#f4f4f5",
        "sidebar-primary": "#1d4ed8",
        "sidebar-primary-foreground": "#ffffff",
        "sidebar-accent": "#27272a",
        "sidebar-accent-foreground": "#f4f4f5",
        "sidebar-border": "#27272a",
        "sidebar-ring": "#d4d4d8",
        radius: "0.5rem",
      },
    },
  },
  "ocean-breeze": {
    label: "Ocean Breeze",
    styles: {
      light: {
        background: "#f0f8ff",
        foreground: "#374151",
        card: "#ffffff",
        "card-foreground": "#374151",
        popover: "#ffffff",
        "popover-foreground": "#374151",
        primary: "#22c55e",
        "primary-foreground": "#ffffff",
        secondary: "#e0f2fe",
        "secondary-foreground": "#4b5563",
        muted: "#f3f4f6",
        "muted-foreground": "#6b7280",
        accent: "#d1fae5",
        "accent-foreground": "#374151",
        destructive: "#ef4444",
        "destructive-foreground": "#ffffff",
        border: "#e5e7eb",
        input: "#e5e7eb",
        ring: "#22c55e",
        "chart-1": "#22c55e",
        "chart-2": "#10b981",
        "chart-3": "#059669",
        "chart-4": "#047857",
        "chart-5": "#065f46",
        radius: "0.5rem",
        sidebar: "#e0f2fe",
        "sidebar-foreground": "#374151",
        "sidebar-primary": "#22c55e",
        "sidebar-primary-foreground": "#ffffff",
        "sidebar-accent": "#d1fae5",
        "sidebar-accent-foreground": "#374151",
        "sidebar-border": "#e5e7eb",
        "sidebar-ring": "#22c55e",
        "font-sans": "DM Sans, sans-serif",
        "font-serif": "Lora, serif",
        "font-mono": "IBM Plex Mono, monospace",
        "shadow-color": "hsl(0 0% 0%)",
        "shadow-opacity": "0.1",
        "shadow-blur": "8px",
        "shadow-spread": "-1px",
        "shadow-offset-x": "0px",
        "shadow-offset-y": "4px",
      },
      dark: {
        background: "#0f172a",
        foreground: "#d1d5db",
        card: "#1e293b",
        "card-foreground": "#d1d5db",
        popover: "#1e293b",
        "popover-foreground": "#d1d5db",
        primary: "#34d399",
        "primary-foreground": "#0f172a",
        secondary: "#2d3748",
        "secondary-foreground": "#a1a1aa",
        muted: "#1e293b",
        "muted-foreground": "#6b7280",
        accent: "#374151",
        "accent-foreground": "#a1a1aa",
        destructive: "#ef4444",
        "destructive-foreground": "#0f172a",
        border: "#4b5563",
        input: "#4b5563",
        ring: "#34d399",
        "chart-1": "#34d399",
        "chart-2": "#2dd4bf",
        "chart-3": "#22c55e",
        "chart-4": "#10b981",
        "chart-5": "#059669",
        radius: "0.5rem",
        sidebar: "#1e293b",
        "sidebar-foreground": "#d1d5db",
        "sidebar-primary": "#34d399",
        "sidebar-primary-foreground": "#0f172a",
        "sidebar-accent": "#374151",
        "sidebar-accent-foreground": "#a1a1aa",
        "sidebar-border": "#4b5563",
        "sidebar-ring": "#34d399",
      },
    },
  },
  "retro-arcade": {
    label: "Retro Arcade",
    styles: {
      light: {
        background: "#fdf6e3",
        foreground: "#073642",
        card: "#eee8d5",
        "card-foreground": "#073642",
        popover: "#eee8d5",
        "popover-foreground": "#073642",
        primary: "#d33682",
        "primary-foreground": "#ffffff",
        secondary: "#2aa198",
        "secondary-foreground": "#ffffff",
        muted: "#93a1a1",
        "muted-foreground": "#073642",
        accent: "#cb4b16",
        "accent-foreground": "#ffffff",
        destructive: "#dc322f",
        "destructive-foreground": "#ffffff",
        border: "#839496",
        input: "#839496",
        ring: "#d33682",
        "chart-1": "#268bd2",
        "chart-2": "#2aa198",
        "chart-3": "#d33682",
        "chart-4": "#cb4b16",
        "chart-5": "#dc322f",
        radius: "0.25rem",
        sidebar: "#fdf6e3",
        "sidebar-foreground": "#073642",
        "sidebar-primary": "#d33682",
        "sidebar-primary-foreground": "#ffffff",
        "sidebar-accent": "#2aa198",
        "sidebar-accent-foreground": "#ffffff",
        "sidebar-border": "#839496",
        "sidebar-ring": "#d33682",
        "font-sans": "Outfit, sans-serif",
        "font-mono": "Space Mono, monospace",
        "shadow-color": "hsl(196 83% 10%)",
        "shadow-opacity": "0.15",
        "shadow-blur": "4px",
        "shadow-spread": "0px",
        "shadow-offset-x": "2px",
        "shadow-offset-y": "2px",
      },
      dark: {
        background: "#002b36",
        foreground: "#93a1a1",
        card: "#073642",
        "card-foreground": "#93a1a1",
        popover: "#073642",
        "popover-foreground": "#93a1a1",
        primary: "#d33682",
        "primary-foreground": "#ffffff",
        secondary: "#2aa198",
        "secondary-foreground": "#ffffff",
        muted: "#586e75",
        "muted-foreground": "#93a1a1",
        accent: "#cb4b16",
        "accent-foreground": "#ffffff",
        destructive: "#dc322f",
        "destructive-foreground": "#ffffff",
        border: "#586e75",
        input: "#586e75",
        ring: "#d33682",
        "chart-1": "#268bd2",
        "chart-2": "#2aa198",
        "chart-3": "#d33682",
        "chart-4": "#cb4b16",
        "chart-5": "#dc322f",
        radius: "0.25rem",
        sidebar: "#002b36",
        "sidebar-foreground": "#93a1a1",
        "sidebar-primary": "#d33682",
        "sidebar-primary-foreground": "#ffffff",
        "sidebar-accent": "#2aa198",
        "sidebar-accent-foreground": "#ffffff",
        "sidebar-border": "#586e75",
        "sidebar-ring": "#d33682",
      },
    },
  },

  "midnight-bloom": {
    label: "Midnight Bloom",
    styles: {
      light: {
        background: "#f9f9f9",
        foreground: "#333333",
        card: "#ffffff",
        "card-foreground": "#333333",
        popover: "#ffffff",
        "popover-foreground": "#333333",
        primary: "#6c5ce7",
        "primary-foreground": "#ffffff",
        secondary: "#a1c9f2",
        "secondary-foreground": "#333333",
        muted: "#c9c4b5",
        "muted-foreground": "#6e6e6e",
        accent: "#8b9467",
        "accent-foreground": "#ffffff",
        destructive: "#ef4444",
        "destructive-foreground": "#ffffff",
        border: "#d4d4d4",
        input: "#d4d4d4",
        ring: "#6c5ce7",
        "chart-1": "#6c5ce7",
        "chart-2": "#8e44ad",
        "chart-3": "#4b0082",
        "chart-4": "#6495ed",
        "chart-5": "#4682b4",
        radius: "0.5rem",
        sidebar: "#f9f9f9",
        "sidebar-foreground": "#333333",
        "sidebar-primary": "#6c5ce7",
        "sidebar-primary-foreground": "#ffffff",
        "sidebar-accent": "#8b9467",
        "sidebar-accent-foreground": "#ffffff",
        "sidebar-border": "#d4d4d4",
        "sidebar-ring": "#6c5ce7",
        "font-sans": "Montserrat, sans-serif",
        "font-serif": "Playfair Display, serif",
        "font-mono": "Source Code Pro, monospace",
        "shadow-color": "hsl(0 0% 0%)",
        "shadow-opacity": "0.1",
        "shadow-blur": "10px",
        "shadow-spread": "-2px",
        "shadow-offset-x": "0px",
        "shadow-offset-y": "5px",
      },
      dark: {
        background: "#1a1d23",
        foreground: "#e5e5e5",
        card: "#2f3436",
        "card-foreground": "#e5e5e5",
        popover: "#2f3436",
        "popover-foreground": "#e5e5e5",
        primary: "#6c5ce7",
        "primary-foreground": "#ffffff",
        secondary: "#4b0082",
        "secondary-foreground": "#e5e5e5",
        muted: "#444444",
        "muted-foreground": "#a3a3a3",
        accent: "#6495ed",
        "accent-foreground": "#e5e5e5",
        destructive: "#ef4444",
        "destructive-foreground": "#ffffff",
        border: "#444444",
        input: "#444444",
        ring: "#6c5ce7",
        "chart-1": "#6c5ce7",
        "chart-2": "#8e44ad",
        "chart-3": "#4b0082",
        "chart-4": "#6495ed",
        "chart-5": "#4682b4",
        radius: "0.5rem",
        sidebar: "#1a1d23",
        "sidebar-foreground": "#e5e5e5",
        "sidebar-primary": "#6c5ce7",
        "sidebar-primary-foreground": "#ffffff",
        "sidebar-accent": "#6495ed",
        "sidebar-accent-foreground": "#e5e5e5",
        "sidebar-border": "#444444",
        "sidebar-ring": "#6c5ce7",
      },
    },
  },
  candyland: {
    label: "Candyland",
    styles: {
      light: {
        background: "#f7f9fa",
        foreground: "#333333",
        card: "#ffffff",
        "card-foreground": "#333333",
        popover: "#ffffff",
        "popover-foreground": "#333333",
        primary: "#ffc0cb",
        "primary-foreground": "#000000",
        secondary: "#87ceeb",
        "secondary-foreground": "#000000",
        muted: "#ddd9c4",
        "muted-foreground": "#6e6e6e",
        accent: "#ffff00",
        "accent-foreground": "#000000",
        destructive: "#ef4444",
        "destructive-foreground": "#ffffff",
        border: "#d4d4d4",
        input: "#d4d4d4",
        ring: "#ffc0cb",
        "chart-1": "#ffc0cb",
        "chart-2": "#87ceeb",
        "chart-3": "#ffff00",
        "chart-4": "#ff99cc",
        "chart-5": "#33cc33",
        radius: "0.5rem",
        sidebar: "#f7f9fa",
        "sidebar-foreground": "#333333",
        "sidebar-primary": "#ffc0cb",
        "sidebar-primary-foreground": "#000000",
        "sidebar-accent": "#ffff00",
        "sidebar-accent-foreground": "#000000",
        "sidebar-border": "#d4d4d4",
        "sidebar-ring": "#ffc0cb",
        "font-sans": "Poppins, sans-serif",
        "font-mono": "Roboto Mono, monospace",
      },
      dark: {
        background: "#1a1d23",
        foreground: "#e5e5e5",
        card: "#2f3436",
        "card-foreground": "#e5e5e5",
        popover: "#2f3436",
        "popover-foreground": "#e5e5e5",
        primary: "#ff99cc",
        "primary-foreground": "#000000",
        secondary: "#33cc33",
        "secondary-foreground": "#000000",
        muted: "#444444",
        "muted-foreground": "#a3a3a3",
        accent: "#87ceeb",
        "accent-foreground": "#000000",
        destructive: "#ef4444",
        "destructive-foreground": "#ffffff",
        border: "#444444",
        input: "#444444",
        ring: "#ff99cc",
        "chart-1": "#ff99cc",
        "chart-2": "#33cc33",
        "chart-3": "#87ceeb",
        "chart-4": "#ffff00",
        "chart-5": "#ffcc00",
        radius: "0.5rem",
        sidebar: "#1a1d23",
        "sidebar-foreground": "#e5e5e5",
        "sidebar-primary": "#ff99cc",
        "sidebar-primary-foreground": "#000000",
        "sidebar-accent": "#87ceeb",
        "sidebar-accent-foreground": "#000000",
        "sidebar-border": "#444444",
        "sidebar-ring": "#ff99cc",
      },
    },
  },
  "northern-lights": {
    label: "Northern Lights",
    styles: {
      light: {
        background: "#f9f9fa",
        foreground: "#333333",
        card: "#ffffff",
        "card-foreground": "#333333",
        popover: "#ffffff",
        "popover-foreground": "#333333",
        primary: "#34a85a",
        "primary-foreground": "#ffffff",
        secondary: "#6495ed",
        "secondary-foreground": "#ffffff",
        muted: "#ddd9c4",
        "muted-foreground": "#6e6e6e",
        accent: "#66d9ef",
        "accent-foreground": "#333333",
        destructive: "#ef4444",
        "destructive-foreground": "#ffffff",
        border: "#d4d4d4",
        input: "#d4d4d4",
        ring: "#34a85a",
        "chart-1": "#34a85a",
        "chart-2": "#6495ed",
        "chart-3": "#66d9ef",
        "chart-4": "#4682b4",
        "chart-5": "#1a9641",
        radius: "0.5rem",
        sidebar: "#f9f9fa",
        "sidebar-foreground": "#333333",
        "sidebar-primary": "#34a85a",
        "sidebar-primary-foreground": "#ffffff",
        "sidebar-accent": "#66d9ef",
        "sidebar-accent-foreground": "#333333",
        "sidebar-border": "#d4d4d4",
        "sidebar-ring": "#34a85a",
        "font-sans": "Plus Jakarta Sans, sans-serif",
        "font-serif": "Source Serif 4, serif",
        "font-mono": "JetBrains Mono, monospace",
      },
      dark: {
        background: "#1a1d23",
        foreground: "#e5e5e5",
        card: "#2f3436",
        "card-foreground": "#e5e5e5",
        popover: "#2f3436",
        "popover-foreground": "#e5e5e5",
        primary: "#34a85a",
        "primary-foreground": "#ffffff",
        secondary: "#4682b4",
        "secondary-foreground": "#e5e5e5",
        muted: "#444444",
        "muted-foreground": "#a3a3a3",
        accent: "#6495ed",
        "accent-foreground": "#e5e5e5",
        destructive: "#ef4444",
        "destructive-foreground": "#ffffff",
        border: "#444444",
        input: "#444444",
        ring: "#34a85a",
        "chart-1": "#34a85a",
        "chart-2": "#4682b4",
        "chart-3": "#6495ed",
        "chart-4": "#66d9ef",
        "chart-5": "#1a9641",
        radius: "0.5rem",
        sidebar: "#1a1d23",
        "sidebar-foreground": "#e5e5e5",
        "sidebar-primary": "#34a85a",
        "sidebar-primary-foreground": "#ffffff",
        "sidebar-accent": "#6495ed",
        "sidebar-accent-foreground": "#e5e5e5",
        "sidebar-border": "#444444",
        "sidebar-ring": "#34a85a",
      },
    },
  },
  "vintage-paper": {
    label: "Vintage Paper",
    styles: {
      light: {
        background: "#f5f1e6",
        foreground: "#4a3f35",
        card: "#fffcf5",
        "card-foreground": "#4a3f35",
        popover: "#fffcf5",
        "popover-foreground": "#4a3f35",
        primary: "#a67c52",
        "primary-foreground": "#ffffff",
        secondary: "#e2d8c3",
        "secondary-foreground": "#5c4d3f",
        muted: "#ece5d8",
        "muted-foreground": "#7d6b56",
        accent: "#d4c8aa",
        "accent-foreground": "#4a3f35",
        destructive: "#b54a35",
        "destructive-foreground": "#ffffff",
        border: "#dbd0ba",
        input: "#dbd0ba",
        ring: "#a67c52",
        "chart-1": "#a67c52",
        "chart-2": "#8d6e4c",
        "chart-3": "#735a3a",
        "chart-4": "#b3906f",
        "chart-5": "#c0a080",
        radius: "0.25rem",
        sidebar: "#ece5d8",
        "sidebar-foreground": "#4a3f35",
        "sidebar-primary": "#a67c52",
        "sidebar-primary-foreground": "#ffffff",
        "sidebar-accent": "#d4c8aa",
        "sidebar-accent-foreground": "#4a3f35",
        "sidebar-border": "#dbd0ba",
        "sidebar-ring": "#a67c52",
        "font-sans": "Libre Baskerville, serif",
        "font-serif": "Lora, serif",
        "font-mono": "IBM Plex Mono, monospace",
        "shadow-color": "hsl(28 13% 20%)",
        "shadow-opacity": "0.12",
        "shadow-blur": "5px",
        "shadow-spread": "0px",
        "shadow-offset-x": "2px",
        "shadow-offset-y": "3px",
      },
      dark: {
        background: "#2d2621",
        foreground: "#ece5d8",
        card: "#3a322c",
        "card-foreground": "#ece5d8",
        popover: "#3a322c",
        "popover-foreground": "#ece5d8",
        primary: "#c0a080",
        "primary-foreground": "#2d2621",
        secondary: "#4a4039",
        "secondary-foreground": "#ece5d8",
        muted: "#3a322c",
        "muted-foreground": "#c5bcac",
        accent: "#59493e",
        "accent-foreground": "#ece5d8",
        destructive: "#b54a35",
        "destructive-foreground": "#ffffff",
        border: "#4a4039",
        input: "#4a4039",
        ring: "#c0a080",
        "chart-1": "#c0a080",
        "chart-2": "#b3906f",
        "chart-3": "#a67c52",
        "chart-4": "#8d6e4c",
        "chart-5": "#735a3a",
        radius: "0.25rem",
        sidebar: "#2d2621",
        "sidebar-foreground": "#ece5d8",
        "sidebar-primary": "#c0a080",
        "sidebar-primary-foreground": "#2d2621",
        "sidebar-accent": "#59493e",
        "sidebar-accent-foreground": "#ece5d8",
        "sidebar-border": "#4a4039",
        "sidebar-ring": "#c0a080",
      },
    },
  },
  "sunset-horizon": {
    label: "Sunset Horizon",
    styles: {
      light: {
        background: "#fff9f5",
        foreground: "#3d3436",
        card: "#ffffff",
        "card-foreground": "#3d3436",
        popover: "#ffffff",
        "popover-foreground": "#3d3436",
        primary: "#ff7e5f",
        "primary-foreground": "#ffffff",
        secondary: "#ffedea",
        "secondary-foreground": "#b35340",
        muted: "#fff0eb",
        "muted-foreground": "#78716C",
        accent: "#feb47b",
        "accent-foreground": "#3d3436",
        destructive: "#e63946",
        "destructive-foreground": "#ffffff",
        border: "#ffe0d6",
        input: "#ffe0d6",
        ring: "#ff7e5f",
        "chart-1": "#ff7e5f",
        "chart-2": "#feb47b",
        "chart-3": "#ffcaa7",
        "chart-4": "#ffad8f",
        "chart-5": "#ce6a57",
        radius: "0.625rem",
        sidebar: "#fff0eb",
        "sidebar-foreground": "#3d3436",
        "sidebar-primary": "#ff7e5f",
        "sidebar-primary-foreground": "#ffffff",
        "sidebar-accent": "#feb47b",
        "sidebar-accent-foreground": "#3d3436",
        "sidebar-border": "#ffe0d6",
        "sidebar-ring": "#ff7e5f",
        "font-sans": "Montserrat, sans-serif",
        "font-serif": "Merriweather, serif",
        "font-mono": "Ubuntu Mono, monospace",
        "shadow-color": "hsl(0 0% 0%)",
        "shadow-opacity": "0.09",
        "shadow-blur": "12px",
        "shadow-spread": "-3px",
        "shadow-offset-x": "0px",
        "shadow-offset-y": "6px",
      },
      dark: {
        background: "#2a2024",
        foreground: "#f2e9e4",
        card: "#392f35",
        "card-foreground": "#f2e9e4",
        popover: "#392f35",
        "popover-foreground": "#f2e9e4",
        primary: "#ff7e5f",
        "primary-foreground": "#ffffff",
        secondary: "#463a41",
        "secondary-foreground": "#f2e9e4",
        muted: "#392f35",
        "muted-foreground": "#d7c6bc",
        accent: "#feb47b",
        "accent-foreground": "#2a2024",
        destructive: "#e63946",
        "destructive-foreground": "#ffffff",
        border: "#463a41",
        input: "#463a41",
        ring: "#ff7e5f",
        "chart-1": "#ff7e5f",
        "chart-2": "#feb47b",
        "chart-3": "#ffcaa7",
        "chart-4": "#ffad8f",
        "chart-5": "#ce6a57",
        radius: "0.625rem",
        sidebar: "#2a2024",
        "sidebar-foreground": "#f2e9e4",
        "sidebar-primary": "#ff7e5f",
        "sidebar-primary-foreground": "#ffffff",
        "sidebar-accent": "#feb47b",
        "sidebar-accent-foreground": "#2a2024",
        "sidebar-border": "#463a41",
        "sidebar-ring": "#ff7e5f",
      },
    },
  },

  "starry-night": {
    label: "Starry Night",
    createdAt: "2025-04-16",
    styles: {
      light: {
        background: "#f5f7fa",
        foreground: "#1a2238",
        card: "#e3eaf2",
        "card-foreground": "#1a2238",
        popover: "#fffbe6",
        "popover-foreground": "#1a2238",
        primary: "#3a5ba0",
        "primary-foreground": "#fffbe6",
        secondary: "#f7c873",
        "secondary-foreground": "#1a2238",
        muted: "#e5e5df",
        "muted-foreground": "#3a5ba0",
        accent: "#6ea3c1",
        "accent-foreground": "#fffbe6",
        destructive: "#2d1e2f",
        "destructive-foreground": "#fffbe6",
        border: "#b0b8c1",
        input: "#6ea3c1",
        ring: "#f7c873",
        "chart-1": "#3a5ba0",
        "chart-2": "#f7c873",
        "chart-3": "#6ea3c1",
        "chart-4": "#b0b8c1",
        "chart-5": "#2d1e2f",
        sidebar: "#e3eaf2",
        "sidebar-foreground": "#1a2238",
        "sidebar-primary": "#3a5ba0",
        "sidebar-primary-foreground": "#fffbe6",
        "sidebar-accent": "#f7c873",
        "sidebar-accent-foreground": "#1a2238",
        "sidebar-border": "#b0b8c1",
        "sidebar-ring": "#f7c873",
        "font-sans": "Libre Baskerville, serif",
        radius: "0.5rem",
      },
      dark: {
        background: "#181a24",
        foreground: "#e6eaf3",
        card: "#23243a",
        "card-foreground": "#e6eaf3",
        popover: "#23243a",
        "popover-foreground": "#ffe066",
        primary: "#3a5ba0",
        "primary-foreground": "#ffe066",
        secondary: "#ffe066",
        "secondary-foreground": "#23243a",
        muted: "#23243a",
        "muted-foreground": "#7a88a1",
        accent: "#bccdf0",
        "accent-foreground": "#181a24",
        destructive: "#a04a6c",
        "destructive-foreground": "#ffe066",
        border: "#2d2e3e",
        input: "#3a5ba0",
        ring: "#ffe066",
        "chart-1": "#3a5ba0",
        "chart-2": "#ffe066",
        "chart-3": "#6ea3c1",
        "chart-4": "#7a88a1",
        "chart-5": "#a04a6c",
        sidebar: "#23243a",
        "sidebar-foreground": "#e6eaf3",
        "sidebar-primary": "#3a5ba0",
        "sidebar-primary-foreground": "#ffe066",
        "sidebar-accent": "#ffe066",
        "sidebar-accent-foreground": "#23243a",
        "sidebar-border": "#2d2e3e",
        "sidebar-ring": "#ffe066",
        radius: "0.5rem",
      },
    },
  },

  claude: {
    label: "Claude",
    styles: {
      light: {
        background: "#faf9f5",
        foreground: "#3d3929",
        card: "#faf9f5",
        "card-foreground": "#141413",
        popover: "#ffffff",
        "popover-foreground": "#28261b",
        primary: "#c96442",
        "primary-foreground": "#ffffff",
        secondary: "#e9e6dc",
        "secondary-foreground": "#535146",
        muted: "#ede9de",
        "muted-foreground": "#83827d",
        accent: "#e9e6dc",
        "accent-foreground": "#28261b",
        destructive: "#141413",
        "destructive-foreground": "#ffffff",
        border: "#dad9d4",
        input: "#b4b2a7",
        ring: "#207fde",
        "chart-1": "#b05730",
        "chart-2": "#9c87f5",
        "chart-3": "#ded8c4",
        "chart-4": "#dbd3f0",
        "chart-5": "#b4552d",
        sidebar: "#f5f4ee",
        "sidebar-foreground": "#3d3d3a",
        "sidebar-primary": "#c96442",
        "sidebar-primary-foreground": "#fbfbfb",
        "sidebar-accent": "#e9e6dc",
        "sidebar-accent-foreground": "#343434",
        "sidebar-border": "#ebebeb",
        "sidebar-ring": "#b5b5b5",
        radius: "0.5rem",
      },
      dark: {
        background: "#262624",
        foreground: "#c3c0b6",
        card: "#262624",
        "card-foreground": "#faf9f5",
        popover: "#30302e",
        "popover-foreground": "#e5e5e2",
        primary: "#d97757",
        "primary-foreground": "#ffffff",
        secondary: "#faf9f5",
        "secondary-foreground": "#30302e",
        muted: "#1b1b19",
        "muted-foreground": "#b7b5a9",
        accent: "#1a1915",
        "accent-foreground": "#f5f4ee",
        destructive: "#ef4444",
        "destructive-foreground": "#ffffff",
        border: "#3e3e38",
        input: "#52514a",
        ring: "#207fde",
        "chart-1": "#b05730",
        "chart-2": "#9c87f5",
        "chart-3": "#1a1915",
        "chart-4": "#2f2b48",
        "chart-5": "#b4552d",
        sidebar: "#1f1e1d",
        "sidebar-foreground": "#c3c0b6",
        "sidebar-primary": "#343434",
        "sidebar-primary-foreground": "#fbfbfb",
        "sidebar-accent": "#0f0f0e",
        "sidebar-accent-foreground": "#c3c0b6",
        "sidebar-border": "#ebebeb",
        "sidebar-ring": "#b5b5b5",
      },
    },
  },

  vercel: {
    label: "Vercel",
    createdAt: "2025-04-13",
    styles: {
      light: {
        background: "oklch(0.99 0 0)",
        foreground: "oklch(0 0 0)",
        card: "oklch(1.00 0 0)",
        "card-foreground": "oklch(0 0 0)",
        popover: "oklch(0.99 0 0)",
        "popover-foreground": "oklch(0 0 0)",
        primary: "oklch(0 0 0)",
        "primary-foreground": "oklch(1.00 0 0)",
        secondary: "oklch(0.94 0 0)",
        "secondary-foreground": "oklch(0 0 0)",
        muted: "oklch(0.97 0 0)",
        "muted-foreground": "oklch(0.44 0 0)",
        accent: "oklch(0.94 0 0)",
        "accent-foreground": "oklch(0 0 0)",
        destructive: "oklch(0.63 0.19 23.03)",
        "destructive-foreground": "oklch(1.00 0 0)",
        border: "oklch(0.92 0 0)",
        input: "oklch(0.94 0 0)",
        ring: "oklch(0 0 0)",
        "chart-1": "oklch(0.81 0.17 75.35)",
        "chart-2": "oklch(0.55 0.22 264.53)",
        "chart-3": "oklch(0.72 0 0)",
        "chart-4": "oklch(0.92 0 0)",
        "chart-5": "oklch(0.56 0 0)",
        sidebar: "oklch(0.99 0 0)",
        "sidebar-foreground": "oklch(0 0 0)",
        "sidebar-primary": "oklch(0 0 0)",
        "sidebar-primary-foreground": "oklch(1.00 0 0)",
        "sidebar-accent": "oklch(0.94 0 0)",
        "sidebar-accent-foreground": "oklch(0 0 0)",
        "sidebar-border": "oklch(0.94 0 0)",
        "sidebar-ring": "oklch(0 0 0)",
        "font-sans": "Geist, sans-serif",
        "font-serif": "Georgia, serif",
        "font-mono": "Geist Mono, monospace",
        radius: "0.5rem",
        "shadow-color": "hsl(0 0% 0%)",
        "shadow-opacity": "0.18",
        "shadow-blur": "2px",
        "shadow-spread": "0px",
        "shadow-offset-x": "0px",
        "shadow-offset-y": "1px",
      },

      dark: {
        background: "oklch(0 0 0)",
        foreground: "oklch(1.00 0 0)",
        card: "oklch(0.14 0 0)",
        "card-foreground": "oklch(1.00 0 0)",
        popover: "oklch(0.18 0 0)",
        "popover-foreground": "oklch(1.00 0 0)",
        primary: "oklch(1.00 0 0)",
        "primary-foreground": "oklch(0 0 0)",
        secondary: "oklch(0.25 0 0)",
        "secondary-foreground": "oklch(1.00 0 0)",
        muted: "oklch(0.23 0 0)",
        "muted-foreground": "oklch(0.72 0 0)",
        accent: "oklch(0.32 0 0)",
        "accent-foreground": "oklch(1.00 0 0)",
        destructive: "oklch(0.69 0.20 23.91)",
        "destructive-foreground": "oklch(0 0 0)",
        border: "oklch(0.26 0 0)",
        input: "oklch(0.32 0 0)",
        ring: "oklch(0.72 0 0)",
        "chart-1": "oklch(0.81 0.17 75.35)",
        "chart-2": "oklch(0.58 0.21 260.84)",
        "chart-3": "oklch(0.56 0 0)",
        "chart-4": "oklch(0.44 0 0)",
        "chart-5": "oklch(0.92 0 0)",
        sidebar: "oklch(0.18 0 0)",
        "sidebar-foreground": "oklch(1.00 0 0)",
        "sidebar-primary": "oklch(1.00 0 0)",
        "sidebar-primary-foreground": "oklch(0 0 0)",
        "sidebar-accent": "oklch(0.32 0 0)",
        "sidebar-accent-foreground": "oklch(1.00 0 0)",
        "sidebar-border": "oklch(0.32 0 0)",
        "sidebar-ring": "oklch(0.72 0 0)",
        "font-sans": "Geist, sans-serif",
        "font-serif": "Georgia, serif",
        "font-mono": "Geist Mono, monospace",
      },
    },
  },

  mono: {
    label: "Mono",
    createdAt: "2025-04-20",
    styles: {
      light: {
        background: "#ffffff",
        foreground: "#0a0a0a",
        card: "#ffffff",
        "card-foreground": "#0a0a0a",
        popover: "#ffffff",
        "popover-foreground": "#0a0a0a",
        primary: "#737373",
        "primary-foreground": "#fafafa",
        secondary: "#f5f5f5",
        "secondary-foreground": "#171717",
        muted: "#f5f5f5",
        "muted-foreground": "#717171",
        accent: "#f5f5f5",
        "accent-foreground": "#171717",
        destructive: "#e7000b",
        "destructive-foreground": "#f5f5f5",
        border: "#e5e5e5",
        input: "#e5e5e5",
        ring: "#a1a1a1",
        "chart-1": "#737373",
        "chart-2": "#737373",
        "chart-3": "#737373",
        "chart-4": "#737373",
        "chart-5": "#737373",
        sidebar: "#fafafa",
        "sidebar-foreground": "#0a0a0a",
        "sidebar-primary": "#171717",
        "sidebar-primary-foreground": "#fafafa",
        "sidebar-accent": "#f5f5f5",
        "sidebar-accent-foreground": "#171717",
        "sidebar-border": "#e5e5e5",
        "sidebar-ring": "#a1a1a1",
        "font-sans": "Geist Mono, monospace",
        "font-serif": "Geist Mono, monospace",
        "font-mono": "Geist Mono, monospace",
        radius: "0rem",
        "shadow-color": "hsl(0 0% 0%)",
        "shadow-opacity": "0",
        "shadow-blur": "0px",
        "shadow-spread": "0px",
        "shadow-offset-x": "0px",
        "shadow-offset-y": "1px",
      },
      dark: {
        background: "#0a0a0a",
        foreground: "#fafafa",
        card: "#191919",
        "card-foreground": "#fafafa",
        popover: "#262626",
        "popover-foreground": "#fafafa",
        primary: "#737373",
        "primary-foreground": "#fafafa",
        secondary: "#262626",
        "secondary-foreground": "#fafafa",
        muted: "#262626",
        "muted-foreground": "#a1a1a1",
        accent: "#404040",
        "accent-foreground": "#fafafa",
        destructive: "#ff6467",
        "destructive-foreground": "#262626",
        border: "#383838",
        input: "#525252",
        ring: "#737373",
        "chart-1": "#737373",
        "chart-2": "#737373",
        "chart-3": "#737373",
        "chart-4": "#737373",
        "chart-5": "#737373",
        sidebar: "#171717",
        "sidebar-foreground": "#fafafa",
        "sidebar-primary": "#fafafa",
        "sidebar-primary-foreground": "#171717",
        "sidebar-accent": "#262626",
        "sidebar-accent-foreground": "#fafafa",
        "sidebar-border": "#ffffff",
        "sidebar-ring": "#525252",
      },
    },
  },
};
</file>

<file path="lib/theme-receiver.ts">
(function () {
  window.addEventListener("message", (event: MessageEvent) => {
    if (!event.data || event.data.type !== "theme-update") return;

    // Set CSS variables untuk radius
    document.documentElement.style.setProperty("--radius", `${event.data.radius}rem`);

    // Ubah kelas tema pada body
    document.body.className = document.body.className.replace(/theme-\w+/, `theme-${event.data.theme}`);

    // Handle mode (light/dark)
    if (event.data.mode === "dark") {
      document.documentElement.classList.add("dark");
    } else {
      document.documentElement.classList.remove("dark");
    }
  });
})();
</file>

<file path="lib/themes.ts">
import { themeColorsToCssVariables } from "./theme-preset-helper";

const _THEMES = [
  {
    name: "Sapphire",
    id: "default-sapphire",
    colors: {
      background: "0 0% 100%",
      foreground: "222.2 84% 4.9%",
      card: "0 0% 100%",
      cardForeground: "222.2 84% 4.9%",
      popover: "0 0% 100%",
      popoverForeground: "222.2 84% 4.9%",
      primary: "221.2 83.2% 53.3%",
      primaryForeground: "210 40% 98%",
      secondary: "210 40% 96.1%",
      secondaryForeground: "222.2 47.4% 11.2%",
      muted: "210 40% 96.1%",
      mutedForeground: "215.4 16.3% 44%",
      accent: "210 40% 96.1%",
      accentForeground: "222.2 47.4% 11.2%",
      destructive: "0 72% 51%",
      destructiveForeground: "210 40% 98%",
      border: "214.3 31.8% 91.4%",
      input: "214.3 31.8% 91.4%",
      ring: "221.2 83.2% 53.3%",
      "chart-1": "221.2 83.2% 53.3%",
      "chart-2": "212 95% 68%",
      "chart-3": "216 92% 60%",
      "chart-4": "210 98% 78%",
      "chart-5": "212 97% 87%",
    },
    colorsDark: {
      background: "240 10% 3.9%",
      foreground: "0 0% 98%",
      card: "240 10% 3.9%",
      "card-foreground": "0 0% 98%",
      popover: "240 10% 3.9%",
      "popover-foreground": "0 0% 98%",
      primary: "221.2 83.2% 53.3%",
      primaryForeground: "210 40% 98%",
      secondary: "210 40% 96.1%",
      secondaryForeground: "222.2 47.4% 11.2%",
      muted: "240 3.7% 15.9%",
      "muted-foreground": "240 5% 64.9%",
      accent: "240 3.7% 15.9%",
      "accent-foreground": "0 0% 98%",
      destructive: "0 72% 51%",
      destructiveForeground: "210 40% 98%",
      border: "240 3.7% 15.9%",
      input: "240 3.7% 15.9%",
      ring: "221.2 83.2% 53.3%",
      "chart-1": "221.2 83.2% 53.3%",
      "chart-2": "212 95% 68%",
      "chart-3": "216 92% 60%",
      "chart-4": "210 98% 78%",
      "chart-5": "212 97% 87%",
    },
    fontFamily: {
      heading: {
        name: "Inter",
        type: "sans-serif",
      },
      body: {
        name: "Inter",
        type: "sans-serif",
      },
    },
    radius: 0.5,
  },
  {
    name: "Default",
    id: "default-shadcn",
    colors: {
      background: "0 0% 100%",
      foreground: "240 10% 3.9%",
      card: "0 0% 100%",
      "card-foreground": "240 10% 3.9%",
      popover: "0 0% 100%",
      "popover-foreground": "240 10% 3.9%",
      primary: "240 5.9% 10%",
      "primary-foreground": "0 0% 98%",
      secondary: "240 4.8% 95.9%",
      "secondary-foreground": "240 5.9% 10%",
      muted: "240 4.8% 95.9%",
      "muted-foreground": "240 3.8% 46.1%",
      accent: "240 4.8% 95.9%",
      "accent-foreground": "240 5.9% 10%",
      destructive: "0 84.2% 60.2%",
      "destructive-foreground": "0 0% 98%",
      border: "240 5.9% 90%",
      input: "240 5.9% 90%",
      ring: "240 10% 3.9%",
      "chart-1": "173 58% 39%",
      "chart-2": "12 76% 61%",
      "chart-3": "197 37% 24%",
      "chart-4": "43 74% 66%",
      "chart-5": "27 87% 67%",
    },
    colorsDark: {
      background: "240 10% 3.9%",
      foreground: "0 0% 98%",
      card: "240 10% 3.9%",
      "card-foreground": "0 0% 98%",
      popover: "240 10% 3.9%",
      "popover-foreground": "0 0% 98%",
      primary: "0 0% 98%",
      "primary-foreground": "240 5.9% 10%",
      secondary: "240 3.7% 15.9%",
      "secondary-foreground": "0 0% 98%",
      muted: "240 3.7% 15.9%",
      "muted-foreground": "240 5% 64.9%",
      accent: "240 3.7% 15.9%",
      "accent-foreground": "0 0% 98%",
      destructive: "0 62.8% 30.6%",
      "destructive-foreground": "0 0% 98%",
      border: "240 3.7% 15.9%",
      input: "240 3.7% 15.9%",
      ring: "240 4.9% 83.9%",
      "chart-1": "220 70% 50%",
      "chart-5": "160 60% 45%",
      "chart-3": "30 80% 55%",
      "chart-4": "280 65% 60%",
      "chart-2": "340 75% 55%",
    },
    fontFamily: {
      heading: {
        name: "Inter",
        type: "sans-serif",
      },
      body: {
        name: "Inter",
        type: "sans-serif",
      },
    },
    radius: 0.5,
  },
  {
    name: "Caffeine",
    id: "default-caffeine",
    colors: {
      background: "0 0% 97.65%",
      foreground: "0 0% 12.55%",
      card: "0 0% 98.82%",
      "card-foreground": "0 0% 12.55%",
      popover: "0 0% 98.82%",
      "popover-foreground": "0 0% 12.55%",
      primary: "16.67 21.95% 32.16%",
      "primary-foreground": "0 0% 100%",
      secondary: "34.05 100% 85.49%",
      "secondary-foreground": "16.27 50.43% 22.94%",
      muted: "0 0% 93.73%",
      "muted-foreground": "0 0% 39.22%",
      accent: "0 0% 90.98%",
      "accent-foreground": "0 0% 12.55%",
      destructive: "10.16 77.87% 53.92%",
      "destructive-foreground": "0 0% 100%",
      border: "0 0% 84.71%",
      input: "0 0% 84.71%",
      ring: "16.67 21.95% 32.16%",
      "chart-1": "16.67 21.95% 32.16%",
      "chart-2": "34.05 100% 85.49%",
      "chart-3": "0 0% 90.98%",
      "chart-4": "34.58 100% 88.43%",
      "chart-5": "16.50 24.39% 32.16%",
    },
    colorsDark: {
      background: "0 0% 6.67%",
      foreground: "0 0% 93.33%",
      card: "0 0% 9.80%",
      "card-foreground": "0 0% 93.33%",
      popover: "0 0% 9.80%",
      "popover-foreground": "0 0% 93.33%",
      primary: "29.51 100% 88.04%",
      "primary-foreground": "183.16 54.29% 6.86%",
      secondary: "28.24 17.53% 19.02%",
      "secondary-foreground": "29.51 100% 88.04%",
      muted: "0 0% 13.33%",
      "muted-foreground": "0 0% 70.59%",
      accent: "0 0% 16.47%",
      "accent-foreground": "0 0% 93.33%",
      destructive: "10.16 77.87% 53.92%",
      "destructive-foreground": "0 0% 100%",
      border: "45 14.29% 10.98%",
      input: "0 0% 28.24%",
      ring: "29.51 100% 88.04%",
      "chart-1": "29.51 100% 88.04%",
      "chart-2": "28.24 17.53% 19.02%",
      "chart-3": "0 0% 16.47%",
      "chart-4": "30 17.86% 21.96%",
      "chart-5": "30 100% 87.84%",
    },
    fontFamily: {
      heading: {
        name: "Inter",
        type: "sans-serif",
      },
      body: {
        name: "Inter",
        type: "sans-serif",
      },
    },
    radius: 0.5,
  },
] as const;

export const THEMES = _THEMES.map((theme) => ({
  ...theme,
  cssVars: {
    light: themeColorsToCssVariables(theme.colors),
    dark: themeColorsToCssVariables(theme.colorsDark),
  },
}));

export type Theme = (typeof THEMES)[number];
</file>

<file path="lib/utils.ts">
import { Metadata } from "next";
import { env } from "@/env.mjs";
import clsx, { ClassValue } from "clsx";
import { twMerge } from "tailwind-merge";

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs));
}

export function isDeepEqual(a: unknown, b: unknown): boolean {
  return isEqual(a, b);
}

export function humanize(name: string): string {
  return name
    .replace(/-/g, " ")
    .replace(/([A-Z])/g, " $1")
    .trim()
    .split(/\s+/)
    .map((word) => word[0].toUpperCase() + word.substring(1).toLowerCase())
    .join(" ");
}

export const truncate = (str: string | null, length: number) => {
  if (!str || str.length <= length) return str;
  return `${str.slice(0, length - 3)}...`;
};

export const fetcher = (...args: Parameters<typeof fetch>) =>
  fetch(...args).then((res) => res.json());

/**
 * Capitalizes first letters of words in string.
 * @param {string} str String to be modified
 * @param {boolean=false} lower Whether all other letters should be lowercased
 * @return {string}
 * @see https://stackoverflow.com/questions/2332811/capitalize-words-in-string/7592235#7592235
 * @usage
 *   capitalize('fix this string');     // -> 'Fix This String'
 *   capitalize('javaSCrIPT');          // -> 'JavaSCrIPT'
 *   capitalize('javaSCrIPT', true);    // -> 'Javascript'
 */
export const capitalize = (str: string, lower = false) =>
  (lower ? str.toLowerCase() : str).replace(/(?:^|\s|["'([{])+\S/g, (match) =>
    match.toUpperCase(),
  );

export function formatDate(input: string | number): string {
  const date = new Date(input);
  return date.toLocaleDateString("en-US", {
    month: "long",
    day: "numeric",
    year: "numeric",
  });
}

export function absoluteUrl(path: string) {
  return `${env.NEXT_PUBLIC_APP_URL}${path}`;
}

// export function constructMetadata({
//   title = "BehindUI - When Dribble Meet Code",
//   description = "BehindUI is a collection of ready to use world class headline components for your website",
//   image = absoluteUrl("/og"),
//   ...props
// }: {
//   title?: string;
//   description?: string;
//   image?: string;
//   [key: string]: Metadata[keyof Metadata];
// }): Metadata {
//   return {
//     title,
//     description,
//     keywords: ["React", "Tailwind CSS", "Framer Motion", "Landing Page", "Components", "Next.js"],
//     openGraph: {
//       title,
//       description,
//       type: "website",
//       images: [
//         {
//           url: image,
//           width: 1200,
//           height: 630,
//           alt: title,
//         },
//       ],
//     },
//     twitter: {
//       card: "summary_large_image",
//       title,
//       description,
//       images: [image],
//       creator: "@BroKariim",
//     },
//     icons: "/favicon.ico",
//     metadataBase: new URL("https://behindui.vercel.app/"),
//     authors: [
//       {
//         name: "BroKarim",
//         url: "https://x.com/BroKariim",
//       },
//     ],
//     creator: "BroKarim",
//     ...props,
//   };
// }
</file>

<file path="public/r/colors/gray.json">
{
  "inlineColors": {
    "light": {
      "background": "white",
      "foreground": "gray-950",
      "card": "white",
      "card-foreground": "gray-950",
      "popover": "white",
      "popover-foreground": "gray-950",
      "primary": "gray-900",
      "primary-foreground": "gray-50",
      "secondary": "gray-100",
      "secondary-foreground": "gray-900",
      "muted": "gray-100",
      "muted-foreground": "gray-500",
      "accent": "gray-100",
      "accent-foreground": "gray-900",
      "destructive": "red-500",
      "destructive-foreground": "gray-50",
      "border": "gray-200",
      "input": "gray-200",
      "ring": "gray-950"
    },
    "dark": {
      "background": "gray-950",
      "foreground": "gray-50",
      "card": "gray-950",
      "card-foreground": "gray-50",
      "popover": "gray-950",
      "popover-foreground": "gray-50",
      "primary": "gray-50",
      "primary-foreground": "gray-900",
      "secondary": "gray-800",
      "secondary-foreground": "gray-50",
      "muted": "gray-800",
      "muted-foreground": "gray-400",
      "accent": "gray-800",
      "accent-foreground": "gray-50",
      "destructive": "red-900",
      "destructive-foreground": "gray-50",
      "border": "gray-800",
      "input": "gray-800",
      "ring": "gray-300"
    }
  },
  "cssVars": {
    "light": {
      "background": "0 0% 100%",
      "foreground": "224 71.4% 4.1%",
      "card": "0 0% 100%",
      "card-foreground": "224 71.4% 4.1%",
      "popover": "0 0% 100%",
      "popover-foreground": "224 71.4% 4.1%",
      "primary": "220.9 39.3% 11%",
      "primary-foreground": "210 20% 98%",
      "secondary": "220 14.3% 95.9%",
      "secondary-foreground": "220.9 39.3% 11%",
      "muted": "220 14.3% 95.9%",
      "muted-foreground": "220 8.9% 46.1%",
      "accent": "220 14.3% 95.9%",
      "accent-foreground": "220.9 39.3% 11%",
      "destructive": "0 84.2% 60.2%",
      "destructive-foreground": "210 20% 98%",
      "border": "220 13% 91%",
      "input": "220 13% 91%",
      "ring": "224 71.4% 4.1%",
      "chart-1": "12 76% 61%",
      "chart-2": "173 58% 39%",
      "chart-3": "197 37% 24%",
      "chart-4": "43 74% 66%",
      "chart-5": "27 87% 67%"
    },
    "dark": {
      "background": "224 71.4% 4.1%",
      "foreground": "210 20% 98%",
      "card": "224 71.4% 4.1%",
      "card-foreground": "210 20% 98%",
      "popover": "224 71.4% 4.1%",
      "popover-foreground": "210 20% 98%",
      "primary": "210 20% 98%",
      "primary-foreground": "220.9 39.3% 11%",
      "secondary": "215 27.9% 16.9%",
      "secondary-foreground": "210 20% 98%",
      "muted": "215 27.9% 16.9%",
      "muted-foreground": "217.9 10.6% 64.9%",
      "accent": "215 27.9% 16.9%",
      "accent-foreground": "210 20% 98%",
      "destructive": "0 62.8% 30.6%",
      "destructive-foreground": "210 20% 98%",
      "border": "215 27.9% 16.9%",
      "input": "215 27.9% 16.9%",
      "ring": "216 12.2% 83.9%",
      "chart-1": "220 70% 50%",
      "chart-2": "160 60% 45%",
      "chart-3": "30 80% 55%",
      "chart-4": "280 65% 60%",
      "chart-5": "340 75% 55%"
    }
  },
  "cssVarsV4": {
    "light": {
      "background": "oklch(1 0 0)",
      "foreground": "oklch(0.13 0.028 261.692)",
      "card": "oklch(1 0 0)",
      "card-foreground": "oklch(0.13 0.028 261.692)",
      "popover": "oklch(1 0 0)",
      "popover-foreground": "oklch(0.13 0.028 261.692)",
      "primary": "oklch(0.21 0.034 264.665)",
      "primary-foreground": "oklch(0.985 0.002 247.839)",
      "secondary": "oklch(0.967 0.003 264.542)",
      "secondary-foreground": "oklch(0.21 0.034 264.665)",
      "muted": "oklch(0.967 0.003 264.542)",
      "muted-foreground": "oklch(0.551 0.027 264.364)",
      "accent": "oklch(0.967 0.003 264.542)",
      "accent-foreground": "oklch(0.21 0.034 264.665)",
      "destructive": "oklch(0.577 0.245 27.325)",
      "destructive-foreground": "oklch(0.577 0.245 27.325)",
      "border": "oklch(0.928 0.006 264.531)",
      "input": "oklch(0.928 0.006 264.531)",
      "ring": "oklch(0.707 0.022 261.325)",
      "chart-1": "oklch(0.646 0.222 41.116)",
      "chart-2": "oklch(0.6 0.118 184.704)",
      "chart-3": "oklch(0.398 0.07 227.392)",
      "chart-4": "oklch(0.828 0.189 84.429)",
      "chart-5": "oklch(0.769 0.188 70.08)",
      "radius": "0.625rem",
      "sidebar": "oklch(0.985 0.002 247.839)",
      "sidebar-foreground": "oklch(0.13 0.028 261.692)",
      "sidebar-primary": "oklch(0.21 0.034 264.665)",
      "sidebar-primary-foreground": "oklch(0.985 0.002 247.839)",
      "sidebar-accent": "oklch(0.967 0.003 264.542)",
      "sidebar-accent-foreground": "oklch(0.21 0.034 264.665)",
      "sidebar-border": "oklch(0.928 0.006 264.531)",
      "sidebar-ring": "oklch(0.707 0.022 261.325)"
    },
    "dark": {
      "background": "oklch(0.13 0.028 261.692)",
      "foreground": "oklch(0.985 0.002 247.839)",
      "card": "oklch(0.13 0.028 261.692)",
      "card-foreground": "oklch(0.985 0.002 247.839)",
      "popover": "oklch(0.13 0.028 261.692)",
      "popover-foreground": "oklch(0.985 0.002 247.839)",
      "primary": "oklch(0.985 0.002 247.839)",
      "primary-foreground": "oklch(0.21 0.034 264.665)",
      "secondary": "oklch(0.278 0.033 256.848)",
      "secondary-foreground": "oklch(0.985 0.002 247.839)",
      "muted": "oklch(0.278 0.033 256.848)",
      "muted-foreground": "oklch(0.707 0.022 261.325)",
      "accent": "oklch(0.278 0.033 256.848)",
      "accent-foreground": "oklch(0.985 0.002 247.839)",
      "destructive": "oklch(0.396 0.141 25.723)",
      "destructive-foreground": "oklch(0.637 0.237 25.331)",
      "border": "oklch(0.278 0.033 256.848)",
      "input": "oklch(0.278 0.033 256.848)",
      "ring": "oklch(0.446 0.03 256.802)",
      "chart-1": "oklch(0.488 0.243 264.376)",
      "chart-2": "oklch(0.696 0.17 162.48)",
      "chart-3": "oklch(0.769 0.188 70.08)",
      "chart-4": "oklch(0.627 0.265 303.9)",
      "chart-5": "oklch(0.645 0.246 16.439)",
      "sidebar": "oklch(0.21 0.034 264.665)",
      "sidebar-foreground": "oklch(0.985 0.002 247.839)",
      "sidebar-primary": "oklch(0.488 0.243 264.376)",
      "sidebar-primary-foreground": "oklch(0.985 0.002 247.839)",
      "sidebar-accent": "oklch(0.278 0.033 256.848)",
      "sidebar-accent-foreground": "oklch(0.985 0.002 247.839)",
      "sidebar-border": "oklch(0.278 0.033 256.848)",
      "sidebar-ring": "oklch(0.446 0.03 256.802)"
    }
  },
  "inlineColorsTemplate": "@tailwind base;\n@tailwind components;\n@tailwind utilities;\n  ",
  "cssVarsTemplate": "@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n@layer base {\n  :root {\n    --background: 0 0% 100%;\n    --foreground: 224 71.4% 4.1%;\n    --card: 0 0% 100%;\n    --card-foreground: 224 71.4% 4.1%;\n    --popover: 0 0% 100%;\n    --popover-foreground: 224 71.4% 4.1%;\n    --primary: 220.9 39.3% 11%;\n    --primary-foreground: 210 20% 98%;\n    --secondary: 220 14.3% 95.9%;\n    --secondary-foreground: 220.9 39.3% 11%;\n    --muted: 220 14.3% 95.9%;\n    --muted-foreground: 220 8.9% 46.1%;\n    --accent: 220 14.3% 95.9%;\n    --accent-foreground: 220.9 39.3% 11%;\n    --destructive: 0 84.2% 60.2%;\n    --destructive-foreground: 210 20% 98%;\n    --border: 220 13% 91%;\n    --input: 220 13% 91%;\n    --ring: 224 71.4% 4.1%;\n    --radius: 0.5rem;\n    --chart-1: 12 76% 61%;\n    --chart-2: 173 58% 39%;\n    --chart-3: 197 37% 24%;\n    --chart-4: 43 74% 66%;\n    --chart-5: 27 87% 67%;\n  }\n\n  .dark {\n    --background: 224 71.4% 4.1%;\n    --foreground: 210 20% 98%;\n    --card: 224 71.4% 4.1%;\n    --card-foreground: 210 20% 98%;\n    --popover: 224 71.4% 4.1%;\n    --popover-foreground: 210 20% 98%;\n    --primary: 210 20% 98%;\n    --primary-foreground: 220.9 39.3% 11%;\n    --secondary: 215 27.9% 16.9%;\n    --secondary-foreground: 210 20% 98%;\n    --muted: 215 27.9% 16.9%;\n    --muted-foreground: 217.9 10.6% 64.9%;\n    --accent: 215 27.9% 16.9%;\n    --accent-foreground: 210 20% 98%;\n    --destructive: 0 62.8% 30.6%;\n    --destructive-foreground: 210 20% 98%;\n    --border: 215 27.9% 16.9%;\n    --input: 215 27.9% 16.9%;\n    --ring: 216 12.2% 83.9%;\n    --chart-1: 220 70% 50%;\n    --chart-2: 160 60% 45%;\n    --chart-3: 30 80% 55%;\n    --chart-4: 280 65% 60%;\n    --chart-5: 340 75% 55%;\n  }\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n  body {\n    @apply bg-background text-foreground;\n  }\n}"
}
</file>

<file path="public/r/colors/neutral.json">
{
  "inlineColors": {
    "light": {
      "background": "white",
      "foreground": "neutral-950",
      "card": "white",
      "card-foreground": "neutral-950",
      "popover": "white",
      "popover-foreground": "neutral-950",
      "primary": "neutral-900",
      "primary-foreground": "neutral-50",
      "secondary": "neutral-100",
      "secondary-foreground": "neutral-900",
      "muted": "neutral-100",
      "muted-foreground": "neutral-500",
      "accent": "neutral-100",
      "accent-foreground": "neutral-900",
      "destructive": "red-500",
      "destructive-foreground": "neutral-50",
      "border": "neutral-200",
      "input": "neutral-200",
      "ring": "neutral-950"
    },
    "dark": {
      "background": "neutral-950",
      "foreground": "neutral-50",
      "card": "neutral-950",
      "card-foreground": "neutral-50",
      "popover": "neutral-950",
      "popover-foreground": "neutral-50",
      "primary": "neutral-50",
      "primary-foreground": "neutral-900",
      "secondary": "neutral-800",
      "secondary-foreground": "neutral-50",
      "muted": "neutral-800",
      "muted-foreground": "neutral-400",
      "accent": "neutral-800",
      "accent-foreground": "neutral-50",
      "destructive": "red-900",
      "destructive-foreground": "neutral-50",
      "border": "neutral-800",
      "input": "neutral-800",
      "ring": "neutral-300"
    }
  },
  "cssVars": {
    "light": {
      "background": "0 0% 100%",
      "foreground": "0 0% 3.9%",
      "card": "0 0% 100%",
      "card-foreground": "0 0% 3.9%",
      "popover": "0 0% 100%",
      "popover-foreground": "0 0% 3.9%",
      "primary": "0 0% 9%",
      "primary-foreground": "0 0% 98%",
      "secondary": "0 0% 96.1%",
      "secondary-foreground": "0 0% 9%",
      "muted": "0 0% 96.1%",
      "muted-foreground": "0 0% 45.1%",
      "accent": "0 0% 96.1%",
      "accent-foreground": "0 0% 9%",
      "destructive": "0 84.2% 60.2%",
      "destructive-foreground": "0 0% 98%",
      "border": "0 0% 89.8%",
      "input": "0 0% 89.8%",
      "ring": "0 0% 3.9%",
      "chart-1": "12 76% 61%",
      "chart-2": "173 58% 39%",
      "chart-3": "197 37% 24%",
      "chart-4": "43 74% 66%",
      "chart-5": "27 87% 67%"
    },
    "dark": {
      "background": "0 0% 3.9%",
      "foreground": "0 0% 98%",
      "card": "0 0% 3.9%",
      "card-foreground": "0 0% 98%",
      "popover": "0 0% 3.9%",
      "popover-foreground": "0 0% 98%",
      "primary": "0 0% 98%",
      "primary-foreground": "0 0% 9%",
      "secondary": "0 0% 14.9%",
      "secondary-foreground": "0 0% 98%",
      "muted": "0 0% 14.9%",
      "muted-foreground": "0 0% 63.9%",
      "accent": "0 0% 14.9%",
      "accent-foreground": "0 0% 98%",
      "destructive": "0 62.8% 30.6%",
      "destructive-foreground": "0 0% 98%",
      "border": "0 0% 14.9%",
      "input": "0 0% 14.9%",
      "ring": "0 0% 83.1%",
      "chart-1": "220 70% 50%",
      "chart-2": "160 60% 45%",
      "chart-3": "30 80% 55%",
      "chart-4": "280 65% 60%",
      "chart-5": "340 75% 55%"
    }
  },
  "cssVarsV4": {
    "light": {
      "background": "oklch(1 0 0)",
      "foreground": "oklch(0.145 0 0)",
      "card": "oklch(1 0 0)",
      "card-foreground": "oklch(0.145 0 0)",
      "popover": "oklch(1 0 0)",
      "popover-foreground": "oklch(0.145 0 0)",
      "primary": "oklch(0.205 0 0)",
      "primary-foreground": "oklch(0.985 0 0)",
      "secondary": "oklch(0.97 0 0)",
      "secondary-foreground": "oklch(0.205 0 0)",
      "muted": "oklch(0.97 0 0)",
      "muted-foreground": "oklch(0.556 0 0)",
      "accent": "oklch(0.97 0 0)",
      "accent-foreground": "oklch(0.205 0 0)",
      "destructive": "oklch(0.577 0.245 27.325)",
      "destructive-foreground": "oklch(0.577 0.245 27.325)",
      "border": "oklch(0.922 0 0)",
      "input": "oklch(0.922 0 0)",
      "ring": "oklch(0.708 0 0)",
      "chart-1": "oklch(0.646 0.222 41.116)",
      "chart-2": "oklch(0.6 0.118 184.704)",
      "chart-3": "oklch(0.398 0.07 227.392)",
      "chart-4": "oklch(0.828 0.189 84.429)",
      "chart-5": "oklch(0.769 0.188 70.08)",
      "radius": "0.625rem",
      "sidebar": "oklch(0.985 0 0)",
      "sidebar-foreground": "oklch(0.145 0 0)",
      "sidebar-primary": "oklch(0.205 0 0)",
      "sidebar-primary-foreground": "oklch(0.985 0 0)",
      "sidebar-accent": "oklch(0.97 0 0)",
      "sidebar-accent-foreground": "oklch(0.205 0 0)",
      "sidebar-border": "oklch(0.922 0 0)",
      "sidebar-ring": "oklch(0.708 0 0)"
    },
    "dark": {
      "background": "oklch(0.145 0 0)",
      "foreground": "oklch(0.985 0 0)",
      "card": "oklch(0.145 0 0)",
      "card-foreground": "oklch(0.985 0 0)",
      "popover": "oklch(0.145 0 0)",
      "popover-foreground": "oklch(0.985 0 0)",
      "primary": "oklch(0.985 0 0)",
      "primary-foreground": "oklch(0.205 0 0)",
      "secondary": "oklch(0.269 0 0)",
      "secondary-foreground": "oklch(0.985 0 0)",
      "muted": "oklch(0.269 0 0)",
      "muted-foreground": "oklch(0.708 0 0)",
      "accent": "oklch(0.269 0 0)",
      "accent-foreground": "oklch(0.985 0 0)",
      "destructive": "oklch(0.396 0.141 25.723)",
      "destructive-foreground": "oklch(0.637 0.237 25.331)",
      "border": "oklch(0.269 0 0)",
      "input": "oklch(0.269 0 0)",
      "ring": "oklch(0.439 0 0)",
      "chart-1": "oklch(0.488 0.243 264.376)",
      "chart-2": "oklch(0.696 0.17 162.48)",
      "chart-3": "oklch(0.769 0.188 70.08)",
      "chart-4": "oklch(0.627 0.265 303.9)",
      "chart-5": "oklch(0.645 0.246 16.439)",
      "sidebar": "oklch(0.205 0 0)",
      "sidebar-foreground": "oklch(0.985 0 0)",
      "sidebar-primary": "oklch(0.488 0.243 264.376)",
      "sidebar-primary-foreground": "oklch(0.985 0 0)",
      "sidebar-accent": "oklch(0.269 0 0)",
      "sidebar-accent-foreground": "oklch(0.985 0 0)",
      "sidebar-border": "oklch(0.269 0 0)",
      "sidebar-ring": "oklch(0.439 0 0)"
    }
  },
  "inlineColorsTemplate": "@tailwind base;\n@tailwind components;\n@tailwind utilities;\n  ",
  "cssVarsTemplate": "@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n@layer base {\n  :root {\n    --background: 0 0% 100%;\n    --foreground: 0 0% 3.9%;\n    --card: 0 0% 100%;\n    --card-foreground: 0 0% 3.9%;\n    --popover: 0 0% 100%;\n    --popover-foreground: 0 0% 3.9%;\n    --primary: 0 0% 9%;\n    --primary-foreground: 0 0% 98%;\n    --secondary: 0 0% 96.1%;\n    --secondary-foreground: 0 0% 9%;\n    --muted: 0 0% 96.1%;\n    --muted-foreground: 0 0% 45.1%;\n    --accent: 0 0% 96.1%;\n    --accent-foreground: 0 0% 9%;\n    --destructive: 0 84.2% 60.2%;\n    --destructive-foreground: 0 0% 98%;\n    --border: 0 0% 89.8%;\n    --input: 0 0% 89.8%;\n    --ring: 0 0% 3.9%;\n    --radius: 0.5rem;\n    --chart-1: 12 76% 61%;\n    --chart-2: 173 58% 39%;\n    --chart-3: 197 37% 24%;\n    --chart-4: 43 74% 66%;\n    --chart-5: 27 87% 67%;\n  }\n\n  .dark {\n    --background: 0 0% 3.9%;\n    --foreground: 0 0% 98%;\n    --card: 0 0% 3.9%;\n    --card-foreground: 0 0% 98%;\n    --popover: 0 0% 3.9%;\n    --popover-foreground: 0 0% 98%;\n    --primary: 0 0% 98%;\n    --primary-foreground: 0 0% 9%;\n    --secondary: 0 0% 14.9%;\n    --secondary-foreground: 0 0% 98%;\n    --muted: 0 0% 14.9%;\n    --muted-foreground: 0 0% 63.9%;\n    --accent: 0 0% 14.9%;\n    --accent-foreground: 0 0% 98%;\n    --destructive: 0 62.8% 30.6%;\n    --destructive-foreground: 0 0% 98%;\n    --border: 0 0% 14.9%;\n    --input: 0 0% 14.9%;\n    --ring: 0 0% 83.1%;\n    --chart-1: 220 70% 50%;\n    --chart-2: 160 60% 45%;\n    --chart-3: 30 80% 55%;\n    --chart-4: 280 65% 60%;\n    --chart-5: 340 75% 55%;\n  }\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n  body {\n    @apply bg-background text-foreground;\n  }\n}"
}
</file>

<file path="public/r/colors/slate.json">
{
  "inlineColors": {
    "light": {
      "background": "white",
      "foreground": "slate-950",
      "card": "white",
      "card-foreground": "slate-950",
      "popover": "white",
      "popover-foreground": "slate-950",
      "primary": "slate-900",
      "primary-foreground": "slate-50",
      "secondary": "slate-100",
      "secondary-foreground": "slate-900",
      "muted": "slate-100",
      "muted-foreground": "slate-500",
      "accent": "slate-100",
      "accent-foreground": "slate-900",
      "destructive": "red-500",
      "destructive-foreground": "slate-50",
      "border": "slate-200",
      "input": "slate-200",
      "ring": "slate-950"
    },
    "dark": {
      "background": "slate-950",
      "foreground": "slate-50",
      "card": "slate-950",
      "card-foreground": "slate-50",
      "popover": "slate-950",
      "popover-foreground": "slate-50",
      "primary": "slate-50",
      "primary-foreground": "slate-900",
      "secondary": "slate-800",
      "secondary-foreground": "slate-50",
      "muted": "slate-800",
      "muted-foreground": "slate-400",
      "accent": "slate-800",
      "accent-foreground": "slate-50",
      "destructive": "red-900",
      "destructive-foreground": "slate-50",
      "border": "slate-800",
      "input": "slate-800",
      "ring": "slate-300"
    }
  },
  "cssVars": {
    "light": {
      "background": "0 0% 100%",
      "foreground": "222.2 84% 4.9%",
      "card": "0 0% 100%",
      "card-foreground": "222.2 84% 4.9%",
      "popover": "0 0% 100%",
      "popover-foreground": "222.2 84% 4.9%",
      "primary": "222.2 47.4% 11.2%",
      "primary-foreground": "210 40% 98%",
      "secondary": "210 40% 96.1%",
      "secondary-foreground": "222.2 47.4% 11.2%",
      "muted": "210 40% 96.1%",
      "muted-foreground": "215.4 16.3% 46.9%",
      "accent": "210 40% 96.1%",
      "accent-foreground": "222.2 47.4% 11.2%",
      "destructive": "0 84.2% 60.2%",
      "destructive-foreground": "210 40% 98%",
      "border": "214.3 31.8% 91.4%",
      "input": "214.3 31.8% 91.4%",
      "ring": "222.2 84% 4.9%",
      "chart-1": "12 76% 61%",
      "chart-2": "173 58% 39%",
      "chart-3": "197 37% 24%",
      "chart-4": "43 74% 66%",
      "chart-5": "27 87% 67%"
    },
    "dark": {
      "background": "222.2 84% 4.9%",
      "foreground": "210 40% 98%",
      "card": "222.2 84% 4.9%",
      "card-foreground": "210 40% 98%",
      "popover": "222.2 84% 4.9%",
      "popover-foreground": "210 40% 98%",
      "primary": "210 40% 98%",
      "primary-foreground": "222.2 47.4% 11.2%",
      "secondary": "217.2 32.6% 17.5%",
      "secondary-foreground": "210 40% 98%",
      "muted": "217.2 32.6% 17.5%",
      "muted-foreground": "215 20.2% 65.1%",
      "accent": "217.2 32.6% 17.5%",
      "accent-foreground": "210 40% 98%",
      "destructive": "0 62.8% 30.6%",
      "destructive-foreground": "210 40% 98%",
      "border": "217.2 32.6% 17.5%",
      "input": "217.2 32.6% 17.5%",
      "ring": "212.7 26.8% 83.9%",
      "chart-1": "220 70% 50%",
      "chart-2": "160 60% 45%",
      "chart-3": "30 80% 55%",
      "chart-4": "280 65% 60%",
      "chart-5": "340 75% 55%"
    }
  },
  "cssVarsV4": {
    "light": {
      "background": "oklch(1 0 0)",
      "foreground": "oklch(0.129 0.042 264.695)",
      "card": "oklch(1 0 0)",
      "card-foreground": "oklch(0.129 0.042 264.695)",
      "popover": "oklch(1 0 0)",
      "popover-foreground": "oklch(0.129 0.042 264.695)",
      "primary": "oklch(0.208 0.042 265.755)",
      "primary-foreground": "oklch(0.984 0.003 247.858)",
      "secondary": "oklch(0.968 0.007 247.896)",
      "secondary-foreground": "oklch(0.208 0.042 265.755)",
      "muted": "oklch(0.968 0.007 247.896)",
      "muted-foreground": "oklch(0.554 0.046 257.417)",
      "accent": "oklch(0.968 0.007 247.896)",
      "accent-foreground": "oklch(0.208 0.042 265.755)",
      "destructive": "oklch(0.577 0.245 27.325)",
      "destructive-foreground": "oklch(0.577 0.245 27.325)",
      "border": "oklch(0.929 0.013 255.508)",
      "input": "oklch(0.929 0.013 255.508)",
      "ring": "oklch(0.704 0.04 256.788)",
      "chart-1": "oklch(0.646 0.222 41.116)",
      "chart-2": "oklch(0.6 0.118 184.704)",
      "chart-3": "oklch(0.398 0.07 227.392)",
      "chart-4": "oklch(0.828 0.189 84.429)",
      "chart-5": "oklch(0.769 0.188 70.08)",
      "radius": "0.625rem",
      "sidebar": "oklch(0.984 0.003 247.858)",
      "sidebar-foreground": "oklch(0.129 0.042 264.695)",
      "sidebar-primary": "oklch(0.208 0.042 265.755)",
      "sidebar-primary-foreground": "oklch(0.984 0.003 247.858)",
      "sidebar-accent": "oklch(0.968 0.007 247.896)",
      "sidebar-accent-foreground": "oklch(0.208 0.042 265.755)",
      "sidebar-border": "oklch(0.929 0.013 255.508)",
      "sidebar-ring": "oklch(0.704 0.04 256.788)"
    },
    "dark": {
      "background": "oklch(0.129 0.042 264.695)",
      "foreground": "oklch(0.984 0.003 247.858)",
      "card": "oklch(0.129 0.042 264.695)",
      "card-foreground": "oklch(0.984 0.003 247.858)",
      "popover": "oklch(0.129 0.042 264.695)",
      "popover-foreground": "oklch(0.984 0.003 247.858)",
      "primary": "oklch(0.984 0.003 247.858)",
      "primary-foreground": "oklch(0.208 0.042 265.755)",
      "secondary": "oklch(0.279 0.041 260.031)",
      "secondary-foreground": "oklch(0.984 0.003 247.858)",
      "muted": "oklch(0.279 0.041 260.031)",
      "muted-foreground": "oklch(0.704 0.04 256.788)",
      "accent": "oklch(0.279 0.041 260.031)",
      "accent-foreground": "oklch(0.984 0.003 247.858)",
      "destructive": "oklch(0.396 0.141 25.723)",
      "destructive-foreground": "oklch(0.637 0.237 25.331)",
      "border": "oklch(0.279 0.041 260.031)",
      "input": "oklch(0.279 0.041 260.031)",
      "ring": "oklch(0.446 0.043 257.281)",
      "chart-1": "oklch(0.488 0.243 264.376)",
      "chart-2": "oklch(0.696 0.17 162.48)",
      "chart-3": "oklch(0.769 0.188 70.08)",
      "chart-4": "oklch(0.627 0.265 303.9)",
      "chart-5": "oklch(0.645 0.246 16.439)",
      "sidebar": "oklch(0.208 0.042 265.755)",
      "sidebar-foreground": "oklch(0.984 0.003 247.858)",
      "sidebar-primary": "oklch(0.488 0.243 264.376)",
      "sidebar-primary-foreground": "oklch(0.984 0.003 247.858)",
      "sidebar-accent": "oklch(0.279 0.041 260.031)",
      "sidebar-accent-foreground": "oklch(0.984 0.003 247.858)",
      "sidebar-border": "oklch(0.279 0.041 260.031)",
      "sidebar-ring": "oklch(0.446 0.043 257.281)"
    }
  },
  "inlineColorsTemplate": "@tailwind base;\n@tailwind components;\n@tailwind utilities;\n  ",
  "cssVarsTemplate": "@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n@layer base {\n  :root {\n    --background: 0 0% 100%;\n    --foreground: 222.2 84% 4.9%;\n    --card: 0 0% 100%;\n    --card-foreground: 222.2 84% 4.9%;\n    --popover: 0 0% 100%;\n    --popover-foreground: 222.2 84% 4.9%;\n    --primary: 222.2 47.4% 11.2%;\n    --primary-foreground: 210 40% 98%;\n    --secondary: 210 40% 96.1%;\n    --secondary-foreground: 222.2 47.4% 11.2%;\n    --muted: 210 40% 96.1%;\n    --muted-foreground: 215.4 16.3% 46.9%;\n    --accent: 210 40% 96.1%;\n    --accent-foreground: 222.2 47.4% 11.2%;\n    --destructive: 0 84.2% 60.2%;\n    --destructive-foreground: 210 40% 98%;\n    --border: 214.3 31.8% 91.4%;\n    --input: 214.3 31.8% 91.4%;\n    --ring: 222.2 84% 4.9%;\n    --radius: 0.5rem;\n    --chart-1: 12 76% 61%;\n    --chart-2: 173 58% 39%;\n    --chart-3: 197 37% 24%;\n    --chart-4: 43 74% 66%;\n    --chart-5: 27 87% 67%;\n  }\n\n  .dark {\n    --background: 222.2 84% 4.9%;\n    --foreground: 210 40% 98%;\n    --card: 222.2 84% 4.9%;\n    --card-foreground: 210 40% 98%;\n    --popover: 222.2 84% 4.9%;\n    --popover-foreground: 210 40% 98%;\n    --primary: 210 40% 98%;\n    --primary-foreground: 222.2 47.4% 11.2%;\n    --secondary: 217.2 32.6% 17.5%;\n    --secondary-foreground: 210 40% 98%;\n    --muted: 217.2 32.6% 17.5%;\n    --muted-foreground: 215 20.2% 65.1%;\n    --accent: 217.2 32.6% 17.5%;\n    --accent-foreground: 210 40% 98%;\n    --destructive: 0 62.8% 30.6%;\n    --destructive-foreground: 210 40% 98%;\n    --border: 217.2 32.6% 17.5%;\n    --input: 217.2 32.6% 17.5%;\n    --ring: 212.7 26.8% 83.9%;\n    --chart-1: 220 70% 50%;\n    --chart-2: 160 60% 45%;\n    --chart-3: 30 80% 55%;\n    --chart-4: 280 65% 60%;\n    --chart-5: 340 75% 55%;\n  }\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n  body {\n    @apply bg-background text-foreground;\n  }\n}"
}
</file>

<file path="public/r/colors/stone.json">
{
  "inlineColors": {
    "light": {
      "background": "white",
      "foreground": "stone-950",
      "card": "white",
      "card-foreground": "stone-950",
      "popover": "white",
      "popover-foreground": "stone-950",
      "primary": "stone-900",
      "primary-foreground": "stone-50",
      "secondary": "stone-100",
      "secondary-foreground": "stone-900",
      "muted": "stone-100",
      "muted-foreground": "stone-500",
      "accent": "stone-100",
      "accent-foreground": "stone-900",
      "destructive": "red-500",
      "destructive-foreground": "stone-50",
      "border": "stone-200",
      "input": "stone-200",
      "ring": "stone-950"
    },
    "dark": {
      "background": "stone-950",
      "foreground": "stone-50",
      "card": "stone-950",
      "card-foreground": "stone-50",
      "popover": "stone-950",
      "popover-foreground": "stone-50",
      "primary": "stone-50",
      "primary-foreground": "stone-900",
      "secondary": "stone-800",
      "secondary-foreground": "stone-50",
      "muted": "stone-800",
      "muted-foreground": "stone-400",
      "accent": "stone-800",
      "accent-foreground": "stone-50",
      "destructive": "red-900",
      "destructive-foreground": "stone-50",
      "border": "stone-800",
      "input": "stone-800",
      "ring": "stone-300"
    }
  },
  "cssVars": {
    "light": {
      "background": "0 0% 100%",
      "foreground": "20 14.3% 4.1%",
      "card": "0 0% 100%",
      "card-foreground": "20 14.3% 4.1%",
      "popover": "0 0% 100%",
      "popover-foreground": "20 14.3% 4.1%",
      "primary": "24 9.8% 10%",
      "primary-foreground": "60 9.1% 97.8%",
      "secondary": "60 4.8% 95.9%",
      "secondary-foreground": "24 9.8% 10%",
      "muted": "60 4.8% 95.9%",
      "muted-foreground": "25 5.3% 44.7%",
      "accent": "60 4.8% 95.9%",
      "accent-foreground": "24 9.8% 10%",
      "destructive": "0 84.2% 60.2%",
      "destructive-foreground": "60 9.1% 97.8%",
      "border": "20 5.9% 90%",
      "input": "20 5.9% 90%",
      "ring": "20 14.3% 4.1%",
      "chart-1": "12 76% 61%",
      "chart-2": "173 58% 39%",
      "chart-3": "197 37% 24%",
      "chart-4": "43 74% 66%",
      "chart-5": "27 87% 67%"
    },
    "dark": {
      "background": "20 14.3% 4.1%",
      "foreground": "60 9.1% 97.8%",
      "card": "20 14.3% 4.1%",
      "card-foreground": "60 9.1% 97.8%",
      "popover": "20 14.3% 4.1%",
      "popover-foreground": "60 9.1% 97.8%",
      "primary": "60 9.1% 97.8%",
      "primary-foreground": "24 9.8% 10%",
      "secondary": "12 6.5% 15.1%",
      "secondary-foreground": "60 9.1% 97.8%",
      "muted": "12 6.5% 15.1%",
      "muted-foreground": "24 5.4% 63.9%",
      "accent": "12 6.5% 15.1%",
      "accent-foreground": "60 9.1% 97.8%",
      "destructive": "0 62.8% 30.6%",
      "destructive-foreground": "60 9.1% 97.8%",
      "border": "12 6.5% 15.1%",
      "input": "12 6.5% 15.1%",
      "ring": "24 5.7% 82.9%",
      "chart-1": "220 70% 50%",
      "chart-2": "160 60% 45%",
      "chart-3": "30 80% 55%",
      "chart-4": "280 65% 60%",
      "chart-5": "340 75% 55%"
    }
  },
  "cssVarsV4": {
    "light": {
      "background": "oklch(1 0 0)",
      "foreground": "oklch(0.147 0.004 49.25)",
      "card": "oklch(1 0 0)",
      "card-foreground": "oklch(0.147 0.004 49.25)",
      "popover": "oklch(1 0 0)",
      "popover-foreground": "oklch(0.147 0.004 49.25)",
      "primary": "oklch(0.216 0.006 56.043)",
      "primary-foreground": "oklch(0.985 0.001 106.423)",
      "secondary": "oklch(0.97 0.001 106.424)",
      "secondary-foreground": "oklch(0.216 0.006 56.043)",
      "muted": "oklch(0.97 0.001 106.424)",
      "muted-foreground": "oklch(0.553 0.013 58.071)",
      "accent": "oklch(0.97 0.001 106.424)",
      "accent-foreground": "oklch(0.216 0.006 56.043)",
      "destructive": "oklch(0.577 0.245 27.325)",
      "destructive-foreground": "oklch(0.577 0.245 27.325)",
      "border": "oklch(0.923 0.003 48.717)",
      "input": "oklch(0.923 0.003 48.717)",
      "ring": "oklch(0.709 0.01 56.259)",
      "chart-1": "oklch(0.646 0.222 41.116)",
      "chart-2": "oklch(0.6 0.118 184.704)",
      "chart-3": "oklch(0.398 0.07 227.392)",
      "chart-4": "oklch(0.828 0.189 84.429)",
      "chart-5": "oklch(0.769 0.188 70.08)",
      "radius": "0.625rem",
      "sidebar": "oklch(0.985 0.001 106.423)",
      "sidebar-foreground": "oklch(0.147 0.004 49.25)",
      "sidebar-primary": "oklch(0.216 0.006 56.043)",
      "sidebar-primary-foreground": "oklch(0.985 0.001 106.423)",
      "sidebar-accent": "oklch(0.97 0.001 106.424)",
      "sidebar-accent-foreground": "oklch(0.216 0.006 56.043)",
      "sidebar-border": "oklch(0.923 0.003 48.717)",
      "sidebar-ring": "oklch(0.709 0.01 56.259)"
    },
    "dark": {
      "background": "oklch(0.147 0.004 49.25)",
      "foreground": "oklch(0.985 0.001 106.423)",
      "card": "oklch(0.147 0.004 49.25)",
      "card-foreground": "oklch(0.985 0.001 106.423)",
      "popover": "oklch(0.147 0.004 49.25)",
      "popover-foreground": "oklch(0.985 0.001 106.423)",
      "primary": "oklch(0.985 0.001 106.423)",
      "primary-foreground": "oklch(0.216 0.006 56.043)",
      "secondary": "oklch(0.268 0.007 34.298)",
      "secondary-foreground": "oklch(0.985 0.001 106.423)",
      "muted": "oklch(0.268 0.007 34.298)",
      "muted-foreground": "oklch(0.709 0.01 56.259)",
      "accent": "oklch(0.268 0.007 34.298)",
      "accent-foreground": "oklch(0.985 0.001 106.423)",
      "destructive": "oklch(0.396 0.141 25.723)",
      "destructive-foreground": "oklch(0.637 0.237 25.331)",
      "border": "oklch(0.268 0.007 34.298)",
      "input": "oklch(0.268 0.007 34.298)",
      "ring": "oklch(0.553 0.013 58.071)",
      "chart-1": "oklch(0.488 0.243 264.376)",
      "chart-2": "oklch(0.696 0.17 162.48)",
      "chart-3": "oklch(0.769 0.188 70.08)",
      "chart-4": "oklch(0.627 0.265 303.9)",
      "chart-5": "oklch(0.645 0.246 16.439)",
      "sidebar": "oklch(0.216 0.006 56.043)",
      "sidebar-foreground": "oklch(0.985 0.001 106.423)",
      "sidebar-primary": "oklch(0.488 0.243 264.376)",
      "sidebar-primary-foreground": "oklch(0.985 0.001 106.423)",
      "sidebar-accent": "oklch(0.268 0.007 34.298)",
      "sidebar-accent-foreground": "oklch(0.985 0.001 106.423)",
      "sidebar-border": "oklch(0.268 0.007 34.298)",
      "sidebar-ring": "oklch(0.553 0.013 58.071)"
    }
  },
  "inlineColorsTemplate": "@tailwind base;\n@tailwind components;\n@tailwind utilities;\n  ",
  "cssVarsTemplate": "@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n@layer base {\n  :root {\n    --background: 0 0% 100%;\n    --foreground: 20 14.3% 4.1%;\n    --card: 0 0% 100%;\n    --card-foreground: 20 14.3% 4.1%;\n    --popover: 0 0% 100%;\n    --popover-foreground: 20 14.3% 4.1%;\n    --primary: 24 9.8% 10%;\n    --primary-foreground: 60 9.1% 97.8%;\n    --secondary: 60 4.8% 95.9%;\n    --secondary-foreground: 24 9.8% 10%;\n    --muted: 60 4.8% 95.9%;\n    --muted-foreground: 25 5.3% 44.7%;\n    --accent: 60 4.8% 95.9%;\n    --accent-foreground: 24 9.8% 10%;\n    --destructive: 0 84.2% 60.2%;\n    --destructive-foreground: 60 9.1% 97.8%;\n    --border: 20 5.9% 90%;\n    --input: 20 5.9% 90%;\n    --ring: 20 14.3% 4.1%;\n    --radius: 0.5rem;\n    --chart-1: 12 76% 61%;\n    --chart-2: 173 58% 39%;\n    --chart-3: 197 37% 24%;\n    --chart-4: 43 74% 66%;\n    --chart-5: 27 87% 67%;\n  }\n\n  .dark {\n    --background: 20 14.3% 4.1%;\n    --foreground: 60 9.1% 97.8%;\n    --card: 20 14.3% 4.1%;\n    --card-foreground: 60 9.1% 97.8%;\n    --popover: 20 14.3% 4.1%;\n    --popover-foreground: 60 9.1% 97.8%;\n    --primary: 60 9.1% 97.8%;\n    --primary-foreground: 24 9.8% 10%;\n    --secondary: 12 6.5% 15.1%;\n    --secondary-foreground: 60 9.1% 97.8%;\n    --muted: 12 6.5% 15.1%;\n    --muted-foreground: 24 5.4% 63.9%;\n    --accent: 12 6.5% 15.1%;\n    --accent-foreground: 60 9.1% 97.8%;\n    --destructive: 0 62.8% 30.6%;\n    --destructive-foreground: 60 9.1% 97.8%;\n    --border: 12 6.5% 15.1%;\n    --input: 12 6.5% 15.1%;\n    --ring: 24 5.7% 82.9%;\n    --chart-1: 220 70% 50%;\n    --chart-2: 160 60% 45%;\n    --chart-3: 30 80% 55%;\n    --chart-4: 280 65% 60%;\n    --chart-5: 340 75% 55%;\n  }\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n  body {\n    @apply bg-background text-foreground;\n  }\n}"
}
</file>

<file path="public/r/colors/zinc.json">
{
  "inlineColors": {
    "light": {
      "background": "white",
      "foreground": "zinc-950",
      "card": "white",
      "card-foreground": "zinc-950",
      "popover": "white",
      "popover-foreground": "zinc-950",
      "primary": "zinc-900",
      "primary-foreground": "zinc-50",
      "secondary": "zinc-100",
      "secondary-foreground": "zinc-900",
      "muted": "zinc-100",
      "muted-foreground": "zinc-500",
      "accent": "zinc-100",
      "accent-foreground": "zinc-900",
      "destructive": "red-500",
      "destructive-foreground": "zinc-50",
      "border": "zinc-200",
      "input": "zinc-200",
      "ring": "zinc-950"
    },
    "dark": {
      "background": "zinc-950",
      "foreground": "zinc-50",
      "card": "zinc-950",
      "card-foreground": "zinc-50",
      "popover": "zinc-950",
      "popover-foreground": "zinc-50",
      "primary": "zinc-50",
      "primary-foreground": "zinc-900",
      "secondary": "zinc-800",
      "secondary-foreground": "zinc-50",
      "muted": "zinc-800",
      "muted-foreground": "zinc-400",
      "accent": "zinc-800",
      "accent-foreground": "zinc-50",
      "destructive": "red-900",
      "destructive-foreground": "zinc-50",
      "border": "zinc-800",
      "input": "zinc-800",
      "ring": "zinc-300"
    }
  },
  "cssVars": {
    "light": {
      "background": "0 0% 100%",
      "foreground": "240 10% 3.9%",
      "card": "0 0% 100%",
      "card-foreground": "240 10% 3.9%",
      "popover": "0 0% 100%",
      "popover-foreground": "240 10% 3.9%",
      "primary": "240 5.9% 10%",
      "primary-foreground": "0 0% 98%",
      "secondary": "240 4.8% 95.9%",
      "secondary-foreground": "240 5.9% 10%",
      "muted": "240 4.8% 95.9%",
      "muted-foreground": "240 3.8% 46.1%",
      "accent": "240 4.8% 95.9%",
      "accent-foreground": "240 5.9% 10%",
      "destructive": "0 84.2% 60.2%",
      "destructive-foreground": "0 0% 98%",
      "border": "240 5.9% 90%",
      "input": "240 5.9% 90%",
      "ring": "240 10% 3.9%",
      "chart-1": "12 76% 61%",
      "chart-2": "173 58% 39%",
      "chart-3": "197 37% 24%",
      "chart-4": "43 74% 66%",
      "chart-5": "27 87% 67%"
    },
    "dark": {
      "background": "240 10% 3.9%",
      "foreground": "0 0% 98%",
      "card": "240 10% 3.9%",
      "card-foreground": "0 0% 98%",
      "popover": "240 10% 3.9%",
      "popover-foreground": "0 0% 98%",
      "primary": "0 0% 98%",
      "primary-foreground": "240 5.9% 10%",
      "secondary": "240 3.7% 15.9%",
      "secondary-foreground": "0 0% 98%",
      "muted": "240 3.7% 15.9%",
      "muted-foreground": "240 5% 64.9%",
      "accent": "240 3.7% 15.9%",
      "accent-foreground": "0 0% 98%",
      "destructive": "0 62.8% 30.6%",
      "destructive-foreground": "0 0% 98%",
      "border": "240 3.7% 15.9%",
      "input": "240 3.7% 15.9%",
      "ring": "240 4.9% 83.9%",
      "chart-1": "220 70% 50%",
      "chart-2": "160 60% 45%",
      "chart-3": "30 80% 55%",
      "chart-4": "280 65% 60%",
      "chart-5": "340 75% 55%"
    }
  },
  "cssVarsV4": {
    "light": {
      "background": "oklch(1 0 0)",
      "foreground": "oklch(0.141 0.005 285.823)",
      "card": "oklch(1 0 0)",
      "card-foreground": "oklch(0.141 0.005 285.823)",
      "popover": "oklch(1 0 0)",
      "popover-foreground": "oklch(0.141 0.005 285.823)",
      "primary": "oklch(0.21 0.006 285.885)",
      "primary-foreground": "oklch(0.985 0 0)",
      "secondary": "oklch(0.967 0.001 286.375)",
      "secondary-foreground": "oklch(0.21 0.006 285.885)",
      "muted": "oklch(0.967 0.001 286.375)",
      "muted-foreground": "oklch(0.552 0.016 285.938)",
      "accent": "oklch(0.967 0.001 286.375)",
      "accent-foreground": "oklch(0.21 0.006 285.885)",
      "destructive": "oklch(0.577 0.245 27.325)",
      "destructive-foreground": "oklch(0.577 0.245 27.325)",
      "border": "oklch(0.92 0.004 286.32)",
      "input": "oklch(0.92 0.004 286.32)",
      "ring": "oklch(0.705 0.015 286.067)",
      "chart-1": "oklch(0.646 0.222 41.116)",
      "chart-2": "oklch(0.6 0.118 184.704)",
      "chart-3": "oklch(0.398 0.07 227.392)",
      "chart-4": "oklch(0.828 0.189 84.429)",
      "chart-5": "oklch(0.769 0.188 70.08)",
      "radius": "0.625rem",
      "sidebar": "oklch(0.985 0 0)",
      "sidebar-foreground": "oklch(0.141 0.005 285.823)",
      "sidebar-primary": "oklch(0.21 0.006 285.885)",
      "sidebar-primary-foreground": "oklch(0.985 0 0)",
      "sidebar-accent": "oklch(0.967 0.001 286.375)",
      "sidebar-accent-foreground": "oklch(0.21 0.006 285.885)",
      "sidebar-border": "oklch(0.92 0.004 286.32)",
      "sidebar-ring": "oklch(0.705 0.015 286.067)"
    },
    "dark": {
      "background": "oklch(0.141 0.005 285.823)",
      "foreground": "oklch(0.985 0 0)",
      "card": "oklch(0.141 0.005 285.823)",
      "card-foreground": "oklch(0.985 0 0)",
      "popover": "oklch(0.141 0.005 285.823)",
      "popover-foreground": "oklch(0.985 0 0)",
      "primary": "oklch(0.985 0 0)",
      "primary-foreground": "oklch(0.21 0.006 285.885)",
      "secondary": "oklch(0.274 0.006 286.033)",
      "secondary-foreground": "oklch(0.985 0 0)",
      "muted": "oklch(0.274 0.006 286.033)",
      "muted-foreground": "oklch(0.705 0.015 286.067)",
      "accent": "oklch(0.274 0.006 286.033)",
      "accent-foreground": "oklch(0.985 0 0)",
      "destructive": "oklch(0.396 0.141 25.723)",
      "destructive-foreground": "oklch(0.637 0.237 25.331)",
      "border": "oklch(0.274 0.006 286.033)",
      "input": "oklch(0.274 0.006 286.033)",
      "ring": "oklch(0.442 0.017 285.786)",
      "chart-1": "oklch(0.488 0.243 264.376)",
      "chart-2": "oklch(0.696 0.17 162.48)",
      "chart-3": "oklch(0.769 0.188 70.08)",
      "chart-4": "oklch(0.627 0.265 303.9)",
      "chart-5": "oklch(0.645 0.246 16.439)",
      "sidebar": "oklch(0.21 0.006 285.885)",
      "sidebar-foreground": "oklch(0.985 0 0)",
      "sidebar-primary": "oklch(0.488 0.243 264.376)",
      "sidebar-primary-foreground": "oklch(0.985 0 0)",
      "sidebar-accent": "oklch(0.274 0.006 286.033)",
      "sidebar-accent-foreground": "oklch(0.985 0 0)",
      "sidebar-border": "oklch(0.274 0.006 286.033)",
      "sidebar-ring": "oklch(0.442 0.017 285.786)"
    }
  },
  "inlineColorsTemplate": "@tailwind base;\n@tailwind components;\n@tailwind utilities;\n  ",
  "cssVarsTemplate": "@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n@layer base {\n  :root {\n    --background: 0 0% 100%;\n    --foreground: 240 10% 3.9%;\n    --card: 0 0% 100%;\n    --card-foreground: 240 10% 3.9%;\n    --popover: 0 0% 100%;\n    --popover-foreground: 240 10% 3.9%;\n    --primary: 240 5.9% 10%;\n    --primary-foreground: 0 0% 98%;\n    --secondary: 240 4.8% 95.9%;\n    --secondary-foreground: 240 5.9% 10%;\n    --muted: 240 4.8% 95.9%;\n    --muted-foreground: 240 3.8% 46.1%;\n    --accent: 240 4.8% 95.9%;\n    --accent-foreground: 240 5.9% 10%;\n    --destructive: 0 84.2% 60.2%;\n    --destructive-foreground: 0 0% 98%;\n    --border: 240 5.9% 90%;\n    --input: 240 5.9% 90%;\n    --ring: 240 10% 3.9%;\n    --radius: 0.5rem;\n    --chart-1: 12 76% 61%;\n    --chart-2: 173 58% 39%;\n    --chart-3: 197 37% 24%;\n    --chart-4: 43 74% 66%;\n    --chart-5: 27 87% 67%;\n  }\n\n  .dark {\n    --background: 240 10% 3.9%;\n    --foreground: 0 0% 98%;\n    --card: 240 10% 3.9%;\n    --card-foreground: 0 0% 98%;\n    --popover: 240 10% 3.9%;\n    --popover-foreground: 0 0% 98%;\n    --primary: 0 0% 98%;\n    --primary-foreground: 240 5.9% 10%;\n    --secondary: 240 3.7% 15.9%;\n    --secondary-foreground: 0 0% 98%;\n    --muted: 240 3.7% 15.9%;\n    --muted-foreground: 240 5% 64.9%;\n    --accent: 240 3.7% 15.9%;\n    --accent-foreground: 0 0% 98%;\n    --destructive: 0 62.8% 30.6%;\n    --destructive-foreground: 0 0% 98%;\n    --border: 240 3.7% 15.9%;\n    --input: 240 3.7% 15.9%;\n    --ring: 240 4.9% 83.9%;\n    --chart-1: 220 70% 50%;\n    --chart-2: 160 60% 45%;\n    --chart-3: 30 80% 55%;\n    --chart-4: 280 65% 60%;\n    --chart-5: 340 75% 55%;\n  }\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n  body {\n    @apply bg-background text-foreground;\n  }\n}"
}
</file>

<file path="public/r/icons/index.json">
{
  "AlertCircle": {
    "lucide": "AlertCircle",
    "radix": "ExclamationTriangleIcon"
  },
  "ArrowLeft": {
    "lucide": "ArrowLeft",
    "radix": "ArrowLeftIcon"
  },
  "ArrowRight": {
    "lucide": "ArrowRight",
    "radix": "ArrowRightIcon"
  },
  "ArrowUpDown": {
    "lucide": "ArrowUpDown",
    "radix": "CaretSortIcon"
  },
  "BellRing": {
    "lucide": "BellRing",
    "radix": "BellIcon"
  },
  "Bold": {
    "lucide": "Bold",
    "radix": "FontBoldIcon"
  },
  "Calculator": {
    "lucide": "Calculator",
    "radix": "ComponentPlaceholderIcon"
  },
  "Calendar": {
    "lucide": "Calendar",
    "radix": "CalendarIcon"
  },
  "Check": {
    "lucide": "Check",
    "radix": "CheckIcon"
  },
  "ChevronDown": {
    "lucide": "ChevronDown",
    "radix": "ChevronDownIcon"
  },
  "ChevronLeft": {
    "lucide": "ChevronLeft",
    "radix": "ChevronLeftIcon"
  },
  "ChevronRight": {
    "lucide": "ChevronRight",
    "radix": "ChevronRightIcon"
  },
  "ChevronUp": {
    "lucide": "ChevronUp",
    "radix": "ChevronUpIcon"
  },
  "ChevronsUpDown": {
    "lucide": "ChevronsUpDown",
    "radix": "CaretSortIcon"
  },
  "Circle": {
    "lucide": "Circle",
    "radix": "DotFilledIcon"
  },
  "Copy": {
    "lucide": "Copy",
    "radix": "CopyIcon"
  },
  "CreditCard": {
    "lucide": "CreditCard",
    "radix": "ComponentPlaceholderIcon"
  },
  "GripVertical": {
    "lucide": "GripVertical",
    "radix": "DragHandleDots2Icon"
  },
  "Italic": {
    "lucide": "Italic",
    "radix": "FontItalicIcon"
  },
  "Loader2": {
    "lucide": "Loader2",
    "radix": "ReloadIcon"
  },
  "Mail": {
    "lucide": "Mail",
    "radix": "EnvelopeClosedIcon"
  },
  "MailOpen": {
    "lucide": "MailOpen",
    "radix": "EnvelopeOpenIcon"
  },
  "Minus": {
    "lucide": "Minus",
    "radix": "MinusIcon"
  },
  "Moon": {
    "lucide": "Moon",
    "radix": "MoonIcon"
  },
  "MoreHorizontal": {
    "lucide": "MoreHorizontal",
    "radix": "DotsHorizontalIcon"
  },
  "PanelLeft": {
    "lucide": "PanelLeft",
    "radix": "ViewVerticalIcon"
  },
  "Plus": {
    "lucide": "Plus",
    "radix": "PlusIcon"
  },
  "Search": {
    "lucide": "Search",
    "radix": "MagnifyingGlassIcon"
  },
  "Send": {
    "lucide": "Send",
    "radix": "PaperPlaneIcon"
  },
  "Settings": {
    "lucide": "Settings",
    "radix": "GearIcon"
  },
  "Slash": {
    "lucide": "Slash",
    "radix": "SlashIcon"
  },
  "Smile": {
    "lucide": "Smile",
    "radix": "FaceIcon"
  },
  "Sun": {
    "lucide": "Sun",
    "radix": "SunIcon"
  },
  "Terminal": {
    "lucide": "Terminal",
    "radix": "RocketIcon"
  },
  "Underline": {
    "lucide": "Underline",
    "radix": "UnderlineIcon"
  },
  "User": {
    "lucide": "User",
    "radix": "PersonIcon"
  },
  "X": {
    "lucide": "X",
    "radix": "Cross2Icon"
  }
}
</file>

<file path="public/r/styles/default/accordion.json">
{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "accordion",
  "type": "registry:ui",
  "author": "shadcn (https://ui.shadcn.com)",
  "dependencies": [
    "@radix-ui/react-accordion"
  ],
  "files": [
    {
      "path": "ui/accordion.tsx",
      "content": "\"use client\";\n\nimport * as React from \"react\";\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\";\nimport { ChevronDownIcon } from \"@radix-ui/react-icons\";\n\nimport { cn } from \"@/lib/utils\";\n\nconst Accordion = AccordionPrimitive.Root;\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n));\nAccordionItem.displayName = \"AccordionItem\";\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 text-sm font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className,\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDownIcon className=\"size-4 shrink-0 text-muted-foreground transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n));\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName;\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n));\nAccordionContent.displayName = AccordionPrimitive.Content.displayName;\n\nexport { Accordion, AccordionContent, AccordionItem, AccordionTrigger };\n",
      "type": "registry:ui",
      "target": ""
    }
  ],
  "tailwind": {
    "config": {
      "theme": {
        "extend": {
          "keyframes": {
            "accordion-down": {
              "from": {
                "height": "0"
              },
              "to": {
                "height": "var(--radix-accordion-content-height)"
              }
            },
            "accordion-up": {
              "from": {
                "height": "var(--radix-accordion-content-height)"
              },
              "to": {
                "height": "0"
              }
            }
          },
          "animation": {
            "accordion-down": "accordion-down 0.2s ease-out",
            "accordion-up": "accordion-up 0.2s ease-out"
          }
        }
      }
    }
  }
}
</file>

<file path="public/r/styles/default/alert.json">
{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "alert",
  "type": "registry:ui",
  "author": "shadcn (https://ui.shadcn.com)",
  "files": [
    {
      "path": "ui/alert.tsx",
      "content": "import * as React from \"react\";\nimport { cva, type VariantProps } from \"class-variance-authority\";\n\nimport { cn } from \"@/lib/utils\";\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border px-4 py-3 text-sm [&:has(svg)]:pl-11 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  },\n);\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n));\nAlert.displayName = \"Alert\";\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n));\nAlertTitle.displayName = \"AlertTitle\";\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n));\nAlertDescription.displayName = \"AlertDescription\";\n\nexport { Alert, AlertTitle, AlertDescription };\n",
      "type": "registry:ui",
      "target": ""
    }
  ]
}
</file>

<file path="public/r/styles/default/avatar.json">
{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "avatar",
  "type": "registry:ui",
  "author": "shadcn (https://ui.shadcn.com)",
  "dependencies": [
    "@radix-ui/react-avatar"
  ],
  "files": [
    {
      "path": "ui/avatar.tsx",
      "content": "\"use client\";\n\nimport * as React from \"react\";\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\";\n\nimport { cn } from \"@/lib/utils\";\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex size-10 shrink-0 overflow-hidden rounded-full\",\n      className,\n    )}\n    {...props}\n  />\n));\nAvatar.displayName = AvatarPrimitive.Root.displayName;\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square size-full\", className)}\n    {...props}\n  />\n));\nAvatarImage.displayName = AvatarPrimitive.Image.displayName;\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex size-full items-center justify-center rounded-full bg-muted\",\n      className,\n    )}\n    {...props}\n  />\n));\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName;\n\nexport { Avatar, AvatarImage, AvatarFallback };\n",
      "type": "registry:ui",
      "target": ""
    }
  ]
}
</file>

<file path="public/r/styles/default/badge.json">
{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "badge",
  "type": "registry:ui",
  "author": "shadcn (https://ui.shadcn.com)",
  "dependencies": [
    "@radix-ui/react-slot"
  ],
  "files": [
    {
      "path": "ui/badge.tsx",
      "content": "import * as React from \"react\";\nimport { cva, type VariantProps } from \"class-variance-authority\";\n\nimport { cn } from \"@/lib/utils\";\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-md border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground shadow hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground shadow hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  },\n);\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  );\n}\n\nexport { Badge, badgeVariants };\n",
      "type": "registry:ui",
      "target": ""
    }
  ]
}
</file>

<file path="public/r/styles/default/border-beam.json">
{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "border-beam",
  "type": "registry:ui",
  "author": "shadcn (https://ui.shadcn.com)",
  "dependencies": [
    "@radix-ui/react-slot"
  ],
  "files": [
    {
      "path": "ui/border-beam.tsx",
      "content": "import { cn } from \"@/lib/utils\";\n\ninterface BorderBeamProps {\n  className?: string;\n  size?: number;\n  duration?: number;\n  borderWidth?: number;\n  anchor?: number;\n  colorFrom?: string;\n  colorTo?: string;\n  delay?: number;\n}\n\nexport const BorderBeam = ({\n  className,\n  size = 200,\n  duration = 15,\n  anchor = 90,\n  borderWidth = 1.5,\n  colorFrom = \"#ffaa40\",\n  colorTo = \"#9c40ff\",\n  delay = 0,\n}: BorderBeamProps) => {\n  return (\n    <div\n      style={\n        {\n          \"--size\": size,\n          \"--duration\": duration,\n          \"--anchor\": anchor,\n          \"--border-width\": borderWidth,\n          \"--color-from\": colorFrom,\n          \"--color-to\": colorTo,\n          \"--delay\": `-${delay}s`,\n        } as React.CSSProperties\n      }\n      className={cn(\n        \"pointer-events-none absolute inset-0 rounded-[inherit] [border:calc(var(--border-width)*1px)_solid_transparent]\",\n\n        // mask styles\n        \"![mask-clip:padding-box,border-box] ![mask-composite:intersect] [mask:linear-gradient(transparent,transparent),linear-gradient(white,white)]\",\n\n        // pseudo styles\n        \"after:absolute after:aspect-square after:w-[calc(var(--size)*1px)] after:animate-border-beam after:[animation-delay:var(--delay)] after:[background:linear-gradient(to_left,var(--color-from),var(--color-to),transparent)] after:[offset-anchor:calc(var(--anchor)*1%)_50%] after:[offset-path:rect(0_auto_auto_0_round_calc(var(--size)*1px))]\",\n        className,\n      )}\n    />\n  );\n};\n",
      "type": "registry:ui",
      "target": ""
    }
  ]
}
</file>

<file path="public/r/styles/default/button.json">
{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "button",
  "type": "registry:ui",
  "author": "shadcn (https://ui.shadcn.com)",
  "dependencies": [
    "@radix-ui/react-slot"
  ],
  "files": [
    {
      "path": "ui/button.tsx",
      "content": "import * as React from \"react\";\nimport { Slot } from \"@radix-ui/react-slot\";\nimport { cva, type VariantProps } from \"class-variance-authority\";\n\nimport { cn } from \"@/lib/utils\";\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"bg-primary text-primary-foreground shadow hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground shadow-sm hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background shadow-sm hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground shadow-sm hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-9 px-4 py-2\",\n        sm: \"h-8 rounded-md px-3 text-xs\",\n        lg: \"h-10 rounded-md px-8\",\n        icon: \"h-9 w-9\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  },\n);\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean;\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\";\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    );\n  },\n);\nButton.displayName = \"Button\";\n\nexport { Button, buttonVariants };\n",
      "type": "registry:ui",
      "target": ""
    }
  ]
}
</file>

<file path="public/r/styles/default/calendar.json">
{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "calendar",
  "type": "registry:ui",
  "author": "shadcn (https://ui.shadcn.com)",
  "dependencies": [
    "react-day-picker@8.10.1",
    "date-fns"
  ],
  "registryDependencies": [
    "button"
  ],
  "files": [
    {
      "path": "ui/calendar.tsx",
      "content": "\"use client\";\n\nimport * as React from \"react\";\nimport { DayPicker } from \"react-day-picker\";\n\nimport { cn } from \"@/lib/utils\";\nimport { buttonVariants } from \"@/components/ui/button\";\nimport { ChevronLeftIcon, ChevronRightIcon } from \"@radix-ui/react-icons\";\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>;\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\",\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-8 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: cn(\n          \"relative p-0 text-center text-sm focus-within:relative focus-within:z-20 [&:has([aria-selected])]:bg-accent [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected].day-range-end)]:rounded-r-md\",\n          props.mode === \"range\"\n            ? \"[&:has(>.day-range-end)]:rounded-r-md [&:has(>.day-range-start)]:rounded-l-md first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md\"\n            : \"[&:has([aria-selected])]:rounded-md\",\n        ),\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-8 w-8 p-0 font-normal aria-selected:opacity-100\",\n        ),\n        day_range_start: \"day-range-start\",\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeftIcon className={cn(\"h-4 w-4\")} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRightIcon className={cn(\"h-4 w-4\", className)} />\n        ),\n      }}\n      {...props}\n    />\n  );\n}\nCalendar.displayName = \"Calendar\";\n\nexport { Calendar };\n",
      "type": "registry:ui",
      "target": ""
    }
  ]
}
</file>

<file path="public/r/styles/default/card-01.json">
{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "card-01",
  "type": "registry:block",
  "author": "shadcn (https://ui.shadcn.com)",
  "description": "Ideal for product designers.",
  "registryDependencies": [
    "nav",
    "lang-switch",
    "photos"
  ],
  "files": [
    {
      "path": "blocks/card-01/page.tsx",
      "content": "import { cn } from \"@/lib/utils\";\nimport { PostCard } from \"./components/post-card\";\n\nexport default function Page() {\n  return (\n    <>\n      <div className=\"max-w-screen  bg-backgroud z-50 p-4  2xl:overflow-visible\">\n        <div className=\"3xl:gap-36 4xl:gap-40 xl:gap-18 3xl:py-32 4xl:py-36 isolate mx-auto flex w-full max-w-2xl flex-col gap-20 px-4 py-12 md:gap-24 md:px-6 md:py-16 lg:gap-28 lg:px-8 lg:py-20 xl:py-24 2xl:gap-32 2xl:py-28\">\n          <Section>\n            <SectionHeading className=\"lg:text-center\">\n              Posts are the sweet spots between chat and docs\n            </SectionHeading>\n            <PostCard />\n          </Section>\n        </div>\n      </div>\n    </>\n  );\n}\n\nexport function Section({\n  children,\n  className,\n}: {\n  children: React.ReactNode;\n  className?: string;\n}) {\n  return (\n    <section className={cn(\"flex flex-col gap-4\", className)}>\n      {children}\n    </section>\n  );\n}\n\nexport function SectionHeading({\n  children,\n  className,\n}: {\n  children: React.ReactNode;\n  className?: string;\n}) {\n  return (\n    <h3\n      className={cn(\n        \"scroll-mt-20 text-balance text-[clamp(1.5rem,_3vw,_1.8rem)] font-semibold leading-[1.2] -tracking-[0.5px]\",\n        className,\n      )}\n    >\n      {children}\n    </h3>\n  );\n}\n",
      "type": "registry:page",
      "target": "app/page.tsx"
    },
    {
      "path": "blocks/card-01/components/post-card.tsx",
      "content": "import Link from \"next/link\";\nimport Image from \"next/image\";\nimport { cn } from \"@/lib/utils\";\n\ninterface Post {\n  author: string;\n  title: string;\n  description: string;\n  channel: string;\n  comments: number;\n}\n\nexport function PostCard() {\n  return (\n    <div className=\"my-4 flex flex-col gap-6 lg:-mx-4 xl:-mx-6 2xl:-mx-8\">\n      <div className=\"group/posts relative flex items-center justify-center\">\n        <PostItem\n          className=\"group-hover/posts:delay-[150ms] absolute  top-3.5 z-[1] max-w-[calc(100%-1rem)] opacity-50 transition-all delay-100 group-hover/posts:-translate-y-4 group-hover/posts:opacity-0\"\n          post={null}\n        />\n        <PostItem\n          className=\"group-hover/posts:delay-[250ms] absolute left-[1rem] top-5 z-[1] max-w-[calc(100%-2rem)] opacity-50 transition-all delay-100 group-hover/posts:-translate-y-4 group-hover/posts:opacity-0\"\n          post={null}\n        />\n\n        <Link href=\"https://www.behindui.xyz/\" target=\"_blank\">\n          <PostItem\n            className=\"z-[3] bg-primary transition-all group-hover/posts:shadow\"\n            post={{\n              author: \"https://github.com/BroKarim.png\",\n              title: \"Inside Our Work · August 2028\",\n              description:\n                \"Hey chat Appreciate you being here and giving us your thoughts\",\n              channel: \"Read More\",\n              comments: 34,\n            }}\n          />\n        </Link>\n      </div>\n      <div className=\"flex justify-center\">\n        <ClickToSee />\n      </div>\n    </div>\n  );\n}\n\nfunction PostItem({\n  post,\n  className,\n}: {\n  post: Post | null;\n  className?: string;\n}) {\n  return (\n    <div\n      className={cn(\n        \"group relative flex min-h-16 w-full select-none scroll-m-1 gap-3 rounded-xl border-[0.5px] bg-primary/20 px-4 py-3 text-white shadow-[1px_1px_1px_rgba(255,255,255,0.6)]\",\n        \"[--shadow-light:theme(colors.orange.300)]\", // Variabel warna shadow light\n        \"[--dark:theme(colors.orange.700)]\",\n        className,\n      )}\n    >\n      {post && (\n        <>\n          <div className=\"mt-0.5 flex items-start self-start\">\n            <Image\n              alt={post.title}\n              src={post.author}\n              width={80}\n              height={80}\n              className=\"h-10 w-10 rounded-full\"\n            />\n          </div>\n\n          <div className=\"flex flex-1 flex-row items-center gap-3\">\n            <div className=\"flex flex-1 items-center\">\n              <div className=\"flex flex-1 flex-col gap-0.5\">\n                <p className=\"break-anywhere mr-2 line-clamp-1 text-[15px]\">\n                  {post.title}\n                </p>\n\n                <div className=\"flex items-center\">\n                  <span className=\"h-4.5 mr-2 mt-px flex items-center justify-center self-start rounded bg-black/[0.04] px-1.5 text-[10px] font-semibold uppercase  dark:bg-white/10\">\n                    {post.comments}\n                  </span>\n\n                  <p className=\"break-anywhere line-clamp-1 flex-1\">\n                    {post.description}\n                  </p>\n                </div>\n              </div>\n            </div>\n\n            <div className=\"self-center\">\n              <ProjectTag channel={post.channel} />\n            </div>\n          </div>\n        </>\n      )}\n    </div>\n  );\n}\n\nfunction ProjectTag({ channel }: { channel: string }) {\n  return (\n    <span className=\"text-quaternary relative flex h-6 items-center gap-1 rounded-full border-[0.5px] px-2\">\n      <p className=\"flex-none\">{channel}</p>\n    </span>\n  );\n}\n\nfunction ClickToSee() {\n  return (\n    <svg\n      className=\"text-quaternary\"\n      width=\"285\"\n      height=\"33\"\n      viewBox=\"0 0 285 33\"\n      fill=\"none\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n    >\n      <path\n        className=\"opacity-50\"\n        d=\"M185.86 6.57894C184.978 6.48893 184.525 7.01378 183.949 7.24244C183.556 7.40204 183.125 7.55315 182.72 7.5574C181.852 7.56508 181.322 6.53102 181.821 5.85164C182.078 5.51503 182.4 5.19924 182.752 4.96346C184.972 3.48659 187.206 2.0159 189.461 0.571366C189.871 0.30257 190.377 0.134598 190.871 0.0281462C191.621 -0.140368 192.328 0.472433 192.315 1.20839C192.312 1.41526 192.278 1.63363 192.24 1.84201C191.846 3.87576 191.475 5.91185 191.042 7.93711C190.941 8.40921 190.742 8.89583 190.467 9.30779C189.941 10.1002 189.07 10.0402 188.582 9.20766C188.447 8.97298 188.376 8.69145 188.214 8.26141C187.863 8.56486 187.609 8.75228 187.387 8.99586C185.969 10.5357 184.562 12.0718 183.158 13.6178C180.026 17.0495 176.089 19.3001 171.828 21.0327C170.496 21.5691 169.057 21.9408 167.637 22.0879C165.413 22.3212 163.169 22.3792 160.943 22.3618C158.436 22.3365 156.369 21.2311 154.652 19.4799C154.367 19.1875 154.103 18.7958 154.014 18.4066C153.953 18.1212 154.092 17.6576 154.312 17.4717C154.533 17.2858 155.026 17.237 155.294 17.3641C155.737 17.5514 156.126 17.907 156.511 18.2189C158.089 19.4746 159.874 20.0807 161.911 19.9979C164.002 19.906 166.103 19.9932 168.16 19.5029C172.697 18.4088 176.636 16.1921 180.015 13.0444C181.855 11.3334 183.479 9.38456 185.198 7.53656C185.437 7.2753 185.598 6.96322 185.86 6.57894Z\"\n        fill=\"currentColor\"\n      />\n      <path\n        d=\"M0.292969 21.3008C0.292969 21.0534 0.390625 20.8385 0.585938 20.6562C0.794271 20.4609 0.950521 20.3307 1.05469 20.2656C1.17188 20.1875 1.25 20.1289 1.28906 20.0898C1.35417 21.2747 2.15495 21.8672 3.69141 21.8672C4.90234 21.8672 6.3151 21.4896 7.92969 20.7344C9.07552 20.2135 9.84375 19.6797 10.2344 19.1328C10.3646 18.9635 10.4297 18.8268 10.4297 18.7227C10.4297 18.6055 10.4102 18.5143 10.3711 18.4492L2.26562 16.6328C2.03125 16.5807 1.80339 16.4701 1.58203 16.3008C1.17839 16.0143 0.976562 15.7539 0.976562 15.5195C0.976562 14.6211 1.61458 13.8073 2.89062 13.0781C4.29688 12.2839 6.17839 11.6849 8.53516 11.2812C9.06901 11.1901 9.46615 11.138 9.72656 11.125C9.80469 11.151 9.92188 11.1771 10.0781 11.2031C10.2474 11.2161 10.4167 11.2422 10.5859 11.2812C10.9896 11.3724 11.1589 11.5417 11.0938 11.7891C11.0938 12.2318 10.2474 12.5833 8.55469 12.8438C6.36719 13.1693 5 13.4427 4.45312 13.6641C3.91927 13.8854 3.52865 14.1133 3.28125 14.3477C3.04688 14.582 2.92318 14.862 2.91016 15.1875C2.91016 15.2526 3.0599 15.3242 3.35938 15.4023C3.65885 15.4805 4.01693 15.5781 4.43359 15.6953C4.85026 15.7995 5.39062 15.9427 6.05469 16.125C7.66927 16.5677 9.64844 17.1276 11.9922 17.8047C12.1224 18.0911 12.1875 18.3581 12.1875 18.6055C12.1875 19.2956 11.7839 19.9596 10.9766 20.5977C10.0651 21.3138 8.80208 21.9193 7.1875 22.4141C5.84635 22.8177 4.77865 23.0195 3.98438 23.0195C3.32031 23.0195 2.6888 22.9023 2.08984 22.668C1.49089 22.4336 1.04167 22.2057 0.742188 21.9844C0.442708 21.763 0.292969 21.5352 0.292969 21.3008Z\"\n        fill=\"currentColor\"\n      />\n      <path\n        d=\"M17.3633 21.6328C18.5091 21.6328 20.2344 21.112 22.5391 20.0703C22.6823 20.0703 22.7995 20.1224 22.8906 20.2266C22.9818 20.3177 23.0273 20.4284 23.0273 20.5586C22.5065 21.444 21.5104 22.1341 20.0391 22.6289C18.5677 23.1237 17.194 23.2083 15.918 22.8828C14.4727 22.5052 13.5938 21.6914 13.2812 20.4414C13.2552 20.194 13.2422 19.862 13.2422 19.4453C13.2422 19.0286 13.3464 18.4818 13.5547 17.8047C13.776 17.1146 14.1471 16.4635 14.668 15.8516C15.1888 15.2396 15.8008 14.7578 16.5039 14.4062C17.207 14.0547 17.9557 13.8789 18.75 13.8789C19.5052 13.8789 20.3516 14.1393 21.2891 14.6602C21.7318 14.9076 22.0833 15.1875 22.3438 15.5C22.6042 15.8125 22.7344 16.1315 22.7344 16.457C22.7344 16.5482 22.7279 16.6393 22.7148 16.7305C22.6888 17.5247 22.3047 18.026 21.5625 18.2344C21.237 18.3255 20.8594 18.3711 20.4297 18.3711L17.6172 18.2539C16.6797 18.2539 15.9635 18.4557 15.4688 18.8594C15.1823 19.0807 14.9805 19.4128 14.8633 19.8555C15.1888 21.0404 16.0221 21.6328 17.3633 21.6328ZM20.8398 15.5977C20.5534 15.3893 20.2539 15.2396 19.9414 15.1484C19.6289 15.0573 19.3685 15.0117 19.1602 15.0117C18.9518 15.0117 18.6133 15.0833 18.1445 15.2266C17.6758 15.3568 17.2591 15.5065 16.8945 15.6758C15.9961 16.0924 15.5469 16.5286 15.5469 16.9844C16.5885 17.0755 17.3698 17.1211 17.8906 17.1211C19.3359 17.1211 20.3125 16.9974 20.8203 16.75C21.1328 16.6198 21.2891 16.457 21.2891 16.2617C21.2891 16.0273 21.1393 15.806 20.8398 15.5977Z\"\n        fill=\"currentColor\"\n      />\n      <path\n        d=\"M28.1836 21.6328C29.3294 21.6328 31.0547 21.112 33.3594 20.0703C33.5026 20.0703 33.6198 20.1224 33.7109 20.2266C33.8021 20.3177 33.8477 20.4284 33.8477 20.5586C33.3268 21.444 32.3307 22.1341 30.8594 22.6289C29.388 23.1237 28.0143 23.2083 26.7383 22.8828C25.293 22.5052 24.4141 21.6914 24.1016 20.4414C24.0755 20.194 24.0625 19.862 24.0625 19.4453C24.0625 19.0286 24.1667 18.4818 24.375 17.8047C24.5964 17.1146 24.9674 16.4635 25.4883 15.8516C26.0091 15.2396 26.6211 14.7578 27.3242 14.4062C28.0273 14.0547 28.776 13.8789 29.5703 13.8789C30.3255 13.8789 31.1719 14.1393 32.1094 14.6602C32.5521 14.9076 32.9036 15.1875 33.1641 15.5C33.4245 15.8125 33.5547 16.1315 33.5547 16.457C33.5547 16.5482 33.5482 16.6393 33.5352 16.7305C33.5091 17.5247 33.125 18.026 32.3828 18.2344C32.0573 18.3255 31.6797 18.3711 31.25 18.3711L28.4375 18.2539C27.5 18.2539 26.7839 18.4557 26.2891 18.8594C26.0026 19.0807 25.8008 19.4128 25.6836 19.8555C26.0091 21.0404 26.8424 21.6328 28.1836 21.6328ZM31.6602 15.5977C31.3737 15.3893 31.0742 15.2396 30.7617 15.1484C30.4492 15.0573 30.1888 15.0117 29.9805 15.0117C29.7721 15.0117 29.4336 15.0833 28.9648 15.2266C28.4961 15.3568 28.0794 15.5065 27.7148 15.6758C26.8164 16.0924 26.3672 16.5286 26.3672 16.9844C27.4089 17.0755 28.1901 17.1211 28.7109 17.1211C30.1562 17.1211 31.1328 16.9974 31.6406 16.75C31.9531 16.6198 32.1094 16.457 32.1094 16.2617C32.1094 16.0273 31.9596 15.806 31.6602 15.5977Z\"\n        fill=\"currentColor\"\n      />\n      <path\n        d=\"M50.7031 19.7578C49.7266 21.2943 48.4245 22.2448 46.7969 22.6094C46.4193 22.6875 46.0742 22.7266 45.7617 22.7266C45.4622 22.7266 45.2083 22.7266 45 22.7266C44.8047 22.7135 44.5833 22.681 44.3359 22.6289C44.0885 22.5768 43.8607 22.4922 43.6523 22.375C43.1706 22.1016 42.9297 21.7174 42.9297 21.2227C42.8776 20.9883 42.8516 20.7279 42.8516 20.4414C42.8516 20.1419 42.9167 19.7513 43.0469 19.2695C43.1771 18.7878 43.4115 18.2669 43.75 17.707C44.1016 17.1471 44.5247 16.6328 45.0195 16.1641C46.0482 15.1745 47.1615 14.5365 48.3594 14.25C48.7109 14.1719 49.0299 14.1328 49.3164 14.1328C49.6159 14.1328 49.8828 14.1523 50.1172 14.1914C50.8724 14.1914 51.3802 14.7057 51.6406 15.7344C51.8099 16.3854 51.9076 17.2969 51.9336 18.4688C51.9727 19.6276 52.0052 20.526 52.0312 21.1641C52.0703 21.7891 52.1549 22.362 52.2852 22.8828H51.1328C51.0807 22.5312 51.0417 22.2188 51.0156 21.9453C50.9896 21.6719 50.9635 21.418 50.9375 21.1836C50.8724 20.6367 50.7943 20.1615 50.7031 19.7578ZM50.625 16.7305C50.625 15.9753 50.2539 15.5977 49.5117 15.5977C49.4206 15.5846 49.3294 15.5781 49.2383 15.5781C48.2878 15.5781 47.2852 16.0339 46.2305 16.9453C45.7357 17.362 45.3125 17.8307 44.9609 18.3516C44.4401 19.0938 44.1797 19.7578 44.1797 20.3438C44.1797 21.112 44.6224 21.5677 45.5078 21.7109C46.6797 21.6849 47.7995 21.151 48.8672 20.1094C49.3229 19.6536 49.7005 19.1589 50 18.625C50.4167 17.9089 50.625 17.2773 50.625 16.7305Z\"\n        fill=\"currentColor\"\n      />\n      <path\n        d=\"M70.8008 15.8711C70.2539 15.4805 69.5508 15.2852 68.6914 15.2852C67.8841 15.2852 67.1354 15.4349 66.4453 15.7344C65.1432 16.2812 64.2513 16.9844 63.7695 17.8438C63.5612 18.2344 63.457 18.651 63.457 19.0938C63.457 19.1719 63.457 19.3932 63.457 19.7578C63.457 20.1094 63.5221 20.5911 63.6523 21.2031C63.7826 21.8021 63.8477 22.4141 63.8477 23.0391C63.5742 23.0521 63.3529 23.0846 63.1836 23.1367C63.0143 23.1888 62.8711 23.2148 62.7539 23.2148C62.6367 23.2148 62.5326 23.1628 62.4414 23.0586C62.3633 22.9544 62.2721 22.7526 62.168 22.4531C62.1549 22.375 62.1289 22.1536 62.0898 21.7891C62.0508 21.4245 61.9987 20.9818 61.9336 20.4609C61.8815 19.9401 61.8164 19.3737 61.7383 18.7617C61.6732 18.1367 61.6081 17.5247 61.543 16.9258C61.3997 15.6237 61.2891 14.6667 61.2109 14.0547C61.2109 13.7422 61.4388 13.5859 61.8945 13.5859C62.168 13.5859 62.3828 13.7031 62.5391 13.9375C62.6953 14.1589 62.819 14.4193 62.9102 14.7188C63.0013 15.0052 63.0599 15.2917 63.0859 15.5781C63.125 15.8646 63.1576 16.0664 63.1836 16.1836C64.9023 14.6471 67.0378 13.8789 69.5898 13.8789C69.8763 13.8789 70.1758 13.8854 70.4883 13.8984C70.5664 13.8854 70.6641 13.8789 70.7812 13.8789C70.8984 13.8789 71.0156 13.957 71.1328 14.1133C71.276 14.2956 71.3477 14.5169 71.3477 14.7773C71.3477 15.4284 71.1654 15.793 70.8008 15.8711Z\"\n        fill=\"currentColor\"\n      />\n      <path\n        d=\"M76.2305 21.6328C77.3763 21.6328 79.1016 21.112 81.4062 20.0703C81.5495 20.0703 81.6667 20.1224 81.7578 20.2266C81.849 20.3177 81.8945 20.4284 81.8945 20.5586C81.3737 21.444 80.3776 22.1341 78.9062 22.6289C77.4349 23.1237 76.0612 23.2083 74.7852 22.8828C73.3398 22.5052 72.4609 21.6914 72.1484 20.4414C72.1224 20.194 72.1094 19.862 72.1094 19.4453C72.1094 19.0286 72.2135 18.4818 72.4219 17.8047C72.6432 17.1146 73.0143 16.4635 73.5352 15.8516C74.056 15.2396 74.668 14.7578 75.3711 14.4062C76.0742 14.0547 76.8229 13.8789 77.6172 13.8789C78.3724 13.8789 79.2188 14.1393 80.1562 14.6602C80.599 14.9076 80.9505 15.1875 81.2109 15.5C81.4714 15.8125 81.6016 16.1315 81.6016 16.457C81.6016 16.5482 81.5951 16.6393 81.582 16.7305C81.556 17.5247 81.1719 18.026 80.4297 18.2344C80.1042 18.3255 79.7266 18.3711 79.2969 18.3711L76.4844 18.2539C75.5469 18.2539 74.8307 18.4557 74.3359 18.8594C74.0495 19.0807 73.8477 19.4128 73.7305 19.8555C74.056 21.0404 74.8893 21.6328 76.2305 21.6328ZM79.707 15.5977C79.4206 15.3893 79.1211 15.2396 78.8086 15.1484C78.4961 15.0573 78.2357 15.0117 78.0273 15.0117C77.819 15.0117 77.4805 15.0833 77.0117 15.2266C76.543 15.3568 76.1263 15.5065 75.7617 15.6758C74.8633 16.0924 74.4141 16.5286 74.4141 16.9844C75.4557 17.0755 76.237 17.1211 76.7578 17.1211C78.2031 17.1211 79.1797 16.9974 79.6875 16.75C80 16.6198 80.1562 16.457 80.1562 16.2617C80.1562 16.0273 80.0065 15.806 79.707 15.5977Z\"\n        fill=\"currentColor\"\n      />\n      <path\n        d=\"M90.7422 19.7578C89.7656 21.2943 88.4635 22.2448 86.8359 22.6094C86.4583 22.6875 86.1133 22.7266 85.8008 22.7266C85.5013 22.7266 85.2474 22.7266 85.0391 22.7266C84.8438 22.7135 84.6224 22.681 84.375 22.6289C84.1276 22.5768 83.8997 22.4922 83.6914 22.375C83.2096 22.1016 82.9688 21.7174 82.9688 21.2227C82.9167 20.9883 82.8906 20.7279 82.8906 20.4414C82.8906 20.1419 82.9557 19.7513 83.0859 19.2695C83.2161 18.7878 83.4505 18.2669 83.7891 17.707C84.1406 17.1471 84.5638 16.6328 85.0586 16.1641C86.0872 15.1745 87.2005 14.5365 88.3984 14.25C88.75 14.1719 89.069 14.1328 89.3555 14.1328C89.6549 14.1328 89.9219 14.1523 90.1562 14.1914C90.9115 14.1914 91.4193 14.7057 91.6797 15.7344C91.849 16.3854 91.9466 17.2969 91.9727 18.4688C92.0117 19.6276 92.0443 20.526 92.0703 21.1641C92.1094 21.7891 92.194 22.362 92.3242 22.8828H91.1719C91.1198 22.5312 91.0807 22.2188 91.0547 21.9453C91.0286 21.6719 91.0026 21.418 90.9766 21.1836C90.9115 20.6367 90.8333 20.1615 90.7422 19.7578ZM90.6641 16.7305C90.6641 15.9753 90.293 15.5977 89.5508 15.5977C89.4596 15.5846 89.3685 15.5781 89.2773 15.5781C88.3268 15.5781 87.3242 16.0339 86.2695 16.9453C85.7747 17.362 85.3516 17.8307 85 18.3516C84.4792 19.0938 84.2188 19.7578 84.2188 20.3438C84.2188 21.112 84.6615 21.5677 85.5469 21.7109C86.7188 21.6849 87.8385 21.151 88.9062 20.1094C89.362 19.6536 89.7396 19.1589 90.0391 18.625C90.4557 17.9089 90.6641 17.2773 90.6641 16.7305Z\"\n        fill=\"currentColor\"\n      />\n      <path\n        d=\"M93.5938 15.4219C93.5677 14.7188 93.5417 14.0938 93.5156 13.5469C93.4896 12.987 93.4701 12.5768 93.457 12.3164C93.457 12.043 93.3529 11.3854 93.1445 10.3438C93.2617 10.1875 93.3724 10.0378 93.4766 9.89453C93.5938 9.7513 93.7565 9.67969 93.9648 9.67969C94.4206 9.67969 94.7721 11.6003 95.0195 15.4414C95.1497 17.668 95.2148 19.8945 95.2148 22.1211C95.2148 22.7201 94.7982 23.0195 93.9648 23.0195L93.8086 23C93.8086 22.3229 93.7891 21.457 93.75 20.4023C93.7109 19.3477 93.6784 18.4297 93.6523 17.6484C93.6393 16.8672 93.6198 16.125 93.5938 15.4219Z\"\n        fill=\"currentColor\"\n      />\n      <path\n        d=\"M106.27 15.168C108.04 14.556 109.57 14.25 110.859 14.25C112.5 14.25 113.594 14.6797 114.141 15.5391C114.388 15.9427 114.512 16.3789 114.512 16.8477C114.512 17.4987 114.303 18.1693 113.887 18.8594C113.483 19.5495 112.943 20.1745 112.266 20.7344C110.69 22.0234 108.776 22.8242 106.523 23.1367C106.523 23.2799 106.523 23.5078 106.523 23.8203C106.536 24.1458 106.543 24.5039 106.543 24.8945C106.556 25.2852 106.562 25.7018 106.562 26.1445C106.576 26.5872 106.589 27.0104 106.602 27.4141C106.641 28.4167 106.667 28.9896 106.68 29.1328C106.706 29.276 106.719 29.3932 106.719 29.4844C106.719 29.8099 106.615 30.0508 106.406 30.207C106.198 30.3763 105.924 30.4609 105.586 30.4609C105.521 30.4609 105.456 30.4609 105.391 30.4609L105.078 14.7578C105.195 14.5885 105.352 14.5104 105.547 14.5234C105.742 14.5365 105.898 14.5885 106.016 14.6797C106.133 14.7708 106.217 14.9336 106.27 15.168ZM111.973 15.8516C111.543 15.6302 111.081 15.5195 110.586 15.5195C110.104 15.5195 109.622 15.5651 109.141 15.6562C108.047 15.8646 107.24 16.3268 106.719 17.043C106.484 17.3815 106.367 17.7982 106.367 18.293C106.367 18.3451 106.367 18.3971 106.367 18.4492V21.8281C109.049 21.2292 110.951 20.3958 112.07 19.3281C112.721 18.7161 113.047 18.0846 113.047 17.4336C113.047 16.7435 112.689 16.2161 111.973 15.8516Z\"\n        fill=\"currentColor\"\n      />\n      <path\n        d=\"M116.016 19.2891C116.016 17.7526 116.68 16.5156 118.008 15.5781C119.062 14.8359 120.332 14.3867 121.816 14.2305C121.895 14.2305 122.077 14.2305 122.363 14.2305C122.65 14.2305 123.034 14.3151 123.516 14.4844C124.583 14.849 125.312 15.4935 125.703 16.418C125.859 16.7826 125.938 17.0951 125.938 17.3555C125.938 17.6029 125.931 17.7786 125.918 17.8828C125.918 19.5104 125.299 20.793 124.062 21.7305C122.917 22.5898 121.484 23.0195 119.766 23.0195C118.529 23.0195 117.591 22.7331 116.953 22.1602C116.328 21.5872 116.016 20.6302 116.016 19.2891ZM117.363 19.7578C117.363 20.5651 117.578 21.112 118.008 21.3984C118.333 21.6068 118.88 21.7109 119.648 21.7109C120.417 21.7109 121.094 21.6523 121.68 21.5352C122.266 21.418 122.786 21.2161 123.242 20.9297C124.219 20.3047 124.707 19.3346 124.707 18.0195C124.707 17.2383 124.499 16.6003 124.082 16.1055C123.626 15.5716 123.027 15.3047 122.285 15.3047C121.777 15.3958 121.263 15.4935 120.742 15.5977C120.234 15.7018 119.753 15.9036 119.297 16.2031C118.307 16.8411 117.663 18.026 117.363 19.7578Z\"\n        fill=\"currentColor\"\n      />\n      <path\n        d=\"M133.457 17.9609C134.889 17.9609 135.605 18.3255 135.605 19.0547C135.605 19.6016 135.208 20.2396 134.414 20.9688C133.229 22.0495 131.634 22.9154 129.629 23.5664C129.538 23.5664 129.434 23.4753 129.316 23.293C129.212 23.1107 129.128 22.974 129.062 22.8828C129.01 22.7786 128.971 22.7135 128.945 22.6875C130.443 22.1927 131.673 21.5938 132.637 20.8906C133.288 20.4219 133.613 20.0378 133.613 19.7383C133.613 19.4388 133.229 19.2891 132.461 19.2891C131.693 19.2891 130.566 19.4714 129.082 19.8359C128.405 19.8099 127.819 19.569 127.324 19.1133C126.895 18.7096 126.68 18.306 126.68 17.9023C126.68 17.4857 126.797 17.1081 127.031 16.7695C127.266 16.418 127.578 16.0924 127.969 15.793C128.359 15.4935 128.815 15.2201 129.336 14.9727C130.612 14.3607 131.934 14.0547 133.301 14.0547C133.704 14.0547 134.095 14.0938 134.473 14.1719C134.785 14.1719 134.967 14.3086 135.02 14.582C135.072 14.8555 135.098 15.3047 135.098 15.9297C134.329 15.5781 133.464 15.4023 132.5 15.4023C131.302 15.4023 130.312 15.6432 129.531 16.125C128.724 16.5938 128.307 17.2057 128.281 17.9609C128.281 18.3255 128.548 18.5078 129.082 18.5078L130.508 18.3516C131.732 18.0911 132.715 17.9609 133.457 17.9609Z\"\n        fill=\"currentColor\"\n      />\n      <path\n        d=\"M139.766 21.125L139.805 18C139.805 17.5052 139.759 17.082 139.668 16.7305H136.641L136.602 15.3828H139.531V10.3438C139.57 10.2266 139.648 10.1094 139.766 9.99219C139.948 9.8099 140.098 9.71875 140.215 9.71875C140.345 9.71875 140.456 9.73177 140.547 9.75781C140.638 9.78385 140.736 9.875 140.84 10.0312C141.048 10.8906 141.152 12.1862 141.152 13.918C141.152 14.3477 141.172 14.7708 141.211 15.1875C141.628 15.1354 142.044 15.1094 142.461 15.1094C142.461 15.1094 142.799 15.1094 143.477 15.1094C143.724 15.1094 143.952 15.0964 144.16 15.0703L144.102 16.4766L141.25 16.3984L141.348 23.1367C141.113 23.2409 140.911 23.293 140.742 23.293C140.091 23.293 139.766 22.5703 139.766 21.125Z\"\n        fill=\"currentColor\"\n      />\n    </svg>\n  );\n}\n",
      "type": "registry:component",
      "target": ""
    }
  ],
  "categories": [
    "card"
  ]
}
</file>

<file path="public/r/styles/default/card.json">
{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "card",
  "type": "registry:ui",
  "author": "shadcn (https://ui.shadcn.com)",
  "files": [
    {
      "path": "ui/card.tsx",
      "content": "import * as React from \"react\";\n\nimport { cn } from \"@/lib/utils\";\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-xl border bg-card text-card-foreground shadow\",\n      className,\n    )}\n    {...props}\n  />\n));\nCard.displayName = \"Card\";\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n));\nCardHeader.displayName = \"CardHeader\";\n\nconst CardTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h3\n    ref={ref}\n    className={cn(\"font-semibold leading-none tracking-tight\", className)}\n    {...props}\n  />\n));\nCardTitle.displayName = \"CardTitle\";\n\nconst CardDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <p\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n));\nCardDescription.displayName = \"CardDescription\";\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n));\nCardContent.displayName = \"CardContent\";\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\" flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n));\nCardFooter.displayName = \"CardFooter\";\n\nexport {\n  Card,\n  CardHeader,\n  CardFooter,\n  CardTitle,\n  CardDescription,\n  CardContent,\n};\n",
      "type": "registry:ui",
      "target": ""
    }
  ]
}
</file>

<file path="public/r/styles/default/chart.json">
{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "chart",
  "type": "registry:ui",
  "author": "shadcn (https://ui.shadcn.com)",
  "dependencies": [
    "recharts",
    "lucide-react"
  ],
  "registryDependencies": [
    "card"
  ],
  "files": [
    {
      "path": "ui/chart.tsx",
      "content": "\"use client\";\n\nimport * as React from \"react\";\nimport * as RechartsPrimitive from \"recharts\";\n\nimport { cn } from \"@/lib/utils\";\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const;\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode;\n    icon?: React.ComponentType;\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  );\n};\n\ntype ChartContextProps = {\n  config: ChartConfig;\n};\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null);\n\nfunction useChart() {\n  const context = React.useContext(ChartContext);\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\");\n  }\n\n  return context;\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig;\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"];\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId();\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`;\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className,\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  );\n});\nChartContainer.displayName = \"Chart\";\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color,\n  );\n\n  if (!colorConfig.length) {\n    return null;\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color;\n    return color ? `  --color-${key}: ${color};` : null;\n  })\n  .join(\"\\n\")}\n}\n`,\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  );\n};\n\nconst ChartTooltip = RechartsPrimitive.Tooltip;\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean;\n      hideIndicator?: boolean;\n      indicator?: \"line\" | \"dot\" | \"dashed\";\n      nameKey?: string;\n      labelKey?: string;\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref,\n  ) => {\n    const { config } = useChart();\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null;\n      }\n\n      const [item] = payload;\n      const key = `${labelKey || item.dataKey || item.name || \"value\"}`;\n      const itemConfig = getPayloadConfigFromPayload(config, item, key);\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label;\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        );\n      }\n\n      if (!value) {\n        return null;\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>;\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ]);\n\n    if (!active || !payload?.length) {\n      return null;\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\";\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className,\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`;\n            const itemConfig = getPayloadConfigFromPayload(config, item, key);\n            const indicatorColor = color || item.payload.fill || item.color;\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\",\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            },\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\",\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            );\n          })}\n        </div>\n      </div>\n    );\n  },\n);\nChartTooltipContent.displayName = \"ChartTooltip\";\n\nconst ChartLegend = RechartsPrimitive.Legend;\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean;\n      nameKey?: string;\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref,\n  ) => {\n    const { config } = useChart();\n\n    if (!payload?.length) {\n      return null;\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className,\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`;\n          const itemConfig = getPayloadConfigFromPayload(config, item, key);\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\",\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          );\n        })}\n      </div>\n    );\n  },\n);\nChartLegendContent.displayName = \"ChartLegend\";\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string,\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined;\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined;\n\n  let configLabelKey: string = key;\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string;\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string;\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config];\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n};\n",
      "type": "registry:ui",
      "target": ""
    }
  ]
}
</file>

<file path="public/r/styles/default/collapsible.json">
{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "collapsible",
  "type": "registry:ui",
  "author": "shadcn (https://ui.shadcn.com)",
  "dependencies": [
    "@radix-ui/react-collapsible"
  ],
  "files": [
    {
      "path": "ui/collapsible.tsx",
      "content": "\"use client\";\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\";\n\nconst Collapsible = CollapsiblePrimitive.Root;\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger;\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent;\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent };\n",
      "type": "registry:ui",
      "target": ""
    }
  ]
}
</file>

<file path="public/r/styles/default/command.json">
{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "command",
  "type": "registry:ui",
  "author": "shadcn (https://ui.shadcn.com)",
  "dependencies": [
    "cmdk"
  ],
  "registryDependencies": [
    "dialog"
  ],
  "files": [
    {
      "path": "ui/command.tsx",
      "content": "\"use client\";\n\nimport * as React from \"react\";\nimport { type DialogProps } from \"@radix-ui/react-dialog\";\nimport { MagnifyingGlassIcon } from \"@radix-ui/react-icons\";\nimport { Command as CommandPrimitive } from \"cmdk\";\n\nimport { cn } from \"@/lib/utils\";\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\";\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex size-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className,\n    )}\n    {...props}\n  />\n));\nCommand.displayName = CommandPrimitive.displayName;\n\ninterface CommandDialogProps extends DialogProps {}\n\nconst CommandDialog = ({ children, ...props }: CommandDialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:size-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:size-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  );\n};\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <MagnifyingGlassIcon className=\"mr-2 size-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-10 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className,\n      )}\n      {...props}\n    />\n  </div>\n));\n\nCommandInput.displayName = CommandPrimitive.Input.displayName;\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n));\n\nCommandList.displayName = CommandPrimitive.List.displayName;\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n));\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName;\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className,\n    )}\n    {...props}\n  />\n));\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName;\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n));\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName;\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected=true]:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50\",\n      className,\n    )}\n    {...props}\n  />\n));\n\nCommandItem.displayName = CommandPrimitive.Item.displayName;\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className,\n      )}\n      {...props}\n    />\n  );\n};\nCommandShortcut.displayName = \"CommandShortcut\";\n\nexport {\n  Command,\n  CommandDialog,\n  CommandEmpty,\n  CommandGroup,\n  CommandInput,\n  CommandItem,\n  CommandList,\n  CommandSeparator,\n  CommandShortcut,\n};\n",
      "type": "registry:ui",
      "target": ""
    }
  ]
}
</file>

<file path="public/r/styles/default/dialog.json">
{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "dialog",
  "type": "registry:ui",
  "author": "shadcn (https://ui.shadcn.com)",
  "dependencies": [
    "@radix-ui/react-dialog"
  ],
  "files": [
    {
      "path": "ui/dialog.tsx",
      "content": "\"use client\";\n\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\";\nimport { Cross2Icon } from \"@radix-ui/react-icons\";\nimport * as React from \"react\";\n\nimport { cn } from \"@/lib/utils\";\n\nconst Dialog = DialogPrimitive.Root;\n\nconst DialogTrigger = DialogPrimitive.Trigger;\n\nconst DialogPortal = DialogPrimitive.Portal;\n\nconst DialogClose = DialogPrimitive.Close;\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className,\n    )}\n    {...props}\n  />\n));\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName;\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className,\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <Cross2Icon className=\"size-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n));\nDialogContent.displayName = DialogPrimitive.Content.displayName;\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className,\n    )}\n    {...props}\n  />\n);\nDialogHeader.displayName = \"DialogHeader\";\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className,\n    )}\n    {...props}\n  />\n);\nDialogFooter.displayName = \"DialogFooter\";\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className,\n    )}\n    {...props}\n  />\n));\nDialogTitle.displayName = DialogPrimitive.Title.displayName;\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n));\nDialogDescription.displayName = DialogPrimitive.Description.displayName;\n\nexport {\n  Dialog,\n  DialogClose,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogOverlay,\n  DialogPortal,\n  DialogTitle,\n  DialogTrigger,\n};\n",
      "type": "registry:ui",
      "target": ""
    }
  ]
}
</file>

<file path="public/r/styles/default/drawer.json">
{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "drawer",
  "type": "registry:ui",
  "author": "shadcn (https://ui.shadcn.com)",
  "dependencies": [
    "vaul",
    "@radix-ui/react-dialog"
  ],
  "files": [
    {
      "path": "ui/drawer.tsx",
      "content": "\"use client\";\n\nimport * as React from \"react\";\nimport { Drawer as DrawerPrimitive } from \"vaul\";\n\nimport { cn } from \"@/lib/utils\";\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n);\nDrawer.displayName = \"Drawer\";\n\nconst DrawerTrigger = DrawerPrimitive.Trigger;\n\nconst DrawerPortal = DrawerPrimitive.Portal;\n\nconst DrawerClose = DrawerPrimitive.Close;\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n));\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName;\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className,\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n));\nDrawerContent.displayName = \"DrawerContent\";\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n);\nDrawerHeader.displayName = \"DrawerHeader\";\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n);\nDrawerFooter.displayName = \"DrawerFooter\";\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className,\n    )}\n    {...props}\n  />\n));\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName;\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n));\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName;\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n};\n",
      "type": "registry:ui",
      "target": ""
    }
  ]
}
</file>

<file path="public/r/styles/default/dropdown-menu.json">
{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "dropdown-menu",
  "type": "registry:ui",
  "author": "shadcn (https://ui.shadcn.com)",
  "dependencies": [
    "@radix-ui/react-dropdown-menu"
  ],
  "files": [
    {
      "path": "ui/dropdown-menu.tsx",
      "content": "\"use client\";\n\nimport * as React from \"react\";\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\";\nimport {\n  CheckIcon,\n  ChevronRightIcon,\n  DotFilledIcon,\n} from \"@radix-ui/react-icons\";\n\nimport { cn } from \"@/lib/utils\";\n\nconst DropdownMenu = DropdownMenuPrimitive.Root;\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger;\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group;\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal;\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub;\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup;\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean;\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent\",\n      inset && \"pl-8\",\n      className,\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRightIcon className=\"ml-auto size-4\" />\n  </DropdownMenuPrimitive.SubTrigger>\n));\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName;\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-32 overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n      className,\n    )}\n    {...props}\n  />\n));\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName;\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 min-w-32 overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md\",\n        \"data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        className,\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n));\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName;\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean;\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className,\n    )}\n    {...props}\n  />\n));\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName;\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className,\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex size-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <CheckIcon className=\"size-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n));\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName;\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className,\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex size-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <DotFilledIcon className=\"size-4 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n));\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName;\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean;\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className,\n    )}\n    {...props}\n  />\n));\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName;\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n));\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName;\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  );\n};\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\";\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n};\n",
      "type": "registry:ui",
      "target": ""
    }
  ]
}
</file>

<file path="public/r/styles/default/form.json">
{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "form",
  "type": "registry:ui",
  "author": "shadcn (https://ui.shadcn.com)",
  "dependencies": [
    "@radix-ui/react-label",
    "@radix-ui/react-slot",
    "@hookform/resolvers",
    "zod",
    "react-hook-form"
  ],
  "registryDependencies": [
    "button",
    "label"
  ],
  "files": [
    {
      "path": "ui/form.tsx",
      "content": "import * as React from \"react\";\nimport * as LabelPrimitive from \"@radix-ui/react-label\";\nimport { Slot } from \"@radix-ui/react-slot\";\nimport {\n  Controller,\n  ControllerProps,\n  FieldPath,\n  FieldValues,\n  FormProvider,\n  useFormContext,\n} from \"react-hook-form\";\n\nimport { cn } from \"@/lib/utils\";\nimport { Label } from \"@/components/ui/label\";\n\nconst Form = FormProvider;\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,\n> = {\n  name: TName;\n};\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue,\n);\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  );\n};\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext);\n  const itemContext = React.useContext(FormItemContext);\n  const { getFieldState, formState } = useFormContext();\n\n  const fieldState = getFieldState(fieldContext.name, formState);\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\");\n  }\n\n  const { id } = itemContext;\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  };\n};\n\ntype FormItemContextValue = {\n  id: string;\n};\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue,\n);\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId();\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  );\n});\nFormItem.displayName = \"FormItem\";\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField();\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  );\n});\nFormLabel.displayName = \"FormLabel\";\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } =\n    useFormField();\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  );\n});\nFormControl.displayName = \"FormControl\";\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField();\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-[0.8rem] text-muted-foreground\", className)}\n      {...props}\n    />\n  );\n});\nFormDescription.displayName = \"FormDescription\";\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField();\n  const body = error ? String(error?.message) : children;\n\n  if (!body) {\n    return null;\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-[0.8rem] font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  );\n});\nFormMessage.displayName = \"FormMessage\";\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n};\n",
      "type": "registry:ui",
      "target": ""
    }
  ]
}
</file>

<file path="public/r/styles/default/hover-card.json">
{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "hover-card",
  "type": "registry:ui",
  "author": "shadcn (https://ui.shadcn.com)",
  "dependencies": [
    "@radix-ui/react-hover-card"
  ],
  "files": [
    {
      "path": "ui/hover-card.tsx",
      "content": "\"use client\";\n\nimport * as React from \"react\";\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\";\n\nimport { cn } from \"@/lib/utils\";\n\nconst HoverCard = HoverCardPrimitive.Root;\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger;\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n      className,\n    )}\n    {...props}\n  />\n));\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName;\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent };\n",
      "type": "registry:ui",
      "target": ""
    }
  ]
}
</file>

<file path="public/r/styles/default/icon-button.json">
{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "icon-button",
  "type": "registry:ui",
  "author": "shadcn (https://ui.shadcn.com)",
  "dependencies": [
    "@radix-ui/react-icon-button"
  ],
  "files": [
    {
      "path": "ui/icon-button.tsx",
      "content": "import React, { memo } from \"react\";\nimport { cn } from \"@/lib/utils\";\n\ntype IconSize = \"sm\" | \"md\" | \"lg\" | \"xl\" | \"xxl\";\n\ninterface BaseIconButtonProps {\n  size?: IconSize;\n  className?: string;\n  iconClassName?: string;\n  disabledClassName?: string;\n  title?: string;\n  disabled?: boolean;\n  onClick?: (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void;\n}\n\ntype IconButtonWithoutChildrenProps = {\n  icon: string;\n  children?: undefined;\n} & BaseIconButtonProps;\n\ntype IconButtonWithChildrenProps = {\n  icon?: undefined;\n  children: string | JSX.Element | JSX.Element[];\n} & BaseIconButtonProps;\n\ntype IconButtonProps =\n  | IconButtonWithoutChildrenProps\n  | IconButtonWithChildrenProps;\n\nconst IconButton = memo(\n  ({\n    icon,\n    size = \"xl\",\n    className,\n    iconClassName,\n    disabledClassName,\n    disabled = false,\n    title,\n    onClick,\n    children,\n  }: IconButtonProps) => {\n    return (\n      <button\n        className={cn(\n          \"text-bolt-elements-item-contentDefault enabled:hover:text-bolt-elements-item-contentActive enabled:hover:bg-bolt-elements-item-backgroundActive flex items-center rounded-md bg-transparent p-1 disabled:cursor-not-allowed\",\n          { [cn(\"opacity-30\", disabledClassName)]: disabled },\n          className,\n        )}\n        title={title}\n        disabled={disabled}\n        onClick={(event) => {\n          if (disabled) {\n            return;\n          }\n          onClick?.(event);\n        }}\n      >\n        {children ? (\n          children\n        ) : (\n          <div className={cn(icon, getIconSize(size), iconClassName)}></div>\n        )}\n      </button>\n    );\n  },\n);\n\nIconButton.displayName = \"IconButton\";\n\nexport default IconButton;\n\nfunction getIconSize(size: IconSize) {\n  if (size === \"sm\") {\n    return \"text-sm\";\n  } else if (size === \"md\") {\n    return \"text-md\";\n  } else if (size === \"lg\") {\n    return \"text-lg\";\n  } else if (size === \"xl\") {\n    return \"text-xl\";\n  } else {\n    return \"text-2xl\";\n  }\n}\n",
      "type": "registry:ui",
      "target": ""
    }
  ]
}
</file>

<file path="public/r/styles/default/input.json">
{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "input",
  "type": "registry:ui",
  "author": "shadcn (https://ui.shadcn.com)",
  "files": [
    {
      "path": "ui/input.tsx",
      "content": "import * as React from \"react\";\n\nimport { cn } from \"@/lib/utils\";\n\nexport interface InputProps\n  extends React.InputHTMLAttributes<HTMLInputElement> {}\n\nconst Input = React.forwardRef<HTMLInputElement, InputProps>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-9 w-full rounded-md border border-input bg-background px-3 py-1 text-sm shadow-sm transition-colors file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50\",\n          className,\n        )}\n        ref={ref}\n        {...props}\n      />\n    );\n  },\n);\nInput.displayName = \"Input\";\n\nexport { Input };\n",
      "type": "registry:ui",
      "target": ""
    }
  ]
}
</file>

<file path="public/r/styles/default/label.json">
{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "label",
  "type": "registry:ui",
  "author": "shadcn (https://ui.shadcn.com)",
  "dependencies": [
    "@radix-ui/react-label"
  ],
  "files": [
    {
      "path": "ui/label.tsx",
      "content": "\"use client\";\n\nimport * as React from \"react\";\nimport * as LabelPrimitive from \"@radix-ui/react-label\";\nimport { cva, type VariantProps } from \"class-variance-authority\";\n\nimport { cn } from \"@/lib/utils\";\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\",\n);\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n));\nLabel.displayName = LabelPrimitive.Root.displayName;\n\nexport { Label };\n",
      "type": "registry:ui",
      "target": ""
    }
  ]
}
</file>

<file path="public/r/styles/default/navigation-menu.json">
{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "navigation-menu",
  "type": "registry:ui",
  "author": "shadcn (https://ui.shadcn.com)",
  "dependencies": [
    "@radix-ui/react-navigation-menu"
  ],
  "files": [
    {
      "path": "ui/navigation-menu.tsx",
      "content": "import * as React from \"react\";\nimport { ChevronDownIcon } from \"@radix-ui/react-icons\";\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\";\nimport { cva } from \"class-variance-authority\";\n\nimport { cn } from \"@/lib/utils\";\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className,\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n));\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName;\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className,\n    )}\n    {...props}\n  />\n));\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName;\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item;\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-9 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[active]:bg-accent/50 data-[state=open]:bg-accent/50\",\n);\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDownIcon\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-300 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n));\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName;\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className,\n    )}\n    {...props}\n  />\n));\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName;\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link;\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className,\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n));\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName;\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className,\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n));\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName;\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n};\n",
      "type": "registry:ui",
      "target": ""
    }
  ]
}
</file>

<file path="public/r/styles/default/nextint-02.json">
{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "nextint-02",
  "type": "registry:block",
  "author": "shadcn (https://ui.shadcn.com)",
  "description": "A simple sidebar with navigation grouped by section.",
  "registryDependencies": [
    "nav",
    "lang-switch",
    "photos"
  ],
  "files": [
    {
      "path": "blocks/next-int/main.tsx",
      "content": "\"use client\";\n\nimport React from \"react\";\nimport { motion } from \"framer-motion\";\nimport { Icons } from \"@/components/icons\";\nimport { NavigationBar } from \"./components/navbar\";\nimport { Photos } from \"./components/photos\";\nimport LangSwitch from \"./components/lang-switch\";\nconst projects = [\n  {\n    id: 1,\n    media:\n      \"https://images.unsplash.com/photo-1571781418606-70265b9cce90?q=80&w=3087&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D\",\n  },\n  {\n    id: 2,\n    media:\n      \"https://images.unsplash.com/photo-1505576391880-b3f9d713dc4f?q=80&w=1870&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D\",\n  },\n  {\n    id: 3,\n    media:\n      \"https://images.unsplash.com/photo-1557804483-ef3ae78eca57?q=80&w=2688&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D\",\n  },\n  {\n    id: 4,\n    media:\n      \"https://plus.unsplash.com/premium_photo-1684445035564-c98efbe1fb7d?q=80&w=3087&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D\",\n  },\n  {\n    id: 5,\n    media:\n      \"https://images.unsplash.com/photo-1493857671505-72967e2e2760?q=80&w=2940&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D\",\n  },\n  {\n    id: 7,\n    media:\n      \"https://images.unsplash.com/photo-1551038247-3d9af20df552?q=80&w=3087&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D\",\n  },\n];\n\nconst NextInt = () => {\n  const photos = projects.map((project) => project.media);\n  return (\n    <>\n      <div className=\"bg-backgroud z-50 flex h-full flex-col items-center justify-between overflow-hidden px-4 md:h-screen \">\n        <div className=\"flex w-full items-center justify-between p-6 px-10\">\n          <div className=\"flex flex-1 text-lg font-medium text-primary md:text-2xl\">\n            NexInt\n          </div>\n          <div className=\"hidden w-full flex-1 justify-end md:flex md:justify-center\">\n            <NavigationBar.Desktop />\n          </div>\n          <div className=\"flex justify-end gap-3 md:flex-1\">\n            <LangSwitch />\n          </div>\n        </div>\n\n        <div className=\" flex-1  md:mt-10\">\n          <div className=\"container flex-col items-center md:flex md:h-full md:justify-between\">\n            <div className=\"md:translate-y-32\">\n              <div className=\"mb-2 flex w-full items-center justify-center gap-2 text-primary\">\n                <Icons.nextint />\n                Broadway St., 123, New York, NY 10007 USA\n              </div>\n              <h1 className=\"font-heading xs:text-2xl text-pretty text-center text-xl tracking-tighter text-primary  sm:text-3xl  md:max-w-6xl md:text-7xl\">\n                Building visions & creating reality <br />\n                with NextInt\n              </h1>\n            </div>\n            <Photos photos={photos} />\n          </div>\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default NextInt;\n",
      "type": "registry:page",
      "target": "app/main.tsx"
    },
    {
      "path": "blocks/next-int/components/navbar.tsx",
      "content": "import React from \"react\";\nimport { motion, useMotionTemplate, useMotionValue } from \"framer-motion\";\nimport Link from \"next/link\";\nimport { usePathname } from \"next/navigation\";\nimport { cn } from \"@/lib/utils\";\n\nfunction NavItem({\n  href,\n  children,\n}: {\n  href: string;\n  children: React.ReactNode;\n}) {\n  const pathname = usePathname();\n  const isActive = pathname === href;\n\n  return (\n    <li>\n      <Link\n        href=\"/\"\n        className={`relative block whitespace-nowrap px-3 py-2 transition ${isActive ? \"text-lime-600 dark:text-lime-400\" : \"hover:text-lime-600 dark:hover:text-lime-400\"}`}\n      >\n        {children}\n        {isActive && (\n          <motion.span\n            className=\"absolute inset-x-1 -bottom-px h-px bg-gradient-to-r from-lime-700/0 via-lime-700/70 to-lime-700/0 dark:from-lime-400/0 dark:via-lime-400/40 dark:to-lime-400/0\"\n            layoutId=\"active-nav-item\"\n          />\n        )}\n      </Link>\n    </li>\n  );\n}\n\nfunction Desktop({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  const mouseX = useMotionValue(0);\n  const mouseY = useMotionValue(0);\n  const radius = useMotionValue(0);\n  const handleMouseMove = React.useCallback(\n    ({ clientX, clientY, currentTarget }: React.MouseEvent) => {\n      const bounds = currentTarget.getBoundingClientRect();\n      mouseX.set(clientX - bounds.left);\n      mouseY.set(clientY - bounds.top);\n      radius.set(Math.sqrt(bounds.width ** 2 + bounds.height ** 2) / 2.5);\n    },\n    [mouseX, mouseY, radius],\n  );\n  const background = useMotionTemplate`radial-gradient(${radius}px circle at ${mouseX}px ${mouseY}px, var(--spotlight-color) 0%, transparent 65%)`;\n\n  return (\n    <nav\n      onMouseMove={handleMouseMove}\n      className={cn(\n        \"group relative\",\n        \"rounded-full bg-background\",\n        \"shadow-lg shadow-zinc-800/5 ring-1 ring-zinc-900/5 backdrop-blur-md\",\n        // \"dark:from-zinc-900/70 dark:to-zinc-800/90 dark:ring-zinc-100/10\",\n        \"[--spotlight-color:rgb(236_252_203_/_0.6)] \",\n        className,\n      )}\n      {...props}\n    >\n      {/* Spotlight overlay */}\n      <motion.div\n        className=\"pointer-events-none absolute -inset-px rounded-full opacity-0 transition-opacity duration-500 group-hover:opacity-100\"\n        style={{ background }}\n        aria-hidden=\"true\"\n      />\n\n      <ul className=\"flex bg-transparent px-3 text-sm font-medium text-primary \">\n        {navigationItems.map(({ href, text }) => (\n          <NavItem key={href} href={href}>\n            {text}\n          </NavItem>\n        ))}\n      </ul>\n    </nav>\n  );\n}\n// keknya bagian mobiele kita buat bentuk Tirana aja, dengan catatan ada animasi x close\n// namun saat dipanggil tetap kaya cali.so\n\nexport const navigationItems = [\n  { href: \"/\", text: \"About\" },\n  { href: \"/\", text: \"Service\" },\n  { href: \"/\", text: \"Testimonial\" },\n  { href: \"/\", text: \"Projects\" },\n];\n\nexport const NavigationBar = {\n  Desktop,\n} as const;\n",
      "type": "registry:component",
      "target": ""
    },
    {
      "path": "blocks/next-int/components/lang-switch.tsx",
      "content": "\"use client\";\n\nimport { Button } from \"@/components/ui/button\";\nimport { Drawer, DrawerTrigger, DrawerContent, DrawerClose } from \"./drawer\";\nimport React from \"react\";\nimport { X } from \"lucide-react\";\nimport { cn } from \"@/lib/utils\";\n\nexport default function LangSwitch() {\n  return (\n    <React.Fragment>\n      <Drawer>\n        <DrawerTrigger asChild>\n          <Button\n            variant=\"outline\"\n            size=\"sm\"\n            className={cn(\"flex items-center rounded-sm\")}\n          >\n            <span>EN</span>\n          </Button>\n        </DrawerTrigger>\n        <DrawerContent>\n          <div className=\"grid gap-4 p-4\">\n            <div className=\"flex items-center justify-between\">\n              <h3 className=\"text-lg font-medium\">Select Language</h3>\n              <DrawerClose asChild>\n                <Button variant=\"ghost\" size=\"icon\" className=\"rou h-8 w-8\">\n                  <X className=\"h-5 w-5\" />\n                </Button>\n              </DrawerClose>\n            </div>\n            <div className=\"grid gap-2\">\n              <Button variant=\"ghost\" className=\"justify-start gap-2\">\n                <span>English</span>\n              </Button>\n              <Button variant=\"ghost\" className=\"justify-start gap-2\">\n                <span>Español</span>\n              </Button>\n              <Button variant=\"ghost\" className=\"justify-start gap-2\">\n                <span>Français</span>\n              </Button>\n              <Button variant=\"ghost\" className=\"justify-start gap-2\">\n                <span>Deutsch</span>\n              </Button>\n            </div>\n          </div>\n        </DrawerContent>\n      </Drawer>\n    </React.Fragment>\n  );\n}\n",
      "type": "registry:component",
      "target": ""
    },
    {
      "path": "blocks/next-int/components/photos.tsx",
      "content": "import { motion } from \"framer-motion\";\nimport { Marquee } from \"./marquee\";\nimport { cn } from \"@/lib/utils\";\n\nimport React from \"react\";\n\nexport function Photos({ photos }: { photos: string[] }) {\n  const [width, setWidth] = React.useState(0);\n  const [isCompact, setIsCompact] = React.useState(false);\n  const expandedWidth = React.useMemo(() => width * 1.38, [width]);\n\n  React.useEffect(() => {\n    const handleResize = () => {\n      // 640px is the breakpoint for md\n      if (window.innerWidth < 640) {\n        setIsCompact(true);\n        return setWidth(window.innerWidth / 2 - 64);\n      }\n\n      setWidth(window.innerWidth / photos.length - 4 * photos.length);\n    };\n\n    window.addEventListener(\"resize\", handleResize);\n    handleResize();\n\n    return () => {\n      window.removeEventListener(\"resize\", handleResize);\n    };\n  }, [photos.length]);\n\n  return (\n    <motion.div\n      className=\"mt-16 sm:mt-20\"\n      initial={{ opacity: 0, scale: 0.925, y: 16 }}\n      animate={{ opacity: 1, scale: 1, y: 0 }}\n      transition={{\n        delay: 0.5,\n        type: \"spring\",\n      }}\n    >\n      <Marquee>\n        <div className=\"-my-4 flex w-full snap-x snap-proximity scroll-pl-4 justify-start gap-4 overflow-x-auto p-4 sm:gap-6 md:justify-center md:overflow-x-hidden md:px-0\">\n          {photos.map((image, idx) => (\n            <motion.div\n              key={idx}\n              className={cn(\n                \"relative h-40 flex-none shrink-0 snap-start overflow-hidden  rounded-xl bg-zinc-100 ring-2 ring-lime-800/20 dark:bg-zinc-800 dark:ring-lime-300/10 md:h-72\",\n              )}\n              animate={{\n                width,\n                opacity: isCompact ? 1 : 0.85,\n                filter: isCompact ? \"grayscale(0)\" : \"grayscale(0.5)\",\n                rotate: idx % 2 === 0 ? 2 : -1,\n              }}\n              whileHover={\n                isCompact\n                  ? {}\n                  : {\n                      width: expandedWidth,\n                      opacity: 1,\n                      filter: \"grayscale(0)\",\n                    }\n              }\n              layout\n            >\n              <img\n                src={image}\n                alt=\"\"\n                width={500}\n                height={500}\n                sizes=\"(min-width: 640px) 18rem, 11rem\"\n                className=\"pointer-events-none absolute inset-0 h-full w-full select-none object-cover\"\n              />\n            </motion.div>\n          ))}\n        </div>\n      </Marquee>\n    </motion.div>\n  );\n}\n",
      "type": "registry:component",
      "target": ""
    }
  ]
}
</file>

<file path="public/r/styles/default/popover.json">
{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "popover",
  "type": "registry:ui",
  "author": "shadcn (https://ui.shadcn.com)",
  "dependencies": [
    "@radix-ui/react-popover"
  ],
  "files": [
    {
      "path": "ui/popover.tsx",
      "content": "\"use client\";\n\nimport * as React from \"react\";\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\";\n\nimport { cn } from \"@/lib/utils\";\n\nconst Popover = PopoverPrimitive.Root;\n\nconst PopoverTrigger = PopoverPrimitive.Trigger;\n\nconst PopoverAnchor = PopoverPrimitive.Anchor;\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        className,\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n));\nPopoverContent.displayName = PopoverPrimitive.Content.displayName;\n\nexport { Popover, PopoverTrigger, PopoverContent, PopoverAnchor };\n",
      "type": "registry:ui",
      "target": ""
    }
  ]
}
</file>

<file path="public/r/styles/default/resizable.json">
{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "resizable",
  "type": "registry:ui",
  "author": "shadcn (https://ui.shadcn.com)",
  "dependencies": [
    "react-resizable-panels"
  ],
  "files": [
    {
      "path": "ui/resizable.tsx",
      "content": "\"use client\";\nimport * as ResizablePrimitive from \"react-resizable-panels\";\n\nimport { cn } from \"@/lib/utils\";\nimport { DragHandleDots2Icon } from \"@radix-ui/react-icons\";\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className,\n    )}\n    {...props}\n  />\n);\n\nconst ResizablePanel = ResizablePrimitive.Panel;\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean;\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className,\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <DragHandleDots2Icon className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n);\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle };\n",
      "type": "registry:ui",
      "target": ""
    }
  ]
}
</file>

<file path="public/r/styles/default/scroll-area.json">
{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "scroll-area",
  "type": "registry:ui",
  "author": "shadcn (https://ui.shadcn.com)",
  "dependencies": [
    "@radix-ui/react-scroll-area"
  ],
  "files": [
    {
      "path": "ui/scroll-area.tsx",
      "content": "\"use client\";\n\nimport * as React from \"react\";\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\";\n\nimport { cn } from \"@/lib/utils\";\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"size-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n));\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName;\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-px\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 border-t border-t-transparent p-px\",\n      className,\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n));\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName;\n\nexport { ScrollArea, ScrollBar };\n",
      "type": "registry:ui",
      "target": ""
    }
  ]
}
</file>

<file path="public/r/styles/default/select.json">
{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "select",
  "type": "registry:ui",
  "author": "shadcn (https://ui.shadcn.com)",
  "dependencies": [
    "@radix-ui/react-select"
  ],
  "files": [
    {
      "path": "ui/select.tsx",
      "content": "\"use client\";\n\nimport * as React from \"react\";\nimport * as SelectPrimitive from \"@radix-ui/react-select\";\nimport { cn } from \"@/lib/utils\";\nimport {\n  CheckIcon,\n  ChevronDownIcon,\n  ChevronUpIcon,\n} from \"@radix-ui/react-icons\";\n\nconst Select = SelectPrimitive.Root;\n\nconst SelectGroup = SelectPrimitive.Group;\n\nconst SelectValue = SelectPrimitive.Value;\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-9 w-full items-center justify-between whitespace-nowrap rounded-md border border-input bg-transparent px-3 py-2 text-sm shadow-sm ring-offset-background placeholder:text-muted-foreground focus:outline-none focus:ring-1 focus:ring-ring disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className,\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDownIcon className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n));\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName;\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className,\n    )}\n    {...props}\n  >\n    <ChevronUpIcon className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n));\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName;\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className,\n    )}\n    {...props}\n  >\n    <ChevronDownIcon className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n));\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName;\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-96 min-w-[8rem] overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className,\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\",\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n));\nSelectContent.displayName = SelectPrimitive.Content.displayName;\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"px-2 py-1.5 text-sm font-semibold\", className)}\n    {...props}\n  />\n));\nSelectLabel.displayName = SelectPrimitive.Label.displayName;\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-2 pr-8 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className,\n    )}\n    {...props}\n  >\n    <span className=\"absolute right-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <CheckIcon className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n));\nSelectItem.displayName = SelectPrimitive.Item.displayName;\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n));\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName;\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n};\n",
      "type": "registry:ui",
      "target": ""
    }
  ]
}
</file>

<file path="public/r/styles/default/separator.json">
{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "separator",
  "type": "registry:ui",
  "author": "shadcn (https://ui.shadcn.com)",
  "dependencies": [
    "@radix-ui/react-separator"
  ],
  "files": [
    {
      "path": "ui/separator.tsx",
      "content": "\"use client\";\n\nimport * as React from \"react\";\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\";\n\nimport { cn } from \"@/lib/utils\";\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref,\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-px w-full\" : \"h-full w-px\",\n        className,\n      )}\n      {...props}\n    />\n  ),\n);\nSeparator.displayName = SeparatorPrimitive.Root.displayName;\n\nexport { Separator };\n",
      "type": "registry:ui",
      "target": ""
    }
  ]
}
</file>

<file path="public/r/styles/default/sheet.json">
{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "sheet",
  "type": "registry:ui",
  "author": "shadcn (https://ui.shadcn.com)",
  "dependencies": [
    "@radix-ui/react-dialog"
  ],
  "files": [
    {
      "path": "ui/sheet.tsx",
      "content": "\"use client\";\n\nimport * as React from \"react\";\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\";\nimport { Cross2Icon } from \"@radix-ui/react-icons\";\nimport { cva, type VariantProps } from \"class-variance-authority\";\n\nimport { cn } from \"@/lib/utils\";\n\nconst Sheet = SheetPrimitive.Root;\n\nconst SheetTrigger = SheetPrimitive.Trigger;\n\nconst SheetClose = SheetPrimitive.Close;\n\nconst SheetPortal = SheetPrimitive.Portal;\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-background/80 backdrop-blur-sm data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className,\n    )}\n    {...props}\n    ref={ref}\n  />\n));\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName;\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=closed]:duration-300 data-[state=open]:duration-500 data-[state=open]:animate-in data-[state=closed]:animate-out\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4 border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  },\n);\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <Cross2Icon className=\"size-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n));\nSheetContent.displayName = SheetPrimitive.Content.displayName;\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className,\n    )}\n    {...props}\n  />\n);\nSheetHeader.displayName = \"SheetHeader\";\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className,\n    )}\n    {...props}\n  />\n);\nSheetFooter.displayName = \"SheetFooter\";\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n));\nSheetTitle.displayName = SheetPrimitive.Title.displayName;\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n));\nSheetDescription.displayName = SheetPrimitive.Description.displayName;\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n};\n",
      "type": "registry:ui",
      "target": ""
    }
  ]
}
</file>

<file path="public/r/styles/default/sidebar.json">
{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "sidebar",
  "type": "registry:ui",
  "author": "shadcn (https://ui.shadcn.com)",
  "dependencies": [
    "@radix-ui/react-slot",
    "class-variance-authority",
    "lucide-react"
  ],
  "registryDependencies": [
    "button",
    "separator",
    "sheet",
    "tooltip",
    "input",
    "use-mobile",
    "skeleton"
  ],
  "files": [
    {
      "path": "ui/sidebar.tsx",
      "content": "\"use client\";\n\nimport * as React from \"react\";\nimport { Slot } from \"@radix-ui/react-slot\";\nimport { VariantProps, cva } from \"class-variance-authority\";\nimport { useIsMobile } from \"@/hooks/use-mobile\";\nimport { cn } from \"@/lib/utils\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Separator } from \"@/components/ui/separator\";\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\";\nimport { ViewVerticalIcon } from \"@radix-ui/react-icons\";\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\";\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7;\nconst SIDEBAR_WIDTH = \"16rem\";\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\";\nconst SIDEBAR_WIDTH_ICON = \"3rem\";\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\";\n\ntype SidebarContext = {\n  state: \"expanded\" | \"collapsed\";\n  open: boolean;\n  setOpen: (open: boolean) => void;\n  openMobile: boolean;\n  setOpenMobile: (open: boolean) => void;\n  isMobile: boolean;\n  toggleSidebar: () => void;\n};\n\nconst SidebarContext = React.createContext<SidebarContext | null>(null);\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext);\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\");\n  }\n\n  return context;\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean;\n    open?: boolean;\n    onOpenChange?: (open: boolean) => void;\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref,\n  ) => {\n    const isMobile = useIsMobile();\n    const [openMobile, setOpenMobile] = React.useState(false);\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen);\n    const open = openProp ?? _open;\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value;\n        if (setOpenProp) {\n          setOpenProp(openState);\n        } else {\n          _setOpen(openState);\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`;\n      },\n      [setOpenProp, open],\n    );\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open);\n    }, [isMobile, setOpen, setOpenMobile]);\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault();\n          toggleSidebar();\n        }\n      };\n\n      window.addEventListener(\"keydown\", handleKeyDown);\n      return () => window.removeEventListener(\"keydown\", handleKeyDown);\n    }, [toggleSidebar]);\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\";\n\n    const contextValue = React.useMemo<SidebarContext>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      ],\n    );\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper has-[[data-variant=inset]]:bg-sidebar flex min-h-svh w-full\",\n              className,\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    );\n  },\n);\nSidebarProvider.displayName = \"SidebarProvider\";\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\";\n    variant?: \"sidebar\" | \"floating\" | \"inset\";\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\";\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref,\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar();\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"bg-sidebar text-sidebar-foreground flex h-full w-[--sidebar-width] flex-col\",\n            className,\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      );\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"bg-sidebar text-sidebar-foreground w-[--sidebar-width] p-0 [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      );\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"text-sidebar-foreground group peer hidden md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\",\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className,\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"bg-sidebar group-data-[variant=floating]:border-sidebar-border flex h-full w-full flex-col group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    );\n  },\n);\nSidebar.displayName = \"Sidebar\";\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar();\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event);\n        toggleSidebar();\n      }}\n      {...props}\n    >\n      <ViewVerticalIcon />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  );\n});\nSidebarTrigger.displayName = \"SidebarTrigger\";\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar();\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"hover:after:bg-sidebar-border absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:hover:bg-sidebar group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className,\n      )}\n      {...props}\n    />\n  );\n});\nSidebarRail.displayName = \"SidebarRail\";\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className,\n      )}\n      {...props}\n    />\n  );\n});\nSidebarInset.displayName = \"SidebarInset\";\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"focus-visible:ring-sidebar-ring h-8 w-full bg-background shadow-none focus-visible:ring-2\",\n        className,\n      )}\n      {...props}\n    />\n  );\n});\nSidebarInput.displayName = \"SidebarInput\";\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  );\n});\nSidebarHeader.displayName = \"SidebarHeader\";\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  );\n});\nSidebarFooter.displayName = \"SidebarFooter\";\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"bg-sidebar-border mx-2 w-auto\", className)}\n      {...props}\n    />\n  );\n});\nSidebarSeparator.displayName = \"SidebarSeparator\";\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className,\n      )}\n      {...props}\n    />\n  );\n});\nSidebarContent.displayName = \"SidebarContent\";\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  );\n});\nSidebarGroup.displayName = \"SidebarGroup\";\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\";\n\n  return (\n    <Comp\n      ref={ref as any}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"text-sidebar-foreground/70 ring-sidebar-ring flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium outline-none transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className,\n      )}\n      {...props}\n    />\n  );\n});\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\";\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\";\n\n  return (\n    <Comp\n      ref={ref as any}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-none transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className,\n      )}\n      {...props}\n    />\n  );\n});\nSidebarGroupAction.displayName = \"SidebarGroupAction\";\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n));\nSidebarGroupContent.displayName = \"SidebarGroupContent\";\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n));\nSidebarMenu.displayName = \"SidebarMenu\";\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n));\nSidebarMenuItem.displayName = \"SidebarMenuItem\";\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground active:bg-sidebar-accent active:text-sidebar-accent-foreground data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none transition-[width,height,padding] focus-visible:ring-2 disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:font-medium group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  },\n);\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean;\n    isActive?: boolean;\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>;\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref,\n  ) => {\n    const Comp = asChild ? Slot : \"button\";\n    const { isMobile, state } = useSidebar();\n\n    const button = (\n      <Comp\n        ref={ref as any}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    );\n\n    if (!tooltip) {\n      return button;\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      };\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    );\n  },\n);\nSidebarMenuButton.displayName = \"SidebarMenuButton\";\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean;\n    showOnHover?: boolean;\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\";\n\n  return (\n    <Comp\n      ref={ref as any}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground peer-hover/menu-button:text-sidebar-accent-foreground absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-none transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"peer-data-[active=true]/menu-button:text-sidebar-accent-foreground group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 md:opacity-0\",\n        className,\n      )}\n      {...props}\n    />\n  );\n});\nSidebarMenuAction.displayName = \"SidebarMenuAction\";\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"text-sidebar-foreground pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className,\n    )}\n    {...props}\n  />\n));\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\";\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean;\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`;\n  }, []);\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  );\n});\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\";\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"border-sidebar-border mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className,\n    )}\n    {...props}\n  />\n));\nSidebarMenuSub.displayName = \"SidebarMenuSub\";\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />);\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\";\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean;\n    size?: \"sm\" | \"md\";\n    isActive?: boolean;\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\";\n\n  return (\n    <Comp\n      ref={ref as any}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground active:bg-sidebar-accent active:text-sidebar-accent-foreground [&>svg]:text-sidebar-accent-foreground flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 outline-none focus-visible:ring-2 disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className,\n      )}\n      {...props}\n    />\n  );\n});\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\";\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n};\n",
      "type": "registry:ui",
      "target": ""
    }
  ],
  "tailwind": {
    "config": {
      "theme": {
        "extend": {
          "colors": {
            "sidebar": {
              "DEFAULT": "hsl(var(--sidebar-background))",
              "foreground": "hsl(var(--sidebar-foreground))",
              "primary": "hsl(var(--sidebar-primary))",
              "primary-foreground": "hsl(var(--sidebar-primary-foreground))",
              "accent": "hsl(var(--sidebar-accent))",
              "accent-foreground": "hsl(var(--sidebar-accent-foreground))",
              "border": "hsl(var(--sidebar-border))",
              "ring": "hsl(var(--sidebar-ring))"
            }
          }
        }
      }
    }
  },
  "cssVars": {
    "light": {
      "sidebar-background": "0 0% 98%",
      "sidebar-foreground": "240 5.3% 26.1%",
      "sidebar-primary": "240 5.9% 10%",
      "sidebar-primary-foreground": "0 0% 98%",
      "sidebar-accent": "240 4.8% 95.9%",
      "sidebar-accent-foreground": "240 5.9% 10%",
      "sidebar-border": "220 13% 91%",
      "sidebar-ring": "217.2 91.2% 59.8%"
    },
    "dark": {
      "sidebar-background": "240 5.9% 10%",
      "sidebar-foreground": "240 4.8% 95.9%",
      "sidebar-primary": "224.3 76.3% 48%",
      "sidebar-primary-foreground": "0 0% 100%",
      "sidebar-accent": "240 3.7% 15.9%",
      "sidebar-accent-foreground": "240 4.8% 95.9%",
      "sidebar-border": "240 3.7% 15.9%",
      "sidebar-ring": "217.2 91.2% 59.8%"
    }
  }
}
</file>

<file path="public/r/styles/default/skeleton.json">
{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "skeleton",
  "type": "registry:ui",
  "author": "shadcn (https://ui.shadcn.com)",
  "files": [
    {
      "path": "ui/skeleton.tsx",
      "content": "import { cn } from \"@/lib/utils\";\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-primary/10\", className)}\n      {...props}\n    />\n  );\n}\n\nexport { Skeleton };\n",
      "type": "registry:ui",
      "target": ""
    }
  ]
}
</file>

<file path="public/r/styles/default/sonner.json">
{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "sonner",
  "type": "registry:ui",
  "author": "shadcn (https://ui.shadcn.com)",
  "dependencies": [
    "sonner",
    "next-themes"
  ],
  "files": [
    {
      "path": "ui/sonner.tsx",
      "content": "\"use client\";\n\nimport * as React from \"react\";\nimport * as ToastPrimitives from \"@radix-ui/react-toast\";\nimport { cva, type VariantProps } from \"class-variance-authority\";\nimport { X } from \"lucide-react\";\n\nimport { cn } from \"@/lib/utils\";\n\nconst ToastProvider = ToastPrimitives.Provider;\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className,\n    )}\n    {...props}\n  />\n));\nToastViewport.displayName = ToastPrimitives.Viewport.displayName;\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  },\n);\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  );\n});\nToast.displayName = ToastPrimitives.Root.displayName;\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className,\n    )}\n    {...props}\n  />\n));\nToastAction.displayName = ToastPrimitives.Action.displayName;\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className,\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n));\nToastClose.displayName = ToastPrimitives.Close.displayName;\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n));\nToastTitle.displayName = ToastPrimitives.Title.displayName;\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n));\nToastDescription.displayName = ToastPrimitives.Description.displayName;\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>;\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>;\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n};\n",
      "type": "registry:ui",
      "target": ""
    }
  ]
}
</file>

<file path="public/r/styles/default/switch.json">
{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "switch",
  "type": "registry:ui",
  "author": "shadcn (https://ui.shadcn.com)",
  "dependencies": [
    "@radix-ui/react-switch"
  ],
  "files": [
    {
      "path": "ui/switch.tsx",
      "content": "\"use client\";\n\nimport * as React from \"react\";\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\";\n\nimport { cn } from \"@/lib/utils\";\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-5 w-9 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent shadow-sm transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className,\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block size-4 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-4 data-[state=unchecked]:translate-x-0\",\n      )}\n    />\n  </SwitchPrimitives.Root>\n));\nSwitch.displayName = SwitchPrimitives.Root.displayName;\n\nexport { Switch };\n",
      "type": "registry:ui",
      "target": ""
    }
  ]
}
</file>

<file path="public/r/styles/default/table.json">
{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "table",
  "type": "registry:ui",
  "author": "shadcn (https://ui.shadcn.com)",
  "files": [
    {
      "path": "ui/table.tsx",
      "content": "import * as React from \"react\";\n\nimport { cn } from \"@/lib/utils\";\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n));\nTable.displayName = \"Table\";\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n));\nTableHeader.displayName = \"TableHeader\";\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n));\nTableBody.displayName = \"TableBody\";\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\"bg-primary font-medium text-primary-foreground\", className)}\n    {...props}\n  />\n));\nTableFooter.displayName = \"TableFooter\";\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className,\n    )}\n    {...props}\n  />\n));\nTableRow.displayName = \"TableRow\";\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-10 px-2 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0 [&>[role=checkbox]]:translate-y-[2px]\",\n      className,\n    )}\n    {...props}\n  />\n));\nTableHead.displayName = \"TableHead\";\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\n      \"p-2 align-middle [&:has([role=checkbox])]:pr-0 [&>[role=checkbox]]:translate-y-[2px]\",\n      className,\n    )}\n    {...props}\n  />\n));\nTableCell.displayName = \"TableCell\";\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n));\nTableCaption.displayName = \"TableCaption\";\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n};\n",
      "type": "registry:ui",
      "target": ""
    }
  ]
}
</file>

<file path="public/r/styles/default/tabs.json">
{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "tabs",
  "type": "registry:ui",
  "author": "shadcn (https://ui.shadcn.com)",
  "dependencies": [
    "@radix-ui/react-tabs"
  ],
  "files": [
    {
      "path": "ui/tabs.tsx",
      "content": "\"use client\";\n\nimport * as React from \"react\";\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\";\n\nimport { cn } from \"@/lib/utils\";\n\nconst Tabs = TabsPrimitive.Root;\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-9 items-center justify-center rounded-lg bg-muted p-1 text-muted-foreground\",\n      className,\n    )}\n    {...props}\n  />\n));\nTabsList.displayName = TabsPrimitive.List.displayName;\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-md px-3 py-1 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow\",\n      className,\n    )}\n    {...props}\n  />\n));\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName;\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className,\n    )}\n    {...props}\n  />\n));\nTabsContent.displayName = TabsPrimitive.Content.displayName;\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent };\n",
      "type": "registry:ui",
      "target": ""
    }
  ]
}
</file>

<file path="public/r/styles/default/texture-button.json">
{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "texture-button",
  "type": "registry:ui",
  "author": "shadcn (https://ui.shadcn.com)",
  "dependencies": [
    "@radix-ui/react-slot"
  ],
  "files": [
    {
      "path": "ui/texture-button.tsx",
      "content": "\"use client\";\n\nimport * as React from \"react\";\nimport { Slot } from \"@radix-ui/react-slot\";\nimport { cva } from \"class-variance-authority\";\n\nimport { cn } from \"@/lib/utils\";\n\nconst buttonVariantsOuter = cva(\"\", {\n  variants: {\n    variant: {\n      primary:\n        \"w-full border border-[1px] border-black/10 bg-gradient-to-b from-black/70 to-black p-[1px] transition duration-300 ease-in-out dark:border-[2px] dark:border-black dark:from-white dark:to-white/80 \",\n      accent:\n        \"w-full border-[1px] border-black/10 bg-gradient-to-b from-indigo-300/90 to-indigo-500 p-[1px] transition duration-300 ease-in-out dark:border-[2px] dark:border-neutral-950 dark:from-indigo-200/70 dark:to-indigo-500 \",\n      destructive:\n        \"w-full border-[1px] border-black/10 bg-gradient-to-b from-red-300/90 to-red-500 p-[1px] transition duration-300 ease-in-out dark:border-[2px] dark:border-neutral-950 dark:from-red-300/90 dark:to-red-500 \",\n      secondary:\n        \"w-full border-[1px] border-black/20 bg-white/50 p-[1px] transition duration-300 ease-in-out dark:border-[2px] dark:border-neutral-950 dark:bg-neutral-600/50 \",\n      minimal:\n        \"group  w-full border-[1px] border-black/20 bg-white/50 to-white p-[1px] hover:bg-gradient-to-t hover:from-neutral-100  active:bg-neutral-200 dark:border-[2px] dark:border-neutral-950 dark:bg-neutral-600/80 dark:hover:from-neutral-600/50 dark:hover:to-neutral-600/70 dark:active:bg-neutral-800\",\n      icon: \"group rounded-full border border-black/10 bg-white/50 to-white p-[1px] hover:bg-gradient-to-t hover:from-neutral-100 active:bg-neutral-200 dark:border-neutral-950 dark:bg-neutral-600/50 dark:hover:from-neutral-700 dark:hover:to-neutral-600 dark:active:bg-neutral-800\",\n    },\n    size: {\n      sm: \"rounded-[6px]\",\n      default: \"rounded-[12px]\",\n      lg: \"rounded-[12px]\",\n      icon: \"rounded-full\",\n    },\n  },\n  defaultVariants: {\n    variant: \"primary\",\n    size: \"default\",\n  },\n});\n\nconst innerDivVariants = cva(\n  \"flex h-full w-full items-center justify-center text-muted-foreground\",\n  {\n    variants: {\n      variant: {\n        primary:\n          \"gap-2 bg-gradient-to-b from-neutral-800 to-black  text-sm text-white/90 transition duration-300 ease-in-out hover:from-stone-800 hover:to-neutral-800/70 active:bg-gradient-to-b  active:from-black active:to-black dark:from-neutral-200 dark:to-neutral-50 dark:text-black/80 dark:hover:from-stone-200 dark:hover:to-neutral-200 dark:active:from-stone-300 dark:active:to-neutral-300 \",\n        accent:\n          \"gap-2 bg-gradient-to-b from-indigo-400 to-indigo-600 text-sm text-white/90 transition duration-300 ease-in-out hover:bg-gradient-to-b hover:from-indigo-400/70 hover:to-indigo-600/70 active:bg-gradient-to-b active:from-indigo-400/80 active:to-indigo-600/80 dark:hover:from-indigo-400/70 dark:hover:to-indigo-600/70 dark:active:from-indigo-400 dark:active:to-indigo-600\",\n        destructive:\n          \"gap-2 bg-gradient-to-b from-red-400/60 to-red-500/60 text-sm text-white/90 transition duration-300 ease-in-out hover:bg-gradient-to-b hover:from-red-400/70 hover:to-red-600/70 active:bg-gradient-to-b active:from-red-400/80 active:to-red-600/80 dark:hover:from-red-400/70 dark:hover:to-red-500/80 dark:active:from-red-400 dark:active:to-red-500\",\n        secondary:\n          \"bg-gradient-to-b from-neutral-100/80 to-neutral-200/50 text-sm transition duration-300 ease-in-out hover:bg-gradient-to-b hover:from-neutral-200/40 hover:to-neutral-300/60 active:bg-gradient-to-b active:from-neutral-200/60 active:to-neutral-300/70 dark:from-neutral-800 dark:to-neutral-700/50 dark:hover:from-neutral-700 dark:hover:to-neutral-700/60 dark:active:from-neutral-800 dark:active:to-neutral-700\",\n        minimal:\n          \"bg-gradient-to-b from-white to-neutral-50/50 text-sm transition duration-300 ease-in-out group-hover:bg-gradient-to-b group-hover:from-neutral-50/50 group-hover:to-neutral-100/60 group-active:bg-gradient-to-b group-active:from-neutral-100/60 group-active:to-neutral-100/90 dark:from-neutral-800 dark:to-neutral-700/50 dark:group-hover:from-neutral-700 dark:group-hover:to-neutral-700/60 dark:group-active:from-neutral-800 dark:group-active:to-neutral-700\",\n        icon: \"rounded-full bg-gradient-to-b from-white to-neutral-50/50 group-active:bg-neutral-200 dark:from-neutral-800 dark:to-neutral-700/50 dark:group-active:bg-neutral-800\",\n      },\n      size: {\n        sm: \"rounded-[4px] px-4 py-1 text-xs\",\n        default: \"rounded-[10px] px-4 py-2 text-sm\",\n        lg: \"rounded-[10px] px-4 py-2 text-base\",\n        icon: \" rounded-full p-1\",\n      },\n    },\n    defaultVariants: {\n      variant: \"primary\",\n      size: \"default\",\n    },\n  },\n);\n\nexport interface UnifiedButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement> {\n  variant?:\n    | \"primary\"\n    | \"secondary\"\n    | \"accent\"\n    | \"destructive\"\n    | \"minimal\"\n    | \"icon\";\n  size?: \"default\" | \"sm\" | \"lg\" | \"icon\";\n  asChild?: boolean;\n}\n\nconst TextureButton = React.forwardRef<HTMLButtonElement, UnifiedButtonProps>(\n  (\n    {\n      children,\n      variant = \"primary\",\n      size = \"default\",\n      asChild = false,\n      className,\n      ...props\n    },\n    ref,\n  ) => {\n    const Comp = asChild ? Slot : \"button\";\n\n    return (\n      <Comp\n        className={cn(buttonVariantsOuter({ variant, size }), className)}\n        ref={ref}\n        {...props}\n      >\n        <div className={cn(innerDivVariants({ variant, size }))}>\n          {children}\n        </div>\n      </Comp>\n    );\n  },\n);\n\nTextureButton.displayName = \"TextureButton\";\n\nexport { TextureButton };\n",
      "type": "registry:ui",
      "target": ""
    }
  ]
}
</file>

<file path="public/r/styles/default/theme-daylight.json">
{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "theme-daylight",
  "type": "registry:theme",
  "author": "shadcn (https://ui.shadcn.com)",
  "cssVars": {
    "light": {
      "background": "36 39% 88%",
      "foreground": "36 45% 15%",
      "primary": "36 45% 70%",
      "primary-foreground": "36 45% 11%",
      "secondary": "40 35% 77%",
      "secondary-foreground": "36 45% 25%",
      "accent": "36 64% 57%",
      "accent-foreground": "36 72% 17%",
      "destructive": "0 84% 37%",
      "destructive-foreground": "0 0% 98%",
      "muted": "36 33% 75%",
      "muted-foreground": "36 45% 25%",
      "card": "36 46% 82%",
      "card-foreground": "36 45% 20%",
      "popover": "0 0% 100%",
      "popover-foreground": "240 10% 3.9%",
      "border": "36 45% 60%",
      "input": "36 45% 60%",
      "ring": "36 45% 30%",
      "chart-1": "25 34% 28%",
      "chart-2": "26 36% 34%",
      "chart-3": "28 40% 40%",
      "chart-4": "31 41% 48%",
      "chart-5": "35 43% 53%"
    },
    "dark": {
      "background": "36 39% 88%",
      "foreground": "36 45% 15%",
      "primary": "36 45% 70%",
      "primary-foreground": "36 45% 11%",
      "secondary": "40 35% 77%",
      "secondary-foreground": "36 45% 25%",
      "accent": "36 64% 57%",
      "accent-foreground": "36 72% 17%",
      "destructive": "0 84% 37%",
      "destructive-foreground": "0 0% 98%",
      "muted": "36 33% 75%",
      "muted-foreground": "36 45% 25%",
      "card": "36 46% 82%",
      "card-foreground": "36 45% 20%",
      "popover": "0 0% 100%",
      "popover-foreground": "240 10% 3.9%",
      "border": "36 45% 60%",
      "input": "36 45% 60%",
      "ring": "36 45% 30%",
      "chart-1": "25 34% 28%",
      "chart-2": "26 36% 34%",
      "chart-3": "28 40% 40%",
      "chart-4": "31 41% 48%",
      "chart-5": "35 43% 53%"
    }
  }
}
</file>

<file path="public/r/styles/default/theme-emerald.json">
{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "theme-emerald",
  "type": "registry:theme",
  "author": "shadcn (https://ui.shadcn.com)",
  "cssVars": {
    "light": {
      "background": "0 0% 100%",
      "foreground": "240 10% 3.9%",
      "card": "0 0% 100%",
      "card-foreground": "240 10% 3.9%",
      "popover": "0 0% 100%",
      "popover-foreground": "240 10% 3.9%",
      "primary": "142 86% 28%",
      "primary-foreground": "356 29% 98%",
      "secondary": "240 4.8% 95.9%",
      "secondary-foreground": "240 5.9% 10%",
      "muted": "240 4.8% 95.9%",
      "muted-foreground": "240 3.8% 45%",
      "accent": "240 4.8% 95.9%",
      "accent-foreground": "240 5.9% 10%",
      "destructive": "0 72% 51%",
      "destructive-foreground": "0 0% 98%",
      "border": "240 5.9% 90%",
      "input": "240 5.9% 90%",
      "ring": "142 86% 28%",
      "chart-1": "139 65% 20%",
      "chart-2": "140 74% 44%",
      "chart-3": "142 88% 28%",
      "chart-4": "137 55% 15%",
      "chart-5": "141 40% 9%"
    },
    "dark": {
      "background": "240 10% 3.9%",
      "foreground": "0 0% 98%",
      "card": "240 10% 3.9%",
      "card-foreground": "0 0% 98%",
      "popover": "240 10% 3.9%",
      "popover-foreground": "0 0% 98%",
      "primary": "142 86% 28%",
      "primary-foreground": "356 29% 98%",
      "secondary": "240 4.8% 95.9%",
      "secondary-foreground": "240 5.9% 10%",
      "muted": "240 3.7% 15.9%",
      "muted-foreground": "240 5% 64.9%",
      "accent": "240 3.7% 15.9%",
      "accent-foreground": "0 0% 98%",
      "destructive": "0 72% 51%",
      "destructive-foreground": "0 0% 98%",
      "border": "240 3.7% 15.9%",
      "input": "240 3.7% 15.9%",
      "ring": "142 86% 28%",
      "chart-1": "142 88% 28%",
      "chart-2": "139 65% 20%",
      "chart-3": "140 74% 24%",
      "chart-4": "137 55% 15%",
      "chart-5": "141 40% 9%"
    }
  }
}
</file>

<file path="public/r/styles/default/theme-midnight.json">
{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "theme-midnight",
  "type": "registry:theme",
  "author": "shadcn (https://ui.shadcn.com)",
  "cssVars": {
    "light": {
      "background": "240 5% 6%",
      "foreground": "60 5% 90%",
      "primary": "240 0% 90%",
      "primary-foreground": "60 0% 0%",
      "secondary": "240 4% 15%",
      "secondary-foreground": "60 5% 85%",
      "accent": "240 0% 13%",
      "accent-foreground": "60 0% 100%",
      "destructive": "0 60% 50%",
      "destructive-foreground": "0 0% 98%",
      "muted": "240 5% 25%",
      "muted-foreground": "60 5% 85%",
      "card": "240 4% 10%",
      "card-foreground": "60 5% 90%",
      "popover": "240 5% 15%",
      "popover-foreground": "60 5% 85%",
      "border": "240 6% 20%",
      "input": "240 6% 20%",
      "ring": "240 5% 90%",
      "chart-1": "359 2% 90%",
      "chart-2": "240 1% 74%",
      "chart-3": "240 1% 58%",
      "chart-4": "240 1% 42%",
      "chart-5": "240 2% 26%"
    },
    "dark": {
      "background": "240 5% 6%",
      "foreground": "60 5% 90%",
      "primary": "240 0% 90%",
      "primary-foreground": "60 0% 0%",
      "secondary": "240 4% 15%",
      "secondary-foreground": "60 5% 85%",
      "accent": "240 0% 13%",
      "accent-foreground": "60 0% 100%",
      "destructive": "0 60% 50%",
      "destructive-foreground": "0 0% 98%",
      "muted": "240 5% 25%",
      "muted-foreground": "60 5% 85%",
      "card": "240 4% 10%",
      "card-foreground": "60 5% 90%",
      "popover": "240 5% 15%",
      "popover-foreground": "60 5% 85%",
      "border": "240 6% 20%",
      "input": "240 6% 20%",
      "ring": "240 5% 90%",
      "chart-1": "359 2% 90%",
      "chart-2": "240 1% 74%",
      "chart-3": "240 1% 58%",
      "chart-4": "240 1% 42%",
      "chart-5": "240 2% 26%"
    }
  }
}
</file>

<file path="public/r/styles/default/toast.json">
{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "toast",
  "type": "registry:ui",
  "author": "shadcn (https://ui.shadcn.com)",
  "dependencies": [
    "@radix-ui/react-toast"
  ],
  "files": [
    {
      "path": "ui/toast.tsx",
      "content": "\"use client\";\n\nimport * as React from \"react\";\nimport * as ToastPrimitives from \"@radix-ui/react-toast\";\nimport { cva, type VariantProps } from \"class-variance-authority\";\nimport { cn } from \"@/lib/utils\";\nimport { Cross2Icon } from \"@radix-ui/react-icons\";\n\nconst ToastProvider = ToastPrimitives.Provider;\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className,\n    )}\n    {...props}\n  />\n));\nToastViewport.displayName = ToastPrimitives.Viewport.displayName;\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-2 overflow-hidden rounded-md border p-4 pr-6 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  },\n);\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  );\n});\nToast.displayName = ToastPrimitives.Root.displayName;\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium transition-colors hover:bg-secondary focus:outline-none focus:ring-1 focus:ring-ring disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className,\n    )}\n    {...props}\n  />\n));\nToastAction.displayName = ToastPrimitives.Action.displayName;\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-1 top-1 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-1 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className,\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <Cross2Icon className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n));\nToastClose.displayName = ToastPrimitives.Close.displayName;\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold [&+div]:text-xs\", className)}\n    {...props}\n  />\n));\nToastTitle.displayName = ToastPrimitives.Title.displayName;\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n));\nToastDescription.displayName = ToastPrimitives.Description.displayName;\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>;\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>;\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n};\n",
      "type": "registry:ui",
      "target": ""
    },
    {
      "path": "hooks/use-toast.ts",
      "content": "\"use client\";\n\n// Inspired by react-hot-toast library\nimport * as React from \"react\";\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/registry/default/ui/toast\";\n\nconst TOAST_LIMIT = 1;\nconst TOAST_REMOVE_DELAY = 1000000;\n\ntype ToasterToast = ToastProps & {\n  id: string;\n  title?: React.ReactNode;\n  description?: React.ReactNode;\n  action?: ToastActionElement;\n};\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const;\n\nlet count = 0;\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER;\n  return count.toString();\n}\n\ntype ActionType = typeof actionTypes;\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"];\n      toast: ToasterToast;\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"];\n      toast: Partial<ToasterToast>;\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"];\n      toastId?: ToasterToast[\"id\"];\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"];\n      toastId?: ToasterToast[\"id\"];\n    };\n\ninterface State {\n  toasts: ToasterToast[];\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>();\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return;\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId);\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    });\n  }, TOAST_REMOVE_DELAY);\n\n  toastTimeouts.set(toastId, timeout);\n};\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      };\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t,\n        ),\n      };\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action;\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId);\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id);\n        });\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t,\n        ),\n      };\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        };\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      };\n  }\n};\n\nconst listeners: Array<(state: State) => void> = [];\n\nlet memoryState: State = { toasts: [] };\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action);\n  listeners.forEach((listener) => {\n    listener(memoryState);\n  });\n}\n\ntype Toast = Omit<ToasterToast, \"id\">;\n\nfunction toast({ ...props }: Toast) {\n  const id = genId();\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    });\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id });\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss();\n      },\n    },\n  });\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  };\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState);\n\n  React.useEffect(() => {\n    listeners.push(setState);\n    return () => {\n      const index = listeners.indexOf(setState);\n      if (index > -1) {\n        listeners.splice(index, 1);\n      }\n    };\n  }, [state]);\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  };\n}\n\nexport { useToast, toast };\n",
      "type": "registry:hook",
      "target": ""
    },
    {
      "path": "ui/toaster.tsx",
      "content": "\"use client\";\n\nimport { useToast } from \"@/hooks/use-toast\";\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\";\n\nexport function Toaster() {\n  const { toasts } = useToast();\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        );\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  );\n}\n",
      "type": "registry:ui",
      "target": ""
    }
  ]
}
</file>

<file path="public/r/styles/default/toaster.json">
{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "toaster",
  "type": "registry:ui",
  "author": "shadcn (https://ui.shadcn.com)",
  "dependencies": [
    "@radix-ui/react-toast"
  ],
  "files": [
    {
      "path": "ui/toast.tsx",
      "content": "\"use client\";\n\nimport * as React from \"react\";\nimport * as ToastPrimitives from \"@radix-ui/react-toast\";\nimport { cva, type VariantProps } from \"class-variance-authority\";\nimport { cn } from \"@/lib/utils\";\nimport { Cross2Icon } from \"@radix-ui/react-icons\";\n\nconst ToastProvider = ToastPrimitives.Provider;\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className,\n    )}\n    {...props}\n  />\n));\nToastViewport.displayName = ToastPrimitives.Viewport.displayName;\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-2 overflow-hidden rounded-md border p-4 pr-6 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  },\n);\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  );\n});\nToast.displayName = ToastPrimitives.Root.displayName;\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium transition-colors hover:bg-secondary focus:outline-none focus:ring-1 focus:ring-ring disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className,\n    )}\n    {...props}\n  />\n));\nToastAction.displayName = ToastPrimitives.Action.displayName;\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-1 top-1 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-1 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className,\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <Cross2Icon className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n));\nToastClose.displayName = ToastPrimitives.Close.displayName;\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold [&+div]:text-xs\", className)}\n    {...props}\n  />\n));\nToastTitle.displayName = ToastPrimitives.Title.displayName;\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n));\nToastDescription.displayName = ToastPrimitives.Description.displayName;\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>;\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>;\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n};\n",
      "type": "registry:ui",
      "target": ""
    },
    {
      "path": "hooks/use-toast.ts",
      "content": "\"use client\";\n\n// Inspired by react-hot-toast library\nimport * as React from \"react\";\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/registry/default/ui/toast\";\n\nconst TOAST_LIMIT = 1;\nconst TOAST_REMOVE_DELAY = 1000000;\n\ntype ToasterToast = ToastProps & {\n  id: string;\n  title?: React.ReactNode;\n  description?: React.ReactNode;\n  action?: ToastActionElement;\n};\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const;\n\nlet count = 0;\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER;\n  return count.toString();\n}\n\ntype ActionType = typeof actionTypes;\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"];\n      toast: ToasterToast;\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"];\n      toast: Partial<ToasterToast>;\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"];\n      toastId?: ToasterToast[\"id\"];\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"];\n      toastId?: ToasterToast[\"id\"];\n    };\n\ninterface State {\n  toasts: ToasterToast[];\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>();\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return;\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId);\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    });\n  }, TOAST_REMOVE_DELAY);\n\n  toastTimeouts.set(toastId, timeout);\n};\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      };\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t,\n        ),\n      };\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action;\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId);\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id);\n        });\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t,\n        ),\n      };\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        };\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      };\n  }\n};\n\nconst listeners: Array<(state: State) => void> = [];\n\nlet memoryState: State = { toasts: [] };\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action);\n  listeners.forEach((listener) => {\n    listener(memoryState);\n  });\n}\n\ntype Toast = Omit<ToasterToast, \"id\">;\n\nfunction toast({ ...props }: Toast) {\n  const id = genId();\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    });\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id });\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss();\n      },\n    },\n  });\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  };\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState);\n\n  React.useEffect(() => {\n    listeners.push(setState);\n    return () => {\n      const index = listeners.indexOf(setState);\n      if (index > -1) {\n        listeners.splice(index, 1);\n      }\n    };\n  }, [state]);\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  };\n}\n\nexport { useToast, toast };\n",
      "type": "registry:hook",
      "target": ""
    },
    {
      "path": "ui/toaster.tsx",
      "content": "\"use client\";\n\nimport { useToast } from \"@/hooks/use-toast\";\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\";\n\nexport function Toaster() {\n  const { toasts } = useToast();\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        );\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  );\n}\n",
      "type": "registry:ui",
      "target": ""
    }
  ]
}
</file>

<file path="public/r/styles/default/toggle-group.json">
{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "toggle-group",
  "type": "registry:ui",
  "author": "shadcn (https://ui.shadcn.com)",
  "dependencies": [
    "@radix-ui/react-toggle-group"
  ],
  "registryDependencies": [
    "toggle"
  ],
  "files": [
    {
      "path": "ui/toggle-group.tsx",
      "content": "\"use client\";\n\nimport * as React from \"react\";\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\";\nimport { type VariantProps } from \"class-variance-authority\";\n\nimport { cn } from \"@/lib/utils\";\nimport { toggleVariants } from \"@/components/ui/toggle\";\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n});\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n));\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName;\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext);\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className,\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  );\n});\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName;\n\nexport { ToggleGroup, ToggleGroupItem };\n",
      "type": "registry:ui",
      "target": ""
    }
  ]
}
</file>

<file path="public/r/styles/default/toggle.json">
{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "toggle",
  "type": "registry:ui",
  "author": "shadcn (https://ui.shadcn.com)",
  "dependencies": [
    "@radix-ui/react-toggle"
  ],
  "files": [
    {
      "path": "ui/toggle.tsx",
      "content": "\"use client\";\n\nimport * as React from \"react\";\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\";\nimport { cva, type VariantProps } from \"class-variance-authority\";\n\nimport { cn } from \"@/lib/utils\";\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center gap-2 rounded-md text-sm font-medium transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent shadow-sm hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-9 min-w-9 px-2\",\n        sm: \"h-8 min-w-8 px-1.5\",\n        lg: \"h-10 min-w-10 px-2.5\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  },\n);\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n));\n\nToggle.displayName = TogglePrimitive.Root.displayName;\n\nexport { Toggle, toggleVariants };\n",
      "type": "registry:ui",
      "target": ""
    }
  ]
}
</file>

<file path="public/r/styles/default/tool-02.json">
{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "tool-02",
  "type": "registry:block",
  "author": "shadcn (https://ui.shadcn.com)",
  "description": "Before after components.",
  "registryDependencies": [
    "compare"
  ],
  "files": [
    {
      "path": "blocks/tool-02/page.tsx",
      "content": "import React from \"react\";\nimport { Compare } from \"./components/compare\";\nconst Index = () => {\n  return (\n    <>\n      <div className=\"max-w-screen bg-backgroud z-50 flex min-h-screen items-center justify-center p-4\">\n        <div className=\"rounded-3xl border border-neutral-200 bg-neutral-100 p-4  dark:border-neutral-800 dark:bg-neutral-900\">\n          <Compare\n            firstImage=\"https://assets.aceternity.com/code-problem.png\"\n            secondImage=\"https://assets.aceternity.com/code-solution.png\"\n            firstImageClassName=\"object-cover object-left-top\"\n            secondImageClassname=\"object-cover object-left-top\"\n            className=\"h-[250px] w-[200px] md:h-[500px] md:w-[500px]\"\n            slideMode=\"hover\"\n          />\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default Index;\n",
      "type": "registry:page",
      "target": "app/main.tsx"
    },
    {
      "path": "blocks/tool-02/components/compare.tsx",
      "content": "\"use client\";\nimport React, { useState, useEffect, useRef, useCallback } from \"react\";\nimport { AnimatePresence, motion } from \"framer-motion\";\nimport { cn } from \"@/lib/utils\";\nimport { EllipsisVertical } from \"lucide-react\";\n\ninterface CompareProps {\n  firstImage?: string;\n  secondImage?: string;\n  className?: string;\n  firstImageClassName?: string;\n  secondImageClassname?: string;\n  initialSliderPercentage?: number;\n  slideMode?: \"hover\" | \"drag\";\n  showHandlebar?: boolean;\n  autoplay?: boolean;\n  autoplayDuration?: number;\n}\nexport const Compare = ({\n  firstImage = \"\",\n  secondImage = \"\",\n  className,\n  firstImageClassName,\n  secondImageClassname,\n  initialSliderPercentage = 50,\n  slideMode = \"hover\",\n  showHandlebar = true,\n  autoplay = false,\n  autoplayDuration = 5000,\n}: CompareProps) => {\n  const [sliderXPercent, setSliderXPercent] = useState(initialSliderPercentage);\n  const [isDragging, setIsDragging] = useState(false);\n\n  const sliderRef = useRef<HTMLDivElement>(null);\n\n  const [isMouseOver, setIsMouseOver] = useState(false);\n\n  const autoplayRef = useRef<NodeJS.Timeout | null>(null);\n\n  const startAutoplay = useCallback(() => {\n    if (!autoplay) return;\n\n    const startTime = Date.now();\n    const animate = () => {\n      const elapsedTime = Date.now() - startTime;\n      const progress =\n        (elapsedTime % (autoplayDuration * 2)) / autoplayDuration;\n      const percentage = progress <= 1 ? progress * 100 : (2 - progress) * 100;\n\n      setSliderXPercent(percentage);\n      autoplayRef.current = setTimeout(animate, 16); // ~60fps\n    };\n\n    animate();\n  }, [autoplay, autoplayDuration]);\n\n  const stopAutoplay = useCallback(() => {\n    if (autoplayRef.current) {\n      clearTimeout(autoplayRef.current);\n      autoplayRef.current = null;\n    }\n  }, []);\n\n  useEffect(() => {\n    startAutoplay();\n    return () => stopAutoplay();\n  }, [startAutoplay, stopAutoplay]);\n\n  function mouseEnterHandler() {\n    setIsMouseOver(true);\n    stopAutoplay();\n  }\n\n  function mouseLeaveHandler() {\n    setIsMouseOver(false);\n    if (slideMode === \"hover\") {\n      setSliderXPercent(initialSliderPercentage);\n    }\n    if (slideMode === \"drag\") {\n      setIsDragging(false);\n    }\n    startAutoplay();\n  }\n\n  const handleStart = useCallback(\n    (clientX: number) => {\n      if (slideMode === \"drag\") {\n        setIsDragging(true);\n      }\n    },\n    [slideMode],\n  );\n\n  const handleEnd = useCallback(() => {\n    if (slideMode === \"drag\") {\n      setIsDragging(false);\n    }\n  }, [slideMode]);\n\n  const handleMove = useCallback(\n    (clientX: number) => {\n      if (!sliderRef.current) return;\n      if (slideMode === \"hover\" || (slideMode === \"drag\" && isDragging)) {\n        const rect = sliderRef.current.getBoundingClientRect();\n        const x = clientX - rect.left;\n        const percent = (x / rect.width) * 100;\n        requestAnimationFrame(() => {\n          setSliderXPercent(Math.max(0, Math.min(100, percent)));\n        });\n      }\n    },\n    [slideMode, isDragging],\n  );\n\n  const handleMouseDown = useCallback(\n    (e: React.MouseEvent) => handleStart(e.clientX),\n    [handleStart],\n  );\n  const handleMouseUp = useCallback(() => handleEnd(), [handleEnd]);\n  const handleMouseMove = useCallback(\n    (e: React.MouseEvent) => handleMove(e.clientX),\n    [handleMove],\n  );\n\n  const handleTouchStart = useCallback(\n    (e: React.TouchEvent) => {\n      if (!autoplay) {\n        handleStart(e.touches[0].clientX);\n      }\n    },\n    [handleStart, autoplay],\n  );\n\n  const handleTouchEnd = useCallback(() => {\n    if (!autoplay) {\n      handleEnd();\n    }\n  }, [handleEnd, autoplay]);\n\n  const handleTouchMove = useCallback(\n    (e: React.TouchEvent) => {\n      if (!autoplay) {\n        handleMove(e.touches[0].clientX);\n      }\n    },\n    [handleMove, autoplay],\n  );\n\n  return (\n    <div\n      ref={sliderRef}\n      className={cn(\"h-[400px] w-[400px] overflow-hidden\", className)}\n      style={{\n        position: \"relative\",\n        cursor: slideMode === \"drag\" ? \"grab\" : \"col-resize\",\n      }}\n      onMouseMove={handleMouseMove}\n      onMouseLeave={mouseLeaveHandler}\n      onMouseEnter={mouseEnterHandler}\n      onMouseDown={handleMouseDown}\n      onMouseUp={handleMouseUp}\n      onTouchStart={handleTouchStart}\n      onTouchEnd={handleTouchEnd}\n      onTouchMove={handleTouchMove}\n    >\n      <AnimatePresence initial={false}>\n        <motion.div\n          className=\"absolute top-0 z-30 m-auto h-full w-px bg-gradient-to-b from-transparent from-[5%] via-indigo-500 to-transparent to-[95%]\"\n          style={{\n            left: `${sliderXPercent}%`,\n            top: \"0\",\n            zIndex: 40,\n          }}\n          transition={{ duration: 0 }}\n        >\n          <div className=\"absolute left-0 top-1/2 z-20 h-full w-36 -translate-y-1/2 bg-gradient-to-r from-indigo-400 via-transparent to-transparent opacity-50 [mask-image:radial-gradient(100px_at_left,white,transparent)]\" />\n          <div className=\"absolute left-0 top-1/2 z-10 h-1/2 w-10 -translate-y-1/2 bg-gradient-to-r from-cyan-400 via-transparent to-transparent opacity-100 [mask-image:radial-gradient(50px_at_left,white,transparent)]\" />\n          <div className=\"absolute -right-10 top-1/2 h-3/4 w-10 -translate-y-1/2 [mask-image:radial-gradient(100px_at_left,white,transparent)]\">\n            {/* <MemoizedSparklesCore background=\"transparent\" minSize={0.4} maxSize={1} particleDensity={1200} className=\"h-full w-full\" particleColor=\"#FFFFFF\" /> */}\n          </div>\n          {showHandlebar && (\n            <div className=\"absolute -right-2.5 top-1/2 z-30 flex h-5 w-5 -translate-y-1/2 items-center   justify-center rounded-md bg-white shadow-[0px_-1px_0px_0px_#FFFFFF40]\">\n              <EllipsisVertical className=\"h-4 w-4 text-black\" />\n            </div>\n          )}\n        </motion.div>\n      </AnimatePresence>\n      <div className=\"pointer-events-none relative z-20 h-full w-full overflow-hidden\">\n        <AnimatePresence initial={false}>\n          {firstImage ? (\n            <motion.div\n              className={cn(\n                \"absolute inset-0 z-20 h-full w-full shrink-0 select-none overflow-hidden rounded-2xl\",\n                firstImageClassName,\n              )}\n              style={{\n                clipPath: `inset(0 ${100 - sliderXPercent}% 0 0)`,\n              }}\n              transition={{ duration: 0 }}\n            >\n              <img\n                alt=\"first image\"\n                src={firstImage}\n                className={cn(\n                  \"absolute inset-0  z-20 h-full w-full shrink-0 select-none rounded-2xl\",\n                  firstImageClassName,\n                )}\n                draggable={false}\n              />\n            </motion.div>\n          ) : null}\n        </AnimatePresence>\n      </div>\n\n      <AnimatePresence initial={false}>\n        {secondImage ? (\n          <motion.img\n            className={cn(\n              \"absolute left-0 top-0 z-[19]  h-full w-full select-none rounded-2xl\",\n              secondImageClassname,\n            )}\n            alt=\"second image\"\n            src={secondImage}\n            draggable={false}\n          />\n        ) : null}\n      </AnimatePresence>\n    </div>\n  );\n};\n\n// const MemoizedSparklesCore = React.memo(SparklesCore);\n",
      "type": "registry:component",
      "target": ""
    },
    {
      "path": "lib/utils.ts",
      "content": "import { clsx, type ClassValue } from \"clsx\";\nimport { twMerge } from \"tailwind-merge\";\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs));\n}\n",
      "type": "registry:ui",
      "target": "lib/utils.ts"
    }
  ],
  "categories": [
    "tool"
  ]
}
</file>

<file path="public/r/styles/default/tooltip.json">
{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "tooltip",
  "type": "registry:ui",
  "author": "shadcn (https://ui.shadcn.com)",
  "dependencies": [
    "@radix-ui/react-tooltip"
  ],
  "files": [
    {
      "path": "ui/tooltip.tsx",
      "content": "\"use client\";\n\nimport * as React from \"react\";\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\";\n\nimport { cn } from \"@/lib/utils\";\n\nconst TooltipProvider = TooltipPrimitive.Provider;\n\nconst Tooltip = TooltipPrimitive.Root;\n\nconst TooltipTrigger = TooltipPrimitive.Trigger;\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md bg-primary px-3 py-1.5 text-xs text-primary-foreground animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n      className,\n    )}\n    {...props}\n  />\n));\nTooltipContent.displayName = TooltipPrimitive.Content.displayName;\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider };\n",
      "type": "registry:ui",
      "target": ""
    }
  ]
}
</file>

<file path="public/r/styles/default/utils.json">
{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "utils",
  "type": "registry:lib",
  "author": "shadcn (https://ui.shadcn.com)",
  "dependencies": [
    "clsx",
    "tailwind-merge"
  ],
  "files": [
    {
      "path": "lib/utils.ts",
      "content": "import { clsx, type ClassValue } from \"clsx\";\nimport { twMerge } from \"tailwind-merge\";\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs));\n}\n",
      "type": "registry:lib",
      "target": ""
    }
  ]
}
</file>

<file path="public/r/themes/amber-minimal.json">
{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "amber-minimal",
  "type": "registry:style",
  "css": {
    "@layer base": {
      "body": {
        "letter-spacing": "var(--tracking-normal)"
      }
    }
  },
  "cssVars": {
    "theme": {
      "font-sans": "Inter, sans-serif",
      "font-mono": "JetBrains Mono, monospace",
      "font-serif": "Source Serif 4, serif",
      "radius": "0.375rem",
      "tracking-tighter": "calc(var(--tracking-normal) - 0.05em)",
      "tracking-tight": "calc(var(--tracking-normal) - 0.025em)",
      "tracking-wide": "calc(var(--tracking-normal) + 0.025em)",
      "tracking-wider": "calc(var(--tracking-normal) + 0.05em)",
      "tracking-widest": "calc(var(--tracking-normal) + 0.1em)"
    },
    "light": {
      "background": "oklch(1.00 0 0)",
      "foreground": "oklch(0.27 0 0)",
      "card": "oklch(1.00 0 0)",
      "card-foreground": "oklch(0.27 0 0)",
      "popover": "oklch(1.00 0 0)",
      "popover-foreground": "oklch(0.27 0 0)",
      "primary": "oklch(0.77 0.16 70.08)",
      "primary-foreground": "oklch(0 0 0)",
      "secondary": "oklch(0.97 0.00 264.54)",
      "secondary-foreground": "oklch(0.45 0.03 256.80)",
      "muted": "oklch(0.98 0.00 247.84)",
      "muted-foreground": "oklch(0.55 0.02 264.36)",
      "accent": "oklch(0.99 0.02 95.28)",
      "accent-foreground": "oklch(0.47 0.12 46.20)",
      "destructive": "oklch(0.64 0.21 25.33)",
      "destructive-foreground": "oklch(1.00 0 0)",
      "border": "oklch(0.93 0.01 264.53)",
      "input": "oklch(0.93 0.01 264.53)",
      "ring": "oklch(0.77 0.16 70.08)",
      "chart-1": "oklch(0.77 0.16 70.08)",
      "chart-2": "oklch(0.67 0.16 58.32)",
      "chart-3": "oklch(0.56 0.15 49.00)",
      "chart-4": "oklch(0.47 0.12 46.20)",
      "chart-5": "oklch(0.41 0.11 45.90)",
      "radius": "0.375rem",
      "sidebar": "oklch(0.98 0.00 247.84)",
      "sidebar-foreground": "oklch(0.27 0 0)",
      "sidebar-primary": "oklch(0.77 0.16 70.08)",
      "sidebar-primary-foreground": "oklch(1.00 0 0)",
      "sidebar-accent": "oklch(0.99 0.02 95.28)",
      "sidebar-accent-foreground": "oklch(0.47 0.12 46.20)",
      "sidebar-border": "oklch(0.93 0.01 264.53)",
      "sidebar-ring": "oklch(0.77 0.16 70.08)",
      "font-sans": "Inter, sans-serif",
      "font-serif": "Source Serif 4, serif",
      "font-mono": "JetBrains Mono, monospace",
      "shadow-color": "hsl(0 0% 0%)",
      "shadow-opacity": "0.1",
      "shadow-blur": "8px",
      "shadow-spread": "-1px",
      "shadow-offset-x": "0px",
      "shadow-offset-y": "4px",
      "letter-spacing": "0em",
      "spacing": "0.25rem",
      "shadow-2xs": "0px 4px 8px -1px hsl(0 0% 0% / 0.05)",
      "shadow-xs": "0px 4px 8px -1px hsl(0 0% 0% / 0.05)",
      "shadow-sm": "0px 4px 8px -1px hsl(0 0% 0% / 0.10), 0px 1px 2px -2px hsl(0 0% 0% / 0.10)",
      "shadow": "0px 4px 8px -1px hsl(0 0% 0% / 0.10), 0px 1px 2px -2px hsl(0 0% 0% / 0.10)",
      "shadow-md": "0px 4px 8px -1px hsl(0 0% 0% / 0.10), 0px 2px 4px -2px hsl(0 0% 0% / 0.10)",
      "shadow-lg": "0px 4px 8px -1px hsl(0 0% 0% / 0.10), 0px 4px 6px -2px hsl(0 0% 0% / 0.10)",
      "shadow-xl": "0px 4px 8px -1px hsl(0 0% 0% / 0.10), 0px 8px 10px -2px hsl(0 0% 0% / 0.10)",
      "shadow-2xl": "0px 4px 8px -1px hsl(0 0% 0% / 0.25)",
      "tracking-normal": "0em"
    },
    "dark": {
      "background": "oklch(0.20 0 0)",
      "foreground": "oklch(0.92 0 0)",
      "card": "oklch(0.27 0 0)",
      "card-foreground": "oklch(0.92 0 0)",
      "popover": "oklch(0.27 0 0)",
      "popover-foreground": "oklch(0.92 0 0)",
      "primary": "oklch(0.77 0.16 70.08)",
      "primary-foreground": "oklch(0 0 0)",
      "secondary": "oklch(0.27 0 0)",
      "secondary-foreground": "oklch(0.92 0 0)",
      "muted": "oklch(0.27 0 0)",
      "muted-foreground": "oklch(0.72 0 0)",
      "accent": "oklch(0.47 0.12 46.20)",
      "accent-foreground": "oklch(0.92 0.12 95.75)",
      "destructive": "oklch(0.64 0.21 25.33)",
      "destructive-foreground": "oklch(1.00 0 0)",
      "border": "oklch(0.37 0 0)",
      "input": "oklch(0.37 0 0)",
      "ring": "oklch(0.77 0.16 70.08)",
      "chart-1": "oklch(0.84 0.16 84.43)",
      "chart-2": "oklch(0.67 0.16 58.32)",
      "chart-3": "oklch(0.47 0.12 46.20)",
      "chart-4": "oklch(0.56 0.15 49.00)",
      "chart-5": "oklch(0.47 0.12 46.20)",
      "radius": "0.375rem",
      "sidebar": "oklch(0.17 0 0)",
      "sidebar-foreground": "oklch(0.92 0 0)",
      "sidebar-primary": "oklch(0.77 0.16 70.08)",
      "sidebar-primary-foreground": "oklch(1.00 0 0)",
      "sidebar-accent": "oklch(0.47 0.12 46.20)",
      "sidebar-accent-foreground": "oklch(0.92 0.12 95.75)",
      "sidebar-border": "oklch(0.37 0 0)",
      "sidebar-ring": "oklch(0.77 0.16 70.08)",
      "font-sans": "Inter, sans-serif",
      "font-serif": "Source Serif 4, serif",
      "font-mono": "JetBrains Mono, monospace",
      "shadow-color": "hsl(0 0% 0%)",
      "shadow-opacity": "0.1",
      "shadow-blur": "8px",
      "shadow-spread": "-1px",
      "shadow-offset-x": "0px",
      "shadow-offset-y": "4px",
      "letter-spacing": "0em",
      "spacing": "0.25rem",
      "shadow-2xs": "0px 4px 8px -1px hsl(0 0% 0% / 0.05)",
      "shadow-xs": "0px 4px 8px -1px hsl(0 0% 0% / 0.05)",
      "shadow-sm": "0px 4px 8px -1px hsl(0 0% 0% / 0.10), 0px 1px 2px -2px hsl(0 0% 0% / 0.10)",
      "shadow": "0px 4px 8px -1px hsl(0 0% 0% / 0.10), 0px 1px 2px -2px hsl(0 0% 0% / 0.10)",
      "shadow-md": "0px 4px 8px -1px hsl(0 0% 0% / 0.10), 0px 2px 4px -2px hsl(0 0% 0% / 0.10)",
      "shadow-lg": "0px 4px 8px -1px hsl(0 0% 0% / 0.10), 0px 4px 6px -2px hsl(0 0% 0% / 0.10)",
      "shadow-xl": "0px 4px 8px -1px hsl(0 0% 0% / 0.10), 0px 8px 10px -2px hsl(0 0% 0% / 0.10)",
      "shadow-2xl": "0px 4px 8px -1px hsl(0 0% 0% / 0.25)"
    }
  }
}
</file>

<file path="public/r/themes/amethyst-haze.json">
{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "amethyst-haze",
  "type": "registry:style",
  "css": {
    "@layer base": {
      "body": {
        "letter-spacing": "var(--tracking-normal)"
      }
    }
  },
  "cssVars": {
    "theme": {
      "font-sans": "Geist, sans-serif",
      "font-mono": "\"Fira Code\", \"Courier New\", monospace",
      "font-serif": "\"Lora\", Georgia, serif",
      "radius": "0.5rem",
      "tracking-tighter": "calc(var(--tracking-normal) - 0.05em)",
      "tracking-tight": "calc(var(--tracking-normal) - 0.025em)",
      "tracking-wide": "calc(var(--tracking-normal) + 0.025em)",
      "tracking-wider": "calc(var(--tracking-normal) + 0.05em)",
      "tracking-widest": "calc(var(--tracking-normal) + 0.1em)"
    },
    "light": {
      "background": "oklch(0.98 0.00 301.43)",
      "foreground": "oklch(0.37 0.03 287.08)",
      "card": "oklch(1.00 0 0)",
      "card-foreground": "oklch(0.37 0.03 287.08)",
      "popover": "oklch(1.00 0 0)",
      "popover-foreground": "oklch(0.37 0.03 287.08)",
      "primary": "oklch(0.61 0.08 299.73)",
      "primary-foreground": "oklch(0.98 0.00 301.43)",
      "secondary": "oklch(0.90 0.03 300.24)",
      "secondary-foreground": "oklch(0.37 0.03 287.08)",
      "muted": "oklch(0.89 0.01 299.78)",
      "muted-foreground": "oklch(0.53 0.04 290.79)",
      "accent": "oklch(0.79 0.08 359.94)",
      "accent-foreground": "oklch(0.34 0.04 1.76)",
      "destructive": "oklch(0.63 0.16 22.67)",
      "destructive-foreground": "oklch(0.98 0.00 301.43)",
      "border": "oklch(0.84 0.02 300.14)",
      "input": "oklch(0.93 0.01 301.28)",
      "ring": "oklch(0.61 0.08 299.73)",
      "chart-1": "oklch(0.61 0.08 299.73)",
      "chart-2": "oklch(0.79 0.08 359.94)",
      "chart-3": "oklch(0.73 0.07 169.87)",
      "chart-4": "oklch(0.85 0.09 76.83)",
      "chart-5": "oklch(0.79 0.06 258.08)",
      "radius": "0.5rem",
      "sidebar": "oklch(0.96 0.01 301.35)",
      "sidebar-foreground": "oklch(0.37 0.03 287.08)",
      "sidebar-primary": "oklch(0.61 0.08 299.73)",
      "sidebar-primary-foreground": "oklch(0.98 0.00 301.43)",
      "sidebar-accent": "oklch(0.79 0.08 359.94)",
      "sidebar-accent-foreground": "oklch(0.34 0.04 1.76)",
      "sidebar-border": "oklch(0.87 0.02 302.17)",
      "sidebar-ring": "oklch(0.61 0.08 299.73)",
      "font-sans": "Geist, sans-serif",
      "font-serif": "\"Lora\", Georgia, serif",
      "font-mono": "\"Fira Code\", \"Courier New\", monospace",
      "shadow-color": "hsl(0 0% 0%)",
      "shadow-opacity": "0.06",
      "shadow-blur": "5px",
      "shadow-spread": "1px",
      "shadow-offset-x": "1px",
      "shadow-offset-y": "2px",
      "letter-spacing": "0em",
      "spacing": "0.25rem",
      "shadow-2xs": "1px 2px 5px 1px hsl(0 0% 0% / 0.03)",
      "shadow-xs": "1px 2px 5px 1px hsl(0 0% 0% / 0.03)",
      "shadow-sm": "1px 2px 5px 1px hsl(0 0% 0% / 0.06), 1px 1px 2px 0px hsl(0 0% 0% / 0.06)",
      "shadow": "1px 2px 5px 1px hsl(0 0% 0% / 0.06), 1px 1px 2px 0px hsl(0 0% 0% / 0.06)",
      "shadow-md": "1px 2px 5px 1px hsl(0 0% 0% / 0.06), 1px 2px 4px 0px hsl(0 0% 0% / 0.06)",
      "shadow-lg": "1px 2px 5px 1px hsl(0 0% 0% / 0.06), 1px 4px 6px 0px hsl(0 0% 0% / 0.06)",
      "shadow-xl": "1px 2px 5px 1px hsl(0 0% 0% / 0.06), 1px 8px 10px 0px hsl(0 0% 0% / 0.06)",
      "shadow-2xl": "1px 2px 5px 1px hsl(0 0% 0% / 0.15)",
      "tracking-normal": "0em"
    },
    "dark": {
      "background": "oklch(0.22 0.02 292.85)",
      "foreground": "oklch(0.91 0.02 293.56)",
      "card": "oklch(0.25 0.03 292.73)",
      "card-foreground": "oklch(0.91 0.02 293.56)",
      "popover": "oklch(0.25 0.03 292.73)",
      "popover-foreground": "oklch(0.91 0.02 293.56)",
      "primary": "oklch(0.71 0.08 302.05)",
      "primary-foreground": "oklch(0.22 0.02 292.85)",
      "secondary": "oklch(0.46 0.05 295.56)",
      "secondary-foreground": "oklch(0.91 0.02 293.56)",
      "muted": "oklch(0.26 0.03 294.84)",
      "muted-foreground": "oklch(0.70 0.03 300.06)",
      "accent": "oklch(0.32 0.03 308.61)",
      "accent-foreground": "oklch(0.84 0.07 2.67)",
      "destructive": "oklch(0.69 0.14 21.46)",
      "destructive-foreground": "oklch(0.22 0.02 292.85)",
      "border": "oklch(0.31 0.04 293.34)",
      "input": "oklch(0.28 0.03 291.27)",
      "ring": "oklch(0.71 0.08 302.05)",
      "chart-1": "oklch(0.71 0.08 302.05)",
      "chart-2": "oklch(0.84 0.07 2.67)",
      "chart-3": "oklch(0.73 0.07 169.87)",
      "chart-4": "oklch(0.85 0.09 76.83)",
      "chart-5": "oklch(0.79 0.06 258.08)",
      "radius": "0.5rem",
      "sidebar": "oklch(0.20 0.02 293.66)",
      "sidebar-foreground": "oklch(0.91 0.02 293.56)",
      "sidebar-primary": "oklch(0.71 0.08 302.05)",
      "sidebar-primary-foreground": "oklch(0.22 0.02 292.85)",
      "sidebar-accent": "oklch(0.32 0.03 308.61)",
      "sidebar-accent-foreground": "oklch(0.84 0.07 2.67)",
      "sidebar-border": "oklch(0.28 0.03 291.27)",
      "sidebar-ring": "oklch(0.71 0.08 302.05)",
      "font-sans": "Geist, sans-serif",
      "font-serif": "\"Lora\", Georgia, serif",
      "font-mono": "\"Fira Code\", \"Courier New\", monospace",
      "shadow-color": "hsl(0 0% 0%)",
      "shadow-opacity": "0.06",
      "shadow-blur": "5px",
      "shadow-spread": "1px",
      "shadow-offset-x": "1px",
      "shadow-offset-y": "2px",
      "letter-spacing": "0em",
      "spacing": "0.25rem",
      "shadow-2xs": "1px 2px 5px 1px hsl(0 0% 0% / 0.03)",
      "shadow-xs": "1px 2px 5px 1px hsl(0 0% 0% / 0.03)",
      "shadow-sm": "1px 2px 5px 1px hsl(0 0% 0% / 0.06), 1px 1px 2px 0px hsl(0 0% 0% / 0.06)",
      "shadow": "1px 2px 5px 1px hsl(0 0% 0% / 0.06), 1px 1px 2px 0px hsl(0 0% 0% / 0.06)",
      "shadow-md": "1px 2px 5px 1px hsl(0 0% 0% / 0.06), 1px 2px 4px 0px hsl(0 0% 0% / 0.06)",
      "shadow-lg": "1px 2px 5px 1px hsl(0 0% 0% / 0.06), 1px 4px 6px 0px hsl(0 0% 0% / 0.06)",
      "shadow-xl": "1px 2px 5px 1px hsl(0 0% 0% / 0.06), 1px 8px 10px 0px hsl(0 0% 0% / 0.06)",
      "shadow-2xl": "1px 2px 5px 1px hsl(0 0% 0% / 0.15)"
    }
  }
}
</file>

<file path="public/r/themes/bold-tech.json">
{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "bold-tech",
  "type": "registry:style",
  "css": {
    "@layer base": {
      "body": {
        "letter-spacing": "var(--tracking-normal)"
      }
    }
  },
  "cssVars": {
    "theme": {
      "font-sans": "Roboto, sans-serif",
      "font-mono": "Fira Code, monospace",
      "font-serif": "Playfair Display, serif",
      "radius": "0.625rem",
      "tracking-tighter": "calc(var(--tracking-normal) - 0.05em)",
      "tracking-tight": "calc(var(--tracking-normal) - 0.025em)",
      "tracking-wide": "calc(var(--tracking-normal) + 0.025em)",
      "tracking-wider": "calc(var(--tracking-normal) + 0.05em)",
      "tracking-widest": "calc(var(--tracking-normal) + 0.1em)"
    },
    "light": {
      "background": "oklch(1.00 0 0)",
      "foreground": "oklch(0.36 0.14 278.70)",
      "card": "oklch(1.00 0 0)",
      "card-foreground": "oklch(0.36 0.14 278.70)",
      "popover": "oklch(1.00 0 0)",
      "popover-foreground": "oklch(0.36 0.14 278.70)",
      "primary": "oklch(0.61 0.22 292.72)",
      "primary-foreground": "oklch(1.00 0 0)",
      "secondary": "oklch(0.96 0.02 295.19)",
      "secondary-foreground": "oklch(0.46 0.21 277.02)",
      "muted": "oklch(0.97 0.02 293.76)",
      "muted-foreground": "oklch(0.54 0.25 293.01)",
      "accent": "oklch(0.93 0.03 255.59)",
      "accent-foreground": "oklch(0.42 0.18 265.64)",
      "destructive": "oklch(0.64 0.21 25.33)",
      "destructive-foreground": "oklch(1.00 0 0)",
      "border": "oklch(0.93 0.03 272.79)",
      "input": "oklch(0.93 0.03 272.79)",
      "ring": "oklch(0.61 0.22 292.72)",
      "chart-1": "oklch(0.61 0.22 292.72)",
      "chart-2": "oklch(0.54 0.25 293.01)",
      "chart-3": "oklch(0.49 0.24 292.58)",
      "chart-4": "oklch(0.43 0.21 292.76)",
      "chart-5": "oklch(0.38 0.18 293.74)",
      "radius": "0.625rem",
      "sidebar": "oklch(0.97 0.02 293.76)",
      "sidebar-foreground": "oklch(0.36 0.14 278.70)",
      "sidebar-primary": "oklch(0.61 0.22 292.72)",
      "sidebar-primary-foreground": "oklch(1.00 0 0)",
      "sidebar-accent": "oklch(0.93 0.03 255.59)",
      "sidebar-accent-foreground": "oklch(0.42 0.18 265.64)",
      "sidebar-border": "oklch(0.93 0.03 272.79)",
      "sidebar-ring": "oklch(0.61 0.22 292.72)",
      "font-sans": "Roboto, sans-serif",
      "font-serif": "Playfair Display, serif",
      "font-mono": "Fira Code, monospace",
      "shadow-color": "hsl(255 86% 66%)",
      "shadow-opacity": "0.2",
      "shadow-blur": "4px",
      "shadow-spread": "0px",
      "shadow-offset-x": "2px",
      "shadow-offset-y": "2px",
      "letter-spacing": "0em",
      "spacing": "0.25rem",
      "shadow-2xs": "2px 2px 4px 0px hsl(255 86% 66% / 0.10)",
      "shadow-xs": "2px 2px 4px 0px hsl(255 86% 66% / 0.10)",
      "shadow-sm": "2px 2px 4px 0px hsl(255 86% 66% / 0.20), 2px 1px 2px -1px hsl(255 86% 66% / 0.20)",
      "shadow": "2px 2px 4px 0px hsl(255 86% 66% / 0.20), 2px 1px 2px -1px hsl(255 86% 66% / 0.20)",
      "shadow-md": "2px 2px 4px 0px hsl(255 86% 66% / 0.20), 2px 2px 4px -1px hsl(255 86% 66% / 0.20)",
      "shadow-lg": "2px 2px 4px 0px hsl(255 86% 66% / 0.20), 2px 4px 6px -1px hsl(255 86% 66% / 0.20)",
      "shadow-xl": "2px 2px 4px 0px hsl(255 86% 66% / 0.20), 2px 8px 10px -1px hsl(255 86% 66% / 0.20)",
      "shadow-2xl": "2px 2px 4px 0px hsl(255 86% 66% / 0.50)",
      "tracking-normal": "0em"
    },
    "dark": {
      "background": "oklch(0.21 0.04 265.75)",
      "foreground": "oklch(0.93 0.03 272.79)",
      "card": "oklch(0.26 0.09 281.29)",
      "card-foreground": "oklch(0.93 0.03 272.79)",
      "popover": "oklch(0.26 0.09 281.29)",
      "popover-foreground": "oklch(0.93 0.03 272.79)",
      "primary": "oklch(0.61 0.22 292.72)",
      "primary-foreground": "oklch(1.00 0 0)",
      "secondary": "oklch(0.26 0.09 281.29)",
      "secondary-foreground": "oklch(0.93 0.03 272.79)",
      "muted": "oklch(0.26 0.09 281.29)",
      "muted-foreground": "oklch(0.81 0.10 293.57)",
      "accent": "oklch(0.46 0.21 277.02)",
      "accent-foreground": "oklch(0.93 0.03 272.79)",
      "destructive": "oklch(0.64 0.21 25.33)",
      "destructive-foreground": "oklch(1.00 0 0)",
      "border": "oklch(0.28 0.14 291.09)",
      "input": "oklch(0.28 0.14 291.09)",
      "ring": "oklch(0.61 0.22 292.72)",
      "chart-1": "oklch(0.71 0.16 293.54)",
      "chart-2": "oklch(0.61 0.22 292.72)",
      "chart-3": "oklch(0.54 0.25 293.01)",
      "chart-4": "oklch(0.49 0.24 292.58)",
      "chart-5": "oklch(0.43 0.21 292.76)",
      "radius": "0.625rem",
      "sidebar": "oklch(0.21 0.04 265.75)",
      "sidebar-foreground": "oklch(0.93 0.03 272.79)",
      "sidebar-primary": "oklch(0.61 0.22 292.72)",
      "sidebar-primary-foreground": "oklch(1.00 0 0)",
      "sidebar-accent": "oklch(0.46 0.21 277.02)",
      "sidebar-accent-foreground": "oklch(0.93 0.03 272.79)",
      "sidebar-border": "oklch(0.28 0.14 291.09)",
      "sidebar-ring": "oklch(0.61 0.22 292.72)",
      "font-sans": "Roboto, sans-serif",
      "font-serif": "Playfair Display, serif",
      "font-mono": "Fira Code, monospace",
      "shadow-color": "hsl(255 86% 66%)",
      "shadow-opacity": "0.2",
      "shadow-blur": "4px",
      "shadow-spread": "0px",
      "shadow-offset-x": "2px",
      "shadow-offset-y": "2px",
      "letter-spacing": "0em",
      "spacing": "0.25rem",
      "shadow-2xs": "2px 2px 4px 0px hsl(255 86% 66% / 0.10)",
      "shadow-xs": "2px 2px 4px 0px hsl(255 86% 66% / 0.10)",
      "shadow-sm": "2px 2px 4px 0px hsl(255 86% 66% / 0.20), 2px 1px 2px -1px hsl(255 86% 66% / 0.20)",
      "shadow": "2px 2px 4px 0px hsl(255 86% 66% / 0.20), 2px 1px 2px -1px hsl(255 86% 66% / 0.20)",
      "shadow-md": "2px 2px 4px 0px hsl(255 86% 66% / 0.20), 2px 2px 4px -1px hsl(255 86% 66% / 0.20)",
      "shadow-lg": "2px 2px 4px 0px hsl(255 86% 66% / 0.20), 2px 4px 6px -1px hsl(255 86% 66% / 0.20)",
      "shadow-xl": "2px 2px 4px 0px hsl(255 86% 66% / 0.20), 2px 8px 10px -1px hsl(255 86% 66% / 0.20)",
      "shadow-2xl": "2px 2px 4px 0px hsl(255 86% 66% / 0.50)"
    }
  }
}
</file>

<file path="public/r/themes/bubblegum.json">
{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "bubblegum",
  "type": "registry:style",
  "css": {
    "@layer base": {
      "body": {
        "letter-spacing": "var(--tracking-normal)"
      }
    }
  },
  "cssVars": {
    "theme": {
      "font-sans": "Poppins, sans-serif",
      "font-mono": "Fira Code, monospace",
      "font-serif": "Lora, serif",
      "radius": "0.4rem",
      "tracking-tighter": "calc(var(--tracking-normal) - 0.05em)",
      "tracking-tight": "calc(var(--tracking-normal) - 0.025em)",
      "tracking-wide": "calc(var(--tracking-normal) + 0.025em)",
      "tracking-wider": "calc(var(--tracking-normal) + 0.05em)",
      "tracking-widest": "calc(var(--tracking-normal) + 0.1em)"
    },
    "light": {
      "background": "oklch(0.94 0.02 345.70)",
      "foreground": "oklch(0.47 0 0)",
      "card": "oklch(0.95 0.05 86.89)",
      "card-foreground": "oklch(0.47 0 0)",
      "popover": "oklch(1.00 0 0)",
      "popover-foreground": "oklch(0.47 0 0)",
      "primary": "oklch(0.62 0.18 348.14)",
      "primary-foreground": "oklch(1.00 0 0)",
      "secondary": "oklch(0.81 0.07 198.19)",
      "secondary-foreground": "oklch(0.32 0 0)",
      "muted": "oklch(0.88 0.05 212.10)",
      "muted-foreground": "oklch(0.58 0 0)",
      "accent": "oklch(0.92 0.08 87.67)",
      "accent-foreground": "oklch(0.32 0 0)",
      "destructive": "oklch(0.71 0.17 21.96)",
      "destructive-foreground": "oklch(1.00 0 0)",
      "border": "oklch(0.62 0.18 348.14)",
      "input": "oklch(0.92 0 0)",
      "ring": "oklch(0.70 0.16 350.75)",
      "chart-1": "oklch(0.70 0.16 350.75)",
      "chart-2": "oklch(0.82 0.08 212.09)",
      "chart-3": "oklch(0.92 0.08 87.67)",
      "chart-4": "oklch(0.80 0.11 348.18)",
      "chart-5": "oklch(0.62 0.19 353.91)",
      "radius": "0.4rem",
      "sidebar": "oklch(0.91 0.04 343.09)",
      "sidebar-foreground": "oklch(0.32 0 0)",
      "sidebar-primary": "oklch(0.66 0.21 354.31)",
      "sidebar-primary-foreground": "oklch(1.00 0 0)",
      "sidebar-accent": "oklch(0.82 0.11 346.02)",
      "sidebar-accent-foreground": "oklch(0.32 0 0)",
      "sidebar-border": "oklch(0.95 0.03 307.17)",
      "sidebar-ring": "oklch(0.66 0.21 354.31)",
      "font-sans": "Poppins, sans-serif",
      "font-serif": "Lora, serif",
      "font-mono": "Fira Code, monospace",
      "shadow-color": "hsl(325.78 58.18% 56.86% / 0.5)",
      "shadow-opacity": "1.0",
      "shadow-blur": "0px",
      "shadow-spread": "0px",
      "shadow-offset-x": "3px",
      "shadow-offset-y": "3px",
      "letter-spacing": "0em",
      "spacing": "0.25rem",
      "shadow-2xs": "3px 3px 0px 0px hsl(325.78 58.18% 56.86% / 0.50)",
      "shadow-xs": "3px 3px 0px 0px hsl(325.78 58.18% 56.86% / 0.50)",
      "shadow-sm": "3px 3px 0px 0px hsl(325.78 58.18% 56.86% / 1.00), 3px 1px 2px -1px hsl(325.78 58.18% 56.86% / 1.00)",
      "shadow": "3px 3px 0px 0px hsl(325.78 58.18% 56.86% / 1.00), 3px 1px 2px -1px hsl(325.78 58.18% 56.86% / 1.00)",
      "shadow-md": "3px 3px 0px 0px hsl(325.78 58.18% 56.86% / 1.00), 3px 2px 4px -1px hsl(325.78 58.18% 56.86% / 1.00)",
      "shadow-lg": "3px 3px 0px 0px hsl(325.78 58.18% 56.86% / 1.00), 3px 4px 6px -1px hsl(325.78 58.18% 56.86% / 1.00)",
      "shadow-xl": "3px 3px 0px 0px hsl(325.78 58.18% 56.86% / 1.00), 3px 8px 10px -1px hsl(325.78 58.18% 56.86% / 1.00)",
      "shadow-2xl": "3px 3px 0px 0px hsl(325.78 58.18% 56.86% / 2.50)",
      "tracking-normal": "0em"
    },
    "dark": {
      "background": "oklch(0.25 0.03 234.16)",
      "foreground": "oklch(0.93 0.02 349.08)",
      "card": "oklch(0.29 0.03 233.54)",
      "card-foreground": "oklch(0.93 0.02 349.08)",
      "popover": "oklch(0.29 0.03 233.54)",
      "popover-foreground": "oklch(0.93 0.02 349.08)",
      "primary": "oklch(0.92 0.08 87.67)",
      "primary-foreground": "oklch(0.25 0.03 234.16)",
      "secondary": "oklch(0.78 0.08 4.13)",
      "secondary-foreground": "oklch(0.25 0.03 234.16)",
      "muted": "oklch(0.27 0.01 255.58)",
      "muted-foreground": "oklch(0.78 0.08 4.13)",
      "accent": "oklch(0.67 0.10 356.98)",
      "accent-foreground": "oklch(0.93 0.02 349.08)",
      "destructive": "oklch(0.67 0.18 350.36)",
      "destructive-foreground": "oklch(0.25 0.03 234.16)",
      "border": "oklch(0.39 0.04 242.22)",
      "input": "oklch(0.31 0.03 232.00)",
      "ring": "oklch(0.70 0.09 201.87)",
      "chart-1": "oklch(0.70 0.09 201.87)",
      "chart-2": "oklch(0.78 0.08 4.13)",
      "chart-3": "oklch(0.67 0.10 356.98)",
      "chart-4": "oklch(0.44 0.07 217.08)",
      "chart-5": "oklch(0.27 0.01 255.58)",
      "radius": "0.4rem",
      "sidebar": "oklch(0.23 0.03 235.97)",
      "sidebar-foreground": "oklch(0.97 0.00 264.54)",
      "sidebar-primary": "oklch(0.66 0.21 354.31)",
      "sidebar-primary-foreground": "oklch(1.00 0 0)",
      "sidebar-accent": "oklch(0.82 0.11 346.02)",
      "sidebar-accent-foreground": "oklch(0.28 0.03 256.85)",
      "sidebar-border": "oklch(0.37 0.03 259.73)",
      "sidebar-ring": "oklch(0.66 0.21 354.31)",
      "font-sans": "Poppins, sans-serif",
      "font-serif": "Lora, serif",
      "font-mono": "Fira Code, monospace",
      "shadow-color": "#324859",
      "shadow-opacity": "1.0",
      "shadow-blur": "0px",
      "shadow-spread": "0px",
      "shadow-offset-x": "3px",
      "shadow-offset-y": "3px",
      "letter-spacing": "0em",
      "spacing": "0.25rem",
      "shadow-2xs": "3px 3px 0px 0px hsl(206.15 28.06% 27.25% / 0.50)",
      "shadow-xs": "3px 3px 0px 0px hsl(206.15 28.06% 27.25% / 0.50)",
      "shadow-sm": "3px 3px 0px 0px hsl(206.15 28.06% 27.25% / 1.00), 3px 1px 2px -1px hsl(206.15 28.06% 27.25% / 1.00)",
      "shadow": "3px 3px 0px 0px hsl(206.15 28.06% 27.25% / 1.00), 3px 1px 2px -1px hsl(206.15 28.06% 27.25% / 1.00)",
      "shadow-md": "3px 3px 0px 0px hsl(206.15 28.06% 27.25% / 1.00), 3px 2px 4px -1px hsl(206.15 28.06% 27.25% / 1.00)",
      "shadow-lg": "3px 3px 0px 0px hsl(206.15 28.06% 27.25% / 1.00), 3px 4px 6px -1px hsl(206.15 28.06% 27.25% / 1.00)",
      "shadow-xl": "3px 3px 0px 0px hsl(206.15 28.06% 27.25% / 1.00), 3px 8px 10px -1px hsl(206.15 28.06% 27.25% / 1.00)",
      "shadow-2xl": "3px 3px 0px 0px hsl(206.15 28.06% 27.25% / 2.50)"
    }
  }
}
</file>

<file path="public/r/themes/caffeine.json">
{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "caffeine",
  "type": "registry:style",
  "css": {
    "@layer base": {
      "body": {
        "letter-spacing": "var(--tracking-normal)"
      }
    }
  },
  "cssVars": {
    "theme": {
      "font-sans": "ui-sans-serif, system-ui, -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial, 'Noto Sans', sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Noto Color Emoji'",
      "font-mono": "ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, \"Liberation Mono\", \"Courier New\", monospace",
      "font-serif": "ui-serif, Georgia, Cambria, \"Times New Roman\", Times, serif",
      "radius": "0.5rem",
      "tracking-tighter": "calc(var(--tracking-normal) - 0.05em)",
      "tracking-tight": "calc(var(--tracking-normal) - 0.025em)",
      "tracking-wide": "calc(var(--tracking-normal) + 0.025em)",
      "tracking-wider": "calc(var(--tracking-normal) + 0.05em)",
      "tracking-widest": "calc(var(--tracking-normal) + 0.1em)"
    },
    "light": {
      "background": "oklch(0.98 0 0)",
      "foreground": "oklch(0.24 0 0)",
      "card": "oklch(0.99 0 0)",
      "card-foreground": "oklch(0.24 0 0)",
      "popover": "oklch(0.99 0 0)",
      "popover-foreground": "oklch(0.24 0 0)",
      "primary": "oklch(0.43 0.04 41.99)",
      "primary-foreground": "oklch(1.00 0 0)",
      "secondary": "oklch(0.92 0.07 74.37)",
      "secondary-foreground": "oklch(0.35 0.07 40.83)",
      "muted": "oklch(0.95 0 0)",
      "muted-foreground": "oklch(0.50 0 0)",
      "accent": "oklch(0.93 0 0)",
      "accent-foreground": "oklch(0.24 0 0)",
      "destructive": "oklch(0.63 0.19 33.34)",
      "destructive-foreground": "oklch(1.00 0 0)",
      "border": "oklch(0.88 0 0)",
      "input": "oklch(0.88 0 0)",
      "ring": "oklch(0.43 0.04 41.99)",
      "chart-1": "oklch(0.43 0.04 41.99)",
      "chart-2": "oklch(0.92 0.07 74.37)",
      "chart-3": "oklch(0.93 0 0)",
      "chart-4": "oklch(0.94 0.05 75.50)",
      "chart-5": "oklch(0.43 0.04 41.67)",
      "radius": "0.5rem",
      "sidebar": "oklch(0.99 0 0)",
      "sidebar-foreground": "oklch(0.26 0 0)",
      "sidebar-primary": "oklch(0.33 0 0)",
      "sidebar-primary-foreground": "oklch(0.99 0 0)",
      "sidebar-accent": "oklch(0.98 0 0)",
      "sidebar-accent-foreground": "oklch(0.33 0 0)",
      "sidebar-border": "oklch(0.94 0 0)",
      "sidebar-ring": "oklch(0.77 0 0)",
      "font-sans": "ui-sans-serif, system-ui, -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial, 'Noto Sans', sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Noto Color Emoji'",
      "font-serif": "ui-serif, Georgia, Cambria, \"Times New Roman\", Times, serif",
      "font-mono": "ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, \"Liberation Mono\", \"Courier New\", monospace",
      "shadow-color": "hsl(0 0% 0%)",
      "shadow-opacity": "0.1",
      "shadow-blur": "3px",
      "shadow-spread": "0px",
      "shadow-offset-x": "0",
      "shadow-offset-y": "1px",
      "letter-spacing": "0em",
      "spacing": "0.25rem",
      "shadow-2xs": "0 1px 3px 0px hsl(0 0% 0% / 0.05)",
      "shadow-xs": "0 1px 3px 0px hsl(0 0% 0% / 0.05)",
      "shadow-sm": "0 1px 3px 0px hsl(0 0% 0% / 0.10), 0 1px 2px -1px hsl(0 0% 0% / 0.10)",
      "shadow": "0 1px 3px 0px hsl(0 0% 0% / 0.10), 0 1px 2px -1px hsl(0 0% 0% / 0.10)",
      "shadow-md": "0 1px 3px 0px hsl(0 0% 0% / 0.10), 0 2px 4px -1px hsl(0 0% 0% / 0.10)",
      "shadow-lg": "0 1px 3px 0px hsl(0 0% 0% / 0.10), 0 4px 6px -1px hsl(0 0% 0% / 0.10)",
      "shadow-xl": "0 1px 3px 0px hsl(0 0% 0% / 0.10), 0 8px 10px -1px hsl(0 0% 0% / 0.10)",
      "shadow-2xl": "0 1px 3px 0px hsl(0 0% 0% / 0.25)",
      "tracking-normal": "0em"
    },
    "dark": {
      "background": "oklch(0.18 0 0)",
      "foreground": "oklch(0.95 0 0)",
      "card": "oklch(0.21 0 0)",
      "card-foreground": "oklch(0.95 0 0)",
      "popover": "oklch(0.21 0 0)",
      "popover-foreground": "oklch(0.95 0 0)",
      "primary": "oklch(0.92 0.05 66.17)",
      "primary-foreground": "oklch(0.20 0.02 200.20)",
      "secondary": "oklch(0.32 0.02 63.70)",
      "secondary-foreground": "oklch(0.92 0.05 66.17)",
      "muted": "oklch(0.25 0 0)",
      "muted-foreground": "oklch(0.77 0 0)",
      "accent": "oklch(0.29 0 0)",
      "accent-foreground": "oklch(0.95 0 0)",
      "destructive": "oklch(0.63 0.19 33.34)",
      "destructive-foreground": "oklch(1.00 0 0)",
      "border": "oklch(0.24 0.01 91.75)",
      "input": "oklch(0.40 0 0)",
      "ring": "oklch(0.92 0.05 66.17)",
      "chart-1": "oklch(0.92 0.05 66.17)",
      "chart-2": "oklch(0.32 0.02 63.70)",
      "chart-3": "oklch(0.29 0 0)",
      "chart-4": "oklch(0.35 0.02 67.00)",
      "chart-5": "oklch(0.92 0.05 67.09)",
      "radius": "0.5rem",
      "sidebar": "oklch(0.21 0.01 285.89)",
      "sidebar-foreground": "oklch(0.97 0.00 286.38)",
      "sidebar-primary": "oklch(0.49 0.22 264.38)",
      "sidebar-primary-foreground": "oklch(1.00 0 0)",
      "sidebar-accent": "oklch(0.27 0.01 286.03)",
      "sidebar-accent-foreground": "oklch(0.97 0.00 286.38)",
      "sidebar-border": "oklch(0.27 0.01 286.03)",
      "sidebar-ring": "oklch(0.87 0.01 286.29)",
      "font-sans": "ui-sans-serif, system-ui, -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial, 'Noto Sans', sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Noto Color Emoji'",
      "font-serif": "ui-serif, Georgia, Cambria, \"Times New Roman\", Times, serif",
      "font-mono": "ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, \"Liberation Mono\", \"Courier New\", monospace",
      "shadow-color": "hsl(0 0% 0%)",
      "shadow-opacity": "0.1",
      "shadow-blur": "3px",
      "shadow-spread": "0px",
      "shadow-offset-x": "0",
      "shadow-offset-y": "1px",
      "letter-spacing": "0em",
      "spacing": "0.25rem",
      "shadow-2xs": "0 1px 3px 0px hsl(0 0% 0% / 0.05)",
      "shadow-xs": "0 1px 3px 0px hsl(0 0% 0% / 0.05)",
      "shadow-sm": "0 1px 3px 0px hsl(0 0% 0% / 0.10), 0 1px 2px -1px hsl(0 0% 0% / 0.10)",
      "shadow": "0 1px 3px 0px hsl(0 0% 0% / 0.10), 0 1px 2px -1px hsl(0 0% 0% / 0.10)",
      "shadow-md": "0 1px 3px 0px hsl(0 0% 0% / 0.10), 0 2px 4px -1px hsl(0 0% 0% / 0.10)",
      "shadow-lg": "0 1px 3px 0px hsl(0 0% 0% / 0.10), 0 4px 6px -1px hsl(0 0% 0% / 0.10)",
      "shadow-xl": "0 1px 3px 0px hsl(0 0% 0% / 0.10), 0 8px 10px -1px hsl(0 0% 0% / 0.10)",
      "shadow-2xl": "0 1px 3px 0px hsl(0 0% 0% / 0.25)"
    }
  }
}
</file>

<file path="public/r/themes/candyland.json">
{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "candyland",
  "type": "registry:style",
  "css": {
    "@layer base": {
      "body": {
        "letter-spacing": "var(--tracking-normal)"
      }
    }
  },
  "cssVars": {
    "theme": {
      "font-sans": "Poppins, sans-serif",
      "font-mono": "Roboto Mono, monospace",
      "font-serif": "ui-serif, Georgia, Cambria, \"Times New Roman\", Times, serif",
      "radius": "0.5rem",
      "tracking-tighter": "calc(var(--tracking-normal) - 0.05em)",
      "tracking-tight": "calc(var(--tracking-normal) - 0.025em)",
      "tracking-wide": "calc(var(--tracking-normal) + 0.025em)",
      "tracking-wider": "calc(var(--tracking-normal) + 0.05em)",
      "tracking-widest": "calc(var(--tracking-normal) + 0.1em)"
    },
    "light": {
      "background": "oklch(0.98 0.00 228.78)",
      "foreground": "oklch(0.32 0 0)",
      "card": "oklch(1.00 0 0)",
      "card-foreground": "oklch(0.32 0 0)",
      "popover": "oklch(1.00 0 0)",
      "popover-foreground": "oklch(0.32 0 0)",
      "primary": "oklch(0.87 0.07 7.09)",
      "primary-foreground": "oklch(0 0 0)",
      "secondary": "oklch(0.81 0.08 225.75)",
      "secondary-foreground": "oklch(0 0 0)",
      "muted": "oklch(0.88 0.03 98.10)",
      "muted-foreground": "oklch(0.54 0 0)",
      "accent": "oklch(0.97 0.21 109.77)",
      "accent-foreground": "oklch(0 0 0)",
      "destructive": "oklch(0.64 0.21 25.33)",
      "destructive-foreground": "oklch(1.00 0 0)",
      "border": "oklch(0.87 0 0)",
      "input": "oklch(0.87 0 0)",
      "ring": "oklch(0.87 0.07 7.09)",
      "chart-1": "oklch(0.87 0.07 7.09)",
      "chart-2": "oklch(0.81 0.08 225.75)",
      "chart-3": "oklch(0.97 0.21 109.77)",
      "chart-4": "oklch(0.80 0.14 349.23)",
      "chart-5": "oklch(0.74 0.23 142.85)",
      "radius": "0.5rem",
      "sidebar": "oklch(0.98 0.00 228.78)",
      "sidebar-foreground": "oklch(0.32 0 0)",
      "sidebar-primary": "oklch(0.87 0.07 7.09)",
      "sidebar-primary-foreground": "oklch(0 0 0)",
      "sidebar-accent": "oklch(0.97 0.21 109.77)",
      "sidebar-accent-foreground": "oklch(0 0 0)",
      "sidebar-border": "oklch(0.87 0 0)",
      "sidebar-ring": "oklch(0.87 0.07 7.09)",
      "font-sans": "Poppins, sans-serif",
      "font-serif": "ui-serif, Georgia, Cambria, \"Times New Roman\", Times, serif",
      "font-mono": "Roboto Mono, monospace",
      "shadow-color": "hsl(0 0% 0%)",
      "shadow-opacity": "0.1",
      "shadow-blur": "3px",
      "shadow-spread": "0px",
      "shadow-offset-x": "0",
      "shadow-offset-y": "1px",
      "letter-spacing": "0em",
      "spacing": "0.25rem",
      "shadow-2xs": "0 1px 3px 0px hsl(0 0% 0% / 0.05)",
      "shadow-xs": "0 1px 3px 0px hsl(0 0% 0% / 0.05)",
      "shadow-sm": "0 1px 3px 0px hsl(0 0% 0% / 0.10), 0 1px 2px -1px hsl(0 0% 0% / 0.10)",
      "shadow": "0 1px 3px 0px hsl(0 0% 0% / 0.10), 0 1px 2px -1px hsl(0 0% 0% / 0.10)",
      "shadow-md": "0 1px 3px 0px hsl(0 0% 0% / 0.10), 0 2px 4px -1px hsl(0 0% 0% / 0.10)",
      "shadow-lg": "0 1px 3px 0px hsl(0 0% 0% / 0.10), 0 4px 6px -1px hsl(0 0% 0% / 0.10)",
      "shadow-xl": "0 1px 3px 0px hsl(0 0% 0% / 0.10), 0 8px 10px -1px hsl(0 0% 0% / 0.10)",
      "shadow-2xl": "0 1px 3px 0px hsl(0 0% 0% / 0.25)",
      "tracking-normal": "0em"
    },
    "dark": {
      "background": "oklch(0.23 0.01 264.29)",
      "foreground": "oklch(0.92 0 0)",
      "card": "oklch(0.32 0.01 223.67)",
      "card-foreground": "oklch(0.92 0 0)",
      "popover": "oklch(0.32 0.01 223.67)",
      "popover-foreground": "oklch(0.92 0 0)",
      "primary": "oklch(0.80 0.14 349.23)",
      "primary-foreground": "oklch(0 0 0)",
      "secondary": "oklch(0.74 0.23 142.85)",
      "secondary-foreground": "oklch(0 0 0)",
      "muted": "oklch(0.39 0 0)",
      "muted-foreground": "oklch(0.72 0 0)",
      "accent": "oklch(0.81 0.08 225.75)",
      "accent-foreground": "oklch(0 0 0)",
      "destructive": "oklch(0.64 0.21 25.33)",
      "destructive-foreground": "oklch(1.00 0 0)",
      "border": "oklch(0.39 0 0)",
      "input": "oklch(0.39 0 0)",
      "ring": "oklch(0.80 0.14 349.23)",
      "chart-1": "oklch(0.80 0.14 349.23)",
      "chart-2": "oklch(0.74 0.23 142.85)",
      "chart-3": "oklch(0.81 0.08 225.75)",
      "chart-4": "oklch(0.97 0.21 109.77)",
      "chart-5": "oklch(0.87 0.18 90.38)",
      "radius": "0.5rem",
      "sidebar": "oklch(0.23 0.01 264.29)",
      "sidebar-foreground": "oklch(0.92 0 0)",
      "sidebar-primary": "oklch(0.80 0.14 349.23)",
      "sidebar-primary-foreground": "oklch(0 0 0)",
      "sidebar-accent": "oklch(0.81 0.08 225.75)",
      "sidebar-accent-foreground": "oklch(0 0 0)",
      "sidebar-border": "oklch(0.39 0 0)",
      "sidebar-ring": "oklch(0.80 0.14 349.23)",
      "font-sans": "Poppins, sans-serif",
      "font-serif": "ui-serif, Georgia, Cambria, \"Times New Roman\", Times, serif",
      "font-mono": "Roboto Mono, monospace",
      "shadow-color": "hsl(0 0% 0%)",
      "shadow-opacity": "0.1",
      "shadow-blur": "3px",
      "shadow-spread": "0px",
      "shadow-offset-x": "0",
      "shadow-offset-y": "1px",
      "letter-spacing": "0em",
      "spacing": "0.25rem",
      "shadow-2xs": "0 1px 3px 0px hsl(0 0% 0% / 0.05)",
      "shadow-xs": "0 1px 3px 0px hsl(0 0% 0% / 0.05)",
      "shadow-sm": "0 1px 3px 0px hsl(0 0% 0% / 0.10), 0 1px 2px -1px hsl(0 0% 0% / 0.10)",
      "shadow": "0 1px 3px 0px hsl(0 0% 0% / 0.10), 0 1px 2px -1px hsl(0 0% 0% / 0.10)",
      "shadow-md": "0 1px 3px 0px hsl(0 0% 0% / 0.10), 0 2px 4px -1px hsl(0 0% 0% / 0.10)",
      "shadow-lg": "0 1px 3px 0px hsl(0 0% 0% / 0.10), 0 4px 6px -1px hsl(0 0% 0% / 0.10)",
      "shadow-xl": "0 1px 3px 0px hsl(0 0% 0% / 0.10), 0 8px 10px -1px hsl(0 0% 0% / 0.10)",
      "shadow-2xl": "0 1px 3px 0px hsl(0 0% 0% / 0.25)"
    }
  }
}
</file>

<file path="public/r/themes/catppuccin.json">
{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "catppuccin",
  "type": "registry:style",
  "css": {
    "@layer base": {
      "body": {
        "letter-spacing": "var(--tracking-normal)"
      }
    }
  },
  "cssVars": {
    "theme": {
      "font-sans": "Montserrat, sans-serif",
      "font-mono": "Fira Code, monospace",
      "font-serif": "Georgia, serif",
      "radius": "0.35rem",
      "tracking-tighter": "calc(var(--tracking-normal) - 0.05em)",
      "tracking-tight": "calc(var(--tracking-normal) - 0.025em)",
      "tracking-wide": "calc(var(--tracking-normal) + 0.025em)",
      "tracking-wider": "calc(var(--tracking-normal) + 0.05em)",
      "tracking-widest": "calc(var(--tracking-normal) + 0.1em)"
    },
    "light": {
      "background": "oklch(0.96 0.01 264.53)",
      "foreground": "oklch(0.44 0.04 279.33)",
      "card": "oklch(1.00 0 0)",
      "card-foreground": "oklch(0.44 0.04 279.33)",
      "popover": "oklch(0.86 0.01 268.48)",
      "popover-foreground": "oklch(0.44 0.04 279.33)",
      "primary": "oklch(0.55 0.25 297.02)",
      "primary-foreground": "oklch(1.00 0 0)",
      "secondary": "oklch(0.86 0.01 268.48)",
      "secondary-foreground": "oklch(0.44 0.04 279.33)",
      "muted": "oklch(0.91 0.01 264.51)",
      "muted-foreground": "oklch(0.55 0.03 279.08)",
      "accent": "oklch(0.68 0.14 235.38)",
      "accent-foreground": "oklch(1.00 0 0)",
      "destructive": "oklch(0.55 0.22 19.81)",
      "destructive-foreground": "oklch(1.00 0 0)",
      "border": "oklch(0.81 0.02 271.20)",
      "input": "oklch(0.86 0.01 268.48)",
      "ring": "oklch(0.55 0.25 297.02)",
      "chart-1": "oklch(0.55 0.25 297.02)",
      "chart-2": "oklch(0.68 0.14 235.38)",
      "chart-3": "oklch(0.63 0.18 140.44)",
      "chart-4": "oklch(0.69 0.20 42.43)",
      "chart-5": "oklch(0.71 0.10 33.10)",
      "radius": "0.35rem",
      "sidebar": "oklch(0.93 0.01 264.52)",
      "sidebar-foreground": "oklch(0.44 0.04 279.33)",
      "sidebar-primary": "oklch(0.55 0.25 297.02)",
      "sidebar-primary-foreground": "oklch(1.00 0 0)",
      "sidebar-accent": "oklch(0.68 0.14 235.38)",
      "sidebar-accent-foreground": "oklch(1.00 0 0)",
      "sidebar-border": "oklch(0.81 0.02 271.20)",
      "sidebar-ring": "oklch(0.55 0.25 297.02)",
      "font-sans": "Montserrat, sans-serif",
      "font-serif": "Georgia, serif",
      "font-mono": "Fira Code, monospace",
      "shadow-color": "hsl(240 30% 25%)",
      "shadow-opacity": "0.12",
      "shadow-blur": "6px",
      "shadow-spread": "0px",
      "shadow-offset-x": "0px",
      "shadow-offset-y": "4px",
      "letter-spacing": "0em",
      "spacing": "0.25rem",
      "shadow-2xs": "0px 4px 6px 0px hsl(240 30% 25% / 0.06)",
      "shadow-xs": "0px 4px 6px 0px hsl(240 30% 25% / 0.06)",
      "shadow-sm": "0px 4px 6px 0px hsl(240 30% 25% / 0.12), 0px 1px 2px -1px hsl(240 30% 25% / 0.12)",
      "shadow": "0px 4px 6px 0px hsl(240 30% 25% / 0.12), 0px 1px 2px -1px hsl(240 30% 25% / 0.12)",
      "shadow-md": "0px 4px 6px 0px hsl(240 30% 25% / 0.12), 0px 2px 4px -1px hsl(240 30% 25% / 0.12)",
      "shadow-lg": "0px 4px 6px 0px hsl(240 30% 25% / 0.12), 0px 4px 6px -1px hsl(240 30% 25% / 0.12)",
      "shadow-xl": "0px 4px 6px 0px hsl(240 30% 25% / 0.12), 0px 8px 10px -1px hsl(240 30% 25% / 0.12)",
      "shadow-2xl": "0px 4px 6px 0px hsl(240 30% 25% / 0.30)",
      "tracking-normal": "0em"
    },
    "dark": {
      "background": "oklch(0.22 0.03 284.06)",
      "foreground": "oklch(0.88 0.04 272.28)",
      "card": "oklch(0.24 0.03 283.91)",
      "card-foreground": "oklch(0.88 0.04 272.28)",
      "popover": "oklch(0.40 0.03 280.15)",
      "popover-foreground": "oklch(0.88 0.04 272.28)",
      "primary": "oklch(0.79 0.12 304.77)",
      "primary-foreground": "oklch(0.24 0.03 283.91)",
      "secondary": "oklch(0.48 0.03 278.64)",
      "secondary-foreground": "oklch(0.88 0.04 272.28)",
      "muted": "oklch(0.30 0.03 276.21)",
      "muted-foreground": "oklch(0.75 0.04 273.93)",
      "accent": "oklch(0.85 0.08 210.25)",
      "accent-foreground": "oklch(0.24 0.03 283.91)",
      "destructive": "oklch(0.76 0.13 2.76)",
      "destructive-foreground": "oklch(0.24 0.03 283.91)",
      "border": "oklch(0.32 0.03 281.98)",
      "input": "oklch(0.32 0.03 281.98)",
      "ring": "oklch(0.79 0.12 304.77)",
      "chart-1": "oklch(0.79 0.12 304.77)",
      "chart-2": "oklch(0.85 0.08 210.25)",
      "chart-3": "oklch(0.86 0.11 142.72)",
      "chart-4": "oklch(0.82 0.10 52.63)",
      "chart-5": "oklch(0.92 0.02 30.49)",
      "radius": "0.35rem",
      "sidebar": "oklch(0.18 0.02 284.20)",
      "sidebar-foreground": "oklch(0.88 0.04 272.28)",
      "sidebar-primary": "oklch(0.79 0.12 304.77)",
      "sidebar-primary-foreground": "oklch(0.24 0.03 283.91)",
      "sidebar-accent": "oklch(0.85 0.08 210.25)",
      "sidebar-accent-foreground": "oklch(0.24 0.03 283.91)",
      "sidebar-border": "oklch(0.40 0.03 280.15)",
      "sidebar-ring": "oklch(0.79 0.12 304.77)",
      "font-sans": "Montserrat, sans-serif",
      "font-serif": "Georgia, serif",
      "font-mono": "Fira Code, monospace",
      "shadow-color": "hsl(240 30% 25%)",
      "shadow-opacity": "0.12",
      "shadow-blur": "6px",
      "shadow-spread": "0px",
      "shadow-offset-x": "0px",
      "shadow-offset-y": "4px",
      "letter-spacing": "0em",
      "spacing": "0.25rem",
      "shadow-2xs": "0px 4px 6px 0px hsl(240 30% 25% / 0.06)",
      "shadow-xs": "0px 4px 6px 0px hsl(240 30% 25% / 0.06)",
      "shadow-sm": "0px 4px 6px 0px hsl(240 30% 25% / 0.12), 0px 1px 2px -1px hsl(240 30% 25% / 0.12)",
      "shadow": "0px 4px 6px 0px hsl(240 30% 25% / 0.12), 0px 1px 2px -1px hsl(240 30% 25% / 0.12)",
      "shadow-md": "0px 4px 6px 0px hsl(240 30% 25% / 0.12), 0px 2px 4px -1px hsl(240 30% 25% / 0.12)",
      "shadow-lg": "0px 4px 6px 0px hsl(240 30% 25% / 0.12), 0px 4px 6px -1px hsl(240 30% 25% / 0.12)",
      "shadow-xl": "0px 4px 6px 0px hsl(240 30% 25% / 0.12), 0px 8px 10px -1px hsl(240 30% 25% / 0.12)",
      "shadow-2xl": "0px 4px 6px 0px hsl(240 30% 25% / 0.30)"
    }
  }
}
</file>

<file path="public/r/themes/claude.json">
{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "claude",
  "type": "registry:style",
  "css": {
    "@layer base": {
      "body": {
        "letter-spacing": "var(--tracking-normal)"
      }
    }
  },
  "cssVars": {
    "theme": {
      "font-sans": "ui-sans-serif, system-ui, -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial, 'Noto Sans', sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Noto Color Emoji'",
      "font-mono": "ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, \"Liberation Mono\", \"Courier New\", monospace",
      "font-serif": "ui-serif, Georgia, Cambria, \"Times New Roman\", Times, serif",
      "radius": "0.5rem",
      "tracking-tighter": "calc(var(--tracking-normal) - 0.05em)",
      "tracking-tight": "calc(var(--tracking-normal) - 0.025em)",
      "tracking-wide": "calc(var(--tracking-normal) + 0.025em)",
      "tracking-wider": "calc(var(--tracking-normal) + 0.05em)",
      "tracking-widest": "calc(var(--tracking-normal) + 0.1em)"
    },
    "light": {
      "background": "oklch(0.98 0.01 95.10)",
      "foreground": "oklch(0.34 0.03 95.72)",
      "card": "oklch(0.98 0.01 95.10)",
      "card-foreground": "oklch(0.19 0.00 106.59)",
      "popover": "oklch(1.00 0 0)",
      "popover-foreground": "oklch(0.27 0.02 98.94)",
      "primary": "oklch(0.62 0.14 39.04)",
      "primary-foreground": "oklch(1.00 0 0)",
      "secondary": "oklch(0.92 0.01 92.99)",
      "secondary-foreground": "oklch(0.43 0.02 98.60)",
      "muted": "oklch(0.93 0.02 90.24)",
      "muted-foreground": "oklch(0.61 0.01 97.42)",
      "accent": "oklch(0.92 0.01 92.99)",
      "accent-foreground": "oklch(0.27 0.02 98.94)",
      "destructive": "oklch(0.19 0.00 106.59)",
      "destructive-foreground": "oklch(1.00 0 0)",
      "border": "oklch(0.88 0.01 97.36)",
      "input": "oklch(0.76 0.02 98.35)",
      "ring": "oklch(0.59 0.17 253.06)",
      "chart-1": "oklch(0.56 0.13 43.00)",
      "chart-2": "oklch(0.69 0.16 290.41)",
      "chart-3": "oklch(0.88 0.03 93.13)",
      "chart-4": "oklch(0.88 0.04 298.18)",
      "chart-5": "oklch(0.56 0.13 42.06)",
      "radius": "0.5rem",
      "sidebar": "oklch(0.97 0.01 98.88)",
      "sidebar-foreground": "oklch(0.36 0.01 106.65)",
      "sidebar-primary": "oklch(0.62 0.14 39.04)",
      "sidebar-primary-foreground": "oklch(0.99 0 0)",
      "sidebar-accent": "oklch(0.92 0.01 92.99)",
      "sidebar-accent-foreground": "oklch(0.33 0 0)",
      "sidebar-border": "oklch(0.94 0 0)",
      "sidebar-ring": "oklch(0.77 0 0)",
      "font-sans": "ui-sans-serif, system-ui, -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial, 'Noto Sans', sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Noto Color Emoji'",
      "font-serif": "ui-serif, Georgia, Cambria, \"Times New Roman\", Times, serif",
      "font-mono": "ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, \"Liberation Mono\", \"Courier New\", monospace",
      "shadow-color": "hsl(0 0% 0%)",
      "shadow-opacity": "0.1",
      "shadow-blur": "3px",
      "shadow-spread": "0px",
      "shadow-offset-x": "0",
      "shadow-offset-y": "1px",
      "letter-spacing": "0em",
      "spacing": "0.25rem",
      "shadow-2xs": "0 1px 3px 0px hsl(0 0% 0% / 0.05)",
      "shadow-xs": "0 1px 3px 0px hsl(0 0% 0% / 0.05)",
      "shadow-sm": "0 1px 3px 0px hsl(0 0% 0% / 0.10), 0 1px 2px -1px hsl(0 0% 0% / 0.10)",
      "shadow": "0 1px 3px 0px hsl(0 0% 0% / 0.10), 0 1px 2px -1px hsl(0 0% 0% / 0.10)",
      "shadow-md": "0 1px 3px 0px hsl(0 0% 0% / 0.10), 0 2px 4px -1px hsl(0 0% 0% / 0.10)",
      "shadow-lg": "0 1px 3px 0px hsl(0 0% 0% / 0.10), 0 4px 6px -1px hsl(0 0% 0% / 0.10)",
      "shadow-xl": "0 1px 3px 0px hsl(0 0% 0% / 0.10), 0 8px 10px -1px hsl(0 0% 0% / 0.10)",
      "shadow-2xl": "0 1px 3px 0px hsl(0 0% 0% / 0.25)",
      "tracking-normal": "0em"
    },
    "dark": {
      "background": "oklch(0.27 0.00 106.64)",
      "foreground": "oklch(0.81 0.01 93.01)",
      "card": "oklch(0.27 0.00 106.64)",
      "card-foreground": "oklch(0.98 0.01 95.10)",
      "popover": "oklch(0.31 0.00 106.60)",
      "popover-foreground": "oklch(0.92 0.00 106.48)",
      "primary": "oklch(0.67 0.13 38.76)",
      "primary-foreground": "oklch(1.00 0 0)",
      "secondary": "oklch(0.98 0.01 95.10)",
      "secondary-foreground": "oklch(0.31 0.00 106.60)",
      "muted": "oklch(0.22 0.00 106.71)",
      "muted-foreground": "oklch(0.77 0.02 99.07)",
      "accent": "oklch(0.21 0.01 95.42)",
      "accent-foreground": "oklch(0.97 0.01 98.88)",
      "destructive": "oklch(0.64 0.21 25.33)",
      "destructive-foreground": "oklch(1.00 0 0)",
      "border": "oklch(0.36 0.01 106.89)",
      "input": "oklch(0.43 0.01 100.22)",
      "ring": "oklch(0.59 0.17 253.06)",
      "chart-1": "oklch(0.56 0.13 43.00)",
      "chart-2": "oklch(0.69 0.16 290.41)",
      "chart-3": "oklch(0.21 0.01 95.42)",
      "chart-4": "oklch(0.31 0.05 289.32)",
      "chart-5": "oklch(0.56 0.13 42.06)",
      "radius": "0.5rem",
      "sidebar": "oklch(0.24 0.00 67.71)",
      "sidebar-foreground": "oklch(0.81 0.01 93.01)",
      "sidebar-primary": "oklch(0.33 0 0)",
      "sidebar-primary-foreground": "oklch(0.99 0 0)",
      "sidebar-accent": "oklch(0.17 0.00 106.62)",
      "sidebar-accent-foreground": "oklch(0.81 0.01 93.01)",
      "sidebar-border": "oklch(0.94 0 0)",
      "sidebar-ring": "oklch(0.77 0 0)",
      "font-sans": "ui-sans-serif, system-ui, -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial, 'Noto Sans', sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Noto Color Emoji'",
      "font-serif": "ui-serif, Georgia, Cambria, \"Times New Roman\", Times, serif",
      "font-mono": "ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, \"Liberation Mono\", \"Courier New\", monospace",
      "shadow-color": "hsl(0 0% 0%)",
      "shadow-opacity": "0.1",
      "shadow-blur": "3px",
      "shadow-spread": "0px",
      "shadow-offset-x": "0",
      "shadow-offset-y": "1px",
      "letter-spacing": "0em",
      "spacing": "0.25rem",
      "shadow-2xs": "0 1px 3px 0px hsl(0 0% 0% / 0.05)",
      "shadow-xs": "0 1px 3px 0px hsl(0 0% 0% / 0.05)",
      "shadow-sm": "0 1px 3px 0px hsl(0 0% 0% / 0.10), 0 1px 2px -1px hsl(0 0% 0% / 0.10)",
      "shadow": "0 1px 3px 0px hsl(0 0% 0% / 0.10), 0 1px 2px -1px hsl(0 0% 0% / 0.10)",
      "shadow-md": "0 1px 3px 0px hsl(0 0% 0% / 0.10), 0 2px 4px -1px hsl(0 0% 0% / 0.10)",
      "shadow-lg": "0 1px 3px 0px hsl(0 0% 0% / 0.10), 0 4px 6px -1px hsl(0 0% 0% / 0.10)",
      "shadow-xl": "0 1px 3px 0px hsl(0 0% 0% / 0.10), 0 8px 10px -1px hsl(0 0% 0% / 0.10)",
      "shadow-2xl": "0 1px 3px 0px hsl(0 0% 0% / 0.25)"
    }
  }
}
</file>

<file path="public/r/themes/claymorphism.json">
{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "claymorphism",
  "type": "registry:style",
  "css": {
    "@layer base": {
      "body": {
        "letter-spacing": "var(--tracking-normal)"
      }
    }
  },
  "cssVars": {
    "theme": {
      "font-sans": "Plus Jakarta Sans, sans-serif",
      "font-mono": "Roboto Mono, monospace",
      "font-serif": "Lora, serif",
      "radius": "1.25rem",
      "tracking-tighter": "calc(var(--tracking-normal) - 0.05em)",
      "tracking-tight": "calc(var(--tracking-normal) - 0.025em)",
      "tracking-wide": "calc(var(--tracking-normal) + 0.025em)",
      "tracking-wider": "calc(var(--tracking-normal) + 0.05em)",
      "tracking-widest": "calc(var(--tracking-normal) + 0.1em)"
    },
    "light": {
      "background": "oklch(0.92 0.00 48.72)",
      "foreground": "oklch(0.28 0.04 260.03)",
      "card": "oklch(0.97 0.00 106.42)",
      "card-foreground": "oklch(0.28 0.04 260.03)",
      "popover": "oklch(0.97 0.00 106.42)",
      "popover-foreground": "oklch(0.28 0.04 260.03)",
      "primary": "oklch(0.59 0.20 277.12)",
      "primary-foreground": "oklch(1.00 0 0)",
      "secondary": "oklch(0.87 0.00 56.37)",
      "secondary-foreground": "oklch(0.45 0.03 256.80)",
      "muted": "oklch(0.92 0.00 48.72)",
      "muted-foreground": "oklch(0.55 0.02 264.36)",
      "accent": "oklch(0.94 0.03 321.94)",
      "accent-foreground": "oklch(0.37 0.03 259.73)",
      "destructive": "oklch(0.64 0.21 25.33)",
      "destructive-foreground": "oklch(1.00 0 0)",
      "border": "oklch(0.87 0.00 56.37)",
      "input": "oklch(0.87 0.00 56.37)",
      "ring": "oklch(0.59 0.20 277.12)",
      "chart-1": "oklch(0.59 0.20 277.12)",
      "chart-2": "oklch(0.51 0.23 276.97)",
      "chart-3": "oklch(0.46 0.21 277.02)",
      "chart-4": "oklch(0.40 0.18 277.37)",
      "chart-5": "oklch(0.36 0.14 278.70)",
      "radius": "1.25rem",
      "sidebar": "oklch(0.87 0.00 56.37)",
      "sidebar-foreground": "oklch(0.28 0.04 260.03)",
      "sidebar-primary": "oklch(0.59 0.20 277.12)",
      "sidebar-primary-foreground": "oklch(1.00 0 0)",
      "sidebar-accent": "oklch(0.94 0.03 321.94)",
      "sidebar-accent-foreground": "oklch(0.37 0.03 259.73)",
      "sidebar-border": "oklch(0.87 0.00 56.37)",
      "sidebar-ring": "oklch(0.59 0.20 277.12)",
      "font-sans": "Plus Jakarta Sans, sans-serif",
      "font-serif": "Lora, serif",
      "font-mono": "Roboto Mono, monospace",
      "shadow-color": "hsl(240 4% 60%)",
      "shadow-opacity": "0.18",
      "shadow-blur": "10px",
      "shadow-spread": "4px",
      "shadow-offset-x": "2px",
      "shadow-offset-y": "2px",
      "letter-spacing": "0em",
      "spacing": "0.25rem",
      "shadow-2xs": "2px 2px 10px 4px hsl(240 4% 60% / 0.09)",
      "shadow-xs": "2px 2px 10px 4px hsl(240 4% 60% / 0.09)",
      "shadow-sm": "2px 2px 10px 4px hsl(240 4% 60% / 0.18), 2px 1px 2px 3px hsl(240 4% 60% / 0.18)",
      "shadow": "2px 2px 10px 4px hsl(240 4% 60% / 0.18), 2px 1px 2px 3px hsl(240 4% 60% / 0.18)",
      "shadow-md": "2px 2px 10px 4px hsl(240 4% 60% / 0.18), 2px 2px 4px 3px hsl(240 4% 60% / 0.18)",
      "shadow-lg": "2px 2px 10px 4px hsl(240 4% 60% / 0.18), 2px 4px 6px 3px hsl(240 4% 60% / 0.18)",
      "shadow-xl": "2px 2px 10px 4px hsl(240 4% 60% / 0.18), 2px 8px 10px 3px hsl(240 4% 60% / 0.18)",
      "shadow-2xl": "2px 2px 10px 4px hsl(240 4% 60% / 0.45)",
      "tracking-normal": "0em"
    },
    "dark": {
      "background": "oklch(0.22 0.01 67.44)",
      "foreground": "oklch(0.93 0.01 255.51)",
      "card": "oklch(0.28 0.01 59.34)",
      "card-foreground": "oklch(0.93 0.01 255.51)",
      "popover": "oklch(0.28 0.01 59.34)",
      "popover-foreground": "oklch(0.93 0.01 255.51)",
      "primary": "oklch(0.68 0.16 276.93)",
      "primary-foreground": "oklch(0.22 0.01 67.44)",
      "secondary": "oklch(0.34 0.01 59.42)",
      "secondary-foreground": "oklch(0.87 0.01 258.34)",
      "muted": "oklch(0.28 0.01 59.34)",
      "muted-foreground": "oklch(0.71 0.02 261.32)",
      "accent": "oklch(0.39 0.01 59.47)",
      "accent-foreground": "oklch(0.87 0.01 258.34)",
      "destructive": "oklch(0.64 0.21 25.33)",
      "destructive-foreground": "oklch(0.22 0.01 67.44)",
      "border": "oklch(0.34 0.01 59.42)",
      "input": "oklch(0.34 0.01 59.42)",
      "ring": "oklch(0.68 0.16 276.93)",
      "chart-1": "oklch(0.68 0.16 276.93)",
      "chart-2": "oklch(0.59 0.20 277.12)",
      "chart-3": "oklch(0.51 0.23 276.97)",
      "chart-4": "oklch(0.46 0.21 277.02)",
      "chart-5": "oklch(0.40 0.18 277.37)",
      "radius": "1.25rem",
      "sidebar": "oklch(0.34 0.01 59.42)",
      "sidebar-foreground": "oklch(0.93 0.01 255.51)",
      "sidebar-primary": "oklch(0.68 0.16 276.93)",
      "sidebar-primary-foreground": "oklch(0.22 0.01 67.44)",
      "sidebar-accent": "oklch(0.39 0.01 59.47)",
      "sidebar-accent-foreground": "oklch(0.87 0.01 258.34)",
      "sidebar-border": "oklch(0.34 0.01 59.42)",
      "sidebar-ring": "oklch(0.68 0.16 276.93)",
      "font-sans": "Plus Jakarta Sans, sans-serif",
      "font-serif": "Lora, serif",
      "font-mono": "Roboto Mono, monospace",
      "shadow-color": "hsl(0 0% 0%)",
      "shadow-opacity": "0.18",
      "shadow-blur": "10px",
      "shadow-spread": "4px",
      "shadow-offset-x": "2px",
      "shadow-offset-y": "2px",
      "letter-spacing": "0em",
      "spacing": "0.25rem",
      "shadow-2xs": "2px 2px 10px 4px hsl(0 0% 0% / 0.09)",
      "shadow-xs": "2px 2px 10px 4px hsl(0 0% 0% / 0.09)",
      "shadow-sm": "2px 2px 10px 4px hsl(0 0% 0% / 0.18), 2px 1px 2px 3px hsl(0 0% 0% / 0.18)",
      "shadow": "2px 2px 10px 4px hsl(0 0% 0% / 0.18), 2px 1px 2px 3px hsl(0 0% 0% / 0.18)",
      "shadow-md": "2px 2px 10px 4px hsl(0 0% 0% / 0.18), 2px 2px 4px 3px hsl(0 0% 0% / 0.18)",
      "shadow-lg": "2px 2px 10px 4px hsl(0 0% 0% / 0.18), 2px 4px 6px 3px hsl(0 0% 0% / 0.18)",
      "shadow-xl": "2px 2px 10px 4px hsl(0 0% 0% / 0.18), 2px 8px 10px 3px hsl(0 0% 0% / 0.18)",
      "shadow-2xl": "2px 2px 10px 4px hsl(0 0% 0% / 0.45)"
    }
  }
}
</file>

<file path="public/r/themes/clean-slate.json">
{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "clean-slate",
  "type": "registry:style",
  "css": {
    "@layer base": {
      "body": {
        "letter-spacing": "var(--tracking-normal)"
      }
    }
  },
  "cssVars": {
    "theme": {
      "font-sans": "Inter, sans-serif",
      "font-mono": "JetBrains Mono, monospace",
      "font-serif": "Merriweather, serif",
      "radius": "0.5rem",
      "tracking-tighter": "calc(var(--tracking-normal) - 0.05em)",
      "tracking-tight": "calc(var(--tracking-normal) - 0.025em)",
      "tracking-wide": "calc(var(--tracking-normal) + 0.025em)",
      "tracking-wider": "calc(var(--tracking-normal) + 0.05em)",
      "tracking-widest": "calc(var(--tracking-normal) + 0.1em)"
    },
    "light": {
      "background": "oklch(0.98 0.00 247.86)",
      "foreground": "oklch(0.28 0.04 260.03)",
      "card": "oklch(1.00 0 0)",
      "card-foreground": "oklch(0.28 0.04 260.03)",
      "popover": "oklch(1.00 0 0)",
      "popover-foreground": "oklch(0.28 0.04 260.03)",
      "primary": "oklch(0.59 0.20 277.12)",
      "primary-foreground": "oklch(1.00 0 0)",
      "secondary": "oklch(0.93 0.01 264.53)",
      "secondary-foreground": "oklch(0.37 0.03 259.73)",
      "muted": "oklch(0.97 0.00 264.54)",
      "muted-foreground": "oklch(0.55 0.02 264.36)",
      "accent": "oklch(0.93 0.03 272.79)",
      "accent-foreground": "oklch(0.37 0.03 259.73)",
      "destructive": "oklch(0.64 0.21 25.33)",
      "destructive-foreground": "oklch(1.00 0 0)",
      "border": "oklch(0.87 0.01 258.34)",
      "input": "oklch(0.87 0.01 258.34)",
      "ring": "oklch(0.59 0.20 277.12)",
      "chart-1": "oklch(0.59 0.20 277.12)",
      "chart-2": "oklch(0.51 0.23 276.97)",
      "chart-3": "oklch(0.46 0.21 277.02)",
      "chart-4": "oklch(0.40 0.18 277.37)",
      "chart-5": "oklch(0.36 0.14 278.70)",
      "radius": "0.5rem",
      "sidebar": "oklch(0.97 0.00 264.54)",
      "sidebar-foreground": "oklch(0.28 0.04 260.03)",
      "sidebar-primary": "oklch(0.59 0.20 277.12)",
      "sidebar-primary-foreground": "oklch(1.00 0 0)",
      "sidebar-accent": "oklch(0.93 0.03 272.79)",
      "sidebar-accent-foreground": "oklch(0.37 0.03 259.73)",
      "sidebar-border": "oklch(0.87 0.01 258.34)",
      "sidebar-ring": "oklch(0.59 0.20 277.12)",
      "font-sans": "Inter, sans-serif",
      "font-serif": "Merriweather, serif",
      "font-mono": "JetBrains Mono, monospace",
      "shadow-color": "hsl(0 0% 0%)",
      "shadow-opacity": "0.1",
      "shadow-blur": "8px",
      "shadow-spread": "-1px",
      "shadow-offset-x": "0px",
      "shadow-offset-y": "4px",
      "letter-spacing": "0em",
      "spacing": "0.25rem",
      "shadow-2xs": "0px 4px 8px -1px hsl(0 0% 0% / 0.05)",
      "shadow-xs": "0px 4px 8px -1px hsl(0 0% 0% / 0.05)",
      "shadow-sm": "0px 4px 8px -1px hsl(0 0% 0% / 0.10), 0px 1px 2px -2px hsl(0 0% 0% / 0.10)",
      "shadow": "0px 4px 8px -1px hsl(0 0% 0% / 0.10), 0px 1px 2px -2px hsl(0 0% 0% / 0.10)",
      "shadow-md": "0px 4px 8px -1px hsl(0 0% 0% / 0.10), 0px 2px 4px -2px hsl(0 0% 0% / 0.10)",
      "shadow-lg": "0px 4px 8px -1px hsl(0 0% 0% / 0.10), 0px 4px 6px -2px hsl(0 0% 0% / 0.10)",
      "shadow-xl": "0px 4px 8px -1px hsl(0 0% 0% / 0.10), 0px 8px 10px -2px hsl(0 0% 0% / 0.10)",
      "shadow-2xl": "0px 4px 8px -1px hsl(0 0% 0% / 0.25)",
      "tracking-normal": "0em"
    },
    "dark": {
      "background": "oklch(0.21 0.04 265.75)",
      "foreground": "oklch(0.93 0.01 255.51)",
      "card": "oklch(0.28 0.04 260.03)",
      "card-foreground": "oklch(0.93 0.01 255.51)",
      "popover": "oklch(0.28 0.04 260.03)",
      "popover-foreground": "oklch(0.93 0.01 255.51)",
      "primary": "oklch(0.68 0.16 276.93)",
      "primary-foreground": "oklch(0.21 0.04 265.75)",
      "secondary": "oklch(0.34 0.03 260.91)",
      "secondary-foreground": "oklch(0.87 0.01 258.34)",
      "muted": "oklch(0.28 0.04 260.03)",
      "muted-foreground": "oklch(0.71 0.02 261.32)",
      "accent": "oklch(0.37 0.03 259.73)",
      "accent-foreground": "oklch(0.87 0.01 258.34)",
      "destructive": "oklch(0.64 0.21 25.33)",
      "destructive-foreground": "oklch(0.21 0.04 265.75)",
      "border": "oklch(0.45 0.03 256.80)",
      "input": "oklch(0.45 0.03 256.80)",
      "ring": "oklch(0.68 0.16 276.93)",
      "chart-1": "oklch(0.68 0.16 276.93)",
      "chart-2": "oklch(0.59 0.20 277.12)",
      "chart-3": "oklch(0.51 0.23 276.97)",
      "chart-4": "oklch(0.46 0.21 277.02)",
      "chart-5": "oklch(0.40 0.18 277.37)",
      "radius": "0.5rem",
      "sidebar": "oklch(0.28 0.04 260.03)",
      "sidebar-foreground": "oklch(0.93 0.01 255.51)",
      "sidebar-primary": "oklch(0.68 0.16 276.93)",
      "sidebar-primary-foreground": "oklch(0.21 0.04 265.75)",
      "sidebar-accent": "oklch(0.37 0.03 259.73)",
      "sidebar-accent-foreground": "oklch(0.87 0.01 258.34)",
      "sidebar-border": "oklch(0.45 0.03 256.80)",
      "sidebar-ring": "oklch(0.68 0.16 276.93)",
      "font-sans": "Inter, sans-serif",
      "font-serif": "Merriweather, serif",
      "font-mono": "JetBrains Mono, monospace",
      "shadow-color": "hsl(0 0% 0%)",
      "shadow-opacity": "0.1",
      "shadow-blur": "8px",
      "shadow-spread": "-1px",
      "shadow-offset-x": "0px",
      "shadow-offset-y": "4px",
      "letter-spacing": "0em",
      "spacing": "0.25rem",
      "shadow-2xs": "0px 4px 8px -1px hsl(0 0% 0% / 0.05)",
      "shadow-xs": "0px 4px 8px -1px hsl(0 0% 0% / 0.05)",
      "shadow-sm": "0px 4px 8px -1px hsl(0 0% 0% / 0.10), 0px 1px 2px -2px hsl(0 0% 0% / 0.10)",
      "shadow": "0px 4px 8px -1px hsl(0 0% 0% / 0.10), 0px 1px 2px -2px hsl(0 0% 0% / 0.10)",
      "shadow-md": "0px 4px 8px -1px hsl(0 0% 0% / 0.10), 0px 2px 4px -2px hsl(0 0% 0% / 0.10)",
      "shadow-lg": "0px 4px 8px -1px hsl(0 0% 0% / 0.10), 0px 4px 6px -2px hsl(0 0% 0% / 0.10)",
      "shadow-xl": "0px 4px 8px -1px hsl(0 0% 0% / 0.10), 0px 8px 10px -2px hsl(0 0% 0% / 0.10)",
      "shadow-2xl": "0px 4px 8px -1px hsl(0 0% 0% / 0.25)"
    }
  }
}
</file>

<file path="public/r/themes/cosmic-night.json">
{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "cosmic-night",
  "type": "registry:style",
  "css": {
    "@layer base": {
      "body": {
        "letter-spacing": "var(--tracking-normal)"
      }
    }
  },
  "cssVars": {
    "theme": {
      "font-sans": "Inter, sans-serif",
      "font-mono": "JetBrains Mono, monospace",
      "font-serif": "Georgia, serif",
      "radius": "0.5rem",
      "tracking-tighter": "calc(var(--tracking-normal) - 0.05em)",
      "tracking-tight": "calc(var(--tracking-normal) - 0.025em)",
      "tracking-wide": "calc(var(--tracking-normal) + 0.025em)",
      "tracking-wider": "calc(var(--tracking-normal) + 0.05em)",
      "tracking-widest": "calc(var(--tracking-normal) + 0.1em)"
    },
    "light": {
      "background": "oklch(0.97 0.01 286.15)",
      "foreground": "oklch(0.30 0.06 282.42)",
      "card": "oklch(1.00 0 0)",
      "card-foreground": "oklch(0.30 0.06 282.42)",
      "popover": "oklch(1.00 0 0)",
      "popover-foreground": "oklch(0.30 0.06 282.42)",
      "primary": "oklch(0.54 0.18 288.03)",
      "primary-foreground": "oklch(1.00 0 0)",
      "secondary": "oklch(0.92 0.04 292.69)",
      "secondary-foreground": "oklch(0.41 0.10 288.17)",
      "muted": "oklch(0.96 0.01 286.15)",
      "muted-foreground": "oklch(0.54 0.05 284.74)",
      "accent": "oklch(0.92 0.04 262.14)",
      "accent-foreground": "oklch(0.30 0.06 282.42)",
      "destructive": "oklch(0.69 0.21 14.99)",
      "destructive-foreground": "oklch(1.00 0 0)",
      "border": "oklch(0.91 0.02 285.96)",
      "input": "oklch(0.91 0.02 285.96)",
      "ring": "oklch(0.54 0.18 288.03)",
      "chart-1": "oklch(0.54 0.18 288.03)",
      "chart-2": "oklch(0.70 0.16 288.99)",
      "chart-3": "oklch(0.57 0.21 276.71)",
      "chart-4": "oklch(0.64 0.19 281.81)",
      "chart-5": "oklch(0.45 0.18 279.38)",
      "radius": "0.5rem",
      "sidebar": "oklch(0.96 0.01 286.15)",
      "sidebar-foreground": "oklch(0.30 0.06 282.42)",
      "sidebar-primary": "oklch(0.54 0.18 288.03)",
      "sidebar-primary-foreground": "oklch(1.00 0 0)",
      "sidebar-accent": "oklch(0.92 0.04 262.14)",
      "sidebar-accent-foreground": "oklch(0.30 0.06 282.42)",
      "sidebar-border": "oklch(0.91 0.02 285.96)",
      "sidebar-ring": "oklch(0.54 0.18 288.03)",
      "font-sans": "Inter, sans-serif",
      "font-serif": "Georgia, serif",
      "font-mono": "JetBrains Mono, monospace",
      "shadow-color": "hsl(240 30% 25%)",
      "shadow-opacity": "0.12",
      "shadow-blur": "10px",
      "shadow-spread": "0px",
      "shadow-offset-x": "0px",
      "shadow-offset-y": "4px",
      "letter-spacing": "0em",
      "spacing": "0.25rem",
      "shadow-2xs": "0px 4px 10px 0px hsl(240 30% 25% / 0.06)",
      "shadow-xs": "0px 4px 10px 0px hsl(240 30% 25% / 0.06)",
      "shadow-sm": "0px 4px 10px 0px hsl(240 30% 25% / 0.12), 0px 1px 2px -1px hsl(240 30% 25% / 0.12)",
      "shadow": "0px 4px 10px 0px hsl(240 30% 25% / 0.12), 0px 1px 2px -1px hsl(240 30% 25% / 0.12)",
      "shadow-md": "0px 4px 10px 0px hsl(240 30% 25% / 0.12), 0px 2px 4px -1px hsl(240 30% 25% / 0.12)",
      "shadow-lg": "0px 4px 10px 0px hsl(240 30% 25% / 0.12), 0px 4px 6px -1px hsl(240 30% 25% / 0.12)",
      "shadow-xl": "0px 4px 10px 0px hsl(240 30% 25% / 0.12), 0px 8px 10px -1px hsl(240 30% 25% / 0.12)",
      "shadow-2xl": "0px 4px 10px 0px hsl(240 30% 25% / 0.30)",
      "tracking-normal": "0em"
    },
    "dark": {
      "background": "oklch(0.17 0.02 283.80)",
      "foreground": "oklch(0.92 0.03 285.88)",
      "card": "oklch(0.23 0.04 282.93)",
      "card-foreground": "oklch(0.92 0.03 285.88)",
      "popover": "oklch(0.23 0.04 282.93)",
      "popover-foreground": "oklch(0.92 0.03 285.88)",
      "primary": "oklch(0.72 0.16 290.40)",
      "primary-foreground": "oklch(0.17 0.02 283.80)",
      "secondary": "oklch(0.31 0.07 283.46)",
      "secondary-foreground": "oklch(0.84 0.08 285.91)",
      "muted": "oklch(0.27 0.06 281.44)",
      "muted-foreground": "oklch(0.72 0.05 285.17)",
      "accent": "oklch(0.34 0.08 280.97)",
      "accent-foreground": "oklch(0.92 0.03 285.88)",
      "destructive": "oklch(0.69 0.21 14.99)",
      "destructive-foreground": "oklch(1.00 0 0)",
      "border": "oklch(0.33 0.06 282.58)",
      "input": "oklch(0.33 0.06 282.58)",
      "ring": "oklch(0.72 0.16 290.40)",
      "chart-1": "oklch(0.72 0.16 290.40)",
      "chart-2": "oklch(0.64 0.10 274.91)",
      "chart-3": "oklch(0.75 0.12 244.75)",
      "chart-4": "oklch(0.71 0.10 186.68)",
      "chart-5": "oklch(0.75 0.18 346.81)",
      "radius": "0.5rem",
      "sidebar": "oklch(0.23 0.04 282.93)",
      "sidebar-foreground": "oklch(0.92 0.03 285.88)",
      "sidebar-primary": "oklch(0.72 0.16 290.40)",
      "sidebar-primary-foreground": "oklch(0.17 0.02 283.80)",
      "sidebar-accent": "oklch(0.34 0.08 280.97)",
      "sidebar-accent-foreground": "oklch(0.92 0.03 285.88)",
      "sidebar-border": "oklch(0.33 0.06 282.58)",
      "sidebar-ring": "oklch(0.72 0.16 290.40)",
      "font-sans": "Inter, sans-serif",
      "font-serif": "Georgia, serif",
      "font-mono": "JetBrains Mono, monospace",
      "shadow-color": "hsl(240 30% 25%)",
      "shadow-opacity": "0.12",
      "shadow-blur": "10px",
      "shadow-spread": "0px",
      "shadow-offset-x": "0px",
      "shadow-offset-y": "4px",
      "letter-spacing": "0em",
      "spacing": "0.25rem",
      "shadow-2xs": "0px 4px 10px 0px hsl(240 30% 25% / 0.06)",
      "shadow-xs": "0px 4px 10px 0px hsl(240 30% 25% / 0.06)",
      "shadow-sm": "0px 4px 10px 0px hsl(240 30% 25% / 0.12), 0px 1px 2px -1px hsl(240 30% 25% / 0.12)",
      "shadow": "0px 4px 10px 0px hsl(240 30% 25% / 0.12), 0px 1px 2px -1px hsl(240 30% 25% / 0.12)",
      "shadow-md": "0px 4px 10px 0px hsl(240 30% 25% / 0.12), 0px 2px 4px -1px hsl(240 30% 25% / 0.12)",
      "shadow-lg": "0px 4px 10px 0px hsl(240 30% 25% / 0.12), 0px 4px 6px -1px hsl(240 30% 25% / 0.12)",
      "shadow-xl": "0px 4px 10px 0px hsl(240 30% 25% / 0.12), 0px 8px 10px -1px hsl(240 30% 25% / 0.12)",
      "shadow-2xl": "0px 4px 10px 0px hsl(240 30% 25% / 0.30)"
    }
  }
}
</file>

<file path="public/r/themes/cyberpunk.json">
{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "cyberpunk",
  "type": "registry:style",
  "css": {
    "@layer base": {
      "body": {
        "letter-spacing": "var(--tracking-normal)"
      }
    }
  },
  "cssVars": {
    "theme": {
      "font-sans": "Outfit, sans-serif",
      "font-mono": "Fira Code, monospace",
      "font-serif": "ui-serif, Georgia, Cambria, \"Times New Roman\", Times, serif",
      "radius": "0.5rem",
      "tracking-tighter": "calc(var(--tracking-normal) - 0.05em)",
      "tracking-tight": "calc(var(--tracking-normal) - 0.025em)",
      "tracking-wide": "calc(var(--tracking-normal) + 0.025em)",
      "tracking-wider": "calc(var(--tracking-normal) + 0.05em)",
      "tracking-widest": "calc(var(--tracking-normal) + 0.1em)"
    },
    "light": {
      "background": "oklch(0.98 0.00 247.84)",
      "foreground": "oklch(0.16 0.04 281.83)",
      "card": "oklch(1.00 0 0)",
      "card-foreground": "oklch(0.16 0.04 281.83)",
      "popover": "oklch(1.00 0 0)",
      "popover-foreground": "oklch(0.16 0.04 281.83)",
      "primary": "oklch(0.67 0.29 341.41)",
      "primary-foreground": "oklch(1.00 0 0)",
      "secondary": "oklch(0.96 0.02 286.02)",
      "secondary-foreground": "oklch(0.16 0.04 281.83)",
      "muted": "oklch(0.96 0.02 286.02)",
      "muted-foreground": "oklch(0.16 0.04 281.83)",
      "accent": "oklch(0.89 0.17 171.27)",
      "accent-foreground": "oklch(0.16 0.04 281.83)",
      "destructive": "oklch(0.65 0.23 34.04)",
      "destructive-foreground": "oklch(1.00 0 0)",
      "border": "oklch(0.92 0.01 225.09)",
      "input": "oklch(0.92 0.01 225.09)",
      "ring": "oklch(0.67 0.29 341.41)",
      "chart-1": "oklch(0.67 0.29 341.41)",
      "chart-2": "oklch(0.55 0.29 299.10)",
      "chart-3": "oklch(0.84 0.15 209.29)",
      "chart-4": "oklch(0.89 0.17 171.27)",
      "chart-5": "oklch(0.92 0.19 101.41)",
      "radius": "0.5rem",
      "sidebar": "oklch(0.96 0.02 286.02)",
      "sidebar-foreground": "oklch(0.16 0.04 281.83)",
      "sidebar-primary": "oklch(0.67 0.29 341.41)",
      "sidebar-primary-foreground": "oklch(1.00 0 0)",
      "sidebar-accent": "oklch(0.89 0.17 171.27)",
      "sidebar-accent-foreground": "oklch(0.16 0.04 281.83)",
      "sidebar-border": "oklch(0.92 0.01 225.09)",
      "sidebar-ring": "oklch(0.67 0.29 341.41)",
      "font-sans": "Outfit, sans-serif",
      "font-serif": "ui-serif, Georgia, Cambria, \"Times New Roman\", Times, serif",
      "font-mono": "Fira Code, monospace",
      "shadow-color": "hsl(0 0% 0%)",
      "shadow-opacity": "0.1",
      "shadow-blur": "8px",
      "shadow-spread": "-2px",
      "shadow-offset-x": "0px",
      "shadow-offset-y": "4px",
      "letter-spacing": "0em",
      "spacing": "0.25rem",
      "shadow-2xs": "0px 4px 8px -2px hsl(0 0% 0% / 0.05)",
      "shadow-xs": "0px 4px 8px -2px hsl(0 0% 0% / 0.05)",
      "shadow-sm": "0px 4px 8px -2px hsl(0 0% 0% / 0.10), 0px 1px 2px -3px hsl(0 0% 0% / 0.10)",
      "shadow": "0px 4px 8px -2px hsl(0 0% 0% / 0.10), 0px 1px 2px -3px hsl(0 0% 0% / 0.10)",
      "shadow-md": "0px 4px 8px -2px hsl(0 0% 0% / 0.10), 0px 2px 4px -3px hsl(0 0% 0% / 0.10)",
      "shadow-lg": "0px 4px 8px -2px hsl(0 0% 0% / 0.10), 0px 4px 6px -3px hsl(0 0% 0% / 0.10)",
      "shadow-xl": "0px 4px 8px -2px hsl(0 0% 0% / 0.10), 0px 8px 10px -3px hsl(0 0% 0% / 0.10)",
      "shadow-2xl": "0px 4px 8px -2px hsl(0 0% 0% / 0.25)",
      "tracking-normal": "0em"
    },
    "dark": {
      "background": "oklch(0.16 0.04 281.83)",
      "foreground": "oklch(0.95 0.01 260.73)",
      "card": "oklch(0.25 0.06 281.14)",
      "card-foreground": "oklch(0.95 0.01 260.73)",
      "popover": "oklch(0.25 0.06 281.14)",
      "popover-foreground": "oklch(0.95 0.01 260.73)",
      "primary": "oklch(0.67 0.29 341.41)",
      "primary-foreground": "oklch(1.00 0 0)",
      "secondary": "oklch(0.25 0.06 281.14)",
      "secondary-foreground": "oklch(0.95 0.01 260.73)",
      "muted": "oklch(0.25 0.06 281.14)",
      "muted-foreground": "oklch(0.62 0.05 278.10)",
      "accent": "oklch(0.89 0.17 171.27)",
      "accent-foreground": "oklch(0.16 0.04 281.83)",
      "destructive": "oklch(0.65 0.23 34.04)",
      "destructive-foreground": "oklch(1.00 0 0)",
      "border": "oklch(0.33 0.08 280.79)",
      "input": "oklch(0.33 0.08 280.79)",
      "ring": "oklch(0.67 0.29 341.41)",
      "chart-1": "oklch(0.67 0.29 341.41)",
      "chart-2": "oklch(0.55 0.29 299.10)",
      "chart-3": "oklch(0.84 0.15 209.29)",
      "chart-4": "oklch(0.89 0.17 171.27)",
      "chart-5": "oklch(0.92 0.19 101.41)",
      "radius": "0.5rem",
      "sidebar": "oklch(0.16 0.04 281.83)",
      "sidebar-foreground": "oklch(0.95 0.01 260.73)",
      "sidebar-primary": "oklch(0.67 0.29 341.41)",
      "sidebar-primary-foreground": "oklch(1.00 0 0)",
      "sidebar-accent": "oklch(0.89 0.17 171.27)",
      "sidebar-accent-foreground": "oklch(0.16 0.04 281.83)",
      "sidebar-border": "oklch(0.33 0.08 280.79)",
      "sidebar-ring": "oklch(0.67 0.29 341.41)",
      "font-sans": "Outfit, sans-serif",
      "font-serif": "ui-serif, Georgia, Cambria, \"Times New Roman\", Times, serif",
      "font-mono": "Fira Code, monospace",
      "shadow-color": "hsl(0 0% 0%)",
      "shadow-opacity": "0.1",
      "shadow-blur": "8px",
      "shadow-spread": "-2px",
      "shadow-offset-x": "0px",
      "shadow-offset-y": "4px",
      "letter-spacing": "0em",
      "spacing": "0.25rem",
      "shadow-2xs": "0px 4px 8px -2px hsl(0 0% 0% / 0.05)",
      "shadow-xs": "0px 4px 8px -2px hsl(0 0% 0% / 0.05)",
      "shadow-sm": "0px 4px 8px -2px hsl(0 0% 0% / 0.10), 0px 1px 2px -3px hsl(0 0% 0% / 0.10)",
      "shadow": "0px 4px 8px -2px hsl(0 0% 0% / 0.10), 0px 1px 2px -3px hsl(0 0% 0% / 0.10)",
      "shadow-md": "0px 4px 8px -2px hsl(0 0% 0% / 0.10), 0px 2px 4px -3px hsl(0 0% 0% / 0.10)",
      "shadow-lg": "0px 4px 8px -2px hsl(0 0% 0% / 0.10), 0px 4px 6px -3px hsl(0 0% 0% / 0.10)",
      "shadow-xl": "0px 4px 8px -2px hsl(0 0% 0% / 0.10), 0px 8px 10px -3px hsl(0 0% 0% / 0.10)",
      "shadow-2xl": "0px 4px 8px -2px hsl(0 0% 0% / 0.25)"
    }
  }
}
</file>

<file path="public/r/themes/doom-64.json">
{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "doom-64",
  "type": "registry:style",
  "css": {
    "@layer base": {
      "body": {
        "letter-spacing": "var(--tracking-normal)"
      }
    }
  },
  "cssVars": {
    "theme": {
      "font-sans": "\"Oxanium\", sans-serif",
      "font-mono": "\"Source Code Pro\", monospace",
      "font-serif": "ui-serif, Georgia, Cambria, \"Times New Roman\", Times, serif",
      "radius": "0px",
      "tracking-tighter": "calc(var(--tracking-normal) - 0.05em)",
      "tracking-tight": "calc(var(--tracking-normal) - 0.025em)",
      "tracking-wide": "calc(var(--tracking-normal) + 0.025em)",
      "tracking-wider": "calc(var(--tracking-normal) + 0.05em)",
      "tracking-widest": "calc(var(--tracking-normal) + 0.1em)"
    },
    "light": {
      "background": "oklch(0.85 0 0)",
      "foreground": "oklch(0.24 0 0)",
      "card": "oklch(0.76 0 0)",
      "card-foreground": "oklch(0.24 0 0)",
      "popover": "oklch(0.76 0 0)",
      "popover-foreground": "oklch(0.24 0 0)",
      "primary": "oklch(0.50 0.19 27.48)",
      "primary-foreground": "oklch(1.00 0 0)",
      "secondary": "oklch(0.50 0.09 126.19)",
      "secondary-foreground": "oklch(1.00 0 0)",
      "muted": "oklch(0.78 0 0)",
      "muted-foreground": "oklch(0.41 0 0)",
      "accent": "oklch(0.59 0.10 245.74)",
      "accent-foreground": "oklch(1.00 0 0)",
      "destructive": "oklch(0.71 0.20 46.46)",
      "destructive-foreground": "oklch(0 0 0)",
      "border": "oklch(0.43 0 0)",
      "input": "oklch(0.43 0 0)",
      "ring": "oklch(0.50 0.19 27.48)",
      "chart-1": "oklch(0.50 0.19 27.48)",
      "chart-2": "oklch(0.50 0.09 126.19)",
      "chart-3": "oklch(0.59 0.10 245.74)",
      "chart-4": "oklch(0.71 0.20 46.46)",
      "chart-5": "oklch(0.57 0.04 40.43)",
      "radius": "0px",
      "sidebar": "oklch(0.76 0 0)",
      "sidebar-foreground": "oklch(0.24 0 0)",
      "sidebar-primary": "oklch(0.50 0.19 27.48)",
      "sidebar-primary-foreground": "oklch(1.00 0 0)",
      "sidebar-accent": "oklch(0.59 0.10 245.74)",
      "sidebar-accent-foreground": "oklch(1.00 0 0)",
      "sidebar-border": "oklch(0.43 0 0)",
      "sidebar-ring": "oklch(0.50 0.19 27.48)",
      "font-sans": "\"Oxanium\", sans-serif",
      "font-serif": "ui-serif, Georgia, Cambria, \"Times New Roman\", Times, serif",
      "font-mono": "\"Source Code Pro\", monospace",
      "shadow-color": "hsl(0 0% 0%)",
      "shadow-opacity": "0.4",
      "shadow-blur": "4px",
      "shadow-spread": "0px",
      "shadow-offset-x": "0px",
      "shadow-offset-y": "2px",
      "letter-spacing": "0em",
      "spacing": "0.25rem",
      "shadow-2xs": "0px 2px 4px 0px hsl(0 0% 0% / 0.20)",
      "shadow-xs": "0px 2px 4px 0px hsl(0 0% 0% / 0.20)",
      "shadow-sm": "0px 2px 4px 0px hsl(0 0% 0% / 0.40), 0px 1px 2px -1px hsl(0 0% 0% / 0.40)",
      "shadow": "0px 2px 4px 0px hsl(0 0% 0% / 0.40), 0px 1px 2px -1px hsl(0 0% 0% / 0.40)",
      "shadow-md": "0px 2px 4px 0px hsl(0 0% 0% / 0.40), 0px 2px 4px -1px hsl(0 0% 0% / 0.40)",
      "shadow-lg": "0px 2px 4px 0px hsl(0 0% 0% / 0.40), 0px 4px 6px -1px hsl(0 0% 0% / 0.40)",
      "shadow-xl": "0px 2px 4px 0px hsl(0 0% 0% / 0.40), 0px 8px 10px -1px hsl(0 0% 0% / 0.40)",
      "shadow-2xl": "0px 2px 4px 0px hsl(0 0% 0% / 1.00)",
      "tracking-normal": "0em"
    },
    "dark": {
      "background": "oklch(0.22 0 0)",
      "foreground": "oklch(0.91 0 0)",
      "card": "oklch(0.29 0 0)",
      "card-foreground": "oklch(0.91 0 0)",
      "popover": "oklch(0.29 0 0)",
      "popover-foreground": "oklch(0.91 0 0)",
      "primary": "oklch(0.61 0.21 27.03)",
      "primary-foreground": "oklch(1.00 0 0)",
      "secondary": "oklch(0.64 0.15 133.01)",
      "secondary-foreground": "oklch(0 0 0)",
      "muted": "oklch(0.26 0 0)",
      "muted-foreground": "oklch(0.71 0 0)",
      "accent": "oklch(0.75 0.12 244.75)",
      "accent-foreground": "oklch(0 0 0)",
      "destructive": "oklch(0.78 0.17 68.09)",
      "destructive-foreground": "oklch(0 0 0)",
      "border": "oklch(0.41 0 0)",
      "input": "oklch(0.41 0 0)",
      "ring": "oklch(0.61 0.21 27.03)",
      "chart-1": "oklch(0.61 0.21 27.03)",
      "chart-2": "oklch(0.64 0.15 133.01)",
      "chart-3": "oklch(0.75 0.12 244.75)",
      "chart-4": "oklch(0.78 0.17 68.09)",
      "chart-5": "oklch(0.65 0.03 40.80)",
      "radius": "0px",
      "sidebar": "oklch(0.19 0 0)",
      "sidebar-foreground": "oklch(0.91 0 0)",
      "sidebar-primary": "oklch(0.61 0.21 27.03)",
      "sidebar-primary-foreground": "oklch(1.00 0 0)",
      "sidebar-accent": "oklch(0.75 0.12 244.75)",
      "sidebar-accent-foreground": "oklch(0 0 0)",
      "sidebar-border": "oklch(0.41 0 0)",
      "sidebar-ring": "oklch(0.61 0.21 27.03)",
      "font-sans": "\"Oxanium\", sans-serif",
      "font-serif": "ui-serif, Georgia, Cambria, \"Times New Roman\", Times, serif",
      "font-mono": "\"Source Code Pro\", monospace",
      "shadow-color": "hsl(0 0% 0%)",
      "shadow-opacity": "0.6",
      "shadow-blur": "5px",
      "shadow-spread": "0px",
      "shadow-offset-x": "0px",
      "shadow-offset-y": "2px",
      "letter-spacing": "0em",
      "spacing": "0.25rem",
      "shadow-2xs": "0px 2px 5px 0px hsl(0 0% 0% / 0.30)",
      "shadow-xs": "0px 2px 5px 0px hsl(0 0% 0% / 0.30)",
      "shadow-sm": "0px 2px 5px 0px hsl(0 0% 0% / 0.60), 0px 1px 2px -1px hsl(0 0% 0% / 0.60)",
      "shadow": "0px 2px 5px 0px hsl(0 0% 0% / 0.60), 0px 1px 2px -1px hsl(0 0% 0% / 0.60)",
      "shadow-md": "0px 2px 5px 0px hsl(0 0% 0% / 0.60), 0px 2px 4px -1px hsl(0 0% 0% / 0.60)",
      "shadow-lg": "0px 2px 5px 0px hsl(0 0% 0% / 0.60), 0px 4px 6px -1px hsl(0 0% 0% / 0.60)",
      "shadow-xl": "0px 2px 5px 0px hsl(0 0% 0% / 0.60), 0px 8px 10px -1px hsl(0 0% 0% / 0.60)",
      "shadow-2xl": "0px 2px 5px 0px hsl(0 0% 0% / 1.50)"
    }
  }
}
</file>

<file path="public/r/themes/elegant-luxury.json">
{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "elegant-luxury",
  "type": "registry:style",
  "css": {
    "@layer base": {
      "body": {
        "letter-spacing": "var(--tracking-normal)"
      }
    }
  },
  "cssVars": {
    "theme": {
      "font-sans": "Poppins, sans-serif",
      "font-mono": "IBM Plex Mono, monospace",
      "font-serif": "Libre Baskerville, serif",
      "radius": "0.375rem",
      "tracking-tighter": "calc(var(--tracking-normal) - 0.05em)",
      "tracking-tight": "calc(var(--tracking-normal) - 0.025em)",
      "tracking-wide": "calc(var(--tracking-normal) + 0.025em)",
      "tracking-wider": "calc(var(--tracking-normal) + 0.05em)",
      "tracking-widest": "calc(var(--tracking-normal) + 0.1em)"
    },
    "light": {
      "background": "oklch(0.98 0.00 56.38)",
      "foreground": "oklch(0.22 0 0)",
      "card": "oklch(0.98 0.00 56.38)",
      "card-foreground": "oklch(0.22 0 0)",
      "popover": "oklch(0.98 0.00 56.38)",
      "popover-foreground": "oklch(0.22 0 0)",
      "primary": "oklch(0.47 0.15 24.94)",
      "primary-foreground": "oklch(1.00 0 0)",
      "secondary": "oklch(0.96 0.04 89.09)",
      "secondary-foreground": "oklch(0.48 0.10 75.12)",
      "muted": "oklch(0.94 0.01 53.44)",
      "muted-foreground": "oklch(0.44 0.01 73.64)",
      "accent": "oklch(0.96 0.06 95.62)",
      "accent-foreground": "oklch(0.40 0.13 25.72)",
      "destructive": "oklch(0.44 0.16 26.90)",
      "destructive-foreground": "oklch(1.00 0 0)",
      "border": "oklch(0.94 0.03 80.99)",
      "input": "oklch(0.94 0.03 80.99)",
      "ring": "oklch(0.47 0.15 24.94)",
      "chart-1": "oklch(0.51 0.19 27.52)",
      "chart-2": "oklch(0.47 0.15 24.94)",
      "chart-3": "oklch(0.40 0.13 25.72)",
      "chart-4": "oklch(0.56 0.15 49.00)",
      "chart-5": "oklch(0.47 0.12 46.20)",
      "radius": "0.375rem",
      "sidebar": "oklch(0.94 0.01 53.44)",
      "sidebar-foreground": "oklch(0.22 0 0)",
      "sidebar-primary": "oklch(0.47 0.15 24.94)",
      "sidebar-primary-foreground": "oklch(1.00 0 0)",
      "sidebar-accent": "oklch(0.96 0.06 95.62)",
      "sidebar-accent-foreground": "oklch(0.40 0.13 25.72)",
      "sidebar-border": "oklch(0.94 0.03 80.99)",
      "sidebar-ring": "oklch(0.47 0.15 24.94)",
      "font-sans": "Poppins, sans-serif",
      "font-serif": "Libre Baskerville, serif",
      "font-mono": "IBM Plex Mono, monospace",
      "shadow-color": "hsl(0 63% 18%)",
      "shadow-opacity": "0.12",
      "shadow-blur": "16px",
      "shadow-spread": "-2px",
      "shadow-offset-x": "1px",
      "shadow-offset-y": "1px",
      "letter-spacing": "0em",
      "spacing": "0.25rem",
      "shadow-2xs": "1px 1px 16px -2px hsl(0 63% 18% / 0.06)",
      "shadow-xs": "1px 1px 16px -2px hsl(0 63% 18% / 0.06)",
      "shadow-sm": "1px 1px 16px -2px hsl(0 63% 18% / 0.12), 1px 1px 2px -3px hsl(0 63% 18% / 0.12)",
      "shadow": "1px 1px 16px -2px hsl(0 63% 18% / 0.12), 1px 1px 2px -3px hsl(0 63% 18% / 0.12)",
      "shadow-md": "1px 1px 16px -2px hsl(0 63% 18% / 0.12), 1px 2px 4px -3px hsl(0 63% 18% / 0.12)",
      "shadow-lg": "1px 1px 16px -2px hsl(0 63% 18% / 0.12), 1px 4px 6px -3px hsl(0 63% 18% / 0.12)",
      "shadow-xl": "1px 1px 16px -2px hsl(0 63% 18% / 0.12), 1px 8px 10px -3px hsl(0 63% 18% / 0.12)",
      "shadow-2xl": "1px 1px 16px -2px hsl(0 63% 18% / 0.30)",
      "tracking-normal": "0em"
    },
    "dark": {
      "background": "oklch(0.22 0.01 56.04)",
      "foreground": "oklch(0.97 0.00 106.42)",
      "card": "oklch(0.27 0.01 34.30)",
      "card-foreground": "oklch(0.97 0.00 106.42)",
      "popover": "oklch(0.27 0.01 34.30)",
      "popover-foreground": "oklch(0.97 0.00 106.42)",
      "primary": "oklch(0.51 0.19 27.52)",
      "primary-foreground": "oklch(0.98 0.00 56.38)",
      "secondary": "oklch(0.47 0.12 46.20)",
      "secondary-foreground": "oklch(0.96 0.06 95.62)",
      "muted": "oklch(0.27 0.01 34.30)",
      "muted-foreground": "oklch(0.87 0.00 56.37)",
      "accent": "oklch(0.56 0.15 49.00)",
      "accent-foreground": "oklch(0.96 0.06 95.62)",
      "destructive": "oklch(0.64 0.21 25.33)",
      "destructive-foreground": "oklch(1.00 0 0)",
      "border": "oklch(0.37 0.01 67.56)",
      "input": "oklch(0.37 0.01 67.56)",
      "ring": "oklch(0.51 0.19 27.52)",
      "chart-1": "oklch(0.71 0.17 22.22)",
      "chart-2": "oklch(0.64 0.21 25.33)",
      "chart-3": "oklch(0.58 0.22 27.33)",
      "chart-4": "oklch(0.84 0.16 84.43)",
      "chart-5": "oklch(0.77 0.16 70.08)",
      "radius": "0.375rem",
      "sidebar": "oklch(0.22 0.01 56.04)",
      "sidebar-foreground": "oklch(0.97 0.00 106.42)",
      "sidebar-primary": "oklch(0.51 0.19 27.52)",
      "sidebar-primary-foreground": "oklch(0.98 0.00 56.38)",
      "sidebar-accent": "oklch(0.56 0.15 49.00)",
      "sidebar-accent-foreground": "oklch(0.96 0.06 95.62)",
      "sidebar-border": "oklch(0.37 0.01 67.56)",
      "sidebar-ring": "oklch(0.51 0.19 27.52)",
      "font-sans": "Poppins, sans-serif",
      "font-serif": "Libre Baskerville, serif",
      "font-mono": "IBM Plex Mono, monospace",
      "shadow-color": "hsl(0 63% 18%)",
      "shadow-opacity": "0.12",
      "shadow-blur": "16px",
      "shadow-spread": "-2px",
      "shadow-offset-x": "1px",
      "shadow-offset-y": "1px",
      "letter-spacing": "0em",
      "spacing": "0.25rem",
      "shadow-2xs": "1px 1px 16px -2px hsl(0 63% 18% / 0.06)",
      "shadow-xs": "1px 1px 16px -2px hsl(0 63% 18% / 0.06)",
      "shadow-sm": "1px 1px 16px -2px hsl(0 63% 18% / 0.12), 1px 1px 2px -3px hsl(0 63% 18% / 0.12)",
      "shadow": "1px 1px 16px -2px hsl(0 63% 18% / 0.12), 1px 1px 2px -3px hsl(0 63% 18% / 0.12)",
      "shadow-md": "1px 1px 16px -2px hsl(0 63% 18% / 0.12), 1px 2px 4px -3px hsl(0 63% 18% / 0.12)",
      "shadow-lg": "1px 1px 16px -2px hsl(0 63% 18% / 0.12), 1px 4px 6px -3px hsl(0 63% 18% / 0.12)",
      "shadow-xl": "1px 1px 16px -2px hsl(0 63% 18% / 0.12), 1px 8px 10px -3px hsl(0 63% 18% / 0.12)",
      "shadow-2xl": "1px 1px 16px -2px hsl(0 63% 18% / 0.30)"
    }
  }
}
</file>

<file path="public/r/themes/graphite.json">
{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "graphite",
  "type": "registry:style",
  "css": {
    "@layer base": {
      "body": {
        "letter-spacing": "var(--tracking-normal)"
      }
    }
  },
  "cssVars": {
    "theme": {
      "font-sans": "Inter, sans-serif",
      "font-mono": "Fira Code, monospace",
      "font-serif": "Georgia, serif",
      "radius": "0.35rem",
      "tracking-tighter": "calc(var(--tracking-normal) - 0.05em)",
      "tracking-tight": "calc(var(--tracking-normal) - 0.025em)",
      "tracking-wide": "calc(var(--tracking-normal) + 0.025em)",
      "tracking-wider": "calc(var(--tracking-normal) + 0.05em)",
      "tracking-widest": "calc(var(--tracking-normal) + 0.1em)"
    },
    "light": {
      "background": "oklch(0.96 0 0)",
      "foreground": "oklch(0.32 0 0)",
      "card": "oklch(0.97 0 0)",
      "card-foreground": "oklch(0.32 0 0)",
      "popover": "oklch(0.97 0 0)",
      "popover-foreground": "oklch(0.32 0 0)",
      "primary": "oklch(0.49 0 0)",
      "primary-foreground": "oklch(1.00 0 0)",
      "secondary": "oklch(0.91 0 0)",
      "secondary-foreground": "oklch(0.32 0 0)",
      "muted": "oklch(0.89 0 0)",
      "muted-foreground": "oklch(0.51 0 0)",
      "accent": "oklch(0.81 0 0)",
      "accent-foreground": "oklch(0.32 0 0)",
      "destructive": "oklch(0.56 0.19 25.86)",
      "destructive-foreground": "oklch(1.00 0 0)",
      "border": "oklch(0.86 0 0)",
      "input": "oklch(0.91 0 0)",
      "ring": "oklch(0.49 0 0)",
      "chart-1": "oklch(0.49 0 0)",
      "chart-2": "oklch(0.49 0.04 196.03)",
      "chart-3": "oklch(0.65 0 0)",
      "chart-4": "oklch(0.73 0 0)",
      "chart-5": "oklch(0.81 0 0)",
      "radius": "0.35rem",
      "sidebar": "oklch(0.94 0 0)",
      "sidebar-foreground": "oklch(0.32 0 0)",
      "sidebar-primary": "oklch(0.49 0 0)",
      "sidebar-primary-foreground": "oklch(1.00 0 0)",
      "sidebar-accent": "oklch(0.81 0 0)",
      "sidebar-accent-foreground": "oklch(0.32 0 0)",
      "sidebar-border": "oklch(0.86 0 0)",
      "sidebar-ring": "oklch(0.49 0 0)",
      "font-sans": "Montserrat, sans-serif",
      "font-serif": "Georgia, serif",
      "font-mono": "Fira Code, monospace",
      "shadow-color": "hsl(0 0% 20% / 0.1)",
      "shadow-opacity": "0.15",
      "shadow-blur": "0px",
      "shadow-spread": "0px",
      "shadow-offset-x": "0px",
      "shadow-offset-y": "2px",
      "letter-spacing": "0em",
      "spacing": "0.25rem",
      "shadow-2xs": "0px 2px 0px 0px hsl(0 0% 20% / 0.07)",
      "shadow-xs": "0px 2px 0px 0px hsl(0 0% 20% / 0.07)",
      "shadow-sm": "0px 2px 0px 0px hsl(0 0% 20% / 0.15), 0px 1px 2px -1px hsl(0 0% 20% / 0.15)",
      "shadow": "0px 2px 0px 0px hsl(0 0% 20% / 0.15), 0px 1px 2px -1px hsl(0 0% 20% / 0.15)",
      "shadow-md": "0px 2px 0px 0px hsl(0 0% 20% / 0.15), 0px 2px 4px -1px hsl(0 0% 20% / 0.15)",
      "shadow-lg": "0px 2px 0px 0px hsl(0 0% 20% / 0.15), 0px 4px 6px -1px hsl(0 0% 20% / 0.15)",
      "shadow-xl": "0px 2px 0px 0px hsl(0 0% 20% / 0.15), 0px 8px 10px -1px hsl(0 0% 20% / 0.15)",
      "shadow-2xl": "0px 2px 0px 0px hsl(0 0% 20% / 0.38)",
      "tracking-normal": "0em"
    },
    "dark": {
      "background": "oklch(0.22 0 0)",
      "foreground": "oklch(0.89 0 0)",
      "card": "oklch(0.24 0 0)",
      "card-foreground": "oklch(0.89 0 0)",
      "popover": "oklch(0.24 0 0)",
      "popover-foreground": "oklch(0.89 0 0)",
      "primary": "oklch(0.71 0 0)",
      "primary-foreground": "oklch(0.22 0 0)",
      "secondary": "oklch(0.31 0 0)",
      "secondary-foreground": "oklch(0.89 0 0)",
      "muted": "oklch(0.29 0 0)",
      "muted-foreground": "oklch(0.60 0 0)",
      "accent": "oklch(0.37 0 0)",
      "accent-foreground": "oklch(0.89 0 0)",
      "destructive": "oklch(0.66 0.15 22.17)",
      "destructive-foreground": "oklch(1.00 0 0)",
      "border": "oklch(0.33 0 0)",
      "input": "oklch(0.31 0 0)",
      "ring": "oklch(0.71 0 0)",
      "chart-1": "oklch(0.71 0 0)",
      "chart-2": "oklch(0.67 0.03 206.35)",
      "chart-3": "oklch(0.55 0 0)",
      "chart-4": "oklch(0.46 0 0)",
      "chart-5": "oklch(0.37 0 0)",
      "radius": "0.35rem",
      "sidebar": "oklch(0.24 0 0)",
      "sidebar-foreground": "oklch(0.89 0 0)",
      "sidebar-primary": "oklch(0.71 0 0)",
      "sidebar-primary-foreground": "oklch(0.22 0 0)",
      "sidebar-accent": "oklch(0.37 0 0)",
      "sidebar-accent-foreground": "oklch(0.89 0 0)",
      "sidebar-border": "oklch(0.33 0 0)",
      "sidebar-ring": "oklch(0.71 0 0)",
      "font-sans": "Inter, sans-serif",
      "font-serif": "Georgia, serif",
      "font-mono": "Fira Code, monospace",
      "shadow-color": "hsl(0 0% 20% / 0.1)",
      "shadow-opacity": "0.15",
      "shadow-blur": "0px",
      "shadow-spread": "0px",
      "shadow-offset-x": "0px",
      "shadow-offset-y": "2px",
      "letter-spacing": "0em",
      "spacing": "0.25rem",
      "shadow-2xs": "0px 2px 0px 0px hsl(0 0% 20% / 0.07)",
      "shadow-xs": "0px 2px 0px 0px hsl(0 0% 20% / 0.07)",
      "shadow-sm": "0px 2px 0px 0px hsl(0 0% 20% / 0.15), 0px 1px 2px -1px hsl(0 0% 20% / 0.15)",
      "shadow": "0px 2px 0px 0px hsl(0 0% 20% / 0.15), 0px 1px 2px -1px hsl(0 0% 20% / 0.15)",
      "shadow-md": "0px 2px 0px 0px hsl(0 0% 20% / 0.15), 0px 2px 4px -1px hsl(0 0% 20% / 0.15)",
      "shadow-lg": "0px 2px 0px 0px hsl(0 0% 20% / 0.15), 0px 4px 6px -1px hsl(0 0% 20% / 0.15)",
      "shadow-xl": "0px 2px 0px 0px hsl(0 0% 20% / 0.15), 0px 8px 10px -1px hsl(0 0% 20% / 0.15)",
      "shadow-2xl": "0px 2px 0px 0px hsl(0 0% 20% / 0.38)"
    }
  }
}
</file>

<file path="public/r/themes/kodama-grove.json">
{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "kodama-grove",
  "type": "registry:style",
  "css": {
    "@layer base": {
      "body": {
        "letter-spacing": "var(--tracking-normal)"
      }
    }
  },
  "cssVars": {
    "theme": {
      "font-sans": "Merriweather, serif",
      "font-mono": "JetBrains Mono, monospace",
      "font-serif": "Source Serif 4, serif",
      "radius": "0.425rem",
      "tracking-tighter": "calc(var(--tracking-normal) - 0.05em)",
      "tracking-tight": "calc(var(--tracking-normal) - 0.025em)",
      "tracking-wide": "calc(var(--tracking-normal) + 0.025em)",
      "tracking-wider": "calc(var(--tracking-normal) + 0.05em)",
      "tracking-widest": "calc(var(--tracking-normal) + 0.1em)"
    },
    "light": {
      "background": "oklch(0.88 0.05 91.79)",
      "foreground": "oklch(0.43 0.03 59.22)",
      "card": "oklch(0.89 0.04 87.57)",
      "card-foreground": "oklch(0.43 0.03 59.22)",
      "popover": "oklch(0.94 0.03 89.85)",
      "popover-foreground": "oklch(0.43 0.03 59.22)",
      "primary": "oklch(0.67 0.11 118.91)",
      "primary-foreground": "oklch(0.99 0.01 88.64)",
      "secondary": "oklch(0.85 0.06 91.15)",
      "secondary-foreground": "oklch(0.43 0.03 59.22)",
      "muted": "oklch(0.85 0.06 91.15)",
      "muted-foreground": "oklch(0.58 0.03 60.93)",
      "accent": "oklch(0.84 0.07 90.33)",
      "accent-foreground": "oklch(0.43 0.03 59.22)",
      "destructive": "oklch(0.71 0.10 29.98)",
      "destructive-foreground": "oklch(0.98 0.01 91.48)",
      "border": "oklch(0.69 0.04 59.84)",
      "input": "oklch(0.84 0.07 90.33)",
      "ring": "oklch(0.73 0.06 130.85)",
      "chart-1": "oklch(0.73 0.06 130.85)",
      "chart-2": "oklch(0.68 0.06 132.45)",
      "chart-3": "oklch(0.82 0.03 136.65)",
      "chart-4": "oklch(0.59 0.05 137.62)",
      "chart-5": "oklch(0.52 0.04 137.19)",
      "radius": "0.425rem",
      "sidebar": "oklch(0.86 0.06 90.52)",
      "sidebar-foreground": "oklch(0.43 0.03 59.22)",
      "sidebar-primary": "oklch(0.73 0.06 130.85)",
      "sidebar-primary-foreground": "oklch(0.99 0.01 88.64)",
      "sidebar-accent": "oklch(0.92 0.02 88.00)",
      "sidebar-accent-foreground": "oklch(0.43 0.03 59.22)",
      "sidebar-border": "oklch(0.91 0.02 88.00)",
      "sidebar-ring": "oklch(0.73 0.06 130.85)",
      "font-sans": "Merriweather, serif",
      "font-serif": "Source Serif 4, serif",
      "font-mono": "JetBrains Mono, monospace",
      "shadow-color": "hsl(88 22% 35% / 0.15)",
      "shadow-opacity": "0.15",
      "shadow-blur": "2px",
      "shadow-spread": "0px",
      "shadow-offset-x": "3px",
      "shadow-offset-y": "3px",
      "letter-spacing": "0em",
      "spacing": "0.25rem",
      "shadow-2xs": "3px 3px 2px 0px hsl(88 22% 35% / 0.07)",
      "shadow-xs": "3px 3px 2px 0px hsl(88 22% 35% / 0.07)",
      "shadow-sm": "3px 3px 2px 0px hsl(88 22% 35% / 0.15), 3px 1px 2px -1px hsl(88 22% 35% / 0.15)",
      "shadow": "3px 3px 2px 0px hsl(88 22% 35% / 0.15), 3px 1px 2px -1px hsl(88 22% 35% / 0.15)",
      "shadow-md": "3px 3px 2px 0px hsl(88 22% 35% / 0.15), 3px 2px 4px -1px hsl(88 22% 35% / 0.15)",
      "shadow-lg": "3px 3px 2px 0px hsl(88 22% 35% / 0.15), 3px 4px 6px -1px hsl(88 22% 35% / 0.15)",
      "shadow-xl": "3px 3px 2px 0px hsl(88 22% 35% / 0.15), 3px 8px 10px -1px hsl(88 22% 35% / 0.15)",
      "shadow-2xl": "3px 3px 2px 0px hsl(88 22% 35% / 0.38)",
      "tracking-normal": "0em"
    },
    "dark": {
      "background": "oklch(0.33 0.02 88.07)",
      "foreground": "oklch(0.92 0.02 82.12)",
      "card": "oklch(0.36 0.02 82.33)",
      "card-foreground": "oklch(0.92 0.02 82.12)",
      "popover": "oklch(0.36 0.02 82.33)",
      "popover-foreground": "oklch(0.92 0.02 82.12)",
      "primary": "oklch(0.68 0.06 132.45)",
      "primary-foreground": "oklch(0.27 0.01 61.02)",
      "secondary": "oklch(0.44 0.02 84.55)",
      "secondary-foreground": "oklch(0.92 0.02 82.12)",
      "muted": "oklch(0.39 0.02 82.71)",
      "muted-foreground": "oklch(0.71 0.02 73.62)",
      "accent": "oklch(0.65 0.07 90.76)",
      "accent-foreground": "oklch(0.27 0.01 61.02)",
      "destructive": "oklch(0.63 0.08 31.30)",
      "destructive-foreground": "oklch(0.94 0.02 84.59)",
      "border": "oklch(0.44 0.02 84.55)",
      "input": "oklch(0.44 0.02 84.55)",
      "ring": "oklch(0.68 0.06 132.45)",
      "chart-1": "oklch(0.68 0.06 132.45)",
      "chart-2": "oklch(0.73 0.06 130.85)",
      "chart-3": "oklch(0.59 0.05 137.62)",
      "chart-4": "oklch(0.65 0.07 90.76)",
      "chart-5": "oklch(0.52 0.04 137.19)",
      "radius": "0.425rem",
      "sidebar": "oklch(0.33 0.02 88.07)",
      "sidebar-foreground": "oklch(0.92 0.02 82.12)",
      "sidebar-primary": "oklch(0.68 0.06 132.45)",
      "sidebar-primary-foreground": "oklch(0.27 0.01 61.02)",
      "sidebar-accent": "oklch(0.65 0.07 90.76)",
      "sidebar-accent-foreground": "oklch(0.27 0.01 61.02)",
      "sidebar-border": "oklch(0.44 0.02 84.55)",
      "sidebar-ring": "oklch(0.68 0.06 132.45)",
      "font-sans": "Merriweather, serif",
      "font-serif": "Source Serif 4, serif",
      "font-mono": "JetBrains Mono, monospace",
      "shadow-color": "hsl(88 22% 35% / 0.15)",
      "shadow-opacity": "0.15",
      "shadow-blur": "2px",
      "shadow-spread": "0px",
      "shadow-offset-x": "3px",
      "shadow-offset-y": "3px",
      "letter-spacing": "0em",
      "spacing": "0.25rem",
      "shadow-2xs": "3px 3px 2px 0px hsl(88 22% 35% / 0.07)",
      "shadow-xs": "3px 3px 2px 0px hsl(88 22% 35% / 0.07)",
      "shadow-sm": "3px 3px 2px 0px hsl(88 22% 35% / 0.15), 3px 1px 2px -1px hsl(88 22% 35% / 0.15)",
      "shadow": "3px 3px 2px 0px hsl(88 22% 35% / 0.15), 3px 1px 2px -1px hsl(88 22% 35% / 0.15)",
      "shadow-md": "3px 3px 2px 0px hsl(88 22% 35% / 0.15), 3px 2px 4px -1px hsl(88 22% 35% / 0.15)",
      "shadow-lg": "3px 3px 2px 0px hsl(88 22% 35% / 0.15), 3px 4px 6px -1px hsl(88 22% 35% / 0.15)",
      "shadow-xl": "3px 3px 2px 0px hsl(88 22% 35% / 0.15), 3px 8px 10px -1px hsl(88 22% 35% / 0.15)",
      "shadow-2xl": "3px 3px 2px 0px hsl(88 22% 35% / 0.38)"
    }
  }
}
</file>

<file path="public/r/themes/midnight-bloom.json">
{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "midnight-bloom",
  "type": "registry:style",
  "css": {
    "@layer base": {
      "body": {
        "letter-spacing": "var(--tracking-normal)"
      }
    }
  },
  "cssVars": {
    "theme": {
      "font-sans": "Montserrat, sans-serif",
      "font-mono": "Source Code Pro, monospace",
      "font-serif": "Playfair Display, serif",
      "radius": "0.5rem",
      "tracking-tighter": "calc(var(--tracking-normal) - 0.05em)",
      "tracking-tight": "calc(var(--tracking-normal) - 0.025em)",
      "tracking-wide": "calc(var(--tracking-normal) + 0.025em)",
      "tracking-wider": "calc(var(--tracking-normal) + 0.05em)",
      "tracking-widest": "calc(var(--tracking-normal) + 0.1em)"
    },
    "light": {
      "background": "oklch(0.98 0 0)",
      "foreground": "oklch(0.32 0 0)",
      "card": "oklch(1.00 0 0)",
      "card-foreground": "oklch(0.32 0 0)",
      "popover": "oklch(1.00 0 0)",
      "popover-foreground": "oklch(0.32 0 0)",
      "primary": "oklch(0.57 0.20 283.08)",
      "primary-foreground": "oklch(1.00 0 0)",
      "secondary": "oklch(0.82 0.07 249.35)",
      "secondary-foreground": "oklch(0.32 0 0)",
      "muted": "oklch(0.82 0.02 91.62)",
      "muted-foreground": "oklch(0.54 0 0)",
      "accent": "oklch(0.65 0.06 117.43)",
      "accent-foreground": "oklch(1.00 0 0)",
      "destructive": "oklch(0.64 0.21 25.33)",
      "destructive-foreground": "oklch(1.00 0 0)",
      "border": "oklch(0.87 0 0)",
      "input": "oklch(0.87 0 0)",
      "ring": "oklch(0.57 0.20 283.08)",
      "chart-1": "oklch(0.57 0.20 283.08)",
      "chart-2": "oklch(0.53 0.17 314.65)",
      "chart-3": "oklch(0.34 0.18 301.68)",
      "chart-4": "oklch(0.67 0.14 261.34)",
      "chart-5": "oklch(0.59 0.10 245.74)",
      "radius": "0.5rem",
      "sidebar": "oklch(0.98 0 0)",
      "sidebar-foreground": "oklch(0.32 0 0)",
      "sidebar-primary": "oklch(0.57 0.20 283.08)",
      "sidebar-primary-foreground": "oklch(1.00 0 0)",
      "sidebar-accent": "oklch(0.65 0.06 117.43)",
      "sidebar-accent-foreground": "oklch(1.00 0 0)",
      "sidebar-border": "oklch(0.87 0 0)",
      "sidebar-ring": "oklch(0.57 0.20 283.08)",
      "font-sans": "Montserrat, sans-serif",
      "font-serif": "Playfair Display, serif",
      "font-mono": "Source Code Pro, monospace",
      "shadow-color": "hsl(0 0% 0%)",
      "shadow-opacity": "0.1",
      "shadow-blur": "10px",
      "shadow-spread": "-2px",
      "shadow-offset-x": "0px",
      "shadow-offset-y": "5px",
      "letter-spacing": "0em",
      "spacing": "0.25rem",
      "shadow-2xs": "0px 5px 10px -2px hsl(0 0% 0% / 0.05)",
      "shadow-xs": "0px 5px 10px -2px hsl(0 0% 0% / 0.05)",
      "shadow-sm": "0px 5px 10px -2px hsl(0 0% 0% / 0.10), 0px 1px 2px -3px hsl(0 0% 0% / 0.10)",
      "shadow": "0px 5px 10px -2px hsl(0 0% 0% / 0.10), 0px 1px 2px -3px hsl(0 0% 0% / 0.10)",
      "shadow-md": "0px 5px 10px -2px hsl(0 0% 0% / 0.10), 0px 2px 4px -3px hsl(0 0% 0% / 0.10)",
      "shadow-lg": "0px 5px 10px -2px hsl(0 0% 0% / 0.10), 0px 4px 6px -3px hsl(0 0% 0% / 0.10)",
      "shadow-xl": "0px 5px 10px -2px hsl(0 0% 0% / 0.10), 0px 8px 10px -3px hsl(0 0% 0% / 0.10)",
      "shadow-2xl": "0px 5px 10px -2px hsl(0 0% 0% / 0.25)",
      "tracking-normal": "0em"
    },
    "dark": {
      "background": "oklch(0.23 0.01 264.29)",
      "foreground": "oklch(0.92 0 0)",
      "card": "oklch(0.32 0.01 223.67)",
      "card-foreground": "oklch(0.92 0 0)",
      "popover": "oklch(0.32 0.01 223.67)",
      "popover-foreground": "oklch(0.92 0 0)",
      "primary": "oklch(0.57 0.20 283.08)",
      "primary-foreground": "oklch(1.00 0 0)",
      "secondary": "oklch(0.34 0.18 301.68)",
      "secondary-foreground": "oklch(0.92 0 0)",
      "muted": "oklch(0.39 0 0)",
      "muted-foreground": "oklch(0.72 0 0)",
      "accent": "oklch(0.67 0.14 261.34)",
      "accent-foreground": "oklch(0.92 0 0)",
      "destructive": "oklch(0.64 0.21 25.33)",
      "destructive-foreground": "oklch(1.00 0 0)",
      "border": "oklch(0.39 0 0)",
      "input": "oklch(0.39 0 0)",
      "ring": "oklch(0.57 0.20 283.08)",
      "chart-1": "oklch(0.57 0.20 283.08)",
      "chart-2": "oklch(0.53 0.17 314.65)",
      "chart-3": "oklch(0.34 0.18 301.68)",
      "chart-4": "oklch(0.67 0.14 261.34)",
      "chart-5": "oklch(0.59 0.10 245.74)",
      "radius": "0.5rem",
      "sidebar": "oklch(0.23 0.01 264.29)",
      "sidebar-foreground": "oklch(0.92 0 0)",
      "sidebar-primary": "oklch(0.57 0.20 283.08)",
      "sidebar-primary-foreground": "oklch(1.00 0 0)",
      "sidebar-accent": "oklch(0.67 0.14 261.34)",
      "sidebar-accent-foreground": "oklch(0.92 0 0)",
      "sidebar-border": "oklch(0.39 0 0)",
      "sidebar-ring": "oklch(0.57 0.20 283.08)",
      "font-sans": "Montserrat, sans-serif",
      "font-serif": "Playfair Display, serif",
      "font-mono": "Source Code Pro, monospace",
      "shadow-color": "hsl(0 0% 0%)",
      "shadow-opacity": "0.1",
      "shadow-blur": "10px",
      "shadow-spread": "-2px",
      "shadow-offset-x": "0px",
      "shadow-offset-y": "5px",
      "letter-spacing": "0em",
      "spacing": "0.25rem",
      "shadow-2xs": "0px 5px 10px -2px hsl(0 0% 0% / 0.05)",
      "shadow-xs": "0px 5px 10px -2px hsl(0 0% 0% / 0.05)",
      "shadow-sm": "0px 5px 10px -2px hsl(0 0% 0% / 0.10), 0px 1px 2px -3px hsl(0 0% 0% / 0.10)",
      "shadow": "0px 5px 10px -2px hsl(0 0% 0% / 0.10), 0px 1px 2px -3px hsl(0 0% 0% / 0.10)",
      "shadow-md": "0px 5px 10px -2px hsl(0 0% 0% / 0.10), 0px 2px 4px -3px hsl(0 0% 0% / 0.10)",
      "shadow-lg": "0px 5px 10px -2px hsl(0 0% 0% / 0.10), 0px 4px 6px -3px hsl(0 0% 0% / 0.10)",
      "shadow-xl": "0px 5px 10px -2px hsl(0 0% 0% / 0.10), 0px 8px 10px -3px hsl(0 0% 0% / 0.10)",
      "shadow-2xl": "0px 5px 10px -2px hsl(0 0% 0% / 0.25)"
    }
  }
}
</file>

<file path="public/r/themes/mocha-mousse.json">
{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "mocha-mousse",
  "type": "registry:style",
  "css": {
    "@layer base": {
      "body": {
        "letter-spacing": "var(--tracking-normal)"
      }
    }
  },
  "cssVars": {
    "theme": {
      "font-sans": "DM Sans, sans-serif",
      "font-mono": "Menlo, monospace",
      "font-serif": "Georgia, serif",
      "radius": "0.5rem",
      "tracking-tighter": "calc(var(--tracking-normal) - 0.05em)",
      "tracking-tight": "calc(var(--tracking-normal) - 0.025em)",
      "tracking-wide": "calc(var(--tracking-normal) + 0.025em)",
      "tracking-wider": "calc(var(--tracking-normal) + 0.05em)",
      "tracking-widest": "calc(var(--tracking-normal) + 0.1em)"
    },
    "light": {
      "background": "oklch(0.95 0.01 102.46)",
      "foreground": "oklch(0.41 0.03 40.36)",
      "card": "oklch(0.95 0.01 102.46)",
      "card-foreground": "oklch(0.41 0.03 40.36)",
      "popover": "oklch(1.00 0 0)",
      "popover-foreground": "oklch(0.41 0.03 40.36)",
      "primary": "oklch(0.61 0.06 44.36)",
      "primary-foreground": "oklch(1.00 0 0)",
      "secondary": "oklch(0.75 0.04 80.55)",
      "secondary-foreground": "oklch(1.00 0 0)",
      "muted": "oklch(0.85 0.04 49.09)",
      "muted-foreground": "oklch(0.54 0.05 37.21)",
      "accent": "oklch(0.85 0.04 49.09)",
      "accent-foreground": "oklch(0.41 0.03 40.36)",
      "destructive": "oklch(0.22 0.01 52.96)",
      "destructive-foreground": "oklch(1.00 0 0)",
      "border": "oklch(0.75 0.04 80.55)",
      "input": "oklch(0.75 0.04 80.55)",
      "ring": "oklch(0.61 0.06 44.36)",
      "chart-1": "oklch(0.61 0.06 44.36)",
      "chart-2": "oklch(0.54 0.05 37.21)",
      "chart-3": "oklch(0.73 0.05 52.33)",
      "chart-4": "oklch(0.75 0.04 80.55)",
      "chart-5": "oklch(0.64 0.04 52.39)",
      "radius": "0.5rem",
      "sidebar": "oklch(0.89 0.03 49.57)",
      "sidebar-foreground": "oklch(0.41 0.03 40.36)",
      "sidebar-primary": "oklch(0.61 0.06 44.36)",
      "sidebar-primary-foreground": "oklch(1.00 0 0)",
      "sidebar-accent": "oklch(0.73 0.05 52.33)",
      "sidebar-accent-foreground": "oklch(1.00 0 0)",
      "sidebar-border": "oklch(0.64 0.04 52.39)",
      "sidebar-ring": "oklch(0.61 0.06 44.36)",
      "font-sans": "DM Sans, sans-serif",
      "font-serif": "Georgia, serif",
      "font-mono": "Menlo, monospace",
      "shadow-color": "hsl(20 18% 51% / 0.4)",
      "shadow-opacity": "0.11",
      "shadow-blur": "0px",
      "shadow-spread": "0px",
      "shadow-offset-x": "2px",
      "shadow-offset-y": "2px",
      "letter-spacing": "0em",
      "spacing": "0.25rem",
      "shadow-2xs": "2px 2px 0px 0px hsl(20 18% 51% / 0.06)",
      "shadow-xs": "2px 2px 0px 0px hsl(20 18% 51% / 0.06)",
      "shadow-sm": "2px 2px 0px 0px hsl(20 18% 51% / 0.11), 2px 1px 2px -1px hsl(20 18% 51% / 0.11)",
      "shadow": "2px 2px 0px 0px hsl(20 18% 51% / 0.11), 2px 1px 2px -1px hsl(20 18% 51% / 0.11)",
      "shadow-md": "2px 2px 0px 0px hsl(20 18% 51% / 0.11), 2px 2px 4px -1px hsl(20 18% 51% / 0.11)",
      "shadow-lg": "2px 2px 0px 0px hsl(20 18% 51% / 0.11), 2px 4px 6px -1px hsl(20 18% 51% / 0.11)",
      "shadow-xl": "2px 2px 0px 0px hsl(20 18% 51% / 0.11), 2px 8px 10px -1px hsl(20 18% 51% / 0.11)",
      "shadow-2xl": "2px 2px 0px 0px hsl(20 18% 51% / 0.28)",
      "tracking-normal": "0em"
    },
    "dark": {
      "background": "oklch(0.27 0.01 48.18)",
      "foreground": "oklch(0.95 0.01 102.46)",
      "card": "oklch(0.33 0.02 50.89)",
      "card-foreground": "oklch(0.95 0.01 102.46)",
      "popover": "oklch(0.33 0.02 50.89)",
      "popover-foreground": "oklch(0.95 0.01 102.46)",
      "primary": "oklch(0.73 0.05 52.33)",
      "primary-foreground": "oklch(0.27 0.01 48.18)",
      "secondary": "oklch(0.54 0.05 37.21)",
      "secondary-foreground": "oklch(0.95 0.01 102.46)",
      "muted": "oklch(0.41 0.03 40.36)",
      "muted-foreground": "oklch(0.76 0.04 50.86)",
      "accent": "oklch(0.75 0.04 80.55)",
      "accent-foreground": "oklch(0.27 0.01 48.18)",
      "destructive": "oklch(0.69 0.14 21.46)",
      "destructive-foreground": "oklch(0.27 0.01 48.18)",
      "border": "oklch(0.41 0.03 40.36)",
      "input": "oklch(0.41 0.03 40.36)",
      "ring": "oklch(0.73 0.05 52.33)",
      "chart-1": "oklch(0.73 0.05 52.33)",
      "chart-2": "oklch(0.75 0.04 80.55)",
      "chart-3": "oklch(0.61 0.06 44.36)",
      "chart-4": "oklch(0.54 0.05 37.21)",
      "chart-5": "oklch(0.64 0.04 52.39)",
      "radius": "0.5rem",
      "sidebar": "oklch(0.22 0.01 52.96)",
      "sidebar-foreground": "oklch(0.95 0.01 102.46)",
      "sidebar-primary": "oklch(0.73 0.05 52.33)",
      "sidebar-primary-foreground": "oklch(0.22 0.01 52.96)",
      "sidebar-accent": "oklch(0.75 0.04 80.55)",
      "sidebar-accent-foreground": "oklch(0.22 0.01 52.96)",
      "sidebar-border": "oklch(0.41 0.03 40.36)",
      "sidebar-ring": "oklch(0.73 0.05 52.33)",
      "font-sans": "DM Sans, sans-serif",
      "font-serif": "Georgia, serif",
      "font-mono": "Menlo, monospace",
      "shadow-color": "hsl(20 18% 30% / 0.5)",
      "shadow-opacity": "0.11",
      "shadow-blur": "0px",
      "shadow-spread": "0px",
      "shadow-offset-x": "2px",
      "shadow-offset-y": "2px",
      "letter-spacing": "0em",
      "spacing": "0.25rem",
      "shadow-2xs": "2px 2px 0px 0px hsl(20 18% 30% / 0.06)",
      "shadow-xs": "2px 2px 0px 0px hsl(20 18% 30% / 0.06)",
      "shadow-sm": "2px 2px 0px 0px hsl(20 18% 30% / 0.11), 2px 1px 2px -1px hsl(20 18% 30% / 0.11)",
      "shadow": "2px 2px 0px 0px hsl(20 18% 30% / 0.11), 2px 1px 2px -1px hsl(20 18% 30% / 0.11)",
      "shadow-md": "2px 2px 0px 0px hsl(20 18% 30% / 0.11), 2px 2px 4px -1px hsl(20 18% 30% / 0.11)",
      "shadow-lg": "2px 2px 0px 0px hsl(20 18% 30% / 0.11), 2px 4px 6px -1px hsl(20 18% 30% / 0.11)",
      "shadow-xl": "2px 2px 0px 0px hsl(20 18% 30% / 0.11), 2px 8px 10px -1px hsl(20 18% 30% / 0.11)",
      "shadow-2xl": "2px 2px 0px 0px hsl(20 18% 30% / 0.28)"
    }
  }
}
</file>

<file path="public/r/themes/modern-minimal.json">
{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "modern-minimal",
  "type": "registry:style",
  "css": {
    "@layer base": {
      "body": {
        "letter-spacing": "var(--tracking-normal)"
      }
    }
  },
  "cssVars": {
    "theme": {
      "font-sans": "Inter, sans-serif",
      "font-mono": "JetBrains Mono, monospace",
      "font-serif": "Source Serif 4, serif",
      "radius": "0.375rem",
      "tracking-tighter": "calc(var(--tracking-normal) - 0.05em)",
      "tracking-tight": "calc(var(--tracking-normal) - 0.025em)",
      "tracking-wide": "calc(var(--tracking-normal) + 0.025em)",
      "tracking-wider": "calc(var(--tracking-normal) + 0.05em)",
      "tracking-widest": "calc(var(--tracking-normal) + 0.1em)"
    },
    "light": {
      "background": "oklch(1.00 0 0)",
      "foreground": "oklch(0.32 0 0)",
      "card": "oklch(1.00 0 0)",
      "card-foreground": "oklch(0.32 0 0)",
      "popover": "oklch(1.00 0 0)",
      "popover-foreground": "oklch(0.32 0 0)",
      "primary": "oklch(0.62 0.19 259.81)",
      "primary-foreground": "oklch(1.00 0 0)",
      "secondary": "oklch(0.97 0.00 264.54)",
      "secondary-foreground": "oklch(0.45 0.03 256.80)",
      "muted": "oklch(0.98 0.00 247.84)",
      "muted-foreground": "oklch(0.55 0.02 264.36)",
      "accent": "oklch(0.95 0.03 236.82)",
      "accent-foreground": "oklch(0.38 0.14 265.52)",
      "destructive": "oklch(0.64 0.21 25.33)",
      "destructive-foreground": "oklch(1.00 0 0)",
      "border": "oklch(0.93 0.01 264.53)",
      "input": "oklch(0.93 0.01 264.53)",
      "ring": "oklch(0.62 0.19 259.81)",
      "chart-1": "oklch(0.62 0.19 259.81)",
      "chart-2": "oklch(0.55 0.22 262.88)",
      "chart-3": "oklch(0.49 0.22 264.38)",
      "chart-4": "oklch(0.42 0.18 265.64)",
      "chart-5": "oklch(0.38 0.14 265.52)",
      "radius": "0.375rem",
      "sidebar": "oklch(0.98 0.00 247.84)",
      "sidebar-foreground": "oklch(0.32 0 0)",
      "sidebar-primary": "oklch(0.62 0.19 259.81)",
      "sidebar-primary-foreground": "oklch(1.00 0 0)",
      "sidebar-accent": "oklch(0.95 0.03 236.82)",
      "sidebar-accent-foreground": "oklch(0.38 0.14 265.52)",
      "sidebar-border": "oklch(0.93 0.01 264.53)",
      "sidebar-ring": "oklch(0.62 0.19 259.81)",
      "font-sans": "Inter, sans-serif",
      "font-serif": "Source Serif 4, serif",
      "font-mono": "JetBrains Mono, monospace",
      "shadow-color": "hsl(0 0% 0%)",
      "shadow-opacity": "0.1",
      "shadow-blur": "3px",
      "shadow-spread": "0px",
      "shadow-offset-x": "0",
      "shadow-offset-y": "1px",
      "letter-spacing": "0em",
      "spacing": "0.25rem",
      "shadow-2xs": "0 1px 3px 0px hsl(0 0% 0% / 0.05)",
      "shadow-xs": "0 1px 3px 0px hsl(0 0% 0% / 0.05)",
      "shadow-sm": "0 1px 3px 0px hsl(0 0% 0% / 0.10), 0 1px 2px -1px hsl(0 0% 0% / 0.10)",
      "shadow": "0 1px 3px 0px hsl(0 0% 0% / 0.10), 0 1px 2px -1px hsl(0 0% 0% / 0.10)",
      "shadow-md": "0 1px 3px 0px hsl(0 0% 0% / 0.10), 0 2px 4px -1px hsl(0 0% 0% / 0.10)",
      "shadow-lg": "0 1px 3px 0px hsl(0 0% 0% / 0.10), 0 4px 6px -1px hsl(0 0% 0% / 0.10)",
      "shadow-xl": "0 1px 3px 0px hsl(0 0% 0% / 0.10), 0 8px 10px -1px hsl(0 0% 0% / 0.10)",
      "shadow-2xl": "0 1px 3px 0px hsl(0 0% 0% / 0.25)",
      "tracking-normal": "0em"
    },
    "dark": {
      "background": "oklch(0.20 0 0)",
      "foreground": "oklch(0.92 0 0)",
      "card": "oklch(0.27 0 0)",
      "card-foreground": "oklch(0.92 0 0)",
      "popover": "oklch(0.27 0 0)",
      "popover-foreground": "oklch(0.92 0 0)",
      "primary": "oklch(0.62 0.19 259.81)",
      "primary-foreground": "oklch(1.00 0 0)",
      "secondary": "oklch(0.27 0 0)",
      "secondary-foreground": "oklch(0.92 0 0)",
      "muted": "oklch(0.27 0 0)",
      "muted-foreground": "oklch(0.72 0 0)",
      "accent": "oklch(0.38 0.14 265.52)",
      "accent-foreground": "oklch(0.88 0.06 254.13)",
      "destructive": "oklch(0.64 0.21 25.33)",
      "destructive-foreground": "oklch(1.00 0 0)",
      "border": "oklch(0.37 0 0)",
      "input": "oklch(0.37 0 0)",
      "ring": "oklch(0.62 0.19 259.81)",
      "chart-1": "oklch(0.71 0.14 254.62)",
      "chart-2": "oklch(0.62 0.19 259.81)",
      "chart-3": "oklch(0.55 0.22 262.88)",
      "chart-4": "oklch(0.49 0.22 264.38)",
      "chart-5": "oklch(0.42 0.18 265.64)",
      "radius": "0.375rem",
      "sidebar": "oklch(0.20 0 0)",
      "sidebar-foreground": "oklch(0.92 0 0)",
      "sidebar-primary": "oklch(0.62 0.19 259.81)",
      "sidebar-primary-foreground": "oklch(1.00 0 0)",
      "sidebar-accent": "oklch(0.38 0.14 265.52)",
      "sidebar-accent-foreground": "oklch(0.88 0.06 254.13)",
      "sidebar-border": "oklch(0.37 0 0)",
      "sidebar-ring": "oklch(0.62 0.19 259.81)",
      "font-sans": "Inter, sans-serif",
      "font-serif": "Source Serif 4, serif",
      "font-mono": "JetBrains Mono, monospace",
      "shadow-color": "hsl(0 0% 0%)",
      "shadow-opacity": "0.1",
      "shadow-blur": "3px",
      "shadow-spread": "0px",
      "shadow-offset-x": "0",
      "shadow-offset-y": "1px",
      "letter-spacing": "0em",
      "spacing": "0.25rem",
      "shadow-2xs": "0 1px 3px 0px hsl(0 0% 0% / 0.05)",
      "shadow-xs": "0 1px 3px 0px hsl(0 0% 0% / 0.05)",
      "shadow-sm": "0 1px 3px 0px hsl(0 0% 0% / 0.10), 0 1px 2px -1px hsl(0 0% 0% / 0.10)",
      "shadow": "0 1px 3px 0px hsl(0 0% 0% / 0.10), 0 1px 2px -1px hsl(0 0% 0% / 0.10)",
      "shadow-md": "0 1px 3px 0px hsl(0 0% 0% / 0.10), 0 2px 4px -1px hsl(0 0% 0% / 0.10)",
      "shadow-lg": "0 1px 3px 0px hsl(0 0% 0% / 0.10), 0 4px 6px -1px hsl(0 0% 0% / 0.10)",
      "shadow-xl": "0 1px 3px 0px hsl(0 0% 0% / 0.10), 0 8px 10px -1px hsl(0 0% 0% / 0.10)",
      "shadow-2xl": "0 1px 3px 0px hsl(0 0% 0% / 0.25)"
    }
  }
}
</file>

<file path="public/r/themes/mono.json">
{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "mono",
  "type": "registry:style",
  "css": {
    "@layer base": {
      "body": {
        "letter-spacing": "var(--tracking-normal)"
      }
    }
  },
  "cssVars": {
    "theme": {
      "font-sans": "Geist Mono, monospace",
      "font-mono": "Geist Mono, monospace",
      "font-serif": "Geist Mono, monospace",
      "radius": "0rem",
      "tracking-tighter": "calc(var(--tracking-normal) - 0.05em)",
      "tracking-tight": "calc(var(--tracking-normal) - 0.025em)",
      "tracking-wide": "calc(var(--tracking-normal) + 0.025em)",
      "tracking-wider": "calc(var(--tracking-normal) + 0.05em)",
      "tracking-widest": "calc(var(--tracking-normal) + 0.1em)"
    },
    "light": {
      "background": "oklch(1.00 0 0)",
      "foreground": "oklch(0.14 0 0)",
      "card": "oklch(1.00 0 0)",
      "card-foreground": "oklch(0.14 0 0)",
      "popover": "oklch(1.00 0 0)",
      "popover-foreground": "oklch(0.14 0 0)",
      "primary": "oklch(0.56 0 0)",
      "primary-foreground": "oklch(0.99 0 0)",
      "secondary": "oklch(0.97 0 0)",
      "secondary-foreground": "oklch(0.20 0 0)",
      "muted": "oklch(0.97 0 0)",
      "muted-foreground": "oklch(0.55 0 0)",
      "accent": "oklch(0.97 0 0)",
      "accent-foreground": "oklch(0.20 0 0)",
      "destructive": "oklch(0.58 0.24 28.48)",
      "destructive-foreground": "oklch(0.97 0 0)",
      "border": "oklch(0.92 0 0)",
      "input": "oklch(0.92 0 0)",
      "ring": "oklch(0.71 0 0)",
      "chart-1": "oklch(0.56 0 0)",
      "chart-2": "oklch(0.56 0 0)",
      "chart-3": "oklch(0.56 0 0)",
      "chart-4": "oklch(0.56 0 0)",
      "chart-5": "oklch(0.56 0 0)",
      "radius": "0rem",
      "sidebar": "oklch(0.99 0 0)",
      "sidebar-foreground": "oklch(0.14 0 0)",
      "sidebar-primary": "oklch(0.20 0 0)",
      "sidebar-primary-foreground": "oklch(0.99 0 0)",
      "sidebar-accent": "oklch(0.97 0 0)",
      "sidebar-accent-foreground": "oklch(0.20 0 0)",
      "sidebar-border": "oklch(0.92 0 0)",
      "sidebar-ring": "oklch(0.71 0 0)",
      "font-sans": "Geist Mono, monospace",
      "font-serif": "Geist Mono, monospace",
      "font-mono": "Geist Mono, monospace",
      "shadow-color": "hsl(0 0% 0%)",
      "shadow-opacity": "0",
      "shadow-blur": "0px",
      "shadow-spread": "0px",
      "shadow-offset-x": "0px",
      "shadow-offset-y": "1px",
      "letter-spacing": "0em",
      "spacing": "0.25rem",
      "shadow-2xs": "0px 1px 0px 0px hsl(0 0% 0% / 0.00)",
      "shadow-xs": "0px 1px 0px 0px hsl(0 0% 0% / 0.00)",
      "shadow-sm": "0px 1px 0px 0px hsl(0 0% 0% / 0.00), 0px 1px 2px -1px hsl(0 0% 0% / 0.00)",
      "shadow": "0px 1px 0px 0px hsl(0 0% 0% / 0.00), 0px 1px 2px -1px hsl(0 0% 0% / 0.00)",
      "shadow-md": "0px 1px 0px 0px hsl(0 0% 0% / 0.00), 0px 2px 4px -1px hsl(0 0% 0% / 0.00)",
      "shadow-lg": "0px 1px 0px 0px hsl(0 0% 0% / 0.00), 0px 4px 6px -1px hsl(0 0% 0% / 0.00)",
      "shadow-xl": "0px 1px 0px 0px hsl(0 0% 0% / 0.00), 0px 8px 10px -1px hsl(0 0% 0% / 0.00)",
      "shadow-2xl": "0px 1px 0px 0px hsl(0 0% 0% / 0.00)",
      "tracking-normal": "0em"
    },
    "dark": {
      "background": "oklch(0.14 0 0)",
      "foreground": "oklch(0.99 0 0)",
      "card": "oklch(0.21 0 0)",
      "card-foreground": "oklch(0.99 0 0)",
      "popover": "oklch(0.27 0 0)",
      "popover-foreground": "oklch(0.99 0 0)",
      "primary": "oklch(0.56 0 0)",
      "primary-foreground": "oklch(0.99 0 0)",
      "secondary": "oklch(0.27 0 0)",
      "secondary-foreground": "oklch(0.99 0 0)",
      "muted": "oklch(0.27 0 0)",
      "muted-foreground": "oklch(0.71 0 0)",
      "accent": "oklch(0.37 0 0)",
      "accent-foreground": "oklch(0.99 0 0)",
      "destructive": "oklch(0.70 0.19 22.23)",
      "destructive-foreground": "oklch(0.27 0 0)",
      "border": "oklch(0.34 0 0)",
      "input": "oklch(0.44 0 0)",
      "ring": "oklch(0.56 0 0)",
      "chart-1": "oklch(0.56 0 0)",
      "chart-2": "oklch(0.56 0 0)",
      "chart-3": "oklch(0.56 0 0)",
      "chart-4": "oklch(0.56 0 0)",
      "chart-5": "oklch(0.56 0 0)",
      "radius": "0rem",
      "sidebar": "oklch(0.20 0 0)",
      "sidebar-foreground": "oklch(0.99 0 0)",
      "sidebar-primary": "oklch(0.99 0 0)",
      "sidebar-primary-foreground": "oklch(0.20 0 0)",
      "sidebar-accent": "oklch(0.27 0 0)",
      "sidebar-accent-foreground": "oklch(0.99 0 0)",
      "sidebar-border": "oklch(1.00 0 0)",
      "sidebar-ring": "oklch(0.44 0 0)",
      "font-sans": "Geist Mono, monospace",
      "font-serif": "Geist Mono, monospace",
      "font-mono": "Geist Mono, monospace",
      "shadow-color": "hsl(0 0% 0%)",
      "shadow-opacity": "0",
      "shadow-blur": "0px",
      "shadow-spread": "0px",
      "shadow-offset-x": "0px",
      "shadow-offset-y": "1px",
      "letter-spacing": "0em",
      "spacing": "0.25rem",
      "shadow-2xs": "0px 1px 0px 0px hsl(0 0% 0% / 0.00)",
      "shadow-xs": "0px 1px 0px 0px hsl(0 0% 0% / 0.00)",
      "shadow-sm": "0px 1px 0px 0px hsl(0 0% 0% / 0.00), 0px 1px 2px -1px hsl(0 0% 0% / 0.00)",
      "shadow": "0px 1px 0px 0px hsl(0 0% 0% / 0.00), 0px 1px 2px -1px hsl(0 0% 0% / 0.00)",
      "shadow-md": "0px 1px 0px 0px hsl(0 0% 0% / 0.00), 0px 2px 4px -1px hsl(0 0% 0% / 0.00)",
      "shadow-lg": "0px 1px 0px 0px hsl(0 0% 0% / 0.00), 0px 4px 6px -1px hsl(0 0% 0% / 0.00)",
      "shadow-xl": "0px 1px 0px 0px hsl(0 0% 0% / 0.00), 0px 8px 10px -1px hsl(0 0% 0% / 0.00)",
      "shadow-2xl": "0px 1px 0px 0px hsl(0 0% 0% / 0.00)"
    }
  }
}
</file>

<file path="public/r/themes/nature.json">
{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "nature",
  "type": "registry:style",
  "css": {
    "@layer base": {
      "body": {
        "letter-spacing": "var(--tracking-normal)"
      }
    }
  },
  "cssVars": {
    "theme": {
      "font-sans": "Montserrat, sans-serif",
      "font-mono": "Source Code Pro, monospace",
      "font-serif": "Merriweather, serif",
      "radius": "0.5rem",
      "tracking-tighter": "calc(var(--tracking-normal) - 0.05em)",
      "tracking-tight": "calc(var(--tracking-normal) - 0.025em)",
      "tracking-wide": "calc(var(--tracking-normal) + 0.025em)",
      "tracking-wider": "calc(var(--tracking-normal) + 0.05em)",
      "tracking-widest": "calc(var(--tracking-normal) + 0.1em)"
    },
    "light": {
      "background": "oklch(0.97 0.01 80.72)",
      "foreground": "oklch(0.30 0.04 30.20)",
      "card": "oklch(0.97 0.01 80.72)",
      "card-foreground": "oklch(0.30 0.04 30.20)",
      "popover": "oklch(0.97 0.01 80.72)",
      "popover-foreground": "oklch(0.30 0.04 30.20)",
      "primary": "oklch(0.52 0.13 144.17)",
      "primary-foreground": "oklch(1.00 0 0)",
      "secondary": "oklch(0.96 0.02 147.64)",
      "secondary-foreground": "oklch(0.43 0.12 144.31)",
      "muted": "oklch(0.94 0.01 74.42)",
      "muted-foreground": "oklch(0.45 0.05 39.21)",
      "accent": "oklch(0.90 0.05 146.04)",
      "accent-foreground": "oklch(0.43 0.12 144.31)",
      "destructive": "oklch(0.54 0.19 26.72)",
      "destructive-foreground": "oklch(1.00 0 0)",
      "border": "oklch(0.88 0.02 74.64)",
      "input": "oklch(0.88 0.02 74.64)",
      "ring": "oklch(0.52 0.13 144.17)",
      "chart-1": "oklch(0.67 0.16 144.21)",
      "chart-2": "oklch(0.58 0.14 144.18)",
      "chart-3": "oklch(0.52 0.13 144.17)",
      "chart-4": "oklch(0.43 0.12 144.31)",
      "chart-5": "oklch(0.22 0.05 145.73)",
      "radius": "0.5rem",
      "sidebar": "oklch(0.94 0.01 74.42)",
      "sidebar-foreground": "oklch(0.30 0.04 30.20)",
      "sidebar-primary": "oklch(0.52 0.13 144.17)",
      "sidebar-primary-foreground": "oklch(1.00 0 0)",
      "sidebar-accent": "oklch(0.90 0.05 146.04)",
      "sidebar-accent-foreground": "oklch(0.43 0.12 144.31)",
      "sidebar-border": "oklch(0.88 0.02 74.64)",
      "sidebar-ring": "oklch(0.52 0.13 144.17)",
      "font-sans": "Montserrat, sans-serif",
      "font-serif": "Merriweather, serif",
      "font-mono": "Source Code Pro, monospace",
      "shadow-color": "hsl(0 0% 0%)",
      "shadow-opacity": "0.1",
      "shadow-blur": "3px",
      "shadow-spread": "0px",
      "shadow-offset-x": "0",
      "shadow-offset-y": "1px",
      "letter-spacing": "0em",
      "spacing": "0.25rem",
      "shadow-2xs": "0 1px 3px 0px hsl(0 0% 0% / 0.05)",
      "shadow-xs": "0 1px 3px 0px hsl(0 0% 0% / 0.05)",
      "shadow-sm": "0 1px 3px 0px hsl(0 0% 0% / 0.10), 0 1px 2px -1px hsl(0 0% 0% / 0.10)",
      "shadow": "0 1px 3px 0px hsl(0 0% 0% / 0.10), 0 1px 2px -1px hsl(0 0% 0% / 0.10)",
      "shadow-md": "0 1px 3px 0px hsl(0 0% 0% / 0.10), 0 2px 4px -1px hsl(0 0% 0% / 0.10)",
      "shadow-lg": "0 1px 3px 0px hsl(0 0% 0% / 0.10), 0 4px 6px -1px hsl(0 0% 0% / 0.10)",
      "shadow-xl": "0 1px 3px 0px hsl(0 0% 0% / 0.10), 0 8px 10px -1px hsl(0 0% 0% / 0.10)",
      "shadow-2xl": "0 1px 3px 0px hsl(0 0% 0% / 0.25)",
      "tracking-normal": "0em"
    },
    "dark": {
      "background": "oklch(0.27 0.03 150.77)",
      "foreground": "oklch(0.94 0.01 72.66)",
      "card": "oklch(0.33 0.03 146.99)",
      "card-foreground": "oklch(0.94 0.01 72.66)",
      "popover": "oklch(0.33 0.03 146.99)",
      "popover-foreground": "oklch(0.94 0.01 72.66)",
      "primary": "oklch(0.67 0.16 144.21)",
      "primary-foreground": "oklch(0.22 0.05 145.73)",
      "secondary": "oklch(0.39 0.03 142.99)",
      "secondary-foreground": "oklch(0.90 0.02 142.55)",
      "muted": "oklch(0.33 0.03 146.99)",
      "muted-foreground": "oklch(0.86 0.02 76.10)",
      "accent": "oklch(0.58 0.14 144.18)",
      "accent-foreground": "oklch(0.94 0.01 72.66)",
      "destructive": "oklch(0.54 0.19 26.72)",
      "destructive-foreground": "oklch(0.94 0.01 72.66)",
      "border": "oklch(0.39 0.03 142.99)",
      "input": "oklch(0.39 0.03 142.99)",
      "ring": "oklch(0.67 0.16 144.21)",
      "chart-1": "oklch(0.77 0.12 145.30)",
      "chart-2": "oklch(0.72 0.14 144.89)",
      "chart-3": "oklch(0.67 0.16 144.21)",
      "chart-4": "oklch(0.63 0.15 144.20)",
      "chart-5": "oklch(0.58 0.14 144.18)",
      "radius": "0.5rem",
      "sidebar": "oklch(0.27 0.03 150.77)",
      "sidebar-foreground": "oklch(0.94 0.01 72.66)",
      "sidebar-primary": "oklch(0.67 0.16 144.21)",
      "sidebar-primary-foreground": "oklch(0.22 0.05 145.73)",
      "sidebar-accent": "oklch(0.58 0.14 144.18)",
      "sidebar-accent-foreground": "oklch(0.94 0.01 72.66)",
      "sidebar-border": "oklch(0.39 0.03 142.99)",
      "sidebar-ring": "oklch(0.67 0.16 144.21)",
      "font-sans": "Montserrat, sans-serif",
      "font-serif": "Merriweather, serif",
      "font-mono": "Source Code Pro, monospace",
      "shadow-color": "hsl(0 0% 0%)",
      "shadow-opacity": "0.1",
      "shadow-blur": "3px",
      "shadow-spread": "0px",
      "shadow-offset-x": "0",
      "shadow-offset-y": "1px",
      "letter-spacing": "0em",
      "spacing": "0.25rem",
      "shadow-2xs": "0 1px 3px 0px hsl(0 0% 0% / 0.05)",
      "shadow-xs": "0 1px 3px 0px hsl(0 0% 0% / 0.05)",
      "shadow-sm": "0 1px 3px 0px hsl(0 0% 0% / 0.10), 0 1px 2px -1px hsl(0 0% 0% / 0.10)",
      "shadow": "0 1px 3px 0px hsl(0 0% 0% / 0.10), 0 1px 2px -1px hsl(0 0% 0% / 0.10)",
      "shadow-md": "0 1px 3px 0px hsl(0 0% 0% / 0.10), 0 2px 4px -1px hsl(0 0% 0% / 0.10)",
      "shadow-lg": "0 1px 3px 0px hsl(0 0% 0% / 0.10), 0 4px 6px -1px hsl(0 0% 0% / 0.10)",
      "shadow-xl": "0 1px 3px 0px hsl(0 0% 0% / 0.10), 0 8px 10px -1px hsl(0 0% 0% / 0.10)",
      "shadow-2xl": "0 1px 3px 0px hsl(0 0% 0% / 0.25)"
    }
  }
}
</file>

<file path="public/r/themes/neo-brutalism.json">
{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "neo-brutalism",
  "type": "registry:style",
  "css": {
    "@layer base": {
      "body": {
        "letter-spacing": "var(--tracking-normal)"
      }
    }
  },
  "cssVars": {
    "theme": {
      "font-sans": "DM Sans, sans-serif",
      "font-mono": "Space Mono, monospace",
      "font-serif": "ui-serif, Georgia, Cambria, \"Times New Roman\", Times, serif",
      "radius": "0px",
      "tracking-tighter": "calc(var(--tracking-normal) - 0.05em)",
      "tracking-tight": "calc(var(--tracking-normal) - 0.025em)",
      "tracking-wide": "calc(var(--tracking-normal) + 0.025em)",
      "tracking-wider": "calc(var(--tracking-normal) + 0.05em)",
      "tracking-widest": "calc(var(--tracking-normal) + 0.1em)"
    },
    "light": {
      "background": "oklch(1.00 0 0)",
      "foreground": "oklch(0 0 0)",
      "card": "oklch(1.00 0 0)",
      "card-foreground": "oklch(0 0 0)",
      "popover": "oklch(1.00 0 0)",
      "popover-foreground": "oklch(0 0 0)",
      "primary": "oklch(0.65 0.24 26.97)",
      "primary-foreground": "oklch(1.00 0 0)",
      "secondary": "oklch(0.97 0.21 109.77)",
      "secondary-foreground": "oklch(0 0 0)",
      "muted": "oklch(0.96 0 0)",
      "muted-foreground": "oklch(0.32 0 0)",
      "accent": "oklch(0.56 0.24 260.82)",
      "accent-foreground": "oklch(1.00 0 0)",
      "destructive": "oklch(0 0 0)",
      "destructive-foreground": "oklch(1.00 0 0)",
      "border": "oklch(0 0 0)",
      "input": "oklch(0 0 0)",
      "ring": "oklch(0.65 0.24 26.97)",
      "chart-1": "oklch(0.65 0.24 26.97)",
      "chart-2": "oklch(0.97 0.21 109.77)",
      "chart-3": "oklch(0.56 0.24 260.82)",
      "chart-4": "oklch(0.73 0.25 142.50)",
      "chart-5": "oklch(0.59 0.27 328.36)",
      "radius": "0px",
      "sidebar": "oklch(0.96 0 0)",
      "sidebar-foreground": "oklch(0 0 0)",
      "sidebar-primary": "oklch(0.65 0.24 26.97)",
      "sidebar-primary-foreground": "oklch(1.00 0 0)",
      "sidebar-accent": "oklch(0.56 0.24 260.82)",
      "sidebar-accent-foreground": "oklch(1.00 0 0)",
      "sidebar-border": "oklch(0 0 0)",
      "sidebar-ring": "oklch(0.65 0.24 26.97)",
      "font-sans": "DM Sans, sans-serif",
      "font-serif": "ui-serif, Georgia, Cambria, \"Times New Roman\", Times, serif",
      "font-mono": "Space Mono, monospace",
      "shadow-color": "hsl(0 0% 0%)",
      "shadow-opacity": "1",
      "shadow-blur": "0px",
      "shadow-spread": "0px",
      "shadow-offset-x": "4px",
      "shadow-offset-y": "4px",
      "letter-spacing": "0em",
      "spacing": "0.25rem",
      "shadow-2xs": "4px 4px 0px 0px hsl(0 0% 0% / 0.50)",
      "shadow-xs": "4px 4px 0px 0px hsl(0 0% 0% / 0.50)",
      "shadow-sm": "4px 4px 0px 0px hsl(0 0% 0% / 1.00), 4px 1px 2px -1px hsl(0 0% 0% / 1.00)",
      "shadow": "4px 4px 0px 0px hsl(0 0% 0% / 1.00), 4px 1px 2px -1px hsl(0 0% 0% / 1.00)",
      "shadow-md": "4px 4px 0px 0px hsl(0 0% 0% / 1.00), 4px 2px 4px -1px hsl(0 0% 0% / 1.00)",
      "shadow-lg": "4px 4px 0px 0px hsl(0 0% 0% / 1.00), 4px 4px 6px -1px hsl(0 0% 0% / 1.00)",
      "shadow-xl": "4px 4px 0px 0px hsl(0 0% 0% / 1.00), 4px 8px 10px -1px hsl(0 0% 0% / 1.00)",
      "shadow-2xl": "4px 4px 0px 0px hsl(0 0% 0% / 2.50)",
      "tracking-normal": "0em"
    },
    "dark": {
      "background": "oklch(0 0 0)",
      "foreground": "oklch(1.00 0 0)",
      "card": "oklch(0.32 0 0)",
      "card-foreground": "oklch(1.00 0 0)",
      "popover": "oklch(0.32 0 0)",
      "popover-foreground": "oklch(1.00 0 0)",
      "primary": "oklch(0.70 0.19 23.19)",
      "primary-foreground": "oklch(0 0 0)",
      "secondary": "oklch(0.97 0.20 109.62)",
      "secondary-foreground": "oklch(0 0 0)",
      "muted": "oklch(0.32 0 0)",
      "muted-foreground": "oklch(0.85 0 0)",
      "accent": "oklch(0.68 0.18 252.26)",
      "accent-foreground": "oklch(0 0 0)",
      "destructive": "oklch(1.00 0 0)",
      "destructive-foreground": "oklch(0 0 0)",
      "border": "oklch(1.00 0 0)",
      "input": "oklch(1.00 0 0)",
      "ring": "oklch(0.70 0.19 23.19)",
      "chart-1": "oklch(0.70 0.19 23.19)",
      "chart-2": "oklch(0.97 0.20 109.62)",
      "chart-3": "oklch(0.68 0.18 252.26)",
      "chart-4": "oklch(0.74 0.23 142.85)",
      "chart-5": "oklch(0.61 0.25 328.07)",
      "radius": "0px",
      "sidebar": "oklch(0 0 0)",
      "sidebar-foreground": "oklch(1.00 0 0)",
      "sidebar-primary": "oklch(0.70 0.19 23.19)",
      "sidebar-primary-foreground": "oklch(0 0 0)",
      "sidebar-accent": "oklch(0.68 0.18 252.26)",
      "sidebar-accent-foreground": "oklch(0 0 0)",
      "sidebar-border": "oklch(1.00 0 0)",
      "sidebar-ring": "oklch(0.70 0.19 23.19)",
      "font-sans": "DM Sans, sans-serif",
      "font-serif": "ui-serif, Georgia, Cambria, \"Times New Roman\", Times, serif",
      "font-mono": "Space Mono, monospace",
      "shadow-color": "hsl(0 0% 0%)",
      "shadow-opacity": "1",
      "shadow-blur": "0px",
      "shadow-spread": "0px",
      "shadow-offset-x": "4px",
      "shadow-offset-y": "4px",
      "letter-spacing": "0em",
      "spacing": "0.25rem",
      "shadow-2xs": "4px 4px 0px 0px hsl(0 0% 0% / 0.50)",
      "shadow-xs": "4px 4px 0px 0px hsl(0 0% 0% / 0.50)",
      "shadow-sm": "4px 4px 0px 0px hsl(0 0% 0% / 1.00), 4px 1px 2px -1px hsl(0 0% 0% / 1.00)",
      "shadow": "4px 4px 0px 0px hsl(0 0% 0% / 1.00), 4px 1px 2px -1px hsl(0 0% 0% / 1.00)",
      "shadow-md": "4px 4px 0px 0px hsl(0 0% 0% / 1.00), 4px 2px 4px -1px hsl(0 0% 0% / 1.00)",
      "shadow-lg": "4px 4px 0px 0px hsl(0 0% 0% / 1.00), 4px 4px 6px -1px hsl(0 0% 0% / 1.00)",
      "shadow-xl": "4px 4px 0px 0px hsl(0 0% 0% / 1.00), 4px 8px 10px -1px hsl(0 0% 0% / 1.00)",
      "shadow-2xl": "4px 4px 0px 0px hsl(0 0% 0% / 2.50)"
    }
  }
}
</file>

<file path="public/r/themes/northern-lights.json">
{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "northern-lights",
  "type": "registry:style",
  "css": {
    "@layer base": {
      "body": {
        "letter-spacing": "var(--tracking-normal)"
      }
    }
  },
  "cssVars": {
    "theme": {
      "font-sans": "Plus Jakarta Sans, sans-serif",
      "font-mono": "JetBrains Mono, monospace",
      "font-serif": "Source Serif 4, serif",
      "radius": "0.5rem",
      "tracking-tighter": "calc(var(--tracking-normal) - 0.05em)",
      "tracking-tight": "calc(var(--tracking-normal) - 0.025em)",
      "tracking-wide": "calc(var(--tracking-normal) + 0.025em)",
      "tracking-wider": "calc(var(--tracking-normal) + 0.05em)",
      "tracking-widest": "calc(var(--tracking-normal) + 0.1em)"
    },
    "light": {
      "background": "oklch(0.98 0.00 286.38)",
      "foreground": "oklch(0.32 0 0)",
      "card": "oklch(1.00 0 0)",
      "card-foreground": "oklch(0.32 0 0)",
      "popover": "oklch(1.00 0 0)",
      "popover-foreground": "oklch(0.32 0 0)",
      "primary": "oklch(0.65 0.15 150.31)",
      "primary-foreground": "oklch(1.00 0 0)",
      "secondary": "oklch(0.67 0.14 261.34)",
      "secondary-foreground": "oklch(1.00 0 0)",
      "muted": "oklch(0.88 0.03 98.10)",
      "muted-foreground": "oklch(0.54 0 0)",
      "accent": "oklch(0.83 0.11 211.96)",
      "accent-foreground": "oklch(0.32 0 0)",
      "destructive": "oklch(0.64 0.21 25.33)",
      "destructive-foreground": "oklch(1.00 0 0)",
      "border": "oklch(0.87 0 0)",
      "input": "oklch(0.87 0 0)",
      "ring": "oklch(0.65 0.15 150.31)",
      "chart-1": "oklch(0.65 0.15 150.31)",
      "chart-2": "oklch(0.67 0.14 261.34)",
      "chart-3": "oklch(0.83 0.11 211.96)",
      "chart-4": "oklch(0.59 0.10 245.74)",
      "chart-5": "oklch(0.59 0.16 148.24)",
      "radius": "0.5rem",
      "sidebar": "oklch(0.98 0.00 286.38)",
      "sidebar-foreground": "oklch(0.32 0 0)",
      "sidebar-primary": "oklch(0.65 0.15 150.31)",
      "sidebar-primary-foreground": "oklch(1.00 0 0)",
      "sidebar-accent": "oklch(0.83 0.11 211.96)",
      "sidebar-accent-foreground": "oklch(0.32 0 0)",
      "sidebar-border": "oklch(0.87 0 0)",
      "sidebar-ring": "oklch(0.65 0.15 150.31)",
      "font-sans": "Plus Jakarta Sans, sans-serif",
      "font-serif": "Source Serif 4, serif",
      "font-mono": "JetBrains Mono, monospace",
      "shadow-color": "hsl(0 0% 0%)",
      "shadow-opacity": "0.1",
      "shadow-blur": "3px",
      "shadow-spread": "0px",
      "shadow-offset-x": "0",
      "shadow-offset-y": "1px",
      "letter-spacing": "0em",
      "spacing": "0.25rem",
      "shadow-2xs": "0 1px 3px 0px hsl(0 0% 0% / 0.05)",
      "shadow-xs": "0 1px 3px 0px hsl(0 0% 0% / 0.05)",
      "shadow-sm": "0 1px 3px 0px hsl(0 0% 0% / 0.10), 0 1px 2px -1px hsl(0 0% 0% / 0.10)",
      "shadow": "0 1px 3px 0px hsl(0 0% 0% / 0.10), 0 1px 2px -1px hsl(0 0% 0% / 0.10)",
      "shadow-md": "0 1px 3px 0px hsl(0 0% 0% / 0.10), 0 2px 4px -1px hsl(0 0% 0% / 0.10)",
      "shadow-lg": "0 1px 3px 0px hsl(0 0% 0% / 0.10), 0 4px 6px -1px hsl(0 0% 0% / 0.10)",
      "shadow-xl": "0 1px 3px 0px hsl(0 0% 0% / 0.10), 0 8px 10px -1px hsl(0 0% 0% / 0.10)",
      "shadow-2xl": "0 1px 3px 0px hsl(0 0% 0% / 0.25)",
      "tracking-normal": "0em"
    },
    "dark": {
      "background": "oklch(0.23 0.01 264.29)",
      "foreground": "oklch(0.92 0 0)",
      "card": "oklch(0.32 0.01 223.67)",
      "card-foreground": "oklch(0.92 0 0)",
      "popover": "oklch(0.32 0.01 223.67)",
      "popover-foreground": "oklch(0.92 0 0)",
      "primary": "oklch(0.65 0.15 150.31)",
      "primary-foreground": "oklch(1.00 0 0)",
      "secondary": "oklch(0.59 0.10 245.74)",
      "secondary-foreground": "oklch(0.92 0 0)",
      "muted": "oklch(0.39 0 0)",
      "muted-foreground": "oklch(0.72 0 0)",
      "accent": "oklch(0.67 0.14 261.34)",
      "accent-foreground": "oklch(0.92 0 0)",
      "destructive": "oklch(0.64 0.21 25.33)",
      "destructive-foreground": "oklch(1.00 0 0)",
      "border": "oklch(0.39 0 0)",
      "input": "oklch(0.39 0 0)",
      "ring": "oklch(0.65 0.15 150.31)",
      "chart-1": "oklch(0.65 0.15 150.31)",
      "chart-2": "oklch(0.59 0.10 245.74)",
      "chart-3": "oklch(0.67 0.14 261.34)",
      "chart-4": "oklch(0.83 0.11 211.96)",
      "chart-5": "oklch(0.59 0.16 148.24)",
      "radius": "0.5rem",
      "sidebar": "oklch(0.23 0.01 264.29)",
      "sidebar-foreground": "oklch(0.92 0 0)",
      "sidebar-primary": "oklch(0.65 0.15 150.31)",
      "sidebar-primary-foreground": "oklch(1.00 0 0)",
      "sidebar-accent": "oklch(0.67 0.14 261.34)",
      "sidebar-accent-foreground": "oklch(0.92 0 0)",
      "sidebar-border": "oklch(0.39 0 0)",
      "sidebar-ring": "oklch(0.65 0.15 150.31)",
      "font-sans": "Plus Jakarta Sans, sans-serif",
      "font-serif": "Source Serif 4, serif",
      "font-mono": "JetBrains Mono, monospace",
      "shadow-color": "hsl(0 0% 0%)",
      "shadow-opacity": "0.1",
      "shadow-blur": "3px",
      "shadow-spread": "0px",
      "shadow-offset-x": "0",
      "shadow-offset-y": "1px",
      "letter-spacing": "0em",
      "spacing": "0.25rem",
      "shadow-2xs": "0 1px 3px 0px hsl(0 0% 0% / 0.05)",
      "shadow-xs": "0 1px 3px 0px hsl(0 0% 0% / 0.05)",
      "shadow-sm": "0 1px 3px 0px hsl(0 0% 0% / 0.10), 0 1px 2px -1px hsl(0 0% 0% / 0.10)",
      "shadow": "0 1px 3px 0px hsl(0 0% 0% / 0.10), 0 1px 2px -1px hsl(0 0% 0% / 0.10)",
      "shadow-md": "0 1px 3px 0px hsl(0 0% 0% / 0.10), 0 2px 4px -1px hsl(0 0% 0% / 0.10)",
      "shadow-lg": "0 1px 3px 0px hsl(0 0% 0% / 0.10), 0 4px 6px -1px hsl(0 0% 0% / 0.10)",
      "shadow-xl": "0 1px 3px 0px hsl(0 0% 0% / 0.10), 0 8px 10px -1px hsl(0 0% 0% / 0.10)",
      "shadow-2xl": "0 1px 3px 0px hsl(0 0% 0% / 0.25)"
    }
  }
}
</file>

<file path="public/r/themes/ocean-breeze.json">
{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "ocean-breeze",
  "type": "registry:style",
  "css": {
    "@layer base": {
      "body": {
        "letter-spacing": "var(--tracking-normal)"
      }
    }
  },
  "cssVars": {
    "theme": {
      "font-sans": "DM Sans, sans-serif",
      "font-mono": "IBM Plex Mono, monospace",
      "font-serif": "Lora, serif",
      "radius": "0.5rem",
      "tracking-tighter": "calc(var(--tracking-normal) - 0.05em)",
      "tracking-tight": "calc(var(--tracking-normal) - 0.025em)",
      "tracking-wide": "calc(var(--tracking-normal) + 0.025em)",
      "tracking-wider": "calc(var(--tracking-normal) + 0.05em)",
      "tracking-widest": "calc(var(--tracking-normal) + 0.1em)"
    },
    "light": {
      "background": "oklch(0.98 0.01 244.25)",
      "foreground": "oklch(0.37 0.03 259.73)",
      "card": "oklch(1.00 0 0)",
      "card-foreground": "oklch(0.37 0.03 259.73)",
      "popover": "oklch(1.00 0 0)",
      "popover-foreground": "oklch(0.37 0.03 259.73)",
      "primary": "oklch(0.72 0.19 149.58)",
      "primary-foreground": "oklch(1.00 0 0)",
      "secondary": "oklch(0.95 0.03 236.82)",
      "secondary-foreground": "oklch(0.45 0.03 256.80)",
      "muted": "oklch(0.97 0.00 264.54)",
      "muted-foreground": "oklch(0.55 0.02 264.36)",
      "accent": "oklch(0.95 0.05 163.05)",
      "accent-foreground": "oklch(0.37 0.03 259.73)",
      "destructive": "oklch(0.64 0.21 25.33)",
      "destructive-foreground": "oklch(1.00 0 0)",
      "border": "oklch(0.93 0.01 264.53)",
      "input": "oklch(0.93 0.01 264.53)",
      "ring": "oklch(0.72 0.19 149.58)",
      "chart-1": "oklch(0.72 0.19 149.58)",
      "chart-2": "oklch(0.70 0.15 162.48)",
      "chart-3": "oklch(0.60 0.13 163.23)",
      "chart-4": "oklch(0.51 0.10 165.61)",
      "chart-5": "oklch(0.43 0.09 166.91)",
      "radius": "0.5rem",
      "sidebar": "oklch(0.95 0.03 236.82)",
      "sidebar-foreground": "oklch(0.37 0.03 259.73)",
      "sidebar-primary": "oklch(0.72 0.19 149.58)",
      "sidebar-primary-foreground": "oklch(1.00 0 0)",
      "sidebar-accent": "oklch(0.95 0.05 163.05)",
      "sidebar-accent-foreground": "oklch(0.37 0.03 259.73)",
      "sidebar-border": "oklch(0.93 0.01 264.53)",
      "sidebar-ring": "oklch(0.72 0.19 149.58)",
      "font-sans": "DM Sans, sans-serif",
      "font-serif": "Lora, serif",
      "font-mono": "IBM Plex Mono, monospace",
      "shadow-color": "hsl(0 0% 0%)",
      "shadow-opacity": "0.1",
      "shadow-blur": "8px",
      "shadow-spread": "-1px",
      "shadow-offset-x": "0px",
      "shadow-offset-y": "4px",
      "letter-spacing": "0em",
      "spacing": "0.25rem",
      "shadow-2xs": "0px 4px 8px -1px hsl(0 0% 0% / 0.05)",
      "shadow-xs": "0px 4px 8px -1px hsl(0 0% 0% / 0.05)",
      "shadow-sm": "0px 4px 8px -1px hsl(0 0% 0% / 0.10), 0px 1px 2px -2px hsl(0 0% 0% / 0.10)",
      "shadow": "0px 4px 8px -1px hsl(0 0% 0% / 0.10), 0px 1px 2px -2px hsl(0 0% 0% / 0.10)",
      "shadow-md": "0px 4px 8px -1px hsl(0 0% 0% / 0.10), 0px 2px 4px -2px hsl(0 0% 0% / 0.10)",
      "shadow-lg": "0px 4px 8px -1px hsl(0 0% 0% / 0.10), 0px 4px 6px -2px hsl(0 0% 0% / 0.10)",
      "shadow-xl": "0px 4px 8px -1px hsl(0 0% 0% / 0.10), 0px 8px 10px -2px hsl(0 0% 0% / 0.10)",
      "shadow-2xl": "0px 4px 8px -1px hsl(0 0% 0% / 0.25)",
      "tracking-normal": "0em"
    },
    "dark": {
      "background": "oklch(0.21 0.04 265.75)",
      "foreground": "oklch(0.87 0.01 258.34)",
      "card": "oklch(0.28 0.04 260.03)",
      "card-foreground": "oklch(0.87 0.01 258.34)",
      "popover": "oklch(0.28 0.04 260.03)",
      "popover-foreground": "oklch(0.87 0.01 258.34)",
      "primary": "oklch(0.77 0.15 163.22)",
      "primary-foreground": "oklch(0.21 0.04 265.75)",
      "secondary": "oklch(0.34 0.03 260.91)",
      "secondary-foreground": "oklch(0.71 0.01 286.07)",
      "muted": "oklch(0.28 0.04 260.03)",
      "muted-foreground": "oklch(0.55 0.02 264.36)",
      "accent": "oklch(0.37 0.03 259.73)",
      "accent-foreground": "oklch(0.71 0.01 286.07)",
      "destructive": "oklch(0.64 0.21 25.33)",
      "destructive-foreground": "oklch(0.21 0.04 265.75)",
      "border": "oklch(0.45 0.03 256.80)",
      "input": "oklch(0.45 0.03 256.80)",
      "ring": "oklch(0.77 0.15 163.22)",
      "chart-1": "oklch(0.77 0.15 163.22)",
      "chart-2": "oklch(0.78 0.13 181.91)",
      "chart-3": "oklch(0.72 0.19 149.58)",
      "chart-4": "oklch(0.70 0.15 162.48)",
      "chart-5": "oklch(0.60 0.13 163.23)",
      "radius": "0.5rem",
      "sidebar": "oklch(0.28 0.04 260.03)",
      "sidebar-foreground": "oklch(0.87 0.01 258.34)",
      "sidebar-primary": "oklch(0.77 0.15 163.22)",
      "sidebar-primary-foreground": "oklch(0.21 0.04 265.75)",
      "sidebar-accent": "oklch(0.37 0.03 259.73)",
      "sidebar-accent-foreground": "oklch(0.71 0.01 286.07)",
      "sidebar-border": "oklch(0.45 0.03 256.80)",
      "sidebar-ring": "oklch(0.77 0.15 163.22)",
      "font-sans": "DM Sans, sans-serif",
      "font-serif": "Lora, serif",
      "font-mono": "IBM Plex Mono, monospace",
      "shadow-color": "hsl(0 0% 0%)",
      "shadow-opacity": "0.1",
      "shadow-blur": "8px",
      "shadow-spread": "-1px",
      "shadow-offset-x": "0px",
      "shadow-offset-y": "4px",
      "letter-spacing": "0em",
      "spacing": "0.25rem",
      "shadow-2xs": "0px 4px 8px -1px hsl(0 0% 0% / 0.05)",
      "shadow-xs": "0px 4px 8px -1px hsl(0 0% 0% / 0.05)",
      "shadow-sm": "0px 4px 8px -1px hsl(0 0% 0% / 0.10), 0px 1px 2px -2px hsl(0 0% 0% / 0.10)",
      "shadow": "0px 4px 8px -1px hsl(0 0% 0% / 0.10), 0px 1px 2px -2px hsl(0 0% 0% / 0.10)",
      "shadow-md": "0px 4px 8px -1px hsl(0 0% 0% / 0.10), 0px 2px 4px -2px hsl(0 0% 0% / 0.10)",
      "shadow-lg": "0px 4px 8px -1px hsl(0 0% 0% / 0.10), 0px 4px 6px -2px hsl(0 0% 0% / 0.10)",
      "shadow-xl": "0px 4px 8px -1px hsl(0 0% 0% / 0.10), 0px 8px 10px -2px hsl(0 0% 0% / 0.10)",
      "shadow-2xl": "0px 4px 8px -1px hsl(0 0% 0% / 0.25)"
    }
  }
}
</file>

<file path="public/r/themes/pastel-dreams.json">
{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "pastel-dreams",
  "type": "registry:style",
  "css": {
    "@layer base": {
      "body": {
        "letter-spacing": "var(--tracking-normal)"
      }
    }
  },
  "cssVars": {
    "theme": {
      "font-sans": "Open Sans, sans-serif",
      "font-mono": "IBM Plex Mono, monospace",
      "font-serif": "Source Serif 4, serif",
      "radius": "1.5rem",
      "tracking-tighter": "calc(var(--tracking-normal) - 0.05em)",
      "tracking-tight": "calc(var(--tracking-normal) - 0.025em)",
      "tracking-wide": "calc(var(--tracking-normal) + 0.025em)",
      "tracking-wider": "calc(var(--tracking-normal) + 0.05em)",
      "tracking-widest": "calc(var(--tracking-normal) + 0.1em)"
    },
    "light": {
      "background": "oklch(0.97 0.01 314.78)",
      "foreground": "oklch(0.37 0.03 259.73)",
      "card": "oklch(1.00 0 0)",
      "card-foreground": "oklch(0.37 0.03 259.73)",
      "popover": "oklch(1.00 0 0)",
      "popover-foreground": "oklch(0.37 0.03 259.73)",
      "primary": "oklch(0.71 0.16 293.54)",
      "primary-foreground": "oklch(1.00 0 0)",
      "secondary": "oklch(0.91 0.05 306.09)",
      "secondary-foreground": "oklch(0.45 0.03 256.80)",
      "muted": "oklch(0.95 0.03 307.17)",
      "muted-foreground": "oklch(0.55 0.02 264.36)",
      "accent": "oklch(0.94 0.03 321.94)",
      "accent-foreground": "oklch(0.37 0.03 259.73)",
      "destructive": "oklch(0.81 0.10 19.57)",
      "destructive-foreground": "oklch(1.00 0 0)",
      "border": "oklch(0.91 0.05 306.09)",
      "input": "oklch(0.91 0.05 306.09)",
      "ring": "oklch(0.71 0.16 293.54)",
      "chart-1": "oklch(0.71 0.16 293.54)",
      "chart-2": "oklch(0.61 0.22 292.72)",
      "chart-3": "oklch(0.54 0.25 293.01)",
      "chart-4": "oklch(0.49 0.24 292.58)",
      "chart-5": "oklch(0.43 0.21 292.76)",
      "radius": "1.5rem",
      "sidebar": "oklch(0.91 0.05 306.09)",
      "sidebar-foreground": "oklch(0.37 0.03 259.73)",
      "sidebar-primary": "oklch(0.71 0.16 293.54)",
      "sidebar-primary-foreground": "oklch(1.00 0 0)",
      "sidebar-accent": "oklch(0.94 0.03 321.94)",
      "sidebar-accent-foreground": "oklch(0.37 0.03 259.73)",
      "sidebar-border": "oklch(0.91 0.05 306.09)",
      "sidebar-ring": "oklch(0.71 0.16 293.54)",
      "font-sans": "Open Sans, sans-serif",
      "font-serif": "Source Serif 4, serif",
      "font-mono": "IBM Plex Mono, monospace",
      "shadow-color": "hsl(0 0% 0%)",
      "shadow-opacity": "0.08",
      "shadow-blur": "16px",
      "shadow-spread": "-4px",
      "shadow-offset-x": "0px",
      "shadow-offset-y": "8px",
      "letter-spacing": "0em",
      "spacing": "0.25rem",
      "shadow-2xs": "0px 8px 16px -4px hsl(0 0% 0% / 0.04)",
      "shadow-xs": "0px 8px 16px -4px hsl(0 0% 0% / 0.04)",
      "shadow-sm": "0px 8px 16px -4px hsl(0 0% 0% / 0.08), 0px 1px 2px -5px hsl(0 0% 0% / 0.08)",
      "shadow": "0px 8px 16px -4px hsl(0 0% 0% / 0.08), 0px 1px 2px -5px hsl(0 0% 0% / 0.08)",
      "shadow-md": "0px 8px 16px -4px hsl(0 0% 0% / 0.08), 0px 2px 4px -5px hsl(0 0% 0% / 0.08)",
      "shadow-lg": "0px 8px 16px -4px hsl(0 0% 0% / 0.08), 0px 4px 6px -5px hsl(0 0% 0% / 0.08)",
      "shadow-xl": "0px 8px 16px -4px hsl(0 0% 0% / 0.08), 0px 8px 10px -5px hsl(0 0% 0% / 0.08)",
      "shadow-2xl": "0px 8px 16px -4px hsl(0 0% 0% / 0.20)",
      "tracking-normal": "0em"
    },
    "dark": {
      "background": "oklch(0.22 0.01 56.04)",
      "foreground": "oklch(0.93 0.03 272.79)",
      "card": "oklch(0.28 0.03 307.23)",
      "card-foreground": "oklch(0.93 0.03 272.79)",
      "popover": "oklch(0.28 0.03 307.23)",
      "popover-foreground": "oklch(0.93 0.03 272.79)",
      "primary": "oklch(0.79 0.12 295.75)",
      "primary-foreground": "oklch(0.22 0.01 56.04)",
      "secondary": "oklch(0.34 0.04 308.85)",
      "secondary-foreground": "oklch(0.87 0.01 258.34)",
      "muted": "oklch(0.28 0.03 307.23)",
      "muted-foreground": "oklch(0.71 0.02 261.32)",
      "accent": "oklch(0.39 0.05 304.64)",
      "accent-foreground": "oklch(0.87 0.01 258.34)",
      "destructive": "oklch(0.81 0.10 19.57)",
      "destructive-foreground": "oklch(0.22 0.01 56.04)",
      "border": "oklch(0.34 0.04 308.85)",
      "input": "oklch(0.34 0.04 308.85)",
      "ring": "oklch(0.79 0.12 295.75)",
      "chart-1": "oklch(0.79 0.12 295.75)",
      "chart-2": "oklch(0.71 0.16 293.54)",
      "chart-3": "oklch(0.61 0.22 292.72)",
      "chart-4": "oklch(0.54 0.25 293.01)",
      "chart-5": "oklch(0.49 0.24 292.58)",
      "radius": "1.5rem",
      "sidebar": "oklch(0.34 0.04 308.85)",
      "sidebar-foreground": "oklch(0.93 0.03 272.79)",
      "sidebar-primary": "oklch(0.79 0.12 295.75)",
      "sidebar-primary-foreground": "oklch(0.22 0.01 56.04)",
      "sidebar-accent": "oklch(0.39 0.05 304.64)",
      "sidebar-accent-foreground": "oklch(0.87 0.01 258.34)",
      "sidebar-border": "oklch(0.34 0.04 308.85)",
      "sidebar-ring": "oklch(0.79 0.12 295.75)",
      "font-sans": "Open Sans, sans-serif",
      "font-serif": "Source Serif 4, serif",
      "font-mono": "IBM Plex Mono, monospace",
      "shadow-color": "hsl(0 0% 0%)",
      "shadow-opacity": "0.08",
      "shadow-blur": "16px",
      "shadow-spread": "-4px",
      "shadow-offset-x": "0px",
      "shadow-offset-y": "8px",
      "letter-spacing": "0em",
      "spacing": "0.25rem",
      "shadow-2xs": "0px 8px 16px -4px hsl(0 0% 0% / 0.04)",
      "shadow-xs": "0px 8px 16px -4px hsl(0 0% 0% / 0.04)",
      "shadow-sm": "0px 8px 16px -4px hsl(0 0% 0% / 0.08), 0px 1px 2px -5px hsl(0 0% 0% / 0.08)",
      "shadow": "0px 8px 16px -4px hsl(0 0% 0% / 0.08), 0px 1px 2px -5px hsl(0 0% 0% / 0.08)",
      "shadow-md": "0px 8px 16px -4px hsl(0 0% 0% / 0.08), 0px 2px 4px -5px hsl(0 0% 0% / 0.08)",
      "shadow-lg": "0px 8px 16px -4px hsl(0 0% 0% / 0.08), 0px 4px 6px -5px hsl(0 0% 0% / 0.08)",
      "shadow-xl": "0px 8px 16px -4px hsl(0 0% 0% / 0.08), 0px 8px 10px -5px hsl(0 0% 0% / 0.08)",
      "shadow-2xl": "0px 8px 16px -4px hsl(0 0% 0% / 0.20)"
    }
  }
}
</file>

<file path="public/r/themes/perpetuity.json">
{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "perpetuity",
  "type": "registry:style",
  "css": {
    "@layer base": {
      "body": {
        "letter-spacing": "var(--tracking-normal)"
      }
    }
  },
  "cssVars": {
    "theme": {
      "font-sans": "Source Code Pro, monospace",
      "font-mono": "Source Code Pro, monospace",
      "font-serif": "Source Code Pro, monospace",
      "radius": "0.125rem",
      "tracking-tighter": "calc(var(--tracking-normal) - 0.05em)",
      "tracking-tight": "calc(var(--tracking-normal) - 0.025em)",
      "tracking-wide": "calc(var(--tracking-normal) + 0.025em)",
      "tracking-wider": "calc(var(--tracking-normal) + 0.05em)",
      "tracking-widest": "calc(var(--tracking-normal) + 0.1em)"
    },
    "light": {
      "background": "oklch(0.95 0.01 197.01)",
      "foreground": "oklch(0.38 0.06 212.66)",
      "card": "oklch(0.97 0.01 197.07)",
      "card-foreground": "oklch(0.38 0.06 212.66)",
      "popover": "oklch(0.97 0.01 197.07)",
      "popover-foreground": "oklch(0.38 0.06 212.66)",
      "primary": "oklch(0.56 0.09 203.28)",
      "primary-foreground": "oklch(1.00 0 0)",
      "secondary": "oklch(0.92 0.02 196.84)",
      "secondary-foreground": "oklch(0.38 0.06 212.66)",
      "muted": "oklch(0.93 0.01 196.97)",
      "muted-foreground": "oklch(0.54 0.06 201.57)",
      "accent": "oklch(0.90 0.03 201.89)",
      "accent-foreground": "oklch(0.38 0.06 212.66)",
      "destructive": "oklch(0.57 0.19 25.54)",
      "destructive-foreground": "oklch(1.00 0 0)",
      "border": "oklch(0.89 0.02 204.41)",
      "input": "oklch(0.92 0.02 196.84)",
      "ring": "oklch(0.56 0.09 203.28)",
      "chart-1": "oklch(0.56 0.09 203.28)",
      "chart-2": "oklch(0.64 0.10 201.59)",
      "chart-3": "oklch(0.71 0.11 201.25)",
      "chart-4": "oklch(0.77 0.10 201.18)",
      "chart-5": "oklch(0.83 0.08 200.97)",
      "radius": "0.125rem",
      "sidebar": "oklch(0.93 0.02 205.32)",
      "sidebar-foreground": "oklch(0.38 0.06 212.66)",
      "sidebar-primary": "oklch(0.56 0.09 203.28)",
      "sidebar-primary-foreground": "oklch(1.00 0 0)",
      "sidebar-accent": "oklch(0.90 0.03 201.89)",
      "sidebar-accent-foreground": "oklch(0.38 0.06 212.66)",
      "sidebar-border": "oklch(0.89 0.02 204.41)",
      "sidebar-ring": "oklch(0.56 0.09 203.28)",
      "font-sans": "Courier New, monospace",
      "font-serif": "Courier New, monospace",
      "font-mono": "Courier New, monospace",
      "shadow-color": "hsl(185 70% 30% / 0.15)",
      "shadow-opacity": "0.15",
      "shadow-blur": "2px",
      "shadow-spread": "0px",
      "shadow-offset-x": "1px",
      "shadow-offset-y": "1px",
      "letter-spacing": "0em",
      "spacing": "0.25rem",
      "shadow-2xs": "1px 1px 2px 0px hsl(185 70% 30% / 0.07)",
      "shadow-xs": "1px 1px 2px 0px hsl(185 70% 30% / 0.07)",
      "shadow-sm": "1px 1px 2px 0px hsl(185 70% 30% / 0.15), 1px 1px 2px -1px hsl(185 70% 30% / 0.15)",
      "shadow": "1px 1px 2px 0px hsl(185 70% 30% / 0.15), 1px 1px 2px -1px hsl(185 70% 30% / 0.15)",
      "shadow-md": "1px 1px 2px 0px hsl(185 70% 30% / 0.15), 1px 2px 4px -1px hsl(185 70% 30% / 0.15)",
      "shadow-lg": "1px 1px 2px 0px hsl(185 70% 30% / 0.15), 1px 4px 6px -1px hsl(185 70% 30% / 0.15)",
      "shadow-xl": "1px 1px 2px 0px hsl(185 70% 30% / 0.15), 1px 8px 10px -1px hsl(185 70% 30% / 0.15)",
      "shadow-2xl": "1px 1px 2px 0px hsl(185 70% 30% / 0.38)",
      "tracking-normal": "0em"
    },
    "dark": {
      "background": "oklch(0.21 0.02 224.45)",
      "foreground": "oklch(0.85 0.13 195.04)",
      "card": "oklch(0.23 0.03 216.07)",
      "card-foreground": "oklch(0.85 0.13 195.04)",
      "popover": "oklch(0.23 0.03 216.07)",
      "popover-foreground": "oklch(0.85 0.13 195.04)",
      "primary": "oklch(0.85 0.13 195.04)",
      "primary-foreground": "oklch(0.21 0.02 224.45)",
      "secondary": "oklch(0.38 0.06 216.50)",
      "secondary-foreground": "oklch(0.85 0.13 195.04)",
      "muted": "oklch(0.29 0.04 218.82)",
      "muted-foreground": "oklch(0.66 0.10 195.05)",
      "accent": "oklch(0.38 0.06 216.50)",
      "accent-foreground": "oklch(0.85 0.13 195.04)",
      "destructive": "oklch(0.62 0.21 25.81)",
      "destructive-foreground": "oklch(0.96 0 0)",
      "border": "oklch(0.38 0.06 216.50)",
      "input": "oklch(0.38 0.06 216.50)",
      "ring": "oklch(0.85 0.13 195.04)",
      "chart-1": "oklch(0.85 0.13 195.04)",
      "chart-2": "oklch(0.66 0.10 195.05)",
      "chart-3": "oklch(0.58 0.08 195.07)",
      "chart-4": "oklch(0.43 0.06 202.62)",
      "chart-5": "oklch(0.31 0.05 204.16)",
      "radius": "0.125rem",
      "sidebar": "oklch(0.21 0.02 224.45)",
      "sidebar-foreground": "oklch(0.85 0.13 195.04)",
      "sidebar-primary": "oklch(0.85 0.13 195.04)",
      "sidebar-primary-foreground": "oklch(0.21 0.02 224.45)",
      "sidebar-accent": "oklch(0.38 0.06 216.50)",
      "sidebar-accent-foreground": "oklch(0.85 0.13 195.04)",
      "sidebar-border": "oklch(0.38 0.06 216.50)",
      "sidebar-ring": "oklch(0.85 0.13 195.04)",
      "font-sans": "Source Code Pro, monospace",
      "font-serif": "Source Code Pro, monospace",
      "font-mono": "Source Code Pro, monospace",
      "shadow-color": "hsl(180 70% 60% / 0.2)",
      "shadow-opacity": "0.2",
      "shadow-blur": "2px",
      "shadow-spread": "0px",
      "shadow-offset-x": "1px",
      "shadow-offset-y": "1px",
      "letter-spacing": "0em",
      "spacing": "0.25rem",
      "shadow-2xs": "1px 1px 2px 0px hsl(180 70% 60% / 0.10)",
      "shadow-xs": "1px 1px 2px 0px hsl(180 70% 60% / 0.10)",
      "shadow-sm": "1px 1px 2px 0px hsl(180 70% 60% / 0.20), 1px 1px 2px -1px hsl(180 70% 60% / 0.20)",
      "shadow": "1px 1px 2px 0px hsl(180 70% 60% / 0.20), 1px 1px 2px -1px hsl(180 70% 60% / 0.20)",
      "shadow-md": "1px 1px 2px 0px hsl(180 70% 60% / 0.20), 1px 2px 4px -1px hsl(180 70% 60% / 0.20)",
      "shadow-lg": "1px 1px 2px 0px hsl(180 70% 60% / 0.20), 1px 4px 6px -1px hsl(180 70% 60% / 0.20)",
      "shadow-xl": "1px 1px 2px 0px hsl(180 70% 60% / 0.20), 1px 8px 10px -1px hsl(180 70% 60% / 0.20)",
      "shadow-2xl": "1px 1px 2px 0px hsl(180 70% 60% / 0.50)"
    }
  }
}
</file>

<file path="public/r/themes/quantum-rose.json">
{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "quantum-rose",
  "type": "registry:style",
  "css": {
    "@layer base": {
      "body": {
        "letter-spacing": "var(--tracking-normal)"
      }
    }
  },
  "cssVars": {
    "theme": {
      "font-sans": "Quicksand, sans-serif",
      "font-mono": "Space Mono, monospace",
      "font-serif": "Playfair Display, serif",
      "radius": "0.5rem",
      "tracking-tighter": "calc(var(--tracking-normal) - 0.05em)",
      "tracking-tight": "calc(var(--tracking-normal) - 0.025em)",
      "tracking-wide": "calc(var(--tracking-normal) + 0.025em)",
      "tracking-wider": "calc(var(--tracking-normal) + 0.05em)",
      "tracking-widest": "calc(var(--tracking-normal) + 0.1em)"
    },
    "light": {
      "background": "oklch(0.97 0.02 343.93)",
      "foreground": "oklch(0.44 0.17 352.38)",
      "card": "oklch(0.98 0.01 339.33)",
      "card-foreground": "oklch(0.44 0.17 352.38)",
      "popover": "oklch(0.98 0.01 339.33)",
      "popover-foreground": "oklch(0.44 0.17 352.38)",
      "primary": "oklch(0.60 0.24 0.13)",
      "primary-foreground": "oklch(1.00 0 0)",
      "secondary": "oklch(0.92 0.07 326.13)",
      "secondary-foreground": "oklch(0.44 0.17 352.38)",
      "muted": "oklch(0.94 0.04 344.26)",
      "muted-foreground": "oklch(0.57 0.17 352.05)",
      "accent": "oklch(0.88 0.08 344.88)",
      "accent-foreground": "oklch(0.44 0.17 352.38)",
      "destructive": "oklch(0.58 0.19 6.34)",
      "destructive-foreground": "oklch(1.00 0 0)",
      "border": "oklch(0.89 0.07 344.39)",
      "input": "oklch(0.92 0.07 326.13)",
      "ring": "oklch(0.60 0.24 0.13)",
      "chart-1": "oklch(0.60 0.24 0.13)",
      "chart-2": "oklch(0.60 0.17 345.04)",
      "chart-3": "oklch(0.60 0.12 311.80)",
      "chart-4": "oklch(0.58 0.12 283.29)",
      "chart-5": "oklch(0.65 0.19 267.97)",
      "radius": "0.5rem",
      "sidebar": "oklch(0.96 0.02 345.75)",
      "sidebar-foreground": "oklch(0.44 0.17 352.38)",
      "sidebar-primary": "oklch(0.60 0.24 0.13)",
      "sidebar-primary-foreground": "oklch(1.00 0 0)",
      "sidebar-accent": "oklch(0.88 0.08 344.88)",
      "sidebar-accent-foreground": "oklch(0.44 0.17 352.38)",
      "sidebar-border": "oklch(0.93 0.04 343.31)",
      "sidebar-ring": "oklch(0.60 0.24 0.13)",
      "font-sans": "Poppins, sans-serif",
      "font-serif": "Playfair Display, serif",
      "font-mono": "Space Mono, monospace",
      "shadow-color": "hsl(330 70% 30% / 0.12)",
      "shadow-opacity": "0.18",
      "shadow-blur": "0px",
      "shadow-spread": "0px",
      "shadow-offset-x": "0px",
      "shadow-offset-y": "3px",
      "letter-spacing": "0em",
      "spacing": "0.25rem",
      "shadow-2xs": "0px 3px 0px 0px hsl(330 70% 30% / 0.09)",
      "shadow-xs": "0px 3px 0px 0px hsl(330 70% 30% / 0.09)",
      "shadow-sm": "0px 3px 0px 0px hsl(330 70% 30% / 0.18), 0px 1px 2px -1px hsl(330 70% 30% / 0.18)",
      "shadow": "0px 3px 0px 0px hsl(330 70% 30% / 0.18), 0px 1px 2px -1px hsl(330 70% 30% / 0.18)",
      "shadow-md": "0px 3px 0px 0px hsl(330 70% 30% / 0.18), 0px 2px 4px -1px hsl(330 70% 30% / 0.18)",
      "shadow-lg": "0px 3px 0px 0px hsl(330 70% 30% / 0.18), 0px 4px 6px -1px hsl(330 70% 30% / 0.18)",
      "shadow-xl": "0px 3px 0px 0px hsl(330 70% 30% / 0.18), 0px 8px 10px -1px hsl(330 70% 30% / 0.18)",
      "shadow-2xl": "0px 3px 0px 0px hsl(330 70% 30% / 0.45)",
      "tracking-normal": "0em"
    },
    "dark": {
      "background": "oklch(0.18 0.05 313.72)",
      "foreground": "oklch(0.86 0.13 326.64)",
      "card": "oklch(0.24 0.07 313.23)",
      "card-foreground": "oklch(0.86 0.13 326.64)",
      "popover": "oklch(0.24 0.07 313.23)",
      "popover-foreground": "oklch(0.86 0.13 326.64)",
      "primary": "oklch(0.75 0.23 332.02)",
      "primary-foreground": "oklch(0.16 0.05 327.57)",
      "secondary": "oklch(0.32 0.09 319.65)",
      "secondary-foreground": "oklch(0.86 0.13 326.64)",
      "muted": "oklch(0.27 0.08 312.35)",
      "muted-foreground": "oklch(0.71 0.16 327.11)",
      "accent": "oklch(0.36 0.12 325.77)",
      "accent-foreground": "oklch(0.86 0.13 326.64)",
      "destructive": "oklch(0.65 0.24 7.17)",
      "destructive-foreground": "oklch(0.98 0 0)",
      "border": "oklch(0.33 0.12 313.54)",
      "input": "oklch(0.32 0.09 319.65)",
      "ring": "oklch(0.75 0.23 332.02)",
      "chart-1": "oklch(0.75 0.23 332.02)",
      "chart-2": "oklch(0.65 0.22 317.63)",
      "chart-3": "oklch(0.62 0.22 292.77)",
      "chart-4": "oklch(0.61 0.16 278.72)",
      "chart-5": "oklch(0.62 0.20 268.05)",
      "radius": "0.5rem",
      "sidebar": "oklch(0.19 0.05 311.40)",
      "sidebar-foreground": "oklch(0.86 0.13 326.64)",
      "sidebar-primary": "oklch(0.75 0.23 332.02)",
      "sidebar-primary-foreground": "oklch(0.16 0.05 327.57)",
      "sidebar-accent": "oklch(0.36 0.12 325.77)",
      "sidebar-accent-foreground": "oklch(0.86 0.13 326.64)",
      "sidebar-border": "oklch(0.33 0.12 313.54)",
      "sidebar-ring": "oklch(0.75 0.23 332.02)",
      "font-sans": "Quicksand, sans-serif",
      "font-serif": "Playfair Display, serif",
      "font-mono": "Space Mono, monospace",
      "shadow-color": "hsl(300 80% 50% / 0.25)",
      "shadow-opacity": "0.18",
      "shadow-blur": "0px",
      "shadow-spread": "0px",
      "shadow-offset-x": "0px",
      "shadow-offset-y": "3px",
      "letter-spacing": "0em",
      "spacing": "0.25rem",
      "shadow-2xs": "0px 3px 0px 0px hsl(300 80% 50% / 0.09)",
      "shadow-xs": "0px 3px 0px 0px hsl(300 80% 50% / 0.09)",
      "shadow-sm": "0px 3px 0px 0px hsl(300 80% 50% / 0.18), 0px 1px 2px -1px hsl(300 80% 50% / 0.18)",
      "shadow": "0px 3px 0px 0px hsl(300 80% 50% / 0.18), 0px 1px 2px -1px hsl(300 80% 50% / 0.18)",
      "shadow-md": "0px 3px 0px 0px hsl(300 80% 50% / 0.18), 0px 2px 4px -1px hsl(300 80% 50% / 0.18)",
      "shadow-lg": "0px 3px 0px 0px hsl(300 80% 50% / 0.18), 0px 4px 6px -1px hsl(300 80% 50% / 0.18)",
      "shadow-xl": "0px 3px 0px 0px hsl(300 80% 50% / 0.18), 0px 8px 10px -1px hsl(300 80% 50% / 0.18)",
      "shadow-2xl": "0px 3px 0px 0px hsl(300 80% 50% / 0.45)"
    }
  }
}
</file>

<file path="public/r/themes/registry.json">
{
  "$schema": "https://ui.shadcn.com/schema/registry.json",
  "name": "behindui-theme-registry",
  "homepage": "https://behindui.com",
  "items": [
    {
      "name": "modern-minimal",
      "type": "registry:style",
      "title": "Modern Minimal",
      "description": "A theme based on the Modern Minimal color palette.",
      "css": {
        "@layer base": {
          "body": {
            "letter-spacing": "var(--tracking-normal)"
          }
        }
      },
      "cssVars": {
        "theme": {
          "font-sans": "Inter, sans-serif",
          "font-mono": "JetBrains Mono, monospace",
          "font-serif": "Source Serif 4, serif",
          "radius": "0.375rem",
          "tracking-tighter": "calc(var(--tracking-normal) - 0.05em)",
          "tracking-tight": "calc(var(--tracking-normal) - 0.025em)",
          "tracking-wide": "calc(var(--tracking-normal) + 0.025em)",
          "tracking-wider": "calc(var(--tracking-normal) + 0.05em)",
          "tracking-widest": "calc(var(--tracking-normal) + 0.1em)"
        },
        "light": {
          "background": "oklch(1.00 0 0)",
          "foreground": "oklch(0.32 0 0)",
          "card": "oklch(1.00 0 0)",
          "card-foreground": "oklch(0.32 0 0)",
          "popover": "oklch(1.00 0 0)",
          "popover-foreground": "oklch(0.32 0 0)",
          "primary": "oklch(0.62 0.19 259.81)",
          "primary-foreground": "oklch(1.00 0 0)",
          "secondary": "oklch(0.97 0.00 264.54)",
          "secondary-foreground": "oklch(0.45 0.03 256.80)",
          "muted": "oklch(0.98 0.00 247.84)",
          "muted-foreground": "oklch(0.55 0.02 264.36)",
          "accent": "oklch(0.95 0.03 236.82)",
          "accent-foreground": "oklch(0.38 0.14 265.52)",
          "destructive": "oklch(0.64 0.21 25.33)",
          "destructive-foreground": "oklch(1.00 0 0)",
          "border": "oklch(0.93 0.01 264.53)",
          "input": "oklch(0.93 0.01 264.53)",
          "ring": "oklch(0.62 0.19 259.81)",
          "chart-1": "oklch(0.62 0.19 259.81)",
          "chart-2": "oklch(0.55 0.22 262.88)",
          "chart-3": "oklch(0.49 0.22 264.38)",
          "chart-4": "oklch(0.42 0.18 265.64)",
          "chart-5": "oklch(0.38 0.14 265.52)",
          "radius": "0.375rem",
          "sidebar": "oklch(0.98 0.00 247.84)",
          "sidebar-foreground": "oklch(0.32 0 0)",
          "sidebar-primary": "oklch(0.62 0.19 259.81)",
          "sidebar-primary-foreground": "oklch(1.00 0 0)",
          "sidebar-accent": "oklch(0.95 0.03 236.82)",
          "sidebar-accent-foreground": "oklch(0.38 0.14 265.52)",
          "sidebar-border": "oklch(0.93 0.01 264.53)",
          "sidebar-ring": "oklch(0.62 0.19 259.81)",
          "font-sans": "Inter, sans-serif",
          "font-serif": "Source Serif 4, serif",
          "font-mono": "JetBrains Mono, monospace",
          "shadow-color": "hsl(0 0% 0%)",
          "shadow-opacity": "0.1",
          "shadow-blur": "3px",
          "shadow-spread": "0px",
          "shadow-offset-x": "0",
          "shadow-offset-y": "1px",
          "letter-spacing": "0em",
          "spacing": "0.25rem",
          "shadow-2xs": "0 1px 3px 0px hsl(0 0% 0% / 0.05)",
          "shadow-xs": "0 1px 3px 0px hsl(0 0% 0% / 0.05)",
          "shadow-sm": "0 1px 3px 0px hsl(0 0% 0% / 0.10), 0 1px 2px -1px hsl(0 0% 0% / 0.10)",
          "shadow": "0 1px 3px 0px hsl(0 0% 0% / 0.10), 0 1px 2px -1px hsl(0 0% 0% / 0.10)",
          "shadow-md": "0 1px 3px 0px hsl(0 0% 0% / 0.10), 0 2px 4px -1px hsl(0 0% 0% / 0.10)",
          "shadow-lg": "0 1px 3px 0px hsl(0 0% 0% / 0.10), 0 4px 6px -1px hsl(0 0% 0% / 0.10)",
          "shadow-xl": "0 1px 3px 0px hsl(0 0% 0% / 0.10), 0 8px 10px -1px hsl(0 0% 0% / 0.10)",
          "shadow-2xl": "0 1px 3px 0px hsl(0 0% 0% / 0.25)",
          "tracking-normal": "0em"
        },
        "dark": {
          "background": "oklch(0.20 0 0)",
          "foreground": "oklch(0.92 0 0)",
          "card": "oklch(0.27 0 0)",
          "card-foreground": "oklch(0.92 0 0)",
          "popover": "oklch(0.27 0 0)",
          "popover-foreground": "oklch(0.92 0 0)",
          "primary": "oklch(0.62 0.19 259.81)",
          "primary-foreground": "oklch(1.00 0 0)",
          "secondary": "oklch(0.27 0 0)",
          "secondary-foreground": "oklch(0.92 0 0)",
          "muted": "oklch(0.27 0 0)",
          "muted-foreground": "oklch(0.72 0 0)",
          "accent": "oklch(0.38 0.14 265.52)",
          "accent-foreground": "oklch(0.88 0.06 254.13)",
          "destructive": "oklch(0.64 0.21 25.33)",
          "destructive-foreground": "oklch(1.00 0 0)",
          "border": "oklch(0.37 0 0)",
          "input": "oklch(0.37 0 0)",
          "ring": "oklch(0.62 0.19 259.81)",
          "chart-1": "oklch(0.71 0.14 254.62)",
          "chart-2": "oklch(0.62 0.19 259.81)",
          "chart-3": "oklch(0.55 0.22 262.88)",
          "chart-4": "oklch(0.49 0.22 264.38)",
          "chart-5": "oklch(0.42 0.18 265.64)",
          "radius": "0.375rem",
          "sidebar": "oklch(0.20 0 0)",
          "sidebar-foreground": "oklch(0.92 0 0)",
          "sidebar-primary": "oklch(0.62 0.19 259.81)",
          "sidebar-primary-foreground": "oklch(1.00 0 0)",
          "sidebar-accent": "oklch(0.38 0.14 265.52)",
          "sidebar-accent-foreground": "oklch(0.88 0.06 254.13)",
          "sidebar-border": "oklch(0.37 0 0)",
          "sidebar-ring": "oklch(0.62 0.19 259.81)",
          "font-sans": "Inter, sans-serif",
          "font-serif": "Source Serif 4, serif",
          "font-mono": "JetBrains Mono, monospace",
          "shadow-color": "hsl(0 0% 0%)",
          "shadow-opacity": "0.1",
          "shadow-blur": "3px",
          "shadow-spread": "0px",
          "shadow-offset-x": "0",
          "shadow-offset-y": "1px",
          "letter-spacing": "0em",
          "spacing": "0.25rem",
          "shadow-2xs": "0 1px 3px 0px hsl(0 0% 0% / 0.05)",
          "shadow-xs": "0 1px 3px 0px hsl(0 0% 0% / 0.05)",
          "shadow-sm": "0 1px 3px 0px hsl(0 0% 0% / 0.10), 0 1px 2px -1px hsl(0 0% 0% / 0.10)",
          "shadow": "0 1px 3px 0px hsl(0 0% 0% / 0.10), 0 1px 2px -1px hsl(0 0% 0% / 0.10)",
          "shadow-md": "0 1px 3px 0px hsl(0 0% 0% / 0.10), 0 2px 4px -1px hsl(0 0% 0% / 0.10)",
          "shadow-lg": "0 1px 3px 0px hsl(0 0% 0% / 0.10), 0 4px 6px -1px hsl(0 0% 0% / 0.10)",
          "shadow-xl": "0 1px 3px 0px hsl(0 0% 0% / 0.10), 0 8px 10px -1px hsl(0 0% 0% / 0.10)",
          "shadow-2xl": "0 1px 3px 0px hsl(0 0% 0% / 0.25)"
        }
      }
    },
    {
      "name": "t3-chat",
      "type": "registry:style",
      "title": "T3 Chat",
      "description": "A theme based on the T3 Chat color palette.",
      "css": {
        "@layer base": {
          "body": {
            "letter-spacing": "var(--tracking-normal)"
          }
        }
      },
      "cssVars": {
        "theme": {
          "font-sans": "ui-sans-serif, system-ui, -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial, 'Noto Sans', sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Noto Color Emoji'",
          "font-mono": "ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, \"Liberation Mono\", \"Courier New\", monospace",
          "font-serif": "ui-serif, Georgia, Cambria, \"Times New Roman\", Times, serif",
          "radius": "0.5rem",
          "tracking-tighter": "calc(var(--tracking-normal) - 0.05em)",
          "tracking-tight": "calc(var(--tracking-normal) - 0.025em)",
          "tracking-wide": "calc(var(--tracking-normal) + 0.025em)",
          "tracking-wider": "calc(var(--tracking-normal) + 0.05em)",
          "tracking-widest": "calc(var(--tracking-normal) + 0.1em)"
        },
        "light": {
          "background": "oklch(0.98 0.01 325.64)",
          "foreground": "oklch(0.33 0.12 325.04)",
          "card": "oklch(0.98 0.01 325.64)",
          "card-foreground": "oklch(0.33 0.12 325.04)",
          "popover": "oklch(1.00 0 0)",
          "popover-foreground": "oklch(0.33 0.12 325.04)",
          "primary": "oklch(0.53 0.14 355.20)",
          "primary-foreground": "oklch(1.00 0 0)",
          "secondary": "oklch(0.87 0.07 334.90)",
          "secondary-foreground": "oklch(0.44 0.13 324.80)",
          "muted": "oklch(0.94 0.03 331.55)",
          "muted-foreground": "oklch(0.49 0.12 324.45)",
          "accent": "oklch(0.87 0.07 334.90)",
          "accent-foreground": "oklch(0.44 0.13 324.80)",
          "destructive": "oklch(0.52 0.14 20.83)",
          "destructive-foreground": "oklch(1.00 0 0)",
          "border": "oklch(0.86 0.08 328.91)",
          "input": "oklch(0.85 0.06 336.60)",
          "ring": "oklch(0.59 0.22 0.58)",
          "chart-1": "oklch(0.60 0.24 344.47)",
          "chart-2": "oklch(0.44 0.23 300.62)",
          "chart-3": "oklch(0.38 0.04 226.15)",
          "chart-4": "oklch(0.83 0.12 88.35)",
          "chart-5": "oklch(0.78 0.13 59.00)",
          "radius": "0.5rem",
          "sidebar": "oklch(0.94 0.03 320.58)",
          "sidebar-foreground": "oklch(0.49 0.19 354.54)",
          "sidebar-primary": "oklch(0.40 0.03 285.20)",
          "sidebar-primary-foreground": "oklch(0.97 0.01 337.52)",
          "sidebar-accent": "oklch(0.98 0.00 106.42)",
          "sidebar-accent-foreground": "oklch(0.40 0.03 285.20)",
          "sidebar-border": "oklch(0.94 0.00 48.72)",
          "sidebar-ring": "oklch(0.59 0.22 0.58)",
          "font-sans": "ui-sans-serif, system-ui, -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial, 'Noto Sans', sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Noto Color Emoji'",
          "font-serif": "ui-serif, Georgia, Cambria, \"Times New Roman\", Times, serif",
          "font-mono": "ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, \"Liberation Mono\", \"Courier New\", monospace",
          "shadow-color": "hsl(0 0% 0%)",
          "shadow-opacity": "0.1",
          "shadow-blur": "3px",
          "shadow-spread": "0px",
          "shadow-offset-x": "0",
          "shadow-offset-y": "1px",
          "letter-spacing": "0em",
          "spacing": "0.25rem",
          "shadow-2xs": "0 1px 3px 0px hsl(0 0% 0% / 0.05)",
          "shadow-xs": "0 1px 3px 0px hsl(0 0% 0% / 0.05)",
          "shadow-sm": "0 1px 3px 0px hsl(0 0% 0% / 0.10), 0 1px 2px -1px hsl(0 0% 0% / 0.10)",
          "shadow": "0 1px 3px 0px hsl(0 0% 0% / 0.10), 0 1px 2px -1px hsl(0 0% 0% / 0.10)",
          "shadow-md": "0 1px 3px 0px hsl(0 0% 0% / 0.10), 0 2px 4px -1px hsl(0 0% 0% / 0.10)",
          "shadow-lg": "0 1px 3px 0px hsl(0 0% 0% / 0.10), 0 4px 6px -1px hsl(0 0% 0% / 0.10)",
          "shadow-xl": "0 1px 3px 0px hsl(0 0% 0% / 0.10), 0 8px 10px -1px hsl(0 0% 0% / 0.10)",
          "shadow-2xl": "0 1px 3px 0px hsl(0 0% 0% / 0.25)",
          "tracking-normal": "0em"
        },
        "dark": {
          "background": "oklch(0.24 0.02 307.53)",
          "foreground": "oklch(0.84 0.04 309.54)",
          "card": "oklch(0.28 0.02 307.54)",
          "card-foreground": "oklch(0.85 0.03 341.46)",
          "popover": "oklch(0.15 0.01 338.90)",
          "popover-foreground": "oklch(0.96 0.01 341.80)",
          "primary": "oklch(0.46 0.19 4.10)",
          "primary-foreground": "oklch(0.86 0.06 346.37)",
          "secondary": "oklch(0.31 0.03 310.06)",
          "secondary-foreground": "oklch(0.85 0.04 307.96)",
          "muted": "oklch(0.26 0.02 309.47)",
          "muted-foreground": "oklch(0.79 0.04 307.10)",
          "accent": "oklch(0.36 0.05 308.49)",
          "accent-foreground": "oklch(0.96 0.01 341.80)",
          "destructive": "oklch(0.23 0.05 12.61)",
          "destructive-foreground": "oklch(1.00 0 0)",
          "border": "oklch(0.33 0.02 343.45)",
          "input": "oklch(0.34 0.02 332.83)",
          "ring": "oklch(0.59 0.22 0.58)",
          "chart-1": "oklch(0.53 0.14 355.20)",
          "chart-2": "oklch(0.56 0.19 306.86)",
          "chart-3": "oklch(0.72 0.15 60.58)",
          "chart-4": "oklch(0.62 0.20 312.74)",
          "chart-5": "oklch(0.61 0.21 6.14)",
          "radius": "0.5rem",
          "sidebar": "oklch(0.19 0.02 331.05)",
          "sidebar-foreground": "oklch(0.86 0.03 343.66)",
          "sidebar-primary": "oklch(0.49 0.22 264.38)",
          "sidebar-primary-foreground": "oklch(1.00 0 0)",
          "sidebar-accent": "oklch(0.23 0.03 338.20)",
          "sidebar-accent-foreground": "oklch(0.97 0.00 286.38)",
          "sidebar-border": "oklch(0 0 0)",
          "sidebar-ring": "oklch(0.59 0.22 0.58)",
          "font-sans": "ui-sans-serif, system-ui, -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial, 'Noto Sans', sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Noto Color Emoji'",
          "font-serif": "ui-serif, Georgia, Cambria, \"Times New Roman\", Times, serif",
          "font-mono": "ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, \"Liberation Mono\", \"Courier New\", monospace",
          "shadow-color": "hsl(0 0% 0%)",
          "shadow-opacity": "0.1",
          "shadow-blur": "3px",
          "shadow-spread": "0px",
          "shadow-offset-x": "0",
          "shadow-offset-y": "1px",
          "letter-spacing": "0em",
          "spacing": "0.25rem",
          "shadow-2xs": "0 1px 3px 0px hsl(0 0% 0% / 0.05)",
          "shadow-xs": "0 1px 3px 0px hsl(0 0% 0% / 0.05)",
          "shadow-sm": "0 1px 3px 0px hsl(0 0% 0% / 0.10), 0 1px 2px -1px hsl(0 0% 0% / 0.10)",
          "shadow": "0 1px 3px 0px hsl(0 0% 0% / 0.10), 0 1px 2px -1px hsl(0 0% 0% / 0.10)",
          "shadow-md": "0 1px 3px 0px hsl(0 0% 0% / 0.10), 0 2px 4px -1px hsl(0 0% 0% / 0.10)",
          "shadow-lg": "0 1px 3px 0px hsl(0 0% 0% / 0.10), 0 4px 6px -1px hsl(0 0% 0% / 0.10)",
          "shadow-xl": "0 1px 3px 0px hsl(0 0% 0% / 0.10), 0 8px 10px -1px hsl(0 0% 0% / 0.10)",
          "shadow-2xl": "0 1px 3px 0px hsl(0 0% 0% / 0.25)"
        }
      }
    },
    {
      "name": "twitter",
      "type": "registry:style",
      "title": "Twitter",
      "description": "A theme based on the Twitter color palette.",
      "css": {
        "@layer base": {
          "body": {
            "letter-spacing": "var(--tracking-normal)"
          }
        }
      },
      "cssVars": {
        "theme": {
          "font-sans": "Open Sans, sans-serif",
          "font-mono": "Menlo, monospace",
          "font-serif": "Georgia, serif",
          "radius": "1.3rem",
          "tracking-tighter": "calc(var(--tracking-normal) - 0.05em)",
          "tracking-tight": "calc(var(--tracking-normal) - 0.025em)",
          "tracking-wide": "calc(var(--tracking-normal) + 0.025em)",
          "tracking-wider": "calc(var(--tracking-normal) + 0.05em)",
          "tracking-widest": "calc(var(--tracking-normal) + 0.1em)"
        },
        "light": {
          "background": "oklch(1.00 0 0)",
          "foreground": "oklch(0.19 0.01 248.51)",
          "card": "oklch(0.98 0.00 197.14)",
          "card-foreground": "oklch(0.19 0.01 248.51)",
          "popover": "oklch(1.00 0 0)",
          "popover-foreground": "oklch(0.19 0.01 248.51)",
          "primary": "oklch(0.67 0.16 245.00)",
          "primary-foreground": "oklch(1.00 0 0)",
          "secondary": "oklch(0.19 0.01 248.51)",
          "secondary-foreground": "oklch(1.00 0 0)",
          "muted": "oklch(0.92 0.00 286.37)",
          "muted-foreground": "oklch(0.19 0.01 248.51)",
          "accent": "oklch(0.94 0.02 250.85)",
          "accent-foreground": "oklch(0.67 0.16 245.00)",
          "destructive": "oklch(0.62 0.24 25.77)",
          "destructive-foreground": "oklch(1.00 0 0)",
          "border": "oklch(0.93 0.01 231.66)",
          "input": "oklch(0.98 0.00 228.78)",
          "ring": "oklch(0.68 0.16 243.35)",
          "chart-1": "oklch(0.67 0.16 245.00)",
          "chart-2": "oklch(0.69 0.16 160.35)",
          "chart-3": "oklch(0.82 0.16 82.53)",
          "chart-4": "oklch(0.71 0.18 151.71)",
          "chart-5": "oklch(0.59 0.22 10.58)",
          "radius": "1.3rem",
          "sidebar": "oklch(0.98 0.00 197.14)",
          "sidebar-foreground": "oklch(0.19 0.01 248.51)",
          "sidebar-primary": "oklch(0.67 0.16 245.00)",
          "sidebar-primary-foreground": "oklch(1.00 0 0)",
          "sidebar-accent": "oklch(0.94 0.02 250.85)",
          "sidebar-accent-foreground": "oklch(0.67 0.16 245.00)",
          "sidebar-border": "oklch(0.93 0.01 238.52)",
          "sidebar-ring": "oklch(0.68 0.16 243.35)",
          "font-sans": "Open Sans, sans-serif",
          "font-serif": "Georgia, serif",
          "font-mono": "Menlo, monospace",
          "shadow-color": "rgba(29,161,242,0.15)",
          "shadow-opacity": "0",
          "shadow-blur": "0px",
          "shadow-spread": "0px",
          "shadow-offset-x": "0px",
          "shadow-offset-y": "2px",
          "letter-spacing": "0em",
          "spacing": "0.25rem",
          "shadow-2xs": "0px 2px 0px 0px hsl(202.82 89.12% 53.14% / 0.00)",
          "shadow-xs": "0px 2px 0px 0px hsl(202.82 89.12% 53.14% / 0.00)",
          "shadow-sm": "0px 2px 0px 0px hsl(202.82 89.12% 53.14% / 0.00), 0px 1px 2px -1px hsl(202.82 89.12% 53.14% / 0.00)",
          "shadow": "0px 2px 0px 0px hsl(202.82 89.12% 53.14% / 0.00), 0px 1px 2px -1px hsl(202.82 89.12% 53.14% / 0.00)",
          "shadow-md": "0px 2px 0px 0px hsl(202.82 89.12% 53.14% / 0.00), 0px 2px 4px -1px hsl(202.82 89.12% 53.14% / 0.00)",
          "shadow-lg": "0px 2px 0px 0px hsl(202.82 89.12% 53.14% / 0.00), 0px 4px 6px -1px hsl(202.82 89.12% 53.14% / 0.00)",
          "shadow-xl": "0px 2px 0px 0px hsl(202.82 89.12% 53.14% / 0.00), 0px 8px 10px -1px hsl(202.82 89.12% 53.14% / 0.00)",
          "shadow-2xl": "0px 2px 0px 0px hsl(202.82 89.12% 53.14% / 0.00)",
          "tracking-normal": "0em"
        },
        "dark": {
          "background": "oklch(0 0 0)",
          "foreground": "oklch(0.93 0.00 228.79)",
          "card": "oklch(0.21 0.01 274.53)",
          "card-foreground": "oklch(0.89 0 0)",
          "popover": "oklch(0 0 0)",
          "popover-foreground": "oklch(0.93 0.00 228.79)",
          "primary": "oklch(0.67 0.16 245.01)",
          "primary-foreground": "oklch(1.00 0 0)",
          "secondary": "oklch(0.96 0.00 219.53)",
          "secondary-foreground": "oklch(0.19 0.01 248.51)",
          "muted": "oklch(0.21 0 0)",
          "muted-foreground": "oklch(0.56 0.01 247.97)",
          "accent": "oklch(0.19 0.03 242.55)",
          "accent-foreground": "oklch(0.67 0.16 245.01)",
          "destructive": "oklch(0.62 0.24 25.77)",
          "destructive-foreground": "oklch(1.00 0 0)",
          "border": "oklch(0.27 0.00 248.00)",
          "input": "oklch(0.30 0.03 244.82)",
          "ring": "oklch(0.68 0.16 243.35)",
          "chart-1": "oklch(0.67 0.16 245.00)",
          "chart-2": "oklch(0.69 0.16 160.35)",
          "chart-3": "oklch(0.82 0.16 82.53)",
          "chart-4": "oklch(0.71 0.18 151.71)",
          "chart-5": "oklch(0.59 0.22 10.58)",
          "radius": "1.3rem",
          "sidebar": "oklch(0.21 0.01 274.53)",
          "sidebar-foreground": "oklch(0.89 0 0)",
          "sidebar-primary": "oklch(0.68 0.16 243.35)",
          "sidebar-primary-foreground": "oklch(1.00 0 0)",
          "sidebar-accent": "oklch(0.19 0.03 242.55)",
          "sidebar-accent-foreground": "oklch(0.67 0.16 245.01)",
          "sidebar-border": "oklch(0.38 0.02 240.59)",
          "sidebar-ring": "oklch(0.68 0.16 243.35)",
          "font-sans": "Open Sans, sans-serif",
          "font-serif": "Georgia, serif",
          "font-mono": "Menlo, monospace",
          "shadow-color": "rgba(29,161,242,0.25)",
          "shadow-opacity": "0",
          "shadow-blur": "0px",
          "shadow-spread": "0px",
          "shadow-offset-x": "0px",
          "shadow-offset-y": "2px",
          "letter-spacing": "0em",
          "spacing": "0.25rem",
          "shadow-2xs": "0px 2px 0px 0px hsl(202.82 89.12% 53.14% / 0.00)",
          "shadow-xs": "0px 2px 0px 0px hsl(202.82 89.12% 53.14% / 0.00)",
          "shadow-sm": "0px 2px 0px 0px hsl(202.82 89.12% 53.14% / 0.00), 0px 1px 2px -1px hsl(202.82 89.12% 53.14% / 0.00)",
          "shadow": "0px 2px 0px 0px hsl(202.82 89.12% 53.14% / 0.00), 0px 1px 2px -1px hsl(202.82 89.12% 53.14% / 0.00)",
          "shadow-md": "0px 2px 0px 0px hsl(202.82 89.12% 53.14% / 0.00), 0px 2px 4px -1px hsl(202.82 89.12% 53.14% / 0.00)",
          "shadow-lg": "0px 2px 0px 0px hsl(202.82 89.12% 53.14% / 0.00), 0px 4px 6px -1px hsl(202.82 89.12% 53.14% / 0.00)",
          "shadow-xl": "0px 2px 0px 0px hsl(202.82 89.12% 53.14% / 0.00), 0px 8px 10px -1px hsl(202.82 89.12% 53.14% / 0.00)",
          "shadow-2xl": "0px 2px 0px 0px hsl(202.82 89.12% 53.14% / 0.00)"
        }
      }
    },
    {
      "name": "mocha-mousse",
      "type": "registry:style",
      "title": "Mocha Mousse",
      "description": "A theme based on the Mocha Mousse color palette.",
      "css": {
        "@layer base": {
          "body": {
            "letter-spacing": "var(--tracking-normal)"
          }
        }
      },
      "cssVars": {
        "theme": {
          "font-sans": "DM Sans, sans-serif",
          "font-mono": "Menlo, monospace",
          "font-serif": "Georgia, serif",
          "radius": "0.5rem",
          "tracking-tighter": "calc(var(--tracking-normal) - 0.05em)",
          "tracking-tight": "calc(var(--tracking-normal) - 0.025em)",
          "tracking-wide": "calc(var(--tracking-normal) + 0.025em)",
          "tracking-wider": "calc(var(--tracking-normal) + 0.05em)",
          "tracking-widest": "calc(var(--tracking-normal) + 0.1em)"
        },
        "light": {
          "background": "oklch(0.95 0.01 102.46)",
          "foreground": "oklch(0.41 0.03 40.36)",
          "card": "oklch(0.95 0.01 102.46)",
          "card-foreground": "oklch(0.41 0.03 40.36)",
          "popover": "oklch(1.00 0 0)",
          "popover-foreground": "oklch(0.41 0.03 40.36)",
          "primary": "oklch(0.61 0.06 44.36)",
          "primary-foreground": "oklch(1.00 0 0)",
          "secondary": "oklch(0.75 0.04 80.55)",
          "secondary-foreground": "oklch(1.00 0 0)",
          "muted": "oklch(0.85 0.04 49.09)",
          "muted-foreground": "oklch(0.54 0.05 37.21)",
          "accent": "oklch(0.85 0.04 49.09)",
          "accent-foreground": "oklch(0.41 0.03 40.36)",
          "destructive": "oklch(0.22 0.01 52.96)",
          "destructive-foreground": "oklch(1.00 0 0)",
          "border": "oklch(0.75 0.04 80.55)",
          "input": "oklch(0.75 0.04 80.55)",
          "ring": "oklch(0.61 0.06 44.36)",
          "chart-1": "oklch(0.61 0.06 44.36)",
          "chart-2": "oklch(0.54 0.05 37.21)",
          "chart-3": "oklch(0.73 0.05 52.33)",
          "chart-4": "oklch(0.75 0.04 80.55)",
          "chart-5": "oklch(0.64 0.04 52.39)",
          "radius": "0.5rem",
          "sidebar": "oklch(0.89 0.03 49.57)",
          "sidebar-foreground": "oklch(0.41 0.03 40.36)",
          "sidebar-primary": "oklch(0.61 0.06 44.36)",
          "sidebar-primary-foreground": "oklch(1.00 0 0)",
          "sidebar-accent": "oklch(0.73 0.05 52.33)",
          "sidebar-accent-foreground": "oklch(1.00 0 0)",
          "sidebar-border": "oklch(0.64 0.04 52.39)",
          "sidebar-ring": "oklch(0.61 0.06 44.36)",
          "font-sans": "DM Sans, sans-serif",
          "font-serif": "Georgia, serif",
          "font-mono": "Menlo, monospace",
          "shadow-color": "hsl(20 18% 51% / 0.4)",
          "shadow-opacity": "0.11",
          "shadow-blur": "0px",
          "shadow-spread": "0px",
          "shadow-offset-x": "2px",
          "shadow-offset-y": "2px",
          "letter-spacing": "0em",
          "spacing": "0.25rem",
          "shadow-2xs": "2px 2px 0px 0px hsl(20 18% 51% / 0.06)",
          "shadow-xs": "2px 2px 0px 0px hsl(20 18% 51% / 0.06)",
          "shadow-sm": "2px 2px 0px 0px hsl(20 18% 51% / 0.11), 2px 1px 2px -1px hsl(20 18% 51% / 0.11)",
          "shadow": "2px 2px 0px 0px hsl(20 18% 51% / 0.11), 2px 1px 2px -1px hsl(20 18% 51% / 0.11)",
          "shadow-md": "2px 2px 0px 0px hsl(20 18% 51% / 0.11), 2px 2px 4px -1px hsl(20 18% 51% / 0.11)",
          "shadow-lg": "2px 2px 0px 0px hsl(20 18% 51% / 0.11), 2px 4px 6px -1px hsl(20 18% 51% / 0.11)",
          "shadow-xl": "2px 2px 0px 0px hsl(20 18% 51% / 0.11), 2px 8px 10px -1px hsl(20 18% 51% / 0.11)",
          "shadow-2xl": "2px 2px 0px 0px hsl(20 18% 51% / 0.28)",
          "tracking-normal": "0em"
        },
        "dark": {
          "background": "oklch(0.27 0.01 48.18)",
          "foreground": "oklch(0.95 0.01 102.46)",
          "card": "oklch(0.33 0.02 50.89)",
          "card-foreground": "oklch(0.95 0.01 102.46)",
          "popover": "oklch(0.33 0.02 50.89)",
          "popover-foreground": "oklch(0.95 0.01 102.46)",
          "primary": "oklch(0.73 0.05 52.33)",
          "primary-foreground": "oklch(0.27 0.01 48.18)",
          "secondary": "oklch(0.54 0.05 37.21)",
          "secondary-foreground": "oklch(0.95 0.01 102.46)",
          "muted": "oklch(0.41 0.03 40.36)",
          "muted-foreground": "oklch(0.76 0.04 50.86)",
          "accent": "oklch(0.75 0.04 80.55)",
          "accent-foreground": "oklch(0.27 0.01 48.18)",
          "destructive": "oklch(0.69 0.14 21.46)",
          "destructive-foreground": "oklch(0.27 0.01 48.18)",
          "border": "oklch(0.41 0.03 40.36)",
          "input": "oklch(0.41 0.03 40.36)",
          "ring": "oklch(0.73 0.05 52.33)",
          "chart-1": "oklch(0.73 0.05 52.33)",
          "chart-2": "oklch(0.75 0.04 80.55)",
          "chart-3": "oklch(0.61 0.06 44.36)",
          "chart-4": "oklch(0.54 0.05 37.21)",
          "chart-5": "oklch(0.64 0.04 52.39)",
          "radius": "0.5rem",
          "sidebar": "oklch(0.22 0.01 52.96)",
          "sidebar-foreground": "oklch(0.95 0.01 102.46)",
          "sidebar-primary": "oklch(0.73 0.05 52.33)",
          "sidebar-primary-foreground": "oklch(0.22 0.01 52.96)",
          "sidebar-accent": "oklch(0.75 0.04 80.55)",
          "sidebar-accent-foreground": "oklch(0.22 0.01 52.96)",
          "sidebar-border": "oklch(0.41 0.03 40.36)",
          "sidebar-ring": "oklch(0.73 0.05 52.33)",
          "font-sans": "DM Sans, sans-serif",
          "font-serif": "Georgia, serif",
          "font-mono": "Menlo, monospace",
          "shadow-color": "hsl(20 18% 30% / 0.5)",
          "shadow-opacity": "0.11",
          "shadow-blur": "0px",
          "shadow-spread": "0px",
          "shadow-offset-x": "2px",
          "shadow-offset-y": "2px",
          "letter-spacing": "0em",
          "spacing": "0.25rem",
          "shadow-2xs": "2px 2px 0px 0px hsl(20 18% 30% / 0.06)",
          "shadow-xs": "2px 2px 0px 0px hsl(20 18% 30% / 0.06)",
          "shadow-sm": "2px 2px 0px 0px hsl(20 18% 30% / 0.11), 2px 1px 2px -1px hsl(20 18% 30% / 0.11)",
          "shadow": "2px 2px 0px 0px hsl(20 18% 30% / 0.11), 2px 1px 2px -1px hsl(20 18% 30% / 0.11)",
          "shadow-md": "2px 2px 0px 0px hsl(20 18% 30% / 0.11), 2px 2px 4px -1px hsl(20 18% 30% / 0.11)",
          "shadow-lg": "2px 2px 0px 0px hsl(20 18% 30% / 0.11), 2px 4px 6px -1px hsl(20 18% 30% / 0.11)",
          "shadow-xl": "2px 2px 0px 0px hsl(20 18% 30% / 0.11), 2px 8px 10px -1px hsl(20 18% 30% / 0.11)",
          "shadow-2xl": "2px 2px 0px 0px hsl(20 18% 30% / 0.28)"
        }
      }
    },
    {
      "name": "bubblegum",
      "type": "registry:style",
      "title": "Bubblegum",
      "description": "A theme based on the Bubblegum color palette.",
      "css": {
        "@layer base": {
          "body": {
            "letter-spacing": "var(--tracking-normal)"
          }
        }
      },
      "cssVars": {
        "theme": {
          "font-sans": "Poppins, sans-serif",
          "font-mono": "Fira Code, monospace",
          "font-serif": "Lora, serif",
          "radius": "0.4rem",
          "tracking-tighter": "calc(var(--tracking-normal) - 0.05em)",
          "tracking-tight": "calc(var(--tracking-normal) - 0.025em)",
          "tracking-wide": "calc(var(--tracking-normal) + 0.025em)",
          "tracking-wider": "calc(var(--tracking-normal) + 0.05em)",
          "tracking-widest": "calc(var(--tracking-normal) + 0.1em)"
        },
        "light": {
          "background": "oklch(0.94 0.02 345.70)",
          "foreground": "oklch(0.47 0 0)",
          "card": "oklch(0.95 0.05 86.89)",
          "card-foreground": "oklch(0.47 0 0)",
          "popover": "oklch(1.00 0 0)",
          "popover-foreground": "oklch(0.47 0 0)",
          "primary": "oklch(0.62 0.18 348.14)",
          "primary-foreground": "oklch(1.00 0 0)",
          "secondary": "oklch(0.81 0.07 198.19)",
          "secondary-foreground": "oklch(0.32 0 0)",
          "muted": "oklch(0.88 0.05 212.10)",
          "muted-foreground": "oklch(0.58 0 0)",
          "accent": "oklch(0.92 0.08 87.67)",
          "accent-foreground": "oklch(0.32 0 0)",
          "destructive": "oklch(0.71 0.17 21.96)",
          "destructive-foreground": "oklch(1.00 0 0)",
          "border": "oklch(0.62 0.18 348.14)",
          "input": "oklch(0.92 0 0)",
          "ring": "oklch(0.70 0.16 350.75)",
          "chart-1": "oklch(0.70 0.16 350.75)",
          "chart-2": "oklch(0.82 0.08 212.09)",
          "chart-3": "oklch(0.92 0.08 87.67)",
          "chart-4": "oklch(0.80 0.11 348.18)",
          "chart-5": "oklch(0.62 0.19 353.91)",
          "radius": "0.4rem",
          "sidebar": "oklch(0.91 0.04 343.09)",
          "sidebar-foreground": "oklch(0.32 0 0)",
          "sidebar-primary": "oklch(0.66 0.21 354.31)",
          "sidebar-primary-foreground": "oklch(1.00 0 0)",
          "sidebar-accent": "oklch(0.82 0.11 346.02)",
          "sidebar-accent-foreground": "oklch(0.32 0 0)",
          "sidebar-border": "oklch(0.95 0.03 307.17)",
          "sidebar-ring": "oklch(0.66 0.21 354.31)",
          "font-sans": "Poppins, sans-serif",
          "font-serif": "Lora, serif",
          "font-mono": "Fira Code, monospace",
          "shadow-color": "hsl(325.78 58.18% 56.86% / 0.5)",
          "shadow-opacity": "1.0",
          "shadow-blur": "0px",
          "shadow-spread": "0px",
          "shadow-offset-x": "3px",
          "shadow-offset-y": "3px",
          "letter-spacing": "0em",
          "spacing": "0.25rem",
          "shadow-2xs": "3px 3px 0px 0px hsl(325.78 58.18% 56.86% / 0.50)",
          "shadow-xs": "3px 3px 0px 0px hsl(325.78 58.18% 56.86% / 0.50)",
          "shadow-sm": "3px 3px 0px 0px hsl(325.78 58.18% 56.86% / 1.00), 3px 1px 2px -1px hsl(325.78 58.18% 56.86% / 1.00)",
          "shadow": "3px 3px 0px 0px hsl(325.78 58.18% 56.86% / 1.00), 3px 1px 2px -1px hsl(325.78 58.18% 56.86% / 1.00)",
          "shadow-md": "3px 3px 0px 0px hsl(325.78 58.18% 56.86% / 1.00), 3px 2px 4px -1px hsl(325.78 58.18% 56.86% / 1.00)",
          "shadow-lg": "3px 3px 0px 0px hsl(325.78 58.18% 56.86% / 1.00), 3px 4px 6px -1px hsl(325.78 58.18% 56.86% / 1.00)",
          "shadow-xl": "3px 3px 0px 0px hsl(325.78 58.18% 56.86% / 1.00), 3px 8px 10px -1px hsl(325.78 58.18% 56.86% / 1.00)",
          "shadow-2xl": "3px 3px 0px 0px hsl(325.78 58.18% 56.86% / 2.50)",
          "tracking-normal": "0em"
        },
        "dark": {
          "background": "oklch(0.25 0.03 234.16)",
          "foreground": "oklch(0.93 0.02 349.08)",
          "card": "oklch(0.29 0.03 233.54)",
          "card-foreground": "oklch(0.93 0.02 349.08)",
          "popover": "oklch(0.29 0.03 233.54)",
          "popover-foreground": "oklch(0.93 0.02 349.08)",
          "primary": "oklch(0.92 0.08 87.67)",
          "primary-foreground": "oklch(0.25 0.03 234.16)",
          "secondary": "oklch(0.78 0.08 4.13)",
          "secondary-foreground": "oklch(0.25 0.03 234.16)",
          "muted": "oklch(0.27 0.01 255.58)",
          "muted-foreground": "oklch(0.78 0.08 4.13)",
          "accent": "oklch(0.67 0.10 356.98)",
          "accent-foreground": "oklch(0.93 0.02 349.08)",
          "destructive": "oklch(0.67 0.18 350.36)",
          "destructive-foreground": "oklch(0.25 0.03 234.16)",
          "border": "oklch(0.39 0.04 242.22)",
          "input": "oklch(0.31 0.03 232.00)",
          "ring": "oklch(0.70 0.09 201.87)",
          "chart-1": "oklch(0.70 0.09 201.87)",
          "chart-2": "oklch(0.78 0.08 4.13)",
          "chart-3": "oklch(0.67 0.10 356.98)",
          "chart-4": "oklch(0.44 0.07 217.08)",
          "chart-5": "oklch(0.27 0.01 255.58)",
          "radius": "0.4rem",
          "sidebar": "oklch(0.23 0.03 235.97)",
          "sidebar-foreground": "oklch(0.97 0.00 264.54)",
          "sidebar-primary": "oklch(0.66 0.21 354.31)",
          "sidebar-primary-foreground": "oklch(1.00 0 0)",
          "sidebar-accent": "oklch(0.82 0.11 346.02)",
          "sidebar-accent-foreground": "oklch(0.28 0.03 256.85)",
          "sidebar-border": "oklch(0.37 0.03 259.73)",
          "sidebar-ring": "oklch(0.66 0.21 354.31)",
          "font-sans": "Poppins, sans-serif",
          "font-serif": "Lora, serif",
          "font-mono": "Fira Code, monospace",
          "shadow-color": "#324859",
          "shadow-opacity": "1.0",
          "shadow-blur": "0px",
          "shadow-spread": "0px",
          "shadow-offset-x": "3px",
          "shadow-offset-y": "3px",
          "letter-spacing": "0em",
          "spacing": "0.25rem",
          "shadow-2xs": "3px 3px 0px 0px hsl(206.15 28.06% 27.25% / 0.50)",
          "shadow-xs": "3px 3px 0px 0px hsl(206.15 28.06% 27.25% / 0.50)",
          "shadow-sm": "3px 3px 0px 0px hsl(206.15 28.06% 27.25% / 1.00), 3px 1px 2px -1px hsl(206.15 28.06% 27.25% / 1.00)",
          "shadow": "3px 3px 0px 0px hsl(206.15 28.06% 27.25% / 1.00), 3px 1px 2px -1px hsl(206.15 28.06% 27.25% / 1.00)",
          "shadow-md": "3px 3px 0px 0px hsl(206.15 28.06% 27.25% / 1.00), 3px 2px 4px -1px hsl(206.15 28.06% 27.25% / 1.00)",
          "shadow-lg": "3px 3px 0px 0px hsl(206.15 28.06% 27.25% / 1.00), 3px 4px 6px -1px hsl(206.15 28.06% 27.25% / 1.00)",
          "shadow-xl": "3px 3px 0px 0px hsl(206.15 28.06% 27.25% / 1.00), 3px 8px 10px -1px hsl(206.15 28.06% 27.25% / 1.00)",
          "shadow-2xl": "3px 3px 0px 0px hsl(206.15 28.06% 27.25% / 2.50)"
        }
      }
    },
    {
      "name": "amethyst-haze",
      "type": "registry:style",
      "title": "Amethyst Haze",
      "description": "A theme based on the Amethyst Haze color palette.",
      "css": {
        "@layer base": {
          "body": {
            "letter-spacing": "var(--tracking-normal)"
          }
        }
      },
      "cssVars": {
        "theme": {
          "font-sans": "Geist, sans-serif",
          "font-mono": "\"Fira Code\", \"Courier New\", monospace",
          "font-serif": "\"Lora\", Georgia, serif",
          "radius": "0.5rem",
          "tracking-tighter": "calc(var(--tracking-normal) - 0.05em)",
          "tracking-tight": "calc(var(--tracking-normal) - 0.025em)",
          "tracking-wide": "calc(var(--tracking-normal) + 0.025em)",
          "tracking-wider": "calc(var(--tracking-normal) + 0.05em)",
          "tracking-widest": "calc(var(--tracking-normal) + 0.1em)"
        },
        "light": {
          "background": "oklch(0.98 0.00 301.43)",
          "foreground": "oklch(0.37 0.03 287.08)",
          "card": "oklch(1.00 0 0)",
          "card-foreground": "oklch(0.37 0.03 287.08)",
          "popover": "oklch(1.00 0 0)",
          "popover-foreground": "oklch(0.37 0.03 287.08)",
          "primary": "oklch(0.61 0.08 299.73)",
          "primary-foreground": "oklch(0.98 0.00 301.43)",
          "secondary": "oklch(0.90 0.03 300.24)",
          "secondary-foreground": "oklch(0.37 0.03 287.08)",
          "muted": "oklch(0.89 0.01 299.78)",
          "muted-foreground": "oklch(0.53 0.04 290.79)",
          "accent": "oklch(0.79 0.08 359.94)",
          "accent-foreground": "oklch(0.34 0.04 1.76)",
          "destructive": "oklch(0.63 0.16 22.67)",
          "destructive-foreground": "oklch(0.98 0.00 301.43)",
          "border": "oklch(0.84 0.02 300.14)",
          "input": "oklch(0.93 0.01 301.28)",
          "ring": "oklch(0.61 0.08 299.73)",
          "chart-1": "oklch(0.61 0.08 299.73)",
          "chart-2": "oklch(0.79 0.08 359.94)",
          "chart-3": "oklch(0.73 0.07 169.87)",
          "chart-4": "oklch(0.85 0.09 76.83)",
          "chart-5": "oklch(0.79 0.06 258.08)",
          "radius": "0.5rem",
          "sidebar": "oklch(0.96 0.01 301.35)",
          "sidebar-foreground": "oklch(0.37 0.03 287.08)",
          "sidebar-primary": "oklch(0.61 0.08 299.73)",
          "sidebar-primary-foreground": "oklch(0.98 0.00 301.43)",
          "sidebar-accent": "oklch(0.79 0.08 359.94)",
          "sidebar-accent-foreground": "oklch(0.34 0.04 1.76)",
          "sidebar-border": "oklch(0.87 0.02 302.17)",
          "sidebar-ring": "oklch(0.61 0.08 299.73)",
          "font-sans": "Geist, sans-serif",
          "font-serif": "\"Lora\", Georgia, serif",
          "font-mono": "\"Fira Code\", \"Courier New\", monospace",
          "shadow-color": "hsl(0 0% 0%)",
          "shadow-opacity": "0.06",
          "shadow-blur": "5px",
          "shadow-spread": "1px",
          "shadow-offset-x": "1px",
          "shadow-offset-y": "2px",
          "letter-spacing": "0em",
          "spacing": "0.25rem",
          "shadow-2xs": "1px 2px 5px 1px hsl(0 0% 0% / 0.03)",
          "shadow-xs": "1px 2px 5px 1px hsl(0 0% 0% / 0.03)",
          "shadow-sm": "1px 2px 5px 1px hsl(0 0% 0% / 0.06), 1px 1px 2px 0px hsl(0 0% 0% / 0.06)",
          "shadow": "1px 2px 5px 1px hsl(0 0% 0% / 0.06), 1px 1px 2px 0px hsl(0 0% 0% / 0.06)",
          "shadow-md": "1px 2px 5px 1px hsl(0 0% 0% / 0.06), 1px 2px 4px 0px hsl(0 0% 0% / 0.06)",
          "shadow-lg": "1px 2px 5px 1px hsl(0 0% 0% / 0.06), 1px 4px 6px 0px hsl(0 0% 0% / 0.06)",
          "shadow-xl": "1px 2px 5px 1px hsl(0 0% 0% / 0.06), 1px 8px 10px 0px hsl(0 0% 0% / 0.06)",
          "shadow-2xl": "1px 2px 5px 1px hsl(0 0% 0% / 0.15)",
          "tracking-normal": "0em"
        },
        "dark": {
          "background": "oklch(0.22 0.02 292.85)",
          "foreground": "oklch(0.91 0.02 293.56)",
          "card": "oklch(0.25 0.03 292.73)",
          "card-foreground": "oklch(0.91 0.02 293.56)",
          "popover": "oklch(0.25 0.03 292.73)",
          "popover-foreground": "oklch(0.91 0.02 293.56)",
          "primary": "oklch(0.71 0.08 302.05)",
          "primary-foreground": "oklch(0.22 0.02 292.85)",
          "secondary": "oklch(0.46 0.05 295.56)",
          "secondary-foreground": "oklch(0.91 0.02 293.56)",
          "muted": "oklch(0.26 0.03 294.84)",
          "muted-foreground": "oklch(0.70 0.03 300.06)",
          "accent": "oklch(0.32 0.03 308.61)",
          "accent-foreground": "oklch(0.84 0.07 2.67)",
          "destructive": "oklch(0.69 0.14 21.46)",
          "destructive-foreground": "oklch(0.22 0.02 292.85)",
          "border": "oklch(0.31 0.04 293.34)",
          "input": "oklch(0.28 0.03 291.27)",
          "ring": "oklch(0.71 0.08 302.05)",
          "chart-1": "oklch(0.71 0.08 302.05)",
          "chart-2": "oklch(0.84 0.07 2.67)",
          "chart-3": "oklch(0.73 0.07 169.87)",
          "chart-4": "oklch(0.85 0.09 76.83)",
          "chart-5": "oklch(0.79 0.06 258.08)",
          "radius": "0.5rem",
          "sidebar": "oklch(0.20 0.02 293.66)",
          "sidebar-foreground": "oklch(0.91 0.02 293.56)",
          "sidebar-primary": "oklch(0.71 0.08 302.05)",
          "sidebar-primary-foreground": "oklch(0.22 0.02 292.85)",
          "sidebar-accent": "oklch(0.32 0.03 308.61)",
          "sidebar-accent-foreground": "oklch(0.84 0.07 2.67)",
          "sidebar-border": "oklch(0.28 0.03 291.27)",
          "sidebar-ring": "oklch(0.71 0.08 302.05)",
          "font-sans": "Geist, sans-serif",
          "font-serif": "\"Lora\", Georgia, serif",
          "font-mono": "\"Fira Code\", \"Courier New\", monospace",
          "shadow-color": "hsl(0 0% 0%)",
          "shadow-opacity": "0.06",
          "shadow-blur": "5px",
          "shadow-spread": "1px",
          "shadow-offset-x": "1px",
          "shadow-offset-y": "2px",
          "letter-spacing": "0em",
          "spacing": "0.25rem",
          "shadow-2xs": "1px 2px 5px 1px hsl(0 0% 0% / 0.03)",
          "shadow-xs": "1px 2px 5px 1px hsl(0 0% 0% / 0.03)",
          "shadow-sm": "1px 2px 5px 1px hsl(0 0% 0% / 0.06), 1px 1px 2px 0px hsl(0 0% 0% / 0.06)",
          "shadow": "1px 2px 5px 1px hsl(0 0% 0% / 0.06), 1px 1px 2px 0px hsl(0 0% 0% / 0.06)",
          "shadow-md": "1px 2px 5px 1px hsl(0 0% 0% / 0.06), 1px 2px 4px 0px hsl(0 0% 0% / 0.06)",
          "shadow-lg": "1px 2px 5px 1px hsl(0 0% 0% / 0.06), 1px 4px 6px 0px hsl(0 0% 0% / 0.06)",
          "shadow-xl": "1px 2px 5px 1px hsl(0 0% 0% / 0.06), 1px 8px 10px 0px hsl(0 0% 0% / 0.06)",
          "shadow-2xl": "1px 2px 5px 1px hsl(0 0% 0% / 0.15)"
        }
      }
    },
    {
      "name": "doom-64",
      "type": "registry:style",
      "title": "Doom 64",
      "description": "A theme based on the Doom 64 color palette.",
      "css": {
        "@layer base": {
          "body": {
            "letter-spacing": "var(--tracking-normal)"
          }
        }
      },
      "cssVars": {
        "theme": {
          "font-sans": "\"Oxanium\", sans-serif",
          "font-mono": "\"Source Code Pro\", monospace",
          "font-serif": "ui-serif, Georgia, Cambria, \"Times New Roman\", Times, serif",
          "radius": "0px",
          "tracking-tighter": "calc(var(--tracking-normal) - 0.05em)",
          "tracking-tight": "calc(var(--tracking-normal) - 0.025em)",
          "tracking-wide": "calc(var(--tracking-normal) + 0.025em)",
          "tracking-wider": "calc(var(--tracking-normal) + 0.05em)",
          "tracking-widest": "calc(var(--tracking-normal) + 0.1em)"
        },
        "light": {
          "background": "oklch(0.85 0 0)",
          "foreground": "oklch(0.24 0 0)",
          "card": "oklch(0.76 0 0)",
          "card-foreground": "oklch(0.24 0 0)",
          "popover": "oklch(0.76 0 0)",
          "popover-foreground": "oklch(0.24 0 0)",
          "primary": "oklch(0.50 0.19 27.48)",
          "primary-foreground": "oklch(1.00 0 0)",
          "secondary": "oklch(0.50 0.09 126.19)",
          "secondary-foreground": "oklch(1.00 0 0)",
          "muted": "oklch(0.78 0 0)",
          "muted-foreground": "oklch(0.41 0 0)",
          "accent": "oklch(0.59 0.10 245.74)",
          "accent-foreground": "oklch(1.00 0 0)",
          "destructive": "oklch(0.71 0.20 46.46)",
          "destructive-foreground": "oklch(0 0 0)",
          "border": "oklch(0.43 0 0)",
          "input": "oklch(0.43 0 0)",
          "ring": "oklch(0.50 0.19 27.48)",
          "chart-1": "oklch(0.50 0.19 27.48)",
          "chart-2": "oklch(0.50 0.09 126.19)",
          "chart-3": "oklch(0.59 0.10 245.74)",
          "chart-4": "oklch(0.71 0.20 46.46)",
          "chart-5": "oklch(0.57 0.04 40.43)",
          "radius": "0px",
          "sidebar": "oklch(0.76 0 0)",
          "sidebar-foreground": "oklch(0.24 0 0)",
          "sidebar-primary": "oklch(0.50 0.19 27.48)",
          "sidebar-primary-foreground": "oklch(1.00 0 0)",
          "sidebar-accent": "oklch(0.59 0.10 245.74)",
          "sidebar-accent-foreground": "oklch(1.00 0 0)",
          "sidebar-border": "oklch(0.43 0 0)",
          "sidebar-ring": "oklch(0.50 0.19 27.48)",
          "font-sans": "\"Oxanium\", sans-serif",
          "font-serif": "ui-serif, Georgia, Cambria, \"Times New Roman\", Times, serif",
          "font-mono": "\"Source Code Pro\", monospace",
          "shadow-color": "hsl(0 0% 0%)",
          "shadow-opacity": "0.4",
          "shadow-blur": "4px",
          "shadow-spread": "0px",
          "shadow-offset-x": "0px",
          "shadow-offset-y": "2px",
          "letter-spacing": "0em",
          "spacing": "0.25rem",
          "shadow-2xs": "0px 2px 4px 0px hsl(0 0% 0% / 0.20)",
          "shadow-xs": "0px 2px 4px 0px hsl(0 0% 0% / 0.20)",
          "shadow-sm": "0px 2px 4px 0px hsl(0 0% 0% / 0.40), 0px 1px 2px -1px hsl(0 0% 0% / 0.40)",
          "shadow": "0px 2px 4px 0px hsl(0 0% 0% / 0.40), 0px 1px 2px -1px hsl(0 0% 0% / 0.40)",
          "shadow-md": "0px 2px 4px 0px hsl(0 0% 0% / 0.40), 0px 2px 4px -1px hsl(0 0% 0% / 0.40)",
          "shadow-lg": "0px 2px 4px 0px hsl(0 0% 0% / 0.40), 0px 4px 6px -1px hsl(0 0% 0% / 0.40)",
          "shadow-xl": "0px 2px 4px 0px hsl(0 0% 0% / 0.40), 0px 8px 10px -1px hsl(0 0% 0% / 0.40)",
          "shadow-2xl": "0px 2px 4px 0px hsl(0 0% 0% / 1.00)",
          "tracking-normal": "0em"
        },
        "dark": {
          "background": "oklch(0.22 0 0)",
          "foreground": "oklch(0.91 0 0)",
          "card": "oklch(0.29 0 0)",
          "card-foreground": "oklch(0.91 0 0)",
          "popover": "oklch(0.29 0 0)",
          "popover-foreground": "oklch(0.91 0 0)",
          "primary": "oklch(0.61 0.21 27.03)",
          "primary-foreground": "oklch(1.00 0 0)",
          "secondary": "oklch(0.64 0.15 133.01)",
          "secondary-foreground": "oklch(0 0 0)",
          "muted": "oklch(0.26 0 0)",
          "muted-foreground": "oklch(0.71 0 0)",
          "accent": "oklch(0.75 0.12 244.75)",
          "accent-foreground": "oklch(0 0 0)",
          "destructive": "oklch(0.78 0.17 68.09)",
          "destructive-foreground": "oklch(0 0 0)",
          "border": "oklch(0.41 0 0)",
          "input": "oklch(0.41 0 0)",
          "ring": "oklch(0.61 0.21 27.03)",
          "chart-1": "oklch(0.61 0.21 27.03)",
          "chart-2": "oklch(0.64 0.15 133.01)",
          "chart-3": "oklch(0.75 0.12 244.75)",
          "chart-4": "oklch(0.78 0.17 68.09)",
          "chart-5": "oklch(0.65 0.03 40.80)",
          "radius": "0px",
          "sidebar": "oklch(0.19 0 0)",
          "sidebar-foreground": "oklch(0.91 0 0)",
          "sidebar-primary": "oklch(0.61 0.21 27.03)",
          "sidebar-primary-foreground": "oklch(1.00 0 0)",
          "sidebar-accent": "oklch(0.75 0.12 244.75)",
          "sidebar-accent-foreground": "oklch(0 0 0)",
          "sidebar-border": "oklch(0.41 0 0)",
          "sidebar-ring": "oklch(0.61 0.21 27.03)",
          "font-sans": "\"Oxanium\", sans-serif",
          "font-serif": "ui-serif, Georgia, Cambria, \"Times New Roman\", Times, serif",
          "font-mono": "\"Source Code Pro\", monospace",
          "shadow-color": "hsl(0 0% 0%)",
          "shadow-opacity": "0.6",
          "shadow-blur": "5px",
          "shadow-spread": "0px",
          "shadow-offset-x": "0px",
          "shadow-offset-y": "2px",
          "letter-spacing": "0em",
          "spacing": "0.25rem",
          "shadow-2xs": "0px 2px 5px 0px hsl(0 0% 0% / 0.30)",
          "shadow-xs": "0px 2px 5px 0px hsl(0 0% 0% / 0.30)",
          "shadow-sm": "0px 2px 5px 0px hsl(0 0% 0% / 0.60), 0px 1px 2px -1px hsl(0 0% 0% / 0.60)",
          "shadow": "0px 2px 5px 0px hsl(0 0% 0% / 0.60), 0px 1px 2px -1px hsl(0 0% 0% / 0.60)",
          "shadow-md": "0px 2px 5px 0px hsl(0 0% 0% / 0.60), 0px 2px 4px -1px hsl(0 0% 0% / 0.60)",
          "shadow-lg": "0px 2px 5px 0px hsl(0 0% 0% / 0.60), 0px 4px 6px -1px hsl(0 0% 0% / 0.60)",
          "shadow-xl": "0px 2px 5px 0px hsl(0 0% 0% / 0.60), 0px 8px 10px -1px hsl(0 0% 0% / 0.60)",
          "shadow-2xl": "0px 2px 5px 0px hsl(0 0% 0% / 1.50)"
        }
      }
    },
    {
      "name": "catppuccin",
      "type": "registry:style",
      "title": "Catppuccin",
      "description": "A theme based on the Catppuccin color palette.",
      "css": {
        "@layer base": {
          "body": {
            "letter-spacing": "var(--tracking-normal)"
          }
        }
      },
      "cssVars": {
        "theme": {
          "font-sans": "Montserrat, sans-serif",
          "font-mono": "Fira Code, monospace",
          "font-serif": "Georgia, serif",
          "radius": "0.35rem",
          "tracking-tighter": "calc(var(--tracking-normal) - 0.05em)",
          "tracking-tight": "calc(var(--tracking-normal) - 0.025em)",
          "tracking-wide": "calc(var(--tracking-normal) + 0.025em)",
          "tracking-wider": "calc(var(--tracking-normal) + 0.05em)",
          "tracking-widest": "calc(var(--tracking-normal) + 0.1em)"
        },
        "light": {
          "background": "oklch(0.96 0.01 264.53)",
          "foreground": "oklch(0.44 0.04 279.33)",
          "card": "oklch(1.00 0 0)",
          "card-foreground": "oklch(0.44 0.04 279.33)",
          "popover": "oklch(0.86 0.01 268.48)",
          "popover-foreground": "oklch(0.44 0.04 279.33)",
          "primary": "oklch(0.55 0.25 297.02)",
          "primary-foreground": "oklch(1.00 0 0)",
          "secondary": "oklch(0.86 0.01 268.48)",
          "secondary-foreground": "oklch(0.44 0.04 279.33)",
          "muted": "oklch(0.91 0.01 264.51)",
          "muted-foreground": "oklch(0.55 0.03 279.08)",
          "accent": "oklch(0.68 0.14 235.38)",
          "accent-foreground": "oklch(1.00 0 0)",
          "destructive": "oklch(0.55 0.22 19.81)",
          "destructive-foreground": "oklch(1.00 0 0)",
          "border": "oklch(0.81 0.02 271.20)",
          "input": "oklch(0.86 0.01 268.48)",
          "ring": "oklch(0.55 0.25 297.02)",
          "chart-1": "oklch(0.55 0.25 297.02)",
          "chart-2": "oklch(0.68 0.14 235.38)",
          "chart-3": "oklch(0.63 0.18 140.44)",
          "chart-4": "oklch(0.69 0.20 42.43)",
          "chart-5": "oklch(0.71 0.10 33.10)",
          "radius": "0.35rem",
          "sidebar": "oklch(0.93 0.01 264.52)",
          "sidebar-foreground": "oklch(0.44 0.04 279.33)",
          "sidebar-primary": "oklch(0.55 0.25 297.02)",
          "sidebar-primary-foreground": "oklch(1.00 0 0)",
          "sidebar-accent": "oklch(0.68 0.14 235.38)",
          "sidebar-accent-foreground": "oklch(1.00 0 0)",
          "sidebar-border": "oklch(0.81 0.02 271.20)",
          "sidebar-ring": "oklch(0.55 0.25 297.02)",
          "font-sans": "Montserrat, sans-serif",
          "font-serif": "Georgia, serif",
          "font-mono": "Fira Code, monospace",
          "shadow-color": "hsl(240 30% 25%)",
          "shadow-opacity": "0.12",
          "shadow-blur": "6px",
          "shadow-spread": "0px",
          "shadow-offset-x": "0px",
          "shadow-offset-y": "4px",
          "letter-spacing": "0em",
          "spacing": "0.25rem",
          "shadow-2xs": "0px 4px 6px 0px hsl(240 30% 25% / 0.06)",
          "shadow-xs": "0px 4px 6px 0px hsl(240 30% 25% / 0.06)",
          "shadow-sm": "0px 4px 6px 0px hsl(240 30% 25% / 0.12), 0px 1px 2px -1px hsl(240 30% 25% / 0.12)",
          "shadow": "0px 4px 6px 0px hsl(240 30% 25% / 0.12), 0px 1px 2px -1px hsl(240 30% 25% / 0.12)",
          "shadow-md": "0px 4px 6px 0px hsl(240 30% 25% / 0.12), 0px 2px 4px -1px hsl(240 30% 25% / 0.12)",
          "shadow-lg": "0px 4px 6px 0px hsl(240 30% 25% / 0.12), 0px 4px 6px -1px hsl(240 30% 25% / 0.12)",
          "shadow-xl": "0px 4px 6px 0px hsl(240 30% 25% / 0.12), 0px 8px 10px -1px hsl(240 30% 25% / 0.12)",
          "shadow-2xl": "0px 4px 6px 0px hsl(240 30% 25% / 0.30)",
          "tracking-normal": "0em"
        },
        "dark": {
          "background": "oklch(0.22 0.03 284.06)",
          "foreground": "oklch(0.88 0.04 272.28)",
          "card": "oklch(0.24 0.03 283.91)",
          "card-foreground": "oklch(0.88 0.04 272.28)",
          "popover": "oklch(0.40 0.03 280.15)",
          "popover-foreground": "oklch(0.88 0.04 272.28)",
          "primary": "oklch(0.79 0.12 304.77)",
          "primary-foreground": "oklch(0.24 0.03 283.91)",
          "secondary": "oklch(0.48 0.03 278.64)",
          "secondary-foreground": "oklch(0.88 0.04 272.28)",
          "muted": "oklch(0.30 0.03 276.21)",
          "muted-foreground": "oklch(0.75 0.04 273.93)",
          "accent": "oklch(0.85 0.08 210.25)",
          "accent-foreground": "oklch(0.24 0.03 283.91)",
          "destructive": "oklch(0.76 0.13 2.76)",
          "destructive-foreground": "oklch(0.24 0.03 283.91)",
          "border": "oklch(0.32 0.03 281.98)",
          "input": "oklch(0.32 0.03 281.98)",
          "ring": "oklch(0.79 0.12 304.77)",
          "chart-1": "oklch(0.79 0.12 304.77)",
          "chart-2": "oklch(0.85 0.08 210.25)",
          "chart-3": "oklch(0.86 0.11 142.72)",
          "chart-4": "oklch(0.82 0.10 52.63)",
          "chart-5": "oklch(0.92 0.02 30.49)",
          "radius": "0.35rem",
          "sidebar": "oklch(0.18 0.02 284.20)",
          "sidebar-foreground": "oklch(0.88 0.04 272.28)",
          "sidebar-primary": "oklch(0.79 0.12 304.77)",
          "sidebar-primary-foreground": "oklch(0.24 0.03 283.91)",
          "sidebar-accent": "oklch(0.85 0.08 210.25)",
          "sidebar-accent-foreground": "oklch(0.24 0.03 283.91)",
          "sidebar-border": "oklch(0.40 0.03 280.15)",
          "sidebar-ring": "oklch(0.79 0.12 304.77)",
          "font-sans": "Montserrat, sans-serif",
          "font-serif": "Georgia, serif",
          "font-mono": "Fira Code, monospace",
          "shadow-color": "hsl(240 30% 25%)",
          "shadow-opacity": "0.12",
          "shadow-blur": "6px",
          "shadow-spread": "0px",
          "shadow-offset-x": "0px",
          "shadow-offset-y": "4px",
          "letter-spacing": "0em",
          "spacing": "0.25rem",
          "shadow-2xs": "0px 4px 6px 0px hsl(240 30% 25% / 0.06)",
          "shadow-xs": "0px 4px 6px 0px hsl(240 30% 25% / 0.06)",
          "shadow-sm": "0px 4px 6px 0px hsl(240 30% 25% / 0.12), 0px 1px 2px -1px hsl(240 30% 25% / 0.12)",
          "shadow": "0px 4px 6px 0px hsl(240 30% 25% / 0.12), 0px 1px 2px -1px hsl(240 30% 25% / 0.12)",
          "shadow-md": "0px 4px 6px 0px hsl(240 30% 25% / 0.12), 0px 2px 4px -1px hsl(240 30% 25% / 0.12)",
          "shadow-lg": "0px 4px 6px 0px hsl(240 30% 25% / 0.12), 0px 4px 6px -1px hsl(240 30% 25% / 0.12)",
          "shadow-xl": "0px 4px 6px 0px hsl(240 30% 25% / 0.12), 0px 8px 10px -1px hsl(240 30% 25% / 0.12)",
          "shadow-2xl": "0px 4px 6px 0px hsl(240 30% 25% / 0.30)"
        }
      }
    },
    {
      "name": "graphite",
      "type": "registry:style",
      "title": "Graphite",
      "description": "A theme based on the Graphite color palette.",
      "css": {
        "@layer base": {
          "body": {
            "letter-spacing": "var(--tracking-normal)"
          }
        }
      },
      "cssVars": {
        "theme": {
          "font-sans": "Inter, sans-serif",
          "font-mono": "Fira Code, monospace",
          "font-serif": "Georgia, serif",
          "radius": "0.35rem",
          "tracking-tighter": "calc(var(--tracking-normal) - 0.05em)",
          "tracking-tight": "calc(var(--tracking-normal) - 0.025em)",
          "tracking-wide": "calc(var(--tracking-normal) + 0.025em)",
          "tracking-wider": "calc(var(--tracking-normal) + 0.05em)",
          "tracking-widest": "calc(var(--tracking-normal) + 0.1em)"
        },
        "light": {
          "background": "oklch(0.96 0 0)",
          "foreground": "oklch(0.32 0 0)",
          "card": "oklch(0.97 0 0)",
          "card-foreground": "oklch(0.32 0 0)",
          "popover": "oklch(0.97 0 0)",
          "popover-foreground": "oklch(0.32 0 0)",
          "primary": "oklch(0.49 0 0)",
          "primary-foreground": "oklch(1.00 0 0)",
          "secondary": "oklch(0.91 0 0)",
          "secondary-foreground": "oklch(0.32 0 0)",
          "muted": "oklch(0.89 0 0)",
          "muted-foreground": "oklch(0.51 0 0)",
          "accent": "oklch(0.81 0 0)",
          "accent-foreground": "oklch(0.32 0 0)",
          "destructive": "oklch(0.56 0.19 25.86)",
          "destructive-foreground": "oklch(1.00 0 0)",
          "border": "oklch(0.86 0 0)",
          "input": "oklch(0.91 0 0)",
          "ring": "oklch(0.49 0 0)",
          "chart-1": "oklch(0.49 0 0)",
          "chart-2": "oklch(0.49 0.04 196.03)",
          "chart-3": "oklch(0.65 0 0)",
          "chart-4": "oklch(0.73 0 0)",
          "chart-5": "oklch(0.81 0 0)",
          "radius": "0.35rem",
          "sidebar": "oklch(0.94 0 0)",
          "sidebar-foreground": "oklch(0.32 0 0)",
          "sidebar-primary": "oklch(0.49 0 0)",
          "sidebar-primary-foreground": "oklch(1.00 0 0)",
          "sidebar-accent": "oklch(0.81 0 0)",
          "sidebar-accent-foreground": "oklch(0.32 0 0)",
          "sidebar-border": "oklch(0.86 0 0)",
          "sidebar-ring": "oklch(0.49 0 0)",
          "font-sans": "Montserrat, sans-serif",
          "font-serif": "Georgia, serif",
          "font-mono": "Fira Code, monospace",
          "shadow-color": "hsl(0 0% 20% / 0.1)",
          "shadow-opacity": "0.15",
          "shadow-blur": "0px",
          "shadow-spread": "0px",
          "shadow-offset-x": "0px",
          "shadow-offset-y": "2px",
          "letter-spacing": "0em",
          "spacing": "0.25rem",
          "shadow-2xs": "0px 2px 0px 0px hsl(0 0% 20% / 0.07)",
          "shadow-xs": "0px 2px 0px 0px hsl(0 0% 20% / 0.07)",
          "shadow-sm": "0px 2px 0px 0px hsl(0 0% 20% / 0.15), 0px 1px 2px -1px hsl(0 0% 20% / 0.15)",
          "shadow": "0px 2px 0px 0px hsl(0 0% 20% / 0.15), 0px 1px 2px -1px hsl(0 0% 20% / 0.15)",
          "shadow-md": "0px 2px 0px 0px hsl(0 0% 20% / 0.15), 0px 2px 4px -1px hsl(0 0% 20% / 0.15)",
          "shadow-lg": "0px 2px 0px 0px hsl(0 0% 20% / 0.15), 0px 4px 6px -1px hsl(0 0% 20% / 0.15)",
          "shadow-xl": "0px 2px 0px 0px hsl(0 0% 20% / 0.15), 0px 8px 10px -1px hsl(0 0% 20% / 0.15)",
          "shadow-2xl": "0px 2px 0px 0px hsl(0 0% 20% / 0.38)",
          "tracking-normal": "0em"
        },
        "dark": {
          "background": "oklch(0.22 0 0)",
          "foreground": "oklch(0.89 0 0)",
          "card": "oklch(0.24 0 0)",
          "card-foreground": "oklch(0.89 0 0)",
          "popover": "oklch(0.24 0 0)",
          "popover-foreground": "oklch(0.89 0 0)",
          "primary": "oklch(0.71 0 0)",
          "primary-foreground": "oklch(0.22 0 0)",
          "secondary": "oklch(0.31 0 0)",
          "secondary-foreground": "oklch(0.89 0 0)",
          "muted": "oklch(0.29 0 0)",
          "muted-foreground": "oklch(0.60 0 0)",
          "accent": "oklch(0.37 0 0)",
          "accent-foreground": "oklch(0.89 0 0)",
          "destructive": "oklch(0.66 0.15 22.17)",
          "destructive-foreground": "oklch(1.00 0 0)",
          "border": "oklch(0.33 0 0)",
          "input": "oklch(0.31 0 0)",
          "ring": "oklch(0.71 0 0)",
          "chart-1": "oklch(0.71 0 0)",
          "chart-2": "oklch(0.67 0.03 206.35)",
          "chart-3": "oklch(0.55 0 0)",
          "chart-4": "oklch(0.46 0 0)",
          "chart-5": "oklch(0.37 0 0)",
          "radius": "0.35rem",
          "sidebar": "oklch(0.24 0 0)",
          "sidebar-foreground": "oklch(0.89 0 0)",
          "sidebar-primary": "oklch(0.71 0 0)",
          "sidebar-primary-foreground": "oklch(0.22 0 0)",
          "sidebar-accent": "oklch(0.37 0 0)",
          "sidebar-accent-foreground": "oklch(0.89 0 0)",
          "sidebar-border": "oklch(0.33 0 0)",
          "sidebar-ring": "oklch(0.71 0 0)",
          "font-sans": "Inter, sans-serif",
          "font-serif": "Georgia, serif",
          "font-mono": "Fira Code, monospace",
          "shadow-color": "hsl(0 0% 20% / 0.1)",
          "shadow-opacity": "0.15",
          "shadow-blur": "0px",
          "shadow-spread": "0px",
          "shadow-offset-x": "0px",
          "shadow-offset-y": "2px",
          "letter-spacing": "0em",
          "spacing": "0.25rem",
          "shadow-2xs": "0px 2px 0px 0px hsl(0 0% 20% / 0.07)",
          "shadow-xs": "0px 2px 0px 0px hsl(0 0% 20% / 0.07)",
          "shadow-sm": "0px 2px 0px 0px hsl(0 0% 20% / 0.15), 0px 1px 2px -1px hsl(0 0% 20% / 0.15)",
          "shadow": "0px 2px 0px 0px hsl(0 0% 20% / 0.15), 0px 1px 2px -1px hsl(0 0% 20% / 0.15)",
          "shadow-md": "0px 2px 0px 0px hsl(0 0% 20% / 0.15), 0px 2px 4px -1px hsl(0 0% 20% / 0.15)",
          "shadow-lg": "0px 2px 0px 0px hsl(0 0% 20% / 0.15), 0px 4px 6px -1px hsl(0 0% 20% / 0.15)",
          "shadow-xl": "0px 2px 0px 0px hsl(0 0% 20% / 0.15), 0px 8px 10px -1px hsl(0 0% 20% / 0.15)",
          "shadow-2xl": "0px 2px 0px 0px hsl(0 0% 20% / 0.38)"
        }
      }
    },
    {
      "name": "perpetuity",
      "type": "registry:style",
      "title": "Perpetuity",
      "description": "A theme based on the Perpetuity color palette.",
      "css": {
        "@layer base": {
          "body": {
            "letter-spacing": "var(--tracking-normal)"
          }
        }
      },
      "cssVars": {
        "theme": {
          "font-sans": "Source Code Pro, monospace",
          "font-mono": "Source Code Pro, monospace",
          "font-serif": "Source Code Pro, monospace",
          "radius": "0.125rem",
          "tracking-tighter": "calc(var(--tracking-normal) - 0.05em)",
          "tracking-tight": "calc(var(--tracking-normal) - 0.025em)",
          "tracking-wide": "calc(var(--tracking-normal) + 0.025em)",
          "tracking-wider": "calc(var(--tracking-normal) + 0.05em)",
          "tracking-widest": "calc(var(--tracking-normal) + 0.1em)"
        },
        "light": {
          "background": "oklch(0.95 0.01 197.01)",
          "foreground": "oklch(0.38 0.06 212.66)",
          "card": "oklch(0.97 0.01 197.07)",
          "card-foreground": "oklch(0.38 0.06 212.66)",
          "popover": "oklch(0.97 0.01 197.07)",
          "popover-foreground": "oklch(0.38 0.06 212.66)",
          "primary": "oklch(0.56 0.09 203.28)",
          "primary-foreground": "oklch(1.00 0 0)",
          "secondary": "oklch(0.92 0.02 196.84)",
          "secondary-foreground": "oklch(0.38 0.06 212.66)",
          "muted": "oklch(0.93 0.01 196.97)",
          "muted-foreground": "oklch(0.54 0.06 201.57)",
          "accent": "oklch(0.90 0.03 201.89)",
          "accent-foreground": "oklch(0.38 0.06 212.66)",
          "destructive": "oklch(0.57 0.19 25.54)",
          "destructive-foreground": "oklch(1.00 0 0)",
          "border": "oklch(0.89 0.02 204.41)",
          "input": "oklch(0.92 0.02 196.84)",
          "ring": "oklch(0.56 0.09 203.28)",
          "chart-1": "oklch(0.56 0.09 203.28)",
          "chart-2": "oklch(0.64 0.10 201.59)",
          "chart-3": "oklch(0.71 0.11 201.25)",
          "chart-4": "oklch(0.77 0.10 201.18)",
          "chart-5": "oklch(0.83 0.08 200.97)",
          "radius": "0.125rem",
          "sidebar": "oklch(0.93 0.02 205.32)",
          "sidebar-foreground": "oklch(0.38 0.06 212.66)",
          "sidebar-primary": "oklch(0.56 0.09 203.28)",
          "sidebar-primary-foreground": "oklch(1.00 0 0)",
          "sidebar-accent": "oklch(0.90 0.03 201.89)",
          "sidebar-accent-foreground": "oklch(0.38 0.06 212.66)",
          "sidebar-border": "oklch(0.89 0.02 204.41)",
          "sidebar-ring": "oklch(0.56 0.09 203.28)",
          "font-sans": "Courier New, monospace",
          "font-serif": "Courier New, monospace",
          "font-mono": "Courier New, monospace",
          "shadow-color": "hsl(185 70% 30% / 0.15)",
          "shadow-opacity": "0.15",
          "shadow-blur": "2px",
          "shadow-spread": "0px",
          "shadow-offset-x": "1px",
          "shadow-offset-y": "1px",
          "letter-spacing": "0em",
          "spacing": "0.25rem",
          "shadow-2xs": "1px 1px 2px 0px hsl(185 70% 30% / 0.07)",
          "shadow-xs": "1px 1px 2px 0px hsl(185 70% 30% / 0.07)",
          "shadow-sm": "1px 1px 2px 0px hsl(185 70% 30% / 0.15), 1px 1px 2px -1px hsl(185 70% 30% / 0.15)",
          "shadow": "1px 1px 2px 0px hsl(185 70% 30% / 0.15), 1px 1px 2px -1px hsl(185 70% 30% / 0.15)",
          "shadow-md": "1px 1px 2px 0px hsl(185 70% 30% / 0.15), 1px 2px 4px -1px hsl(185 70% 30% / 0.15)",
          "shadow-lg": "1px 1px 2px 0px hsl(185 70% 30% / 0.15), 1px 4px 6px -1px hsl(185 70% 30% / 0.15)",
          "shadow-xl": "1px 1px 2px 0px hsl(185 70% 30% / 0.15), 1px 8px 10px -1px hsl(185 70% 30% / 0.15)",
          "shadow-2xl": "1px 1px 2px 0px hsl(185 70% 30% / 0.38)",
          "tracking-normal": "0em"
        },
        "dark": {
          "background": "oklch(0.21 0.02 224.45)",
          "foreground": "oklch(0.85 0.13 195.04)",
          "card": "oklch(0.23 0.03 216.07)",
          "card-foreground": "oklch(0.85 0.13 195.04)",
          "popover": "oklch(0.23 0.03 216.07)",
          "popover-foreground": "oklch(0.85 0.13 195.04)",
          "primary": "oklch(0.85 0.13 195.04)",
          "primary-foreground": "oklch(0.21 0.02 224.45)",
          "secondary": "oklch(0.38 0.06 216.50)",
          "secondary-foreground": "oklch(0.85 0.13 195.04)",
          "muted": "oklch(0.29 0.04 218.82)",
          "muted-foreground": "oklch(0.66 0.10 195.05)",
          "accent": "oklch(0.38 0.06 216.50)",
          "accent-foreground": "oklch(0.85 0.13 195.04)",
          "destructive": "oklch(0.62 0.21 25.81)",
          "destructive-foreground": "oklch(0.96 0 0)",
          "border": "oklch(0.38 0.06 216.50)",
          "input": "oklch(0.38 0.06 216.50)",
          "ring": "oklch(0.85 0.13 195.04)",
          "chart-1": "oklch(0.85 0.13 195.04)",
          "chart-2": "oklch(0.66 0.10 195.05)",
          "chart-3": "oklch(0.58 0.08 195.07)",
          "chart-4": "oklch(0.43 0.06 202.62)",
          "chart-5": "oklch(0.31 0.05 204.16)",
          "radius": "0.125rem",
          "sidebar": "oklch(0.21 0.02 224.45)",
          "sidebar-foreground": "oklch(0.85 0.13 195.04)",
          "sidebar-primary": "oklch(0.85 0.13 195.04)",
          "sidebar-primary-foreground": "oklch(0.21 0.02 224.45)",
          "sidebar-accent": "oklch(0.38 0.06 216.50)",
          "sidebar-accent-foreground": "oklch(0.85 0.13 195.04)",
          "sidebar-border": "oklch(0.38 0.06 216.50)",
          "sidebar-ring": "oklch(0.85 0.13 195.04)",
          "font-sans": "Source Code Pro, monospace",
          "font-serif": "Source Code Pro, monospace",
          "font-mono": "Source Code Pro, monospace",
          "shadow-color": "hsl(180 70% 60% / 0.2)",
          "shadow-opacity": "0.2",
          "shadow-blur": "2px",
          "shadow-spread": "0px",
          "shadow-offset-x": "1px",
          "shadow-offset-y": "1px",
          "letter-spacing": "0em",
          "spacing": "0.25rem",
          "shadow-2xs": "1px 1px 2px 0px hsl(180 70% 60% / 0.10)",
          "shadow-xs": "1px 1px 2px 0px hsl(180 70% 60% / 0.10)",
          "shadow-sm": "1px 1px 2px 0px hsl(180 70% 60% / 0.20), 1px 1px 2px -1px hsl(180 70% 60% / 0.20)",
          "shadow": "1px 1px 2px 0px hsl(180 70% 60% / 0.20), 1px 1px 2px -1px hsl(180 70% 60% / 0.20)",
          "shadow-md": "1px 1px 2px 0px hsl(180 70% 60% / 0.20), 1px 2px 4px -1px hsl(180 70% 60% / 0.20)",
          "shadow-lg": "1px 1px 2px 0px hsl(180 70% 60% / 0.20), 1px 4px 6px -1px hsl(180 70% 60% / 0.20)",
          "shadow-xl": "1px 1px 2px 0px hsl(180 70% 60% / 0.20), 1px 8px 10px -1px hsl(180 70% 60% / 0.20)",
          "shadow-2xl": "1px 1px 2px 0px hsl(180 70% 60% / 0.50)"
        }
      }
    },
    {
      "name": "kodama-grove",
      "type": "registry:style",
      "title": "Kodama Grove",
      "description": "A theme based on the Kodama Grove color palette.",
      "css": {
        "@layer base": {
          "body": {
            "letter-spacing": "var(--tracking-normal)"
          }
        }
      },
      "cssVars": {
        "theme": {
          "font-sans": "Merriweather, serif",
          "font-mono": "JetBrains Mono, monospace",
          "font-serif": "Source Serif 4, serif",
          "radius": "0.425rem",
          "tracking-tighter": "calc(var(--tracking-normal) - 0.05em)",
          "tracking-tight": "calc(var(--tracking-normal) - 0.025em)",
          "tracking-wide": "calc(var(--tracking-normal) + 0.025em)",
          "tracking-wider": "calc(var(--tracking-normal) + 0.05em)",
          "tracking-widest": "calc(var(--tracking-normal) + 0.1em)"
        },
        "light": {
          "background": "oklch(0.88 0.05 91.79)",
          "foreground": "oklch(0.43 0.03 59.22)",
          "card": "oklch(0.89 0.04 87.57)",
          "card-foreground": "oklch(0.43 0.03 59.22)",
          "popover": "oklch(0.94 0.03 89.85)",
          "popover-foreground": "oklch(0.43 0.03 59.22)",
          "primary": "oklch(0.67 0.11 118.91)",
          "primary-foreground": "oklch(0.99 0.01 88.64)",
          "secondary": "oklch(0.85 0.06 91.15)",
          "secondary-foreground": "oklch(0.43 0.03 59.22)",
          "muted": "oklch(0.85 0.06 91.15)",
          "muted-foreground": "oklch(0.58 0.03 60.93)",
          "accent": "oklch(0.84 0.07 90.33)",
          "accent-foreground": "oklch(0.43 0.03 59.22)",
          "destructive": "oklch(0.71 0.10 29.98)",
          "destructive-foreground": "oklch(0.98 0.01 91.48)",
          "border": "oklch(0.69 0.04 59.84)",
          "input": "oklch(0.84 0.07 90.33)",
          "ring": "oklch(0.73 0.06 130.85)",
          "chart-1": "oklch(0.73 0.06 130.85)",
          "chart-2": "oklch(0.68 0.06 132.45)",
          "chart-3": "oklch(0.82 0.03 136.65)",
          "chart-4": "oklch(0.59 0.05 137.62)",
          "chart-5": "oklch(0.52 0.04 137.19)",
          "radius": "0.425rem",
          "sidebar": "oklch(0.86 0.06 90.52)",
          "sidebar-foreground": "oklch(0.43 0.03 59.22)",
          "sidebar-primary": "oklch(0.73 0.06 130.85)",
          "sidebar-primary-foreground": "oklch(0.99 0.01 88.64)",
          "sidebar-accent": "oklch(0.92 0.02 88.00)",
          "sidebar-accent-foreground": "oklch(0.43 0.03 59.22)",
          "sidebar-border": "oklch(0.91 0.02 88.00)",
          "sidebar-ring": "oklch(0.73 0.06 130.85)",
          "font-sans": "Merriweather, serif",
          "font-serif": "Source Serif 4, serif",
          "font-mono": "JetBrains Mono, monospace",
          "shadow-color": "hsl(88 22% 35% / 0.15)",
          "shadow-opacity": "0.15",
          "shadow-blur": "2px",
          "shadow-spread": "0px",
          "shadow-offset-x": "3px",
          "shadow-offset-y": "3px",
          "letter-spacing": "0em",
          "spacing": "0.25rem",
          "shadow-2xs": "3px 3px 2px 0px hsl(88 22% 35% / 0.07)",
          "shadow-xs": "3px 3px 2px 0px hsl(88 22% 35% / 0.07)",
          "shadow-sm": "3px 3px 2px 0px hsl(88 22% 35% / 0.15), 3px 1px 2px -1px hsl(88 22% 35% / 0.15)",
          "shadow": "3px 3px 2px 0px hsl(88 22% 35% / 0.15), 3px 1px 2px -1px hsl(88 22% 35% / 0.15)",
          "shadow-md": "3px 3px 2px 0px hsl(88 22% 35% / 0.15), 3px 2px 4px -1px hsl(88 22% 35% / 0.15)",
          "shadow-lg": "3px 3px 2px 0px hsl(88 22% 35% / 0.15), 3px 4px 6px -1px hsl(88 22% 35% / 0.15)",
          "shadow-xl": "3px 3px 2px 0px hsl(88 22% 35% / 0.15), 3px 8px 10px -1px hsl(88 22% 35% / 0.15)",
          "shadow-2xl": "3px 3px 2px 0px hsl(88 22% 35% / 0.38)",
          "tracking-normal": "0em"
        },
        "dark": {
          "background": "oklch(0.33 0.02 88.07)",
          "foreground": "oklch(0.92 0.02 82.12)",
          "card": "oklch(0.36 0.02 82.33)",
          "card-foreground": "oklch(0.92 0.02 82.12)",
          "popover": "oklch(0.36 0.02 82.33)",
          "popover-foreground": "oklch(0.92 0.02 82.12)",
          "primary": "oklch(0.68 0.06 132.45)",
          "primary-foreground": "oklch(0.27 0.01 61.02)",
          "secondary": "oklch(0.44 0.02 84.55)",
          "secondary-foreground": "oklch(0.92 0.02 82.12)",
          "muted": "oklch(0.39 0.02 82.71)",
          "muted-foreground": "oklch(0.71 0.02 73.62)",
          "accent": "oklch(0.65 0.07 90.76)",
          "accent-foreground": "oklch(0.27 0.01 61.02)",
          "destructive": "oklch(0.63 0.08 31.30)",
          "destructive-foreground": "oklch(0.94 0.02 84.59)",
          "border": "oklch(0.44 0.02 84.55)",
          "input": "oklch(0.44 0.02 84.55)",
          "ring": "oklch(0.68 0.06 132.45)",
          "chart-1": "oklch(0.68 0.06 132.45)",
          "chart-2": "oklch(0.73 0.06 130.85)",
          "chart-3": "oklch(0.59 0.05 137.62)",
          "chart-4": "oklch(0.65 0.07 90.76)",
          "chart-5": "oklch(0.52 0.04 137.19)",
          "radius": "0.425rem",
          "sidebar": "oklch(0.33 0.02 88.07)",
          "sidebar-foreground": "oklch(0.92 0.02 82.12)",
          "sidebar-primary": "oklch(0.68 0.06 132.45)",
          "sidebar-primary-foreground": "oklch(0.27 0.01 61.02)",
          "sidebar-accent": "oklch(0.65 0.07 90.76)",
          "sidebar-accent-foreground": "oklch(0.27 0.01 61.02)",
          "sidebar-border": "oklch(0.44 0.02 84.55)",
          "sidebar-ring": "oklch(0.68 0.06 132.45)",
          "font-sans": "Merriweather, serif",
          "font-serif": "Source Serif 4, serif",
          "font-mono": "JetBrains Mono, monospace",
          "shadow-color": "hsl(88 22% 35% / 0.15)",
          "shadow-opacity": "0.15",
          "shadow-blur": "2px",
          "shadow-spread": "0px",
          "shadow-offset-x": "3px",
          "shadow-offset-y": "3px",
          "letter-spacing": "0em",
          "spacing": "0.25rem",
          "shadow-2xs": "3px 3px 2px 0px hsl(88 22% 35% / 0.07)",
          "shadow-xs": "3px 3px 2px 0px hsl(88 22% 35% / 0.07)",
          "shadow-sm": "3px 3px 2px 0px hsl(88 22% 35% / 0.15), 3px 1px 2px -1px hsl(88 22% 35% / 0.15)",
          "shadow": "3px 3px 2px 0px hsl(88 22% 35% / 0.15), 3px 1px 2px -1px hsl(88 22% 35% / 0.15)",
          "shadow-md": "3px 3px 2px 0px hsl(88 22% 35% / 0.15), 3px 2px 4px -1px hsl(88 22% 35% / 0.15)",
          "shadow-lg": "3px 3px 2px 0px hsl(88 22% 35% / 0.15), 3px 4px 6px -1px hsl(88 22% 35% / 0.15)",
          "shadow-xl": "3px 3px 2px 0px hsl(88 22% 35% / 0.15), 3px 8px 10px -1px hsl(88 22% 35% / 0.15)",
          "shadow-2xl": "3px 3px 2px 0px hsl(88 22% 35% / 0.38)"
        }
      }
    },
    {
      "name": "cosmic-night",
      "type": "registry:style",
      "title": "Cosmic Night",
      "description": "A theme based on the Cosmic Night color palette.",
      "css": {
        "@layer base": {
          "body": {
            "letter-spacing": "var(--tracking-normal)"
          }
        }
      },
      "cssVars": {
        "theme": {
          "font-sans": "Inter, sans-serif",
          "font-mono": "JetBrains Mono, monospace",
          "font-serif": "Georgia, serif",
          "radius": "0.5rem",
          "tracking-tighter": "calc(var(--tracking-normal) - 0.05em)",
          "tracking-tight": "calc(var(--tracking-normal) - 0.025em)",
          "tracking-wide": "calc(var(--tracking-normal) + 0.025em)",
          "tracking-wider": "calc(var(--tracking-normal) + 0.05em)",
          "tracking-widest": "calc(var(--tracking-normal) + 0.1em)"
        },
        "light": {
          "background": "oklch(0.97 0.01 286.15)",
          "foreground": "oklch(0.30 0.06 282.42)",
          "card": "oklch(1.00 0 0)",
          "card-foreground": "oklch(0.30 0.06 282.42)",
          "popover": "oklch(1.00 0 0)",
          "popover-foreground": "oklch(0.30 0.06 282.42)",
          "primary": "oklch(0.54 0.18 288.03)",
          "primary-foreground": "oklch(1.00 0 0)",
          "secondary": "oklch(0.92 0.04 292.69)",
          "secondary-foreground": "oklch(0.41 0.10 288.17)",
          "muted": "oklch(0.96 0.01 286.15)",
          "muted-foreground": "oklch(0.54 0.05 284.74)",
          "accent": "oklch(0.92 0.04 262.14)",
          "accent-foreground": "oklch(0.30 0.06 282.42)",
          "destructive": "oklch(0.69 0.21 14.99)",
          "destructive-foreground": "oklch(1.00 0 0)",
          "border": "oklch(0.91 0.02 285.96)",
          "input": "oklch(0.91 0.02 285.96)",
          "ring": "oklch(0.54 0.18 288.03)",
          "chart-1": "oklch(0.54 0.18 288.03)",
          "chart-2": "oklch(0.70 0.16 288.99)",
          "chart-3": "oklch(0.57 0.21 276.71)",
          "chart-4": "oklch(0.64 0.19 281.81)",
          "chart-5": "oklch(0.45 0.18 279.38)",
          "radius": "0.5rem",
          "sidebar": "oklch(0.96 0.01 286.15)",
          "sidebar-foreground": "oklch(0.30 0.06 282.42)",
          "sidebar-primary": "oklch(0.54 0.18 288.03)",
          "sidebar-primary-foreground": "oklch(1.00 0 0)",
          "sidebar-accent": "oklch(0.92 0.04 262.14)",
          "sidebar-accent-foreground": "oklch(0.30 0.06 282.42)",
          "sidebar-border": "oklch(0.91 0.02 285.96)",
          "sidebar-ring": "oklch(0.54 0.18 288.03)",
          "font-sans": "Inter, sans-serif",
          "font-serif": "Georgia, serif",
          "font-mono": "JetBrains Mono, monospace",
          "shadow-color": "hsl(240 30% 25%)",
          "shadow-opacity": "0.12",
          "shadow-blur": "10px",
          "shadow-spread": "0px",
          "shadow-offset-x": "0px",
          "shadow-offset-y": "4px",
          "letter-spacing": "0em",
          "spacing": "0.25rem",
          "shadow-2xs": "0px 4px 10px 0px hsl(240 30% 25% / 0.06)",
          "shadow-xs": "0px 4px 10px 0px hsl(240 30% 25% / 0.06)",
          "shadow-sm": "0px 4px 10px 0px hsl(240 30% 25% / 0.12), 0px 1px 2px -1px hsl(240 30% 25% / 0.12)",
          "shadow": "0px 4px 10px 0px hsl(240 30% 25% / 0.12), 0px 1px 2px -1px hsl(240 30% 25% / 0.12)",
          "shadow-md": "0px 4px 10px 0px hsl(240 30% 25% / 0.12), 0px 2px 4px -1px hsl(240 30% 25% / 0.12)",
          "shadow-lg": "0px 4px 10px 0px hsl(240 30% 25% / 0.12), 0px 4px 6px -1px hsl(240 30% 25% / 0.12)",
          "shadow-xl": "0px 4px 10px 0px hsl(240 30% 25% / 0.12), 0px 8px 10px -1px hsl(240 30% 25% / 0.12)",
          "shadow-2xl": "0px 4px 10px 0px hsl(240 30% 25% / 0.30)",
          "tracking-normal": "0em"
        },
        "dark": {
          "background": "oklch(0.17 0.02 283.80)",
          "foreground": "oklch(0.92 0.03 285.88)",
          "card": "oklch(0.23 0.04 282.93)",
          "card-foreground": "oklch(0.92 0.03 285.88)",
          "popover": "oklch(0.23 0.04 282.93)",
          "popover-foreground": "oklch(0.92 0.03 285.88)",
          "primary": "oklch(0.72 0.16 290.40)",
          "primary-foreground": "oklch(0.17 0.02 283.80)",
          "secondary": "oklch(0.31 0.07 283.46)",
          "secondary-foreground": "oklch(0.84 0.08 285.91)",
          "muted": "oklch(0.27 0.06 281.44)",
          "muted-foreground": "oklch(0.72 0.05 285.17)",
          "accent": "oklch(0.34 0.08 280.97)",
          "accent-foreground": "oklch(0.92 0.03 285.88)",
          "destructive": "oklch(0.69 0.21 14.99)",
          "destructive-foreground": "oklch(1.00 0 0)",
          "border": "oklch(0.33 0.06 282.58)",
          "input": "oklch(0.33 0.06 282.58)",
          "ring": "oklch(0.72 0.16 290.40)",
          "chart-1": "oklch(0.72 0.16 290.40)",
          "chart-2": "oklch(0.64 0.10 274.91)",
          "chart-3": "oklch(0.75 0.12 244.75)",
          "chart-4": "oklch(0.71 0.10 186.68)",
          "chart-5": "oklch(0.75 0.18 346.81)",
          "radius": "0.5rem",
          "sidebar": "oklch(0.23 0.04 282.93)",
          "sidebar-foreground": "oklch(0.92 0.03 285.88)",
          "sidebar-primary": "oklch(0.72 0.16 290.40)",
          "sidebar-primary-foreground": "oklch(0.17 0.02 283.80)",
          "sidebar-accent": "oklch(0.34 0.08 280.97)",
          "sidebar-accent-foreground": "oklch(0.92 0.03 285.88)",
          "sidebar-border": "oklch(0.33 0.06 282.58)",
          "sidebar-ring": "oklch(0.72 0.16 290.40)",
          "font-sans": "Inter, sans-serif",
          "font-serif": "Georgia, serif",
          "font-mono": "JetBrains Mono, monospace",
          "shadow-color": "hsl(240 30% 25%)",
          "shadow-opacity": "0.12",
          "shadow-blur": "10px",
          "shadow-spread": "0px",
          "shadow-offset-x": "0px",
          "shadow-offset-y": "4px",
          "letter-spacing": "0em",
          "spacing": "0.25rem",
          "shadow-2xs": "0px 4px 10px 0px hsl(240 30% 25% / 0.06)",
          "shadow-xs": "0px 4px 10px 0px hsl(240 30% 25% / 0.06)",
          "shadow-sm": "0px 4px 10px 0px hsl(240 30% 25% / 0.12), 0px 1px 2px -1px hsl(240 30% 25% / 0.12)",
          "shadow": "0px 4px 10px 0px hsl(240 30% 25% / 0.12), 0px 1px 2px -1px hsl(240 30% 25% / 0.12)",
          "shadow-md": "0px 4px 10px 0px hsl(240 30% 25% / 0.12), 0px 2px 4px -1px hsl(240 30% 25% / 0.12)",
          "shadow-lg": "0px 4px 10px 0px hsl(240 30% 25% / 0.12), 0px 4px 6px -1px hsl(240 30% 25% / 0.12)",
          "shadow-xl": "0px 4px 10px 0px hsl(240 30% 25% / 0.12), 0px 8px 10px -1px hsl(240 30% 25% / 0.12)",
          "shadow-2xl": "0px 4px 10px 0px hsl(240 30% 25% / 0.30)"
        }
      }
    },
    {
      "name": "tangerine",
      "type": "registry:style",
      "title": "Tangerine",
      "description": "A theme based on the Tangerine color palette.",
      "css": {
        "@layer base": {
          "body": {
            "letter-spacing": "var(--tracking-normal)"
          }
        }
      },
      "cssVars": {
        "theme": {
          "font-sans": "Inter, sans-serif",
          "font-mono": "JetBrains Mono, monospace",
          "font-serif": "Source Serif 4, serif",
          "radius": "0.75rem",
          "tracking-tighter": "calc(var(--tracking-normal) - 0.05em)",
          "tracking-tight": "calc(var(--tracking-normal) - 0.025em)",
          "tracking-wide": "calc(var(--tracking-normal) + 0.025em)",
          "tracking-wider": "calc(var(--tracking-normal) + 0.05em)",
          "tracking-widest": "calc(var(--tracking-normal) + 0.1em)"
        },
        "light": {
          "background": "oklch(0.94 0.00 236.50)",
          "foreground": "oklch(0.32 0 0)",
          "card": "oklch(1.00 0 0)",
          "card-foreground": "oklch(0.32 0 0)",
          "popover": "oklch(1.00 0 0)",
          "popover-foreground": "oklch(0.32 0 0)",
          "primary": "oklch(0.64 0.17 36.44)",
          "primary-foreground": "oklch(1.00 0 0)",
          "secondary": "oklch(0.97 0.00 264.54)",
          "secondary-foreground": "oklch(0.45 0.03 256.80)",
          "muted": "oklch(0.98 0.00 247.84)",
          "muted-foreground": "oklch(0.55 0.02 264.36)",
          "accent": "oklch(0.91 0.02 243.82)",
          "accent-foreground": "oklch(0.38 0.14 265.52)",
          "destructive": "oklch(0.64 0.21 25.33)",
          "destructive-foreground": "oklch(1.00 0 0)",
          "border": "oklch(0.90 0.01 247.88)",
          "input": "oklch(0.97 0.00 264.54)",
          "ring": "oklch(0.64 0.17 36.44)",
          "chart-1": "oklch(0.72 0.06 248.68)",
          "chart-2": "oklch(0.79 0.09 35.96)",
          "chart-3": "oklch(0.58 0.08 254.16)",
          "chart-4": "oklch(0.50 0.08 259.49)",
          "chart-5": "oklch(0.42 0.10 264.03)",
          "radius": "0.75rem",
          "sidebar": "oklch(0.90 0.00 258.33)",
          "sidebar-foreground": "oklch(0.32 0 0)",
          "sidebar-primary": "oklch(0.64 0.17 36.44)",
          "sidebar-primary-foreground": "oklch(1.00 0 0)",
          "sidebar-accent": "oklch(0.91 0.02 243.82)",
          "sidebar-accent-foreground": "oklch(0.38 0.14 265.52)",
          "sidebar-border": "oklch(0.93 0.01 264.53)",
          "sidebar-ring": "oklch(0.64 0.17 36.44)",
          "font-sans": "Inter, sans-serif",
          "font-serif": "Source Serif 4, serif",
          "font-mono": "JetBrains Mono, monospace",
          "shadow-color": "hsl(0 0% 0%)",
          "shadow-opacity": "0.1",
          "shadow-blur": "3px",
          "shadow-spread": "0px",
          "shadow-offset-x": "0px",
          "shadow-offset-y": "1px",
          "letter-spacing": "0em",
          "spacing": "0.25rem",
          "shadow-2xs": "0px 1px 3px 0px hsl(0 0% 0% / 0.05)",
          "shadow-xs": "0px 1px 3px 0px hsl(0 0% 0% / 0.05)",
          "shadow-sm": "0px 1px 3px 0px hsl(0 0% 0% / 0.10), 0px 1px 2px -1px hsl(0 0% 0% / 0.10)",
          "shadow": "0px 1px 3px 0px hsl(0 0% 0% / 0.10), 0px 1px 2px -1px hsl(0 0% 0% / 0.10)",
          "shadow-md": "0px 1px 3px 0px hsl(0 0% 0% / 0.10), 0px 2px 4px -1px hsl(0 0% 0% / 0.10)",
          "shadow-lg": "0px 1px 3px 0px hsl(0 0% 0% / 0.10), 0px 4px 6px -1px hsl(0 0% 0% / 0.10)",
          "shadow-xl": "0px 1px 3px 0px hsl(0 0% 0% / 0.10), 0px 8px 10px -1px hsl(0 0% 0% / 0.10)",
          "shadow-2xl": "0px 1px 3px 0px hsl(0 0% 0% / 0.25)",
          "tracking-normal": "0em"
        },
        "dark": {
          "background": "oklch(0.26 0.03 262.67)",
          "foreground": "oklch(0.92 0 0)",
          "card": "oklch(0.31 0.03 268.64)",
          "card-foreground": "oklch(0.92 0 0)",
          "popover": "oklch(0.29 0.02 268.40)",
          "popover-foreground": "oklch(0.92 0 0)",
          "primary": "oklch(0.64 0.17 36.44)",
          "primary-foreground": "oklch(1.00 0 0)",
          "secondary": "oklch(0.31 0.03 266.71)",
          "secondary-foreground": "oklch(0.92 0 0)",
          "muted": "oklch(0.31 0.03 266.71)",
          "muted-foreground": "oklch(0.72 0 0)",
          "accent": "oklch(0.34 0.06 267.59)",
          "accent-foreground": "oklch(0.88 0.06 254.13)",
          "destructive": "oklch(0.64 0.21 25.33)",
          "destructive-foreground": "oklch(1.00 0 0)",
          "border": "oklch(0.38 0.03 269.73)",
          "input": "oklch(0.38 0.03 269.73)",
          "ring": "oklch(0.64 0.17 36.44)",
          "chart-1": "oklch(0.72 0.06 248.68)",
          "chart-2": "oklch(0.77 0.09 34.19)",
          "chart-3": "oklch(0.58 0.08 254.16)",
          "chart-4": "oklch(0.50 0.08 259.49)",
          "chart-5": "oklch(0.42 0.10 264.03)",
          "radius": "0.75rem",
          "sidebar": "oklch(0.31 0.03 267.74)",
          "sidebar-foreground": "oklch(0.92 0 0)",
          "sidebar-primary": "oklch(0.64 0.17 36.44)",
          "sidebar-primary-foreground": "oklch(1.00 0 0)",
          "sidebar-accent": "oklch(0.34 0.06 267.59)",
          "sidebar-accent-foreground": "oklch(0.88 0.06 254.13)",
          "sidebar-border": "oklch(0.38 0.03 269.73)",
          "sidebar-ring": "oklch(0.64 0.17 36.44)",
          "font-sans": "Inter, sans-serif",
          "font-serif": "Source Serif 4, serif",
          "font-mono": "JetBrains Mono, monospace",
          "shadow-color": "hsl(0 0% 0%)",
          "shadow-opacity": "0.1",
          "shadow-blur": "3px",
          "shadow-spread": "0px",
          "shadow-offset-x": "0px",
          "shadow-offset-y": "1px",
          "letter-spacing": "0em",
          "spacing": "0.25rem",
          "shadow-2xs": "0px 1px 3px 0px hsl(0 0% 0% / 0.05)",
          "shadow-xs": "0px 1px 3px 0px hsl(0 0% 0% / 0.05)",
          "shadow-sm": "0px 1px 3px 0px hsl(0 0% 0% / 0.10), 0px 1px 2px -1px hsl(0 0% 0% / 0.10)",
          "shadow": "0px 1px 3px 0px hsl(0 0% 0% / 0.10), 0px 1px 2px -1px hsl(0 0% 0% / 0.10)",
          "shadow-md": "0px 1px 3px 0px hsl(0 0% 0% / 0.10), 0px 2px 4px -1px hsl(0 0% 0% / 0.10)",
          "shadow-lg": "0px 1px 3px 0px hsl(0 0% 0% / 0.10), 0px 4px 6px -1px hsl(0 0% 0% / 0.10)",
          "shadow-xl": "0px 1px 3px 0px hsl(0 0% 0% / 0.10), 0px 8px 10px -1px hsl(0 0% 0% / 0.10)",
          "shadow-2xl": "0px 1px 3px 0px hsl(0 0% 0% / 0.25)"
        }
      }
    },
    {
      "name": "quantum-rose",
      "type": "registry:style",
      "title": "Quantum Rose",
      "description": "A theme based on the Quantum Rose color palette.",
      "css": {
        "@layer base": {
          "body": {
            "letter-spacing": "var(--tracking-normal)"
          }
        }
      },
      "cssVars": {
        "theme": {
          "font-sans": "Quicksand, sans-serif",
          "font-mono": "Space Mono, monospace",
          "font-serif": "Playfair Display, serif",
          "radius": "0.5rem",
          "tracking-tighter": "calc(var(--tracking-normal) - 0.05em)",
          "tracking-tight": "calc(var(--tracking-normal) - 0.025em)",
          "tracking-wide": "calc(var(--tracking-normal) + 0.025em)",
          "tracking-wider": "calc(var(--tracking-normal) + 0.05em)",
          "tracking-widest": "calc(var(--tracking-normal) + 0.1em)"
        },
        "light": {
          "background": "oklch(0.97 0.02 343.93)",
          "foreground": "oklch(0.44 0.17 352.38)",
          "card": "oklch(0.98 0.01 339.33)",
          "card-foreground": "oklch(0.44 0.17 352.38)",
          "popover": "oklch(0.98 0.01 339.33)",
          "popover-foreground": "oklch(0.44 0.17 352.38)",
          "primary": "oklch(0.60 0.24 0.13)",
          "primary-foreground": "oklch(1.00 0 0)",
          "secondary": "oklch(0.92 0.07 326.13)",
          "secondary-foreground": "oklch(0.44 0.17 352.38)",
          "muted": "oklch(0.94 0.04 344.26)",
          "muted-foreground": "oklch(0.57 0.17 352.05)",
          "accent": "oklch(0.88 0.08 344.88)",
          "accent-foreground": "oklch(0.44 0.17 352.38)",
          "destructive": "oklch(0.58 0.19 6.34)",
          "destructive-foreground": "oklch(1.00 0 0)",
          "border": "oklch(0.89 0.07 344.39)",
          "input": "oklch(0.92 0.07 326.13)",
          "ring": "oklch(0.60 0.24 0.13)",
          "chart-1": "oklch(0.60 0.24 0.13)",
          "chart-2": "oklch(0.60 0.17 345.04)",
          "chart-3": "oklch(0.60 0.12 311.80)",
          "chart-4": "oklch(0.58 0.12 283.29)",
          "chart-5": "oklch(0.65 0.19 267.97)",
          "radius": "0.5rem",
          "sidebar": "oklch(0.96 0.02 345.75)",
          "sidebar-foreground": "oklch(0.44 0.17 352.38)",
          "sidebar-primary": "oklch(0.60 0.24 0.13)",
          "sidebar-primary-foreground": "oklch(1.00 0 0)",
          "sidebar-accent": "oklch(0.88 0.08 344.88)",
          "sidebar-accent-foreground": "oklch(0.44 0.17 352.38)",
          "sidebar-border": "oklch(0.93 0.04 343.31)",
          "sidebar-ring": "oklch(0.60 0.24 0.13)",
          "font-sans": "Poppins, sans-serif",
          "font-serif": "Playfair Display, serif",
          "font-mono": "Space Mono, monospace",
          "shadow-color": "hsl(330 70% 30% / 0.12)",
          "shadow-opacity": "0.18",
          "shadow-blur": "0px",
          "shadow-spread": "0px",
          "shadow-offset-x": "0px",
          "shadow-offset-y": "3px",
          "letter-spacing": "0em",
          "spacing": "0.25rem",
          "shadow-2xs": "0px 3px 0px 0px hsl(330 70% 30% / 0.09)",
          "shadow-xs": "0px 3px 0px 0px hsl(330 70% 30% / 0.09)",
          "shadow-sm": "0px 3px 0px 0px hsl(330 70% 30% / 0.18), 0px 1px 2px -1px hsl(330 70% 30% / 0.18)",
          "shadow": "0px 3px 0px 0px hsl(330 70% 30% / 0.18), 0px 1px 2px -1px hsl(330 70% 30% / 0.18)",
          "shadow-md": "0px 3px 0px 0px hsl(330 70% 30% / 0.18), 0px 2px 4px -1px hsl(330 70% 30% / 0.18)",
          "shadow-lg": "0px 3px 0px 0px hsl(330 70% 30% / 0.18), 0px 4px 6px -1px hsl(330 70% 30% / 0.18)",
          "shadow-xl": "0px 3px 0px 0px hsl(330 70% 30% / 0.18), 0px 8px 10px -1px hsl(330 70% 30% / 0.18)",
          "shadow-2xl": "0px 3px 0px 0px hsl(330 70% 30% / 0.45)",
          "tracking-normal": "0em"
        },
        "dark": {
          "background": "oklch(0.18 0.05 313.72)",
          "foreground": "oklch(0.86 0.13 326.64)",
          "card": "oklch(0.24 0.07 313.23)",
          "card-foreground": "oklch(0.86 0.13 326.64)",
          "popover": "oklch(0.24 0.07 313.23)",
          "popover-foreground": "oklch(0.86 0.13 326.64)",
          "primary": "oklch(0.75 0.23 332.02)",
          "primary-foreground": "oklch(0.16 0.05 327.57)",
          "secondary": "oklch(0.32 0.09 319.65)",
          "secondary-foreground": "oklch(0.86 0.13 326.64)",
          "muted": "oklch(0.27 0.08 312.35)",
          "muted-foreground": "oklch(0.71 0.16 327.11)",
          "accent": "oklch(0.36 0.12 325.77)",
          "accent-foreground": "oklch(0.86 0.13 326.64)",
          "destructive": "oklch(0.65 0.24 7.17)",
          "destructive-foreground": "oklch(0.98 0 0)",
          "border": "oklch(0.33 0.12 313.54)",
          "input": "oklch(0.32 0.09 319.65)",
          "ring": "oklch(0.75 0.23 332.02)",
          "chart-1": "oklch(0.75 0.23 332.02)",
          "chart-2": "oklch(0.65 0.22 317.63)",
          "chart-3": "oklch(0.62 0.22 292.77)",
          "chart-4": "oklch(0.61 0.16 278.72)",
          "chart-5": "oklch(0.62 0.20 268.05)",
          "radius": "0.5rem",
          "sidebar": "oklch(0.19 0.05 311.40)",
          "sidebar-foreground": "oklch(0.86 0.13 326.64)",
          "sidebar-primary": "oklch(0.75 0.23 332.02)",
          "sidebar-primary-foreground": "oklch(0.16 0.05 327.57)",
          "sidebar-accent": "oklch(0.36 0.12 325.77)",
          "sidebar-accent-foreground": "oklch(0.86 0.13 326.64)",
          "sidebar-border": "oklch(0.33 0.12 313.54)",
          "sidebar-ring": "oklch(0.75 0.23 332.02)",
          "font-sans": "Quicksand, sans-serif",
          "font-serif": "Playfair Display, serif",
          "font-mono": "Space Mono, monospace",
          "shadow-color": "hsl(300 80% 50% / 0.25)",
          "shadow-opacity": "0.18",
          "shadow-blur": "0px",
          "shadow-spread": "0px",
          "shadow-offset-x": "0px",
          "shadow-offset-y": "3px",
          "letter-spacing": "0em",
          "spacing": "0.25rem",
          "shadow-2xs": "0px 3px 0px 0px hsl(300 80% 50% / 0.09)",
          "shadow-xs": "0px 3px 0px 0px hsl(300 80% 50% / 0.09)",
          "shadow-sm": "0px 3px 0px 0px hsl(300 80% 50% / 0.18), 0px 1px 2px -1px hsl(300 80% 50% / 0.18)",
          "shadow": "0px 3px 0px 0px hsl(300 80% 50% / 0.18), 0px 1px 2px -1px hsl(300 80% 50% / 0.18)",
          "shadow-md": "0px 3px 0px 0px hsl(300 80% 50% / 0.18), 0px 2px 4px -1px hsl(300 80% 50% / 0.18)",
          "shadow-lg": "0px 3px 0px 0px hsl(300 80% 50% / 0.18), 0px 4px 6px -1px hsl(300 80% 50% / 0.18)",
          "shadow-xl": "0px 3px 0px 0px hsl(300 80% 50% / 0.18), 0px 8px 10px -1px hsl(300 80% 50% / 0.18)",
          "shadow-2xl": "0px 3px 0px 0px hsl(300 80% 50% / 0.45)"
        }
      }
    },
    {
      "name": "nature",
      "type": "registry:style",
      "title": "Nature",
      "description": "A theme based on the Nature color palette.",
      "css": {
        "@layer base": {
          "body": {
            "letter-spacing": "var(--tracking-normal)"
          }
        }
      },
      "cssVars": {
        "theme": {
          "font-sans": "Montserrat, sans-serif",
          "font-mono": "Source Code Pro, monospace",
          "font-serif": "Merriweather, serif",
          "radius": "0.5rem",
          "tracking-tighter": "calc(var(--tracking-normal) - 0.05em)",
          "tracking-tight": "calc(var(--tracking-normal) - 0.025em)",
          "tracking-wide": "calc(var(--tracking-normal) + 0.025em)",
          "tracking-wider": "calc(var(--tracking-normal) + 0.05em)",
          "tracking-widest": "calc(var(--tracking-normal) + 0.1em)"
        },
        "light": {
          "background": "oklch(0.97 0.01 80.72)",
          "foreground": "oklch(0.30 0.04 30.20)",
          "card": "oklch(0.97 0.01 80.72)",
          "card-foreground": "oklch(0.30 0.04 30.20)",
          "popover": "oklch(0.97 0.01 80.72)",
          "popover-foreground": "oklch(0.30 0.04 30.20)",
          "primary": "oklch(0.52 0.13 144.17)",
          "primary-foreground": "oklch(1.00 0 0)",
          "secondary": "oklch(0.96 0.02 147.64)",
          "secondary-foreground": "oklch(0.43 0.12 144.31)",
          "muted": "oklch(0.94 0.01 74.42)",
          "muted-foreground": "oklch(0.45 0.05 39.21)",
          "accent": "oklch(0.90 0.05 146.04)",
          "accent-foreground": "oklch(0.43 0.12 144.31)",
          "destructive": "oklch(0.54 0.19 26.72)",
          "destructive-foreground": "oklch(1.00 0 0)",
          "border": "oklch(0.88 0.02 74.64)",
          "input": "oklch(0.88 0.02 74.64)",
          "ring": "oklch(0.52 0.13 144.17)",
          "chart-1": "oklch(0.67 0.16 144.21)",
          "chart-2": "oklch(0.58 0.14 144.18)",
          "chart-3": "oklch(0.52 0.13 144.17)",
          "chart-4": "oklch(0.43 0.12 144.31)",
          "chart-5": "oklch(0.22 0.05 145.73)",
          "radius": "0.5rem",
          "sidebar": "oklch(0.94 0.01 74.42)",
          "sidebar-foreground": "oklch(0.30 0.04 30.20)",
          "sidebar-primary": "oklch(0.52 0.13 144.17)",
          "sidebar-primary-foreground": "oklch(1.00 0 0)",
          "sidebar-accent": "oklch(0.90 0.05 146.04)",
          "sidebar-accent-foreground": "oklch(0.43 0.12 144.31)",
          "sidebar-border": "oklch(0.88 0.02 74.64)",
          "sidebar-ring": "oklch(0.52 0.13 144.17)",
          "font-sans": "Montserrat, sans-serif",
          "font-serif": "Merriweather, serif",
          "font-mono": "Source Code Pro, monospace",
          "shadow-color": "hsl(0 0% 0%)",
          "shadow-opacity": "0.1",
          "shadow-blur": "3px",
          "shadow-spread": "0px",
          "shadow-offset-x": "0",
          "shadow-offset-y": "1px",
          "letter-spacing": "0em",
          "spacing": "0.25rem",
          "shadow-2xs": "0 1px 3px 0px hsl(0 0% 0% / 0.05)",
          "shadow-xs": "0 1px 3px 0px hsl(0 0% 0% / 0.05)",
          "shadow-sm": "0 1px 3px 0px hsl(0 0% 0% / 0.10), 0 1px 2px -1px hsl(0 0% 0% / 0.10)",
          "shadow": "0 1px 3px 0px hsl(0 0% 0% / 0.10), 0 1px 2px -1px hsl(0 0% 0% / 0.10)",
          "shadow-md": "0 1px 3px 0px hsl(0 0% 0% / 0.10), 0 2px 4px -1px hsl(0 0% 0% / 0.10)",
          "shadow-lg": "0 1px 3px 0px hsl(0 0% 0% / 0.10), 0 4px 6px -1px hsl(0 0% 0% / 0.10)",
          "shadow-xl": "0 1px 3px 0px hsl(0 0% 0% / 0.10), 0 8px 10px -1px hsl(0 0% 0% / 0.10)",
          "shadow-2xl": "0 1px 3px 0px hsl(0 0% 0% / 0.25)",
          "tracking-normal": "0em"
        },
        "dark": {
          "background": "oklch(0.27 0.03 150.77)",
          "foreground": "oklch(0.94 0.01 72.66)",
          "card": "oklch(0.33 0.03 146.99)",
          "card-foreground": "oklch(0.94 0.01 72.66)",
          "popover": "oklch(0.33 0.03 146.99)",
          "popover-foreground": "oklch(0.94 0.01 72.66)",
          "primary": "oklch(0.67 0.16 144.21)",
          "primary-foreground": "oklch(0.22 0.05 145.73)",
          "secondary": "oklch(0.39 0.03 142.99)",
          "secondary-foreground": "oklch(0.90 0.02 142.55)",
          "muted": "oklch(0.33 0.03 146.99)",
          "muted-foreground": "oklch(0.86 0.02 76.10)",
          "accent": "oklch(0.58 0.14 144.18)",
          "accent-foreground": "oklch(0.94 0.01 72.66)",
          "destructive": "oklch(0.54 0.19 26.72)",
          "destructive-foreground": "oklch(0.94 0.01 72.66)",
          "border": "oklch(0.39 0.03 142.99)",
          "input": "oklch(0.39 0.03 142.99)",
          "ring": "oklch(0.67 0.16 144.21)",
          "chart-1": "oklch(0.77 0.12 145.30)",
          "chart-2": "oklch(0.72 0.14 144.89)",
          "chart-3": "oklch(0.67 0.16 144.21)",
          "chart-4": "oklch(0.63 0.15 144.20)",
          "chart-5": "oklch(0.58 0.14 144.18)",
          "radius": "0.5rem",
          "sidebar": "oklch(0.27 0.03 150.77)",
          "sidebar-foreground": "oklch(0.94 0.01 72.66)",
          "sidebar-primary": "oklch(0.67 0.16 144.21)",
          "sidebar-primary-foreground": "oklch(0.22 0.05 145.73)",
          "sidebar-accent": "oklch(0.58 0.14 144.18)",
          "sidebar-accent-foreground": "oklch(0.94 0.01 72.66)",
          "sidebar-border": "oklch(0.39 0.03 142.99)",
          "sidebar-ring": "oklch(0.67 0.16 144.21)",
          "font-sans": "Montserrat, sans-serif",
          "font-serif": "Merriweather, serif",
          "font-mono": "Source Code Pro, monospace",
          "shadow-color": "hsl(0 0% 0%)",
          "shadow-opacity": "0.1",
          "shadow-blur": "3px",
          "shadow-spread": "0px",
          "shadow-offset-x": "0",
          "shadow-offset-y": "1px",
          "letter-spacing": "0em",
          "spacing": "0.25rem",
          "shadow-2xs": "0 1px 3px 0px hsl(0 0% 0% / 0.05)",
          "shadow-xs": "0 1px 3px 0px hsl(0 0% 0% / 0.05)",
          "shadow-sm": "0 1px 3px 0px hsl(0 0% 0% / 0.10), 0 1px 2px -1px hsl(0 0% 0% / 0.10)",
          "shadow": "0 1px 3px 0px hsl(0 0% 0% / 0.10), 0 1px 2px -1px hsl(0 0% 0% / 0.10)",
          "shadow-md": "0 1px 3px 0px hsl(0 0% 0% / 0.10), 0 2px 4px -1px hsl(0 0% 0% / 0.10)",
          "shadow-lg": "0 1px 3px 0px hsl(0 0% 0% / 0.10), 0 4px 6px -1px hsl(0 0% 0% / 0.10)",
          "shadow-xl": "0 1px 3px 0px hsl(0 0% 0% / 0.10), 0 8px 10px -1px hsl(0 0% 0% / 0.10)",
          "shadow-2xl": "0 1px 3px 0px hsl(0 0% 0% / 0.25)"
        }
      }
    },
    {
      "name": "bold-tech",
      "type": "registry:style",
      "title": "Bold Tech",
      "description": "A theme based on the Bold Tech color palette.",
      "css": {
        "@layer base": {
          "body": {
            "letter-spacing": "var(--tracking-normal)"
          }
        }
      },
      "cssVars": {
        "theme": {
          "font-sans": "Roboto, sans-serif",
          "font-mono": "Fira Code, monospace",
          "font-serif": "Playfair Display, serif",
          "radius": "0.625rem",
          "tracking-tighter": "calc(var(--tracking-normal) - 0.05em)",
          "tracking-tight": "calc(var(--tracking-normal) - 0.025em)",
          "tracking-wide": "calc(var(--tracking-normal) + 0.025em)",
          "tracking-wider": "calc(var(--tracking-normal) + 0.05em)",
          "tracking-widest": "calc(var(--tracking-normal) + 0.1em)"
        },
        "light": {
          "background": "oklch(1.00 0 0)",
          "foreground": "oklch(0.36 0.14 278.70)",
          "card": "oklch(1.00 0 0)",
          "card-foreground": "oklch(0.36 0.14 278.70)",
          "popover": "oklch(1.00 0 0)",
          "popover-foreground": "oklch(0.36 0.14 278.70)",
          "primary": "oklch(0.61 0.22 292.72)",
          "primary-foreground": "oklch(1.00 0 0)",
          "secondary": "oklch(0.96 0.02 295.19)",
          "secondary-foreground": "oklch(0.46 0.21 277.02)",
          "muted": "oklch(0.97 0.02 293.76)",
          "muted-foreground": "oklch(0.54 0.25 293.01)",
          "accent": "oklch(0.93 0.03 255.59)",
          "accent-foreground": "oklch(0.42 0.18 265.64)",
          "destructive": "oklch(0.64 0.21 25.33)",
          "destructive-foreground": "oklch(1.00 0 0)",
          "border": "oklch(0.93 0.03 272.79)",
          "input": "oklch(0.93 0.03 272.79)",
          "ring": "oklch(0.61 0.22 292.72)",
          "chart-1": "oklch(0.61 0.22 292.72)",
          "chart-2": "oklch(0.54 0.25 293.01)",
          "chart-3": "oklch(0.49 0.24 292.58)",
          "chart-4": "oklch(0.43 0.21 292.76)",
          "chart-5": "oklch(0.38 0.18 293.74)",
          "radius": "0.625rem",
          "sidebar": "oklch(0.97 0.02 293.76)",
          "sidebar-foreground": "oklch(0.36 0.14 278.70)",
          "sidebar-primary": "oklch(0.61 0.22 292.72)",
          "sidebar-primary-foreground": "oklch(1.00 0 0)",
          "sidebar-accent": "oklch(0.93 0.03 255.59)",
          "sidebar-accent-foreground": "oklch(0.42 0.18 265.64)",
          "sidebar-border": "oklch(0.93 0.03 272.79)",
          "sidebar-ring": "oklch(0.61 0.22 292.72)",
          "font-sans": "Roboto, sans-serif",
          "font-serif": "Playfair Display, serif",
          "font-mono": "Fira Code, monospace",
          "shadow-color": "hsl(255 86% 66%)",
          "shadow-opacity": "0.2",
          "shadow-blur": "4px",
          "shadow-spread": "0px",
          "shadow-offset-x": "2px",
          "shadow-offset-y": "2px",
          "letter-spacing": "0em",
          "spacing": "0.25rem",
          "shadow-2xs": "2px 2px 4px 0px hsl(255 86% 66% / 0.10)",
          "shadow-xs": "2px 2px 4px 0px hsl(255 86% 66% / 0.10)",
          "shadow-sm": "2px 2px 4px 0px hsl(255 86% 66% / 0.20), 2px 1px 2px -1px hsl(255 86% 66% / 0.20)",
          "shadow": "2px 2px 4px 0px hsl(255 86% 66% / 0.20), 2px 1px 2px -1px hsl(255 86% 66% / 0.20)",
          "shadow-md": "2px 2px 4px 0px hsl(255 86% 66% / 0.20), 2px 2px 4px -1px hsl(255 86% 66% / 0.20)",
          "shadow-lg": "2px 2px 4px 0px hsl(255 86% 66% / 0.20), 2px 4px 6px -1px hsl(255 86% 66% / 0.20)",
          "shadow-xl": "2px 2px 4px 0px hsl(255 86% 66% / 0.20), 2px 8px 10px -1px hsl(255 86% 66% / 0.20)",
          "shadow-2xl": "2px 2px 4px 0px hsl(255 86% 66% / 0.50)",
          "tracking-normal": "0em"
        },
        "dark": {
          "background": "oklch(0.21 0.04 265.75)",
          "foreground": "oklch(0.93 0.03 272.79)",
          "card": "oklch(0.26 0.09 281.29)",
          "card-foreground": "oklch(0.93 0.03 272.79)",
          "popover": "oklch(0.26 0.09 281.29)",
          "popover-foreground": "oklch(0.93 0.03 272.79)",
          "primary": "oklch(0.61 0.22 292.72)",
          "primary-foreground": "oklch(1.00 0 0)",
          "secondary": "oklch(0.26 0.09 281.29)",
          "secondary-foreground": "oklch(0.93 0.03 272.79)",
          "muted": "oklch(0.26 0.09 281.29)",
          "muted-foreground": "oklch(0.81 0.10 293.57)",
          "accent": "oklch(0.46 0.21 277.02)",
          "accent-foreground": "oklch(0.93 0.03 272.79)",
          "destructive": "oklch(0.64 0.21 25.33)",
          "destructive-foreground": "oklch(1.00 0 0)",
          "border": "oklch(0.28 0.14 291.09)",
          "input": "oklch(0.28 0.14 291.09)",
          "ring": "oklch(0.61 0.22 292.72)",
          "chart-1": "oklch(0.71 0.16 293.54)",
          "chart-2": "oklch(0.61 0.22 292.72)",
          "chart-3": "oklch(0.54 0.25 293.01)",
          "chart-4": "oklch(0.49 0.24 292.58)",
          "chart-5": "oklch(0.43 0.21 292.76)",
          "radius": "0.625rem",
          "sidebar": "oklch(0.21 0.04 265.75)",
          "sidebar-foreground": "oklch(0.93 0.03 272.79)",
          "sidebar-primary": "oklch(0.61 0.22 292.72)",
          "sidebar-primary-foreground": "oklch(1.00 0 0)",
          "sidebar-accent": "oklch(0.46 0.21 277.02)",
          "sidebar-accent-foreground": "oklch(0.93 0.03 272.79)",
          "sidebar-border": "oklch(0.28 0.14 291.09)",
          "sidebar-ring": "oklch(0.61 0.22 292.72)",
          "font-sans": "Roboto, sans-serif",
          "font-serif": "Playfair Display, serif",
          "font-mono": "Fira Code, monospace",
          "shadow-color": "hsl(255 86% 66%)",
          "shadow-opacity": "0.2",
          "shadow-blur": "4px",
          "shadow-spread": "0px",
          "shadow-offset-x": "2px",
          "shadow-offset-y": "2px",
          "letter-spacing": "0em",
          "spacing": "0.25rem",
          "shadow-2xs": "2px 2px 4px 0px hsl(255 86% 66% / 0.10)",
          "shadow-xs": "2px 2px 4px 0px hsl(255 86% 66% / 0.10)",
          "shadow-sm": "2px 2px 4px 0px hsl(255 86% 66% / 0.20), 2px 1px 2px -1px hsl(255 86% 66% / 0.20)",
          "shadow": "2px 2px 4px 0px hsl(255 86% 66% / 0.20), 2px 1px 2px -1px hsl(255 86% 66% / 0.20)",
          "shadow-md": "2px 2px 4px 0px hsl(255 86% 66% / 0.20), 2px 2px 4px -1px hsl(255 86% 66% / 0.20)",
          "shadow-lg": "2px 2px 4px 0px hsl(255 86% 66% / 0.20), 2px 4px 6px -1px hsl(255 86% 66% / 0.20)",
          "shadow-xl": "2px 2px 4px 0px hsl(255 86% 66% / 0.20), 2px 8px 10px -1px hsl(255 86% 66% / 0.20)",
          "shadow-2xl": "2px 2px 4px 0px hsl(255 86% 66% / 0.50)"
        }
      }
    },
    {
      "name": "elegant-luxury",
      "type": "registry:style",
      "title": "Elegant Luxury",
      "description": "A theme based on the Elegant Luxury color palette.",
      "css": {
        "@layer base": {
          "body": {
            "letter-spacing": "var(--tracking-normal)"
          }
        }
      },
      "cssVars": {
        "theme": {
          "font-sans": "Poppins, sans-serif",
          "font-mono": "IBM Plex Mono, monospace",
          "font-serif": "Libre Baskerville, serif",
          "radius": "0.375rem",
          "tracking-tighter": "calc(var(--tracking-normal) - 0.05em)",
          "tracking-tight": "calc(var(--tracking-normal) - 0.025em)",
          "tracking-wide": "calc(var(--tracking-normal) + 0.025em)",
          "tracking-wider": "calc(var(--tracking-normal) + 0.05em)",
          "tracking-widest": "calc(var(--tracking-normal) + 0.1em)"
        },
        "light": {
          "background": "oklch(0.98 0.00 56.38)",
          "foreground": "oklch(0.22 0 0)",
          "card": "oklch(0.98 0.00 56.38)",
          "card-foreground": "oklch(0.22 0 0)",
          "popover": "oklch(0.98 0.00 56.38)",
          "popover-foreground": "oklch(0.22 0 0)",
          "primary": "oklch(0.47 0.15 24.94)",
          "primary-foreground": "oklch(1.00 0 0)",
          "secondary": "oklch(0.96 0.04 89.09)",
          "secondary-foreground": "oklch(0.48 0.10 75.12)",
          "muted": "oklch(0.94 0.01 53.44)",
          "muted-foreground": "oklch(0.44 0.01 73.64)",
          "accent": "oklch(0.96 0.06 95.62)",
          "accent-foreground": "oklch(0.40 0.13 25.72)",
          "destructive": "oklch(0.44 0.16 26.90)",
          "destructive-foreground": "oklch(1.00 0 0)",
          "border": "oklch(0.94 0.03 80.99)",
          "input": "oklch(0.94 0.03 80.99)",
          "ring": "oklch(0.47 0.15 24.94)",
          "chart-1": "oklch(0.51 0.19 27.52)",
          "chart-2": "oklch(0.47 0.15 24.94)",
          "chart-3": "oklch(0.40 0.13 25.72)",
          "chart-4": "oklch(0.56 0.15 49.00)",
          "chart-5": "oklch(0.47 0.12 46.20)",
          "radius": "0.375rem",
          "sidebar": "oklch(0.94 0.01 53.44)",
          "sidebar-foreground": "oklch(0.22 0 0)",
          "sidebar-primary": "oklch(0.47 0.15 24.94)",
          "sidebar-primary-foreground": "oklch(1.00 0 0)",
          "sidebar-accent": "oklch(0.96 0.06 95.62)",
          "sidebar-accent-foreground": "oklch(0.40 0.13 25.72)",
          "sidebar-border": "oklch(0.94 0.03 80.99)",
          "sidebar-ring": "oklch(0.47 0.15 24.94)",
          "font-sans": "Poppins, sans-serif",
          "font-serif": "Libre Baskerville, serif",
          "font-mono": "IBM Plex Mono, monospace",
          "shadow-color": "hsl(0 63% 18%)",
          "shadow-opacity": "0.12",
          "shadow-blur": "16px",
          "shadow-spread": "-2px",
          "shadow-offset-x": "1px",
          "shadow-offset-y": "1px",
          "letter-spacing": "0em",
          "spacing": "0.25rem",
          "shadow-2xs": "1px 1px 16px -2px hsl(0 63% 18% / 0.06)",
          "shadow-xs": "1px 1px 16px -2px hsl(0 63% 18% / 0.06)",
          "shadow-sm": "1px 1px 16px -2px hsl(0 63% 18% / 0.12), 1px 1px 2px -3px hsl(0 63% 18% / 0.12)",
          "shadow": "1px 1px 16px -2px hsl(0 63% 18% / 0.12), 1px 1px 2px -3px hsl(0 63% 18% / 0.12)",
          "shadow-md": "1px 1px 16px -2px hsl(0 63% 18% / 0.12), 1px 2px 4px -3px hsl(0 63% 18% / 0.12)",
          "shadow-lg": "1px 1px 16px -2px hsl(0 63% 18% / 0.12), 1px 4px 6px -3px hsl(0 63% 18% / 0.12)",
          "shadow-xl": "1px 1px 16px -2px hsl(0 63% 18% / 0.12), 1px 8px 10px -3px hsl(0 63% 18% / 0.12)",
          "shadow-2xl": "1px 1px 16px -2px hsl(0 63% 18% / 0.30)",
          "tracking-normal": "0em"
        },
        "dark": {
          "background": "oklch(0.22 0.01 56.04)",
          "foreground": "oklch(0.97 0.00 106.42)",
          "card": "oklch(0.27 0.01 34.30)",
          "card-foreground": "oklch(0.97 0.00 106.42)",
          "popover": "oklch(0.27 0.01 34.30)",
          "popover-foreground": "oklch(0.97 0.00 106.42)",
          "primary": "oklch(0.51 0.19 27.52)",
          "primary-foreground": "oklch(0.98 0.00 56.38)",
          "secondary": "oklch(0.47 0.12 46.20)",
          "secondary-foreground": "oklch(0.96 0.06 95.62)",
          "muted": "oklch(0.27 0.01 34.30)",
          "muted-foreground": "oklch(0.87 0.00 56.37)",
          "accent": "oklch(0.56 0.15 49.00)",
          "accent-foreground": "oklch(0.96 0.06 95.62)",
          "destructive": "oklch(0.64 0.21 25.33)",
          "destructive-foreground": "oklch(1.00 0 0)",
          "border": "oklch(0.37 0.01 67.56)",
          "input": "oklch(0.37 0.01 67.56)",
          "ring": "oklch(0.51 0.19 27.52)",
          "chart-1": "oklch(0.71 0.17 22.22)",
          "chart-2": "oklch(0.64 0.21 25.33)",
          "chart-3": "oklch(0.58 0.22 27.33)",
          "chart-4": "oklch(0.84 0.16 84.43)",
          "chart-5": "oklch(0.77 0.16 70.08)",
          "radius": "0.375rem",
          "sidebar": "oklch(0.22 0.01 56.04)",
          "sidebar-foreground": "oklch(0.97 0.00 106.42)",
          "sidebar-primary": "oklch(0.51 0.19 27.52)",
          "sidebar-primary-foreground": "oklch(0.98 0.00 56.38)",
          "sidebar-accent": "oklch(0.56 0.15 49.00)",
          "sidebar-accent-foreground": "oklch(0.96 0.06 95.62)",
          "sidebar-border": "oklch(0.37 0.01 67.56)",
          "sidebar-ring": "oklch(0.51 0.19 27.52)",
          "font-sans": "Poppins, sans-serif",
          "font-serif": "Libre Baskerville, serif",
          "font-mono": "IBM Plex Mono, monospace",
          "shadow-color": "hsl(0 63% 18%)",
          "shadow-opacity": "0.12",
          "shadow-blur": "16px",
          "shadow-spread": "-2px",
          "shadow-offset-x": "1px",
          "shadow-offset-y": "1px",
          "letter-spacing": "0em",
          "spacing": "0.25rem",
          "shadow-2xs": "1px 1px 16px -2px hsl(0 63% 18% / 0.06)",
          "shadow-xs": "1px 1px 16px -2px hsl(0 63% 18% / 0.06)",
          "shadow-sm": "1px 1px 16px -2px hsl(0 63% 18% / 0.12), 1px 1px 2px -3px hsl(0 63% 18% / 0.12)",
          "shadow": "1px 1px 16px -2px hsl(0 63% 18% / 0.12), 1px 1px 2px -3px hsl(0 63% 18% / 0.12)",
          "shadow-md": "1px 1px 16px -2px hsl(0 63% 18% / 0.12), 1px 2px 4px -3px hsl(0 63% 18% / 0.12)",
          "shadow-lg": "1px 1px 16px -2px hsl(0 63% 18% / 0.12), 1px 4px 6px -3px hsl(0 63% 18% / 0.12)",
          "shadow-xl": "1px 1px 16px -2px hsl(0 63% 18% / 0.12), 1px 8px 10px -3px hsl(0 63% 18% / 0.12)",
          "shadow-2xl": "1px 1px 16px -2px hsl(0 63% 18% / 0.30)"
        }
      }
    },
    {
      "name": "amber-minimal",
      "type": "registry:style",
      "title": "Amber Minimal",
      "description": "A theme based on the Amber Minimal color palette.",
      "css": {
        "@layer base": {
          "body": {
            "letter-spacing": "var(--tracking-normal)"
          }
        }
      },
      "cssVars": {
        "theme": {
          "font-sans": "Inter, sans-serif",
          "font-mono": "JetBrains Mono, monospace",
          "font-serif": "Source Serif 4, serif",
          "radius": "0.375rem",
          "tracking-tighter": "calc(var(--tracking-normal) - 0.05em)",
          "tracking-tight": "calc(var(--tracking-normal) - 0.025em)",
          "tracking-wide": "calc(var(--tracking-normal) + 0.025em)",
          "tracking-wider": "calc(var(--tracking-normal) + 0.05em)",
          "tracking-widest": "calc(var(--tracking-normal) + 0.1em)"
        },
        "light": {
          "background": "oklch(1.00 0 0)",
          "foreground": "oklch(0.27 0 0)",
          "card": "oklch(1.00 0 0)",
          "card-foreground": "oklch(0.27 0 0)",
          "popover": "oklch(1.00 0 0)",
          "popover-foreground": "oklch(0.27 0 0)",
          "primary": "oklch(0.77 0.16 70.08)",
          "primary-foreground": "oklch(0 0 0)",
          "secondary": "oklch(0.97 0.00 264.54)",
          "secondary-foreground": "oklch(0.45 0.03 256.80)",
          "muted": "oklch(0.98 0.00 247.84)",
          "muted-foreground": "oklch(0.55 0.02 264.36)",
          "accent": "oklch(0.99 0.02 95.28)",
          "accent-foreground": "oklch(0.47 0.12 46.20)",
          "destructive": "oklch(0.64 0.21 25.33)",
          "destructive-foreground": "oklch(1.00 0 0)",
          "border": "oklch(0.93 0.01 264.53)",
          "input": "oklch(0.93 0.01 264.53)",
          "ring": "oklch(0.77 0.16 70.08)",
          "chart-1": "oklch(0.77 0.16 70.08)",
          "chart-2": "oklch(0.67 0.16 58.32)",
          "chart-3": "oklch(0.56 0.15 49.00)",
          "chart-4": "oklch(0.47 0.12 46.20)",
          "chart-5": "oklch(0.41 0.11 45.90)",
          "radius": "0.375rem",
          "sidebar": "oklch(0.98 0.00 247.84)",
          "sidebar-foreground": "oklch(0.27 0 0)",
          "sidebar-primary": "oklch(0.77 0.16 70.08)",
          "sidebar-primary-foreground": "oklch(1.00 0 0)",
          "sidebar-accent": "oklch(0.99 0.02 95.28)",
          "sidebar-accent-foreground": "oklch(0.47 0.12 46.20)",
          "sidebar-border": "oklch(0.93 0.01 264.53)",
          "sidebar-ring": "oklch(0.77 0.16 70.08)",
          "font-sans": "Inter, sans-serif",
          "font-serif": "Source Serif 4, serif",
          "font-mono": "JetBrains Mono, monospace",
          "shadow-color": "hsl(0 0% 0%)",
          "shadow-opacity": "0.1",
          "shadow-blur": "8px",
          "shadow-spread": "-1px",
          "shadow-offset-x": "0px",
          "shadow-offset-y": "4px",
          "letter-spacing": "0em",
          "spacing": "0.25rem",
          "shadow-2xs": "0px 4px 8px -1px hsl(0 0% 0% / 0.05)",
          "shadow-xs": "0px 4px 8px -1px hsl(0 0% 0% / 0.05)",
          "shadow-sm": "0px 4px 8px -1px hsl(0 0% 0% / 0.10), 0px 1px 2px -2px hsl(0 0% 0% / 0.10)",
          "shadow": "0px 4px 8px -1px hsl(0 0% 0% / 0.10), 0px 1px 2px -2px hsl(0 0% 0% / 0.10)",
          "shadow-md": "0px 4px 8px -1px hsl(0 0% 0% / 0.10), 0px 2px 4px -2px hsl(0 0% 0% / 0.10)",
          "shadow-lg": "0px 4px 8px -1px hsl(0 0% 0% / 0.10), 0px 4px 6px -2px hsl(0 0% 0% / 0.10)",
          "shadow-xl": "0px 4px 8px -1px hsl(0 0% 0% / 0.10), 0px 8px 10px -2px hsl(0 0% 0% / 0.10)",
          "shadow-2xl": "0px 4px 8px -1px hsl(0 0% 0% / 0.25)",
          "tracking-normal": "0em"
        },
        "dark": {
          "background": "oklch(0.20 0 0)",
          "foreground": "oklch(0.92 0 0)",
          "card": "oklch(0.27 0 0)",
          "card-foreground": "oklch(0.92 0 0)",
          "popover": "oklch(0.27 0 0)",
          "popover-foreground": "oklch(0.92 0 0)",
          "primary": "oklch(0.77 0.16 70.08)",
          "primary-foreground": "oklch(0 0 0)",
          "secondary": "oklch(0.27 0 0)",
          "secondary-foreground": "oklch(0.92 0 0)",
          "muted": "oklch(0.27 0 0)",
          "muted-foreground": "oklch(0.72 0 0)",
          "accent": "oklch(0.47 0.12 46.20)",
          "accent-foreground": "oklch(0.92 0.12 95.75)",
          "destructive": "oklch(0.64 0.21 25.33)",
          "destructive-foreground": "oklch(1.00 0 0)",
          "border": "oklch(0.37 0 0)",
          "input": "oklch(0.37 0 0)",
          "ring": "oklch(0.77 0.16 70.08)",
          "chart-1": "oklch(0.84 0.16 84.43)",
          "chart-2": "oklch(0.67 0.16 58.32)",
          "chart-3": "oklch(0.47 0.12 46.20)",
          "chart-4": "oklch(0.56 0.15 49.00)",
          "chart-5": "oklch(0.47 0.12 46.20)",
          "radius": "0.375rem",
          "sidebar": "oklch(0.17 0 0)",
          "sidebar-foreground": "oklch(0.92 0 0)",
          "sidebar-primary": "oklch(0.77 0.16 70.08)",
          "sidebar-primary-foreground": "oklch(1.00 0 0)",
          "sidebar-accent": "oklch(0.47 0.12 46.20)",
          "sidebar-accent-foreground": "oklch(0.92 0.12 95.75)",
          "sidebar-border": "oklch(0.37 0 0)",
          "sidebar-ring": "oklch(0.77 0.16 70.08)",
          "font-sans": "Inter, sans-serif",
          "font-serif": "Source Serif 4, serif",
          "font-mono": "JetBrains Mono, monospace",
          "shadow-color": "hsl(0 0% 0%)",
          "shadow-opacity": "0.1",
          "shadow-blur": "8px",
          "shadow-spread": "-1px",
          "shadow-offset-x": "0px",
          "shadow-offset-y": "4px",
          "letter-spacing": "0em",
          "spacing": "0.25rem",
          "shadow-2xs": "0px 4px 8px -1px hsl(0 0% 0% / 0.05)",
          "shadow-xs": "0px 4px 8px -1px hsl(0 0% 0% / 0.05)",
          "shadow-sm": "0px 4px 8px -1px hsl(0 0% 0% / 0.10), 0px 1px 2px -2px hsl(0 0% 0% / 0.10)",
          "shadow": "0px 4px 8px -1px hsl(0 0% 0% / 0.10), 0px 1px 2px -2px hsl(0 0% 0% / 0.10)",
          "shadow-md": "0px 4px 8px -1px hsl(0 0% 0% / 0.10), 0px 2px 4px -2px hsl(0 0% 0% / 0.10)",
          "shadow-lg": "0px 4px 8px -1px hsl(0 0% 0% / 0.10), 0px 4px 6px -2px hsl(0 0% 0% / 0.10)",
          "shadow-xl": "0px 4px 8px -1px hsl(0 0% 0% / 0.10), 0px 8px 10px -2px hsl(0 0% 0% / 0.10)",
          "shadow-2xl": "0px 4px 8px -1px hsl(0 0% 0% / 0.25)"
        }
      }
    },
    {
      "name": "supabase",
      "type": "registry:style",
      "title": "Supabase",
      "description": "A theme based on the Supabase color palette.",
      "css": {
        "@layer base": {
          "body": {
            "letter-spacing": "var(--tracking-normal)"
          }
        }
      },
      "cssVars": {
        "theme": {
          "font-sans": "Outfit, sans-serif",
          "font-mono": "monospace",
          "font-serif": "ui-serif, Georgia, Cambria, \"Times New Roman\", Times, serif",
          "radius": "0.5rem",
          "tracking-tighter": "calc(var(--tracking-normal) - 0.05em)",
          "tracking-tight": "calc(var(--tracking-normal) - 0.025em)",
          "tracking-wide": "calc(var(--tracking-normal) + 0.025em)",
          "tracking-wider": "calc(var(--tracking-normal) + 0.05em)",
          "tracking-widest": "calc(var(--tracking-normal) + 0.1em)"
        },
        "light": {
          "background": "oklch(0.99 0 0)",
          "foreground": "oklch(0.20 0 0)",
          "card": "oklch(0.99 0 0)",
          "card-foreground": "oklch(0.20 0 0)",
          "popover": "oklch(0.99 0 0)",
          "popover-foreground": "oklch(0.44 0 0)",
          "primary": "oklch(0.83 0.13 160.91)",
          "primary-foreground": "oklch(0.26 0.01 166.46)",
          "secondary": "oklch(0.99 0 0)",
          "secondary-foreground": "oklch(0.20 0 0)",
          "muted": "oklch(0.95 0 0)",
          "muted-foreground": "oklch(0.24 0 0)",
          "accent": "oklch(0.95 0 0)",
          "accent-foreground": "oklch(0.24 0 0)",
          "destructive": "oklch(0.55 0.19 32.73)",
          "destructive-foreground": "oklch(0.99 0.00 17.21)",
          "border": "oklch(0.90 0 0)",
          "input": "oklch(0.97 0 0)",
          "ring": "oklch(0.83 0.13 160.91)",
          "chart-1": "oklch(0.83 0.13 160.91)",
          "chart-2": "oklch(0.62 0.19 259.81)",
          "chart-3": "oklch(0.61 0.22 292.72)",
          "chart-4": "oklch(0.77 0.16 70.08)",
          "chart-5": "oklch(0.70 0.15 162.48)",
          "radius": "0.5rem",
          "sidebar": "oklch(0.99 0 0)",
          "sidebar-foreground": "oklch(0.55 0 0)",
          "sidebar-primary": "oklch(0.83 0.13 160.91)",
          "sidebar-primary-foreground": "oklch(0.26 0.01 166.46)",
          "sidebar-accent": "oklch(0.95 0 0)",
          "sidebar-accent-foreground": "oklch(0.24 0 0)",
          "sidebar-border": "oklch(0.90 0 0)",
          "sidebar-ring": "oklch(0.83 0.13 160.91)",
          "font-sans": "Outfit, sans-serif",
          "font-serif": "ui-serif, Georgia, Cambria, \"Times New Roman\", Times, serif",
          "font-mono": "monospace",
          "shadow-color": "#000000",
          "shadow-opacity": "0.17",
          "shadow-blur": "3px",
          "shadow-spread": "0px",
          "shadow-offset-x": "0px",
          "shadow-offset-y": "1px",
          "letter-spacing": "0.025em",
          "spacing": "0.25rem",
          "shadow-2xs": "0px 1px 3px 0px hsl(0 0% 0% / 0.09)",
          "shadow-xs": "0px 1px 3px 0px hsl(0 0% 0% / 0.09)",
          "shadow-sm": "0px 1px 3px 0px hsl(0 0% 0% / 0.17), 0px 1px 2px -1px hsl(0 0% 0% / 0.17)",
          "shadow": "0px 1px 3px 0px hsl(0 0% 0% / 0.17), 0px 1px 2px -1px hsl(0 0% 0% / 0.17)",
          "shadow-md": "0px 1px 3px 0px hsl(0 0% 0% / 0.17), 0px 2px 4px -1px hsl(0 0% 0% / 0.17)",
          "shadow-lg": "0px 1px 3px 0px hsl(0 0% 0% / 0.17), 0px 4px 6px -1px hsl(0 0% 0% / 0.17)",
          "shadow-xl": "0px 1px 3px 0px hsl(0 0% 0% / 0.17), 0px 8px 10px -1px hsl(0 0% 0% / 0.17)",
          "shadow-2xl": "0px 1px 3px 0px hsl(0 0% 0% / 0.43)",
          "tracking-normal": "0.025em"
        },
        "dark": {
          "background": "oklch(0.18 0 0)",
          "foreground": "oklch(0.93 0.01 255.51)",
          "card": "oklch(0.20 0 0)",
          "card-foreground": "oklch(0.93 0.01 255.51)",
          "popover": "oklch(0.26 0 0)",
          "popover-foreground": "oklch(0.73 0 0)",
          "primary": "oklch(0.44 0.10 156.76)",
          "primary-foreground": "oklch(0.92 0.01 167.16)",
          "secondary": "oklch(0.26 0 0)",
          "secondary-foreground": "oklch(0.99 0 0)",
          "muted": "oklch(0.24 0 0)",
          "muted-foreground": "oklch(0.71 0 0)",
          "accent": "oklch(0.31 0 0)",
          "accent-foreground": "oklch(0.99 0 0)",
          "destructive": "oklch(0.31 0.09 29.79)",
          "destructive-foreground": "oklch(0.94 0.00 34.31)",
          "border": "oklch(0.28 0 0)",
          "input": "oklch(0.26 0 0)",
          "ring": "oklch(0.80 0.18 151.71)",
          "chart-1": "oklch(0.80 0.18 151.71)",
          "chart-2": "oklch(0.71 0.14 254.62)",
          "chart-3": "oklch(0.71 0.16 293.54)",
          "chart-4": "oklch(0.84 0.16 84.43)",
          "chart-5": "oklch(0.78 0.13 181.91)",
          "radius": "0.5rem",
          "sidebar": "oklch(0.18 0 0)",
          "sidebar-foreground": "oklch(0.63 0 0)",
          "sidebar-primary": "oklch(0.44 0.10 156.76)",
          "sidebar-primary-foreground": "oklch(0.92 0.01 167.16)",
          "sidebar-accent": "oklch(0.31 0 0)",
          "sidebar-accent-foreground": "oklch(0.99 0 0)",
          "sidebar-border": "oklch(0.28 0 0)",
          "sidebar-ring": "oklch(0.80 0.18 151.71)",
          "font-sans": "Outfit, sans-serif",
          "font-serif": "ui-serif, Georgia, Cambria, \"Times New Roman\", Times, serif",
          "font-mono": "monospace",
          "shadow-color": "#000000",
          "shadow-opacity": "0.17",
          "shadow-blur": "3px",
          "shadow-spread": "0px",
          "shadow-offset-x": "0px",
          "shadow-offset-y": "1px",
          "letter-spacing": "0.025em",
          "spacing": "0.25rem",
          "shadow-2xs": "0px 1px 3px 0px hsl(0 0% 0% / 0.09)",
          "shadow-xs": "0px 1px 3px 0px hsl(0 0% 0% / 0.09)",
          "shadow-sm": "0px 1px 3px 0px hsl(0 0% 0% / 0.17), 0px 1px 2px -1px hsl(0 0% 0% / 0.17)",
          "shadow": "0px 1px 3px 0px hsl(0 0% 0% / 0.17), 0px 1px 2px -1px hsl(0 0% 0% / 0.17)",
          "shadow-md": "0px 1px 3px 0px hsl(0 0% 0% / 0.17), 0px 2px 4px -1px hsl(0 0% 0% / 0.17)",
          "shadow-lg": "0px 1px 3px 0px hsl(0 0% 0% / 0.17), 0px 4px 6px -1px hsl(0 0% 0% / 0.17)",
          "shadow-xl": "0px 1px 3px 0px hsl(0 0% 0% / 0.17), 0px 8px 10px -1px hsl(0 0% 0% / 0.17)",
          "shadow-2xl": "0px 1px 3px 0px hsl(0 0% 0% / 0.43)"
        }
      }
    },
    {
      "name": "neo-brutalism",
      "type": "registry:style",
      "title": "Neo Brutalism",
      "description": "A theme based on the Neo Brutalism color palette.",
      "css": {
        "@layer base": {
          "body": {
            "letter-spacing": "var(--tracking-normal)"
          }
        }
      },
      "cssVars": {
        "theme": {
          "font-sans": "DM Sans, sans-serif",
          "font-mono": "Space Mono, monospace",
          "font-serif": "ui-serif, Georgia, Cambria, \"Times New Roman\", Times, serif",
          "radius": "0px",
          "tracking-tighter": "calc(var(--tracking-normal) - 0.05em)",
          "tracking-tight": "calc(var(--tracking-normal) - 0.025em)",
          "tracking-wide": "calc(var(--tracking-normal) + 0.025em)",
          "tracking-wider": "calc(var(--tracking-normal) + 0.05em)",
          "tracking-widest": "calc(var(--tracking-normal) + 0.1em)"
        },
        "light": {
          "background": "oklch(1.00 0 0)",
          "foreground": "oklch(0 0 0)",
          "card": "oklch(1.00 0 0)",
          "card-foreground": "oklch(0 0 0)",
          "popover": "oklch(1.00 0 0)",
          "popover-foreground": "oklch(0 0 0)",
          "primary": "oklch(0.65 0.24 26.97)",
          "primary-foreground": "oklch(1.00 0 0)",
          "secondary": "oklch(0.97 0.21 109.77)",
          "secondary-foreground": "oklch(0 0 0)",
          "muted": "oklch(0.96 0 0)",
          "muted-foreground": "oklch(0.32 0 0)",
          "accent": "oklch(0.56 0.24 260.82)",
          "accent-foreground": "oklch(1.00 0 0)",
          "destructive": "oklch(0 0 0)",
          "destructive-foreground": "oklch(1.00 0 0)",
          "border": "oklch(0 0 0)",
          "input": "oklch(0 0 0)",
          "ring": "oklch(0.65 0.24 26.97)",
          "chart-1": "oklch(0.65 0.24 26.97)",
          "chart-2": "oklch(0.97 0.21 109.77)",
          "chart-3": "oklch(0.56 0.24 260.82)",
          "chart-4": "oklch(0.73 0.25 142.50)",
          "chart-5": "oklch(0.59 0.27 328.36)",
          "radius": "0px",
          "sidebar": "oklch(0.96 0 0)",
          "sidebar-foreground": "oklch(0 0 0)",
          "sidebar-primary": "oklch(0.65 0.24 26.97)",
          "sidebar-primary-foreground": "oklch(1.00 0 0)",
          "sidebar-accent": "oklch(0.56 0.24 260.82)",
          "sidebar-accent-foreground": "oklch(1.00 0 0)",
          "sidebar-border": "oklch(0 0 0)",
          "sidebar-ring": "oklch(0.65 0.24 26.97)",
          "font-sans": "DM Sans, sans-serif",
          "font-serif": "ui-serif, Georgia, Cambria, \"Times New Roman\", Times, serif",
          "font-mono": "Space Mono, monospace",
          "shadow-color": "hsl(0 0% 0%)",
          "shadow-opacity": "1",
          "shadow-blur": "0px",
          "shadow-spread": "0px",
          "shadow-offset-x": "4px",
          "shadow-offset-y": "4px",
          "letter-spacing": "0em",
          "spacing": "0.25rem",
          "shadow-2xs": "4px 4px 0px 0px hsl(0 0% 0% / 0.50)",
          "shadow-xs": "4px 4px 0px 0px hsl(0 0% 0% / 0.50)",
          "shadow-sm": "4px 4px 0px 0px hsl(0 0% 0% / 1.00), 4px 1px 2px -1px hsl(0 0% 0% / 1.00)",
          "shadow": "4px 4px 0px 0px hsl(0 0% 0% / 1.00), 4px 1px 2px -1px hsl(0 0% 0% / 1.00)",
          "shadow-md": "4px 4px 0px 0px hsl(0 0% 0% / 1.00), 4px 2px 4px -1px hsl(0 0% 0% / 1.00)",
          "shadow-lg": "4px 4px 0px 0px hsl(0 0% 0% / 1.00), 4px 4px 6px -1px hsl(0 0% 0% / 1.00)",
          "shadow-xl": "4px 4px 0px 0px hsl(0 0% 0% / 1.00), 4px 8px 10px -1px hsl(0 0% 0% / 1.00)",
          "shadow-2xl": "4px 4px 0px 0px hsl(0 0% 0% / 2.50)",
          "tracking-normal": "0em"
        },
        "dark": {
          "background": "oklch(0 0 0)",
          "foreground": "oklch(1.00 0 0)",
          "card": "oklch(0.32 0 0)",
          "card-foreground": "oklch(1.00 0 0)",
          "popover": "oklch(0.32 0 0)",
          "popover-foreground": "oklch(1.00 0 0)",
          "primary": "oklch(0.70 0.19 23.19)",
          "primary-foreground": "oklch(0 0 0)",
          "secondary": "oklch(0.97 0.20 109.62)",
          "secondary-foreground": "oklch(0 0 0)",
          "muted": "oklch(0.32 0 0)",
          "muted-foreground": "oklch(0.85 0 0)",
          "accent": "oklch(0.68 0.18 252.26)",
          "accent-foreground": "oklch(0 0 0)",
          "destructive": "oklch(1.00 0 0)",
          "destructive-foreground": "oklch(0 0 0)",
          "border": "oklch(1.00 0 0)",
          "input": "oklch(1.00 0 0)",
          "ring": "oklch(0.70 0.19 23.19)",
          "chart-1": "oklch(0.70 0.19 23.19)",
          "chart-2": "oklch(0.97 0.20 109.62)",
          "chart-3": "oklch(0.68 0.18 252.26)",
          "chart-4": "oklch(0.74 0.23 142.85)",
          "chart-5": "oklch(0.61 0.25 328.07)",
          "radius": "0px",
          "sidebar": "oklch(0 0 0)",
          "sidebar-foreground": "oklch(1.00 0 0)",
          "sidebar-primary": "oklch(0.70 0.19 23.19)",
          "sidebar-primary-foreground": "oklch(0 0 0)",
          "sidebar-accent": "oklch(0.68 0.18 252.26)",
          "sidebar-accent-foreground": "oklch(0 0 0)",
          "sidebar-border": "oklch(1.00 0 0)",
          "sidebar-ring": "oklch(0.70 0.19 23.19)",
          "font-sans": "DM Sans, sans-serif",
          "font-serif": "ui-serif, Georgia, Cambria, \"Times New Roman\", Times, serif",
          "font-mono": "Space Mono, monospace",
          "shadow-color": "hsl(0 0% 0%)",
          "shadow-opacity": "1",
          "shadow-blur": "0px",
          "shadow-spread": "0px",
          "shadow-offset-x": "4px",
          "shadow-offset-y": "4px",
          "letter-spacing": "0em",
          "spacing": "0.25rem",
          "shadow-2xs": "4px 4px 0px 0px hsl(0 0% 0% / 0.50)",
          "shadow-xs": "4px 4px 0px 0px hsl(0 0% 0% / 0.50)",
          "shadow-sm": "4px 4px 0px 0px hsl(0 0% 0% / 1.00), 4px 1px 2px -1px hsl(0 0% 0% / 1.00)",
          "shadow": "4px 4px 0px 0px hsl(0 0% 0% / 1.00), 4px 1px 2px -1px hsl(0 0% 0% / 1.00)",
          "shadow-md": "4px 4px 0px 0px hsl(0 0% 0% / 1.00), 4px 2px 4px -1px hsl(0 0% 0% / 1.00)",
          "shadow-lg": "4px 4px 0px 0px hsl(0 0% 0% / 1.00), 4px 4px 6px -1px hsl(0 0% 0% / 1.00)",
          "shadow-xl": "4px 4px 0px 0px hsl(0 0% 0% / 1.00), 4px 8px 10px -1px hsl(0 0% 0% / 1.00)",
          "shadow-2xl": "4px 4px 0px 0px hsl(0 0% 0% / 2.50)"
        }
      }
    },
    {
      "name": "solar-dusk",
      "type": "registry:style",
      "title": "Solar Dusk",
      "description": "A theme based on the Solar Dusk color palette.",
      "css": {
        "@layer base": {
          "body": {
            "letter-spacing": "var(--tracking-normal)"
          }
        }
      },
      "cssVars": {
        "theme": {
          "font-sans": "Oxanium, sans-serif",
          "font-mono": "Fira Code, monospace",
          "font-serif": "Merriweather, serif",
          "radius": "0.3rem",
          "tracking-tighter": "calc(var(--tracking-normal) - 0.05em)",
          "tracking-tight": "calc(var(--tracking-normal) - 0.025em)",
          "tracking-wide": "calc(var(--tracking-normal) + 0.025em)",
          "tracking-wider": "calc(var(--tracking-normal) + 0.05em)",
          "tracking-widest": "calc(var(--tracking-normal) + 0.1em)"
        },
        "light": {
          "background": "oklch(0.99 0.01 84.57)",
          "foreground": "oklch(0.37 0.03 49.61)",
          "card": "oklch(0.97 0.01 78.28)",
          "card-foreground": "oklch(0.37 0.03 49.61)",
          "popover": "oklch(0.97 0.01 78.28)",
          "popover-foreground": "oklch(0.37 0.03 49.61)",
          "primary": "oklch(0.56 0.15 49.00)",
          "primary-foreground": "oklch(1.00 0 0)",
          "secondary": "oklch(0.83 0.08 74.44)",
          "secondary-foreground": "oklch(0.44 0.01 73.64)",
          "muted": "oklch(0.94 0.02 83.26)",
          "muted-foreground": "oklch(0.55 0.01 58.07)",
          "accent": "oklch(0.90 0.05 74.99)",
          "accent-foreground": "oklch(0.44 0.01 73.64)",
          "destructive": "oklch(0.44 0.16 26.90)",
          "destructive-foreground": "oklch(1.00 0 0)",
          "border": "oklch(0.89 0.04 89.70)",
          "input": "oklch(0.89 0.04 89.70)",
          "ring": "oklch(0.56 0.15 49.00)",
          "chart-1": "oklch(0.56 0.15 49.00)",
          "chart-2": "oklch(0.55 0.01 58.07)",
          "chart-3": "oklch(0.55 0.12 66.44)",
          "chart-4": "oklch(0.55 0.01 58.07)",
          "chart-5": "oklch(0.68 0.14 75.83)",
          "radius": "0.3rem",
          "sidebar": "oklch(0.94 0.02 83.26)",
          "sidebar-foreground": "oklch(0.37 0.03 49.61)",
          "sidebar-primary": "oklch(0.56 0.15 49.00)",
          "sidebar-primary-foreground": "oklch(1.00 0 0)",
          "sidebar-accent": "oklch(0.55 0.12 66.44)",
          "sidebar-accent-foreground": "oklch(1.00 0 0)",
          "sidebar-border": "oklch(0.89 0.04 89.70)",
          "sidebar-ring": "oklch(0.56 0.15 49.00)",
          "font-sans": "Oxanium, sans-serif",
          "font-serif": "Merriweather, serif",
          "font-mono": "Fira Code, monospace",
          "shadow-color": "hsl(28 18% 25%)",
          "shadow-opacity": "0.18",
          "shadow-blur": "3px",
          "shadow-spread": "0px",
          "shadow-offset-x": "0px",
          "shadow-offset-y": "2px",
          "letter-spacing": "0em",
          "spacing": "0.25rem",
          "shadow-2xs": "0px 2px 3px 0px hsl(28 18% 25% / 0.09)",
          "shadow-xs": "0px 2px 3px 0px hsl(28 18% 25% / 0.09)",
          "shadow-sm": "0px 2px 3px 0px hsl(28 18% 25% / 0.18), 0px 1px 2px -1px hsl(28 18% 25% / 0.18)",
          "shadow": "0px 2px 3px 0px hsl(28 18% 25% / 0.18), 0px 1px 2px -1px hsl(28 18% 25% / 0.18)",
          "shadow-md": "0px 2px 3px 0px hsl(28 18% 25% / 0.18), 0px 2px 4px -1px hsl(28 18% 25% / 0.18)",
          "shadow-lg": "0px 2px 3px 0px hsl(28 18% 25% / 0.18), 0px 4px 6px -1px hsl(28 18% 25% / 0.18)",
          "shadow-xl": "0px 2px 3px 0px hsl(28 18% 25% / 0.18), 0px 8px 10px -1px hsl(28 18% 25% / 0.18)",
          "shadow-2xl": "0px 2px 3px 0px hsl(28 18% 25% / 0.45)",
          "tracking-normal": "0em"
        },
        "dark": {
          "background": "oklch(0.22 0.01 56.04)",
          "foreground": "oklch(0.97 0.00 106.42)",
          "card": "oklch(0.27 0.01 34.30)",
          "card-foreground": "oklch(0.97 0.00 106.42)",
          "popover": "oklch(0.27 0.01 34.30)",
          "popover-foreground": "oklch(0.97 0.00 106.42)",
          "primary": "oklch(0.70 0.19 47.60)",
          "primary-foreground": "oklch(1.00 0 0)",
          "secondary": "oklch(0.44 0.01 73.64)",
          "secondary-foreground": "oklch(0.92 0.00 48.72)",
          "muted": "oklch(0.27 0.01 34.30)",
          "muted-foreground": "oklch(0.72 0.01 56.26)",
          "accent": "oklch(0.36 0.05 229.32)",
          "accent-foreground": "oklch(0.92 0.00 48.72)",
          "destructive": "oklch(0.58 0.22 27.33)",
          "destructive-foreground": "oklch(1.00 0 0)",
          "border": "oklch(0.37 0.01 67.56)",
          "input": "oklch(0.37 0.01 67.56)",
          "ring": "oklch(0.70 0.19 47.60)",
          "chart-1": "oklch(0.70 0.19 47.60)",
          "chart-2": "oklch(0.68 0.15 237.32)",
          "chart-3": "oklch(0.80 0.16 86.05)",
          "chart-4": "oklch(0.72 0.01 56.26)",
          "chart-5": "oklch(0.55 0.01 58.07)",
          "radius": "0.3rem",
          "sidebar": "oklch(0.27 0.01 34.30)",
          "sidebar-foreground": "oklch(0.97 0.00 106.42)",
          "sidebar-primary": "oklch(0.70 0.19 47.60)",
          "sidebar-primary-foreground": "oklch(1.00 0 0)",
          "sidebar-accent": "oklch(0.68 0.15 237.32)",
          "sidebar-accent-foreground": "oklch(0.28 0.07 254.54)",
          "sidebar-border": "oklch(0.37 0.01 67.56)",
          "sidebar-ring": "oklch(0.70 0.19 47.60)",
          "font-sans": "Oxanium, sans-serif",
          "font-serif": "Merriweather, serif",
          "font-mono": "Fira Code, monospace",
          "shadow-color": "hsl(0 0% 5%)",
          "shadow-opacity": "0.18",
          "shadow-blur": "3px",
          "shadow-spread": "0px",
          "shadow-offset-x": "0px",
          "shadow-offset-y": "2px",
          "letter-spacing": "0em",
          "spacing": "0.25rem",
          "shadow-2xs": "0px 2px 3px 0px hsl(0 0% 5% / 0.09)",
          "shadow-xs": "0px 2px 3px 0px hsl(0 0% 5% / 0.09)",
          "shadow-sm": "0px 2px 3px 0px hsl(0 0% 5% / 0.18), 0px 1px 2px -1px hsl(0 0% 5% / 0.18)",
          "shadow": "0px 2px 3px 0px hsl(0 0% 5% / 0.18), 0px 1px 2px -1px hsl(0 0% 5% / 0.18)",
          "shadow-md": "0px 2px 3px 0px hsl(0 0% 5% / 0.18), 0px 2px 4px -1px hsl(0 0% 5% / 0.18)",
          "shadow-lg": "0px 2px 3px 0px hsl(0 0% 5% / 0.18), 0px 4px 6px -1px hsl(0 0% 5% / 0.18)",
          "shadow-xl": "0px 2px 3px 0px hsl(0 0% 5% / 0.18), 0px 8px 10px -1px hsl(0 0% 5% / 0.18)",
          "shadow-2xl": "0px 2px 3px 0px hsl(0 0% 5% / 0.45)"
        }
      }
    },
    {
      "name": "claymorphism",
      "type": "registry:style",
      "title": "Claymorphism",
      "description": "A theme based on the Claymorphism color palette.",
      "css": {
        "@layer base": {
          "body": {
            "letter-spacing": "var(--tracking-normal)"
          }
        }
      },
      "cssVars": {
        "theme": {
          "font-sans": "Plus Jakarta Sans, sans-serif",
          "font-mono": "Roboto Mono, monospace",
          "font-serif": "Lora, serif",
          "radius": "1.25rem",
          "tracking-tighter": "calc(var(--tracking-normal) - 0.05em)",
          "tracking-tight": "calc(var(--tracking-normal) - 0.025em)",
          "tracking-wide": "calc(var(--tracking-normal) + 0.025em)",
          "tracking-wider": "calc(var(--tracking-normal) + 0.05em)",
          "tracking-widest": "calc(var(--tracking-normal) + 0.1em)"
        },
        "light": {
          "background": "oklch(0.92 0.00 48.72)",
          "foreground": "oklch(0.28 0.04 260.03)",
          "card": "oklch(0.97 0.00 106.42)",
          "card-foreground": "oklch(0.28 0.04 260.03)",
          "popover": "oklch(0.97 0.00 106.42)",
          "popover-foreground": "oklch(0.28 0.04 260.03)",
          "primary": "oklch(0.59 0.20 277.12)",
          "primary-foreground": "oklch(1.00 0 0)",
          "secondary": "oklch(0.87 0.00 56.37)",
          "secondary-foreground": "oklch(0.45 0.03 256.80)",
          "muted": "oklch(0.92 0.00 48.72)",
          "muted-foreground": "oklch(0.55 0.02 264.36)",
          "accent": "oklch(0.94 0.03 321.94)",
          "accent-foreground": "oklch(0.37 0.03 259.73)",
          "destructive": "oklch(0.64 0.21 25.33)",
          "destructive-foreground": "oklch(1.00 0 0)",
          "border": "oklch(0.87 0.00 56.37)",
          "input": "oklch(0.87 0.00 56.37)",
          "ring": "oklch(0.59 0.20 277.12)",
          "chart-1": "oklch(0.59 0.20 277.12)",
          "chart-2": "oklch(0.51 0.23 276.97)",
          "chart-3": "oklch(0.46 0.21 277.02)",
          "chart-4": "oklch(0.40 0.18 277.37)",
          "chart-5": "oklch(0.36 0.14 278.70)",
          "radius": "1.25rem",
          "sidebar": "oklch(0.87 0.00 56.37)",
          "sidebar-foreground": "oklch(0.28 0.04 260.03)",
          "sidebar-primary": "oklch(0.59 0.20 277.12)",
          "sidebar-primary-foreground": "oklch(1.00 0 0)",
          "sidebar-accent": "oklch(0.94 0.03 321.94)",
          "sidebar-accent-foreground": "oklch(0.37 0.03 259.73)",
          "sidebar-border": "oklch(0.87 0.00 56.37)",
          "sidebar-ring": "oklch(0.59 0.20 277.12)",
          "font-sans": "Plus Jakarta Sans, sans-serif",
          "font-serif": "Lora, serif",
          "font-mono": "Roboto Mono, monospace",
          "shadow-color": "hsl(240 4% 60%)",
          "shadow-opacity": "0.18",
          "shadow-blur": "10px",
          "shadow-spread": "4px",
          "shadow-offset-x": "2px",
          "shadow-offset-y": "2px",
          "letter-spacing": "0em",
          "spacing": "0.25rem",
          "shadow-2xs": "2px 2px 10px 4px hsl(240 4% 60% / 0.09)",
          "shadow-xs": "2px 2px 10px 4px hsl(240 4% 60% / 0.09)",
          "shadow-sm": "2px 2px 10px 4px hsl(240 4% 60% / 0.18), 2px 1px 2px 3px hsl(240 4% 60% / 0.18)",
          "shadow": "2px 2px 10px 4px hsl(240 4% 60% / 0.18), 2px 1px 2px 3px hsl(240 4% 60% / 0.18)",
          "shadow-md": "2px 2px 10px 4px hsl(240 4% 60% / 0.18), 2px 2px 4px 3px hsl(240 4% 60% / 0.18)",
          "shadow-lg": "2px 2px 10px 4px hsl(240 4% 60% / 0.18), 2px 4px 6px 3px hsl(240 4% 60% / 0.18)",
          "shadow-xl": "2px 2px 10px 4px hsl(240 4% 60% / 0.18), 2px 8px 10px 3px hsl(240 4% 60% / 0.18)",
          "shadow-2xl": "2px 2px 10px 4px hsl(240 4% 60% / 0.45)",
          "tracking-normal": "0em"
        },
        "dark": {
          "background": "oklch(0.22 0.01 67.44)",
          "foreground": "oklch(0.93 0.01 255.51)",
          "card": "oklch(0.28 0.01 59.34)",
          "card-foreground": "oklch(0.93 0.01 255.51)",
          "popover": "oklch(0.28 0.01 59.34)",
          "popover-foreground": "oklch(0.93 0.01 255.51)",
          "primary": "oklch(0.68 0.16 276.93)",
          "primary-foreground": "oklch(0.22 0.01 67.44)",
          "secondary": "oklch(0.34 0.01 59.42)",
          "secondary-foreground": "oklch(0.87 0.01 258.34)",
          "muted": "oklch(0.28 0.01 59.34)",
          "muted-foreground": "oklch(0.71 0.02 261.32)",
          "accent": "oklch(0.39 0.01 59.47)",
          "accent-foreground": "oklch(0.87 0.01 258.34)",
          "destructive": "oklch(0.64 0.21 25.33)",
          "destructive-foreground": "oklch(0.22 0.01 67.44)",
          "border": "oklch(0.34 0.01 59.42)",
          "input": "oklch(0.34 0.01 59.42)",
          "ring": "oklch(0.68 0.16 276.93)",
          "chart-1": "oklch(0.68 0.16 276.93)",
          "chart-2": "oklch(0.59 0.20 277.12)",
          "chart-3": "oklch(0.51 0.23 276.97)",
          "chart-4": "oklch(0.46 0.21 277.02)",
          "chart-5": "oklch(0.40 0.18 277.37)",
          "radius": "1.25rem",
          "sidebar": "oklch(0.34 0.01 59.42)",
          "sidebar-foreground": "oklch(0.93 0.01 255.51)",
          "sidebar-primary": "oklch(0.68 0.16 276.93)",
          "sidebar-primary-foreground": "oklch(0.22 0.01 67.44)",
          "sidebar-accent": "oklch(0.39 0.01 59.47)",
          "sidebar-accent-foreground": "oklch(0.87 0.01 258.34)",
          "sidebar-border": "oklch(0.34 0.01 59.42)",
          "sidebar-ring": "oklch(0.68 0.16 276.93)",
          "font-sans": "Plus Jakarta Sans, sans-serif",
          "font-serif": "Lora, serif",
          "font-mono": "Roboto Mono, monospace",
          "shadow-color": "hsl(0 0% 0%)",
          "shadow-opacity": "0.18",
          "shadow-blur": "10px",
          "shadow-spread": "4px",
          "shadow-offset-x": "2px",
          "shadow-offset-y": "2px",
          "letter-spacing": "0em",
          "spacing": "0.25rem",
          "shadow-2xs": "2px 2px 10px 4px hsl(0 0% 0% / 0.09)",
          "shadow-xs": "2px 2px 10px 4px hsl(0 0% 0% / 0.09)",
          "shadow-sm": "2px 2px 10px 4px hsl(0 0% 0% / 0.18), 2px 1px 2px 3px hsl(0 0% 0% / 0.18)",
          "shadow": "2px 2px 10px 4px hsl(0 0% 0% / 0.18), 2px 1px 2px 3px hsl(0 0% 0% / 0.18)",
          "shadow-md": "2px 2px 10px 4px hsl(0 0% 0% / 0.18), 2px 2px 4px 3px hsl(0 0% 0% / 0.18)",
          "shadow-lg": "2px 2px 10px 4px hsl(0 0% 0% / 0.18), 2px 4px 6px 3px hsl(0 0% 0% / 0.18)",
          "shadow-xl": "2px 2px 10px 4px hsl(0 0% 0% / 0.18), 2px 8px 10px 3px hsl(0 0% 0% / 0.18)",
          "shadow-2xl": "2px 2px 10px 4px hsl(0 0% 0% / 0.45)"
        }
      }
    },
    {
      "name": "cyberpunk",
      "type": "registry:style",
      "title": "Cyberpunk",
      "description": "A theme based on the Cyberpunk color palette.",
      "css": {
        "@layer base": {
          "body": {
            "letter-spacing": "var(--tracking-normal)"
          }
        }
      },
      "cssVars": {
        "theme": {
          "font-sans": "Outfit, sans-serif",
          "font-mono": "Fira Code, monospace",
          "font-serif": "ui-serif, Georgia, Cambria, \"Times New Roman\", Times, serif",
          "radius": "0.5rem",
          "tracking-tighter": "calc(var(--tracking-normal) - 0.05em)",
          "tracking-tight": "calc(var(--tracking-normal) - 0.025em)",
          "tracking-wide": "calc(var(--tracking-normal) + 0.025em)",
          "tracking-wider": "calc(var(--tracking-normal) + 0.05em)",
          "tracking-widest": "calc(var(--tracking-normal) + 0.1em)"
        },
        "light": {
          "background": "oklch(0.98 0.00 247.84)",
          "foreground": "oklch(0.16 0.04 281.83)",
          "card": "oklch(1.00 0 0)",
          "card-foreground": "oklch(0.16 0.04 281.83)",
          "popover": "oklch(1.00 0 0)",
          "popover-foreground": "oklch(0.16 0.04 281.83)",
          "primary": "oklch(0.67 0.29 341.41)",
          "primary-foreground": "oklch(1.00 0 0)",
          "secondary": "oklch(0.96 0.02 286.02)",
          "secondary-foreground": "oklch(0.16 0.04 281.83)",
          "muted": "oklch(0.96 0.02 286.02)",
          "muted-foreground": "oklch(0.16 0.04 281.83)",
          "accent": "oklch(0.89 0.17 171.27)",
          "accent-foreground": "oklch(0.16 0.04 281.83)",
          "destructive": "oklch(0.65 0.23 34.04)",
          "destructive-foreground": "oklch(1.00 0 0)",
          "border": "oklch(0.92 0.01 225.09)",
          "input": "oklch(0.92 0.01 225.09)",
          "ring": "oklch(0.67 0.29 341.41)",
          "chart-1": "oklch(0.67 0.29 341.41)",
          "chart-2": "oklch(0.55 0.29 299.10)",
          "chart-3": "oklch(0.84 0.15 209.29)",
          "chart-4": "oklch(0.89 0.17 171.27)",
          "chart-5": "oklch(0.92 0.19 101.41)",
          "radius": "0.5rem",
          "sidebar": "oklch(0.96 0.02 286.02)",
          "sidebar-foreground": "oklch(0.16 0.04 281.83)",
          "sidebar-primary": "oklch(0.67 0.29 341.41)",
          "sidebar-primary-foreground": "oklch(1.00 0 0)",
          "sidebar-accent": "oklch(0.89 0.17 171.27)",
          "sidebar-accent-foreground": "oklch(0.16 0.04 281.83)",
          "sidebar-border": "oklch(0.92 0.01 225.09)",
          "sidebar-ring": "oklch(0.67 0.29 341.41)",
          "font-sans": "Outfit, sans-serif",
          "font-serif": "ui-serif, Georgia, Cambria, \"Times New Roman\", Times, serif",
          "font-mono": "Fira Code, monospace",
          "shadow-color": "hsl(0 0% 0%)",
          "shadow-opacity": "0.1",
          "shadow-blur": "8px",
          "shadow-spread": "-2px",
          "shadow-offset-x": "0px",
          "shadow-offset-y": "4px",
          "letter-spacing": "0em",
          "spacing": "0.25rem",
          "shadow-2xs": "0px 4px 8px -2px hsl(0 0% 0% / 0.05)",
          "shadow-xs": "0px 4px 8px -2px hsl(0 0% 0% / 0.05)",
          "shadow-sm": "0px 4px 8px -2px hsl(0 0% 0% / 0.10), 0px 1px 2px -3px hsl(0 0% 0% / 0.10)",
          "shadow": "0px 4px 8px -2px hsl(0 0% 0% / 0.10), 0px 1px 2px -3px hsl(0 0% 0% / 0.10)",
          "shadow-md": "0px 4px 8px -2px hsl(0 0% 0% / 0.10), 0px 2px 4px -3px hsl(0 0% 0% / 0.10)",
          "shadow-lg": "0px 4px 8px -2px hsl(0 0% 0% / 0.10), 0px 4px 6px -3px hsl(0 0% 0% / 0.10)",
          "shadow-xl": "0px 4px 8px -2px hsl(0 0% 0% / 0.10), 0px 8px 10px -3px hsl(0 0% 0% / 0.10)",
          "shadow-2xl": "0px 4px 8px -2px hsl(0 0% 0% / 0.25)",
          "tracking-normal": "0em"
        },
        "dark": {
          "background": "oklch(0.16 0.04 281.83)",
          "foreground": "oklch(0.95 0.01 260.73)",
          "card": "oklch(0.25 0.06 281.14)",
          "card-foreground": "oklch(0.95 0.01 260.73)",
          "popover": "oklch(0.25 0.06 281.14)",
          "popover-foreground": "oklch(0.95 0.01 260.73)",
          "primary": "oklch(0.67 0.29 341.41)",
          "primary-foreground": "oklch(1.00 0 0)",
          "secondary": "oklch(0.25 0.06 281.14)",
          "secondary-foreground": "oklch(0.95 0.01 260.73)",
          "muted": "oklch(0.25 0.06 281.14)",
          "muted-foreground": "oklch(0.62 0.05 278.10)",
          "accent": "oklch(0.89 0.17 171.27)",
          "accent-foreground": "oklch(0.16 0.04 281.83)",
          "destructive": "oklch(0.65 0.23 34.04)",
          "destructive-foreground": "oklch(1.00 0 0)",
          "border": "oklch(0.33 0.08 280.79)",
          "input": "oklch(0.33 0.08 280.79)",
          "ring": "oklch(0.67 0.29 341.41)",
          "chart-1": "oklch(0.67 0.29 341.41)",
          "chart-2": "oklch(0.55 0.29 299.10)",
          "chart-3": "oklch(0.84 0.15 209.29)",
          "chart-4": "oklch(0.89 0.17 171.27)",
          "chart-5": "oklch(0.92 0.19 101.41)",
          "radius": "0.5rem",
          "sidebar": "oklch(0.16 0.04 281.83)",
          "sidebar-foreground": "oklch(0.95 0.01 260.73)",
          "sidebar-primary": "oklch(0.67 0.29 341.41)",
          "sidebar-primary-foreground": "oklch(1.00 0 0)",
          "sidebar-accent": "oklch(0.89 0.17 171.27)",
          "sidebar-accent-foreground": "oklch(0.16 0.04 281.83)",
          "sidebar-border": "oklch(0.33 0.08 280.79)",
          "sidebar-ring": "oklch(0.67 0.29 341.41)",
          "font-sans": "Outfit, sans-serif",
          "font-serif": "ui-serif, Georgia, Cambria, \"Times New Roman\", Times, serif",
          "font-mono": "Fira Code, monospace",
          "shadow-color": "hsl(0 0% 0%)",
          "shadow-opacity": "0.1",
          "shadow-blur": "8px",
          "shadow-spread": "-2px",
          "shadow-offset-x": "0px",
          "shadow-offset-y": "4px",
          "letter-spacing": "0em",
          "spacing": "0.25rem",
          "shadow-2xs": "0px 4px 8px -2px hsl(0 0% 0% / 0.05)",
          "shadow-xs": "0px 4px 8px -2px hsl(0 0% 0% / 0.05)",
          "shadow-sm": "0px 4px 8px -2px hsl(0 0% 0% / 0.10), 0px 1px 2px -3px hsl(0 0% 0% / 0.10)",
          "shadow": "0px 4px 8px -2px hsl(0 0% 0% / 0.10), 0px 1px 2px -3px hsl(0 0% 0% / 0.10)",
          "shadow-md": "0px 4px 8px -2px hsl(0 0% 0% / 0.10), 0px 2px 4px -3px hsl(0 0% 0% / 0.10)",
          "shadow-lg": "0px 4px 8px -2px hsl(0 0% 0% / 0.10), 0px 4px 6px -3px hsl(0 0% 0% / 0.10)",
          "shadow-xl": "0px 4px 8px -2px hsl(0 0% 0% / 0.10), 0px 8px 10px -3px hsl(0 0% 0% / 0.10)",
          "shadow-2xl": "0px 4px 8px -2px hsl(0 0% 0% / 0.25)"
        }
      }
    },
    {
      "name": "pastel-dreams",
      "type": "registry:style",
      "title": "Pastel Dreams",
      "description": "A theme based on the Pastel Dreams color palette.",
      "css": {
        "@layer base": {
          "body": {
            "letter-spacing": "var(--tracking-normal)"
          }
        }
      },
      "cssVars": {
        "theme": {
          "font-sans": "Open Sans, sans-serif",
          "font-mono": "IBM Plex Mono, monospace",
          "font-serif": "Source Serif 4, serif",
          "radius": "1.5rem",
          "tracking-tighter": "calc(var(--tracking-normal) - 0.05em)",
          "tracking-tight": "calc(var(--tracking-normal) - 0.025em)",
          "tracking-wide": "calc(var(--tracking-normal) + 0.025em)",
          "tracking-wider": "calc(var(--tracking-normal) + 0.05em)",
          "tracking-widest": "calc(var(--tracking-normal) + 0.1em)"
        },
        "light": {
          "background": "oklch(0.97 0.01 314.78)",
          "foreground": "oklch(0.37 0.03 259.73)",
          "card": "oklch(1.00 0 0)",
          "card-foreground": "oklch(0.37 0.03 259.73)",
          "popover": "oklch(1.00 0 0)",
          "popover-foreground": "oklch(0.37 0.03 259.73)",
          "primary": "oklch(0.71 0.16 293.54)",
          "primary-foreground": "oklch(1.00 0 0)",
          "secondary": "oklch(0.91 0.05 306.09)",
          "secondary-foreground": "oklch(0.45 0.03 256.80)",
          "muted": "oklch(0.95 0.03 307.17)",
          "muted-foreground": "oklch(0.55 0.02 264.36)",
          "accent": "oklch(0.94 0.03 321.94)",
          "accent-foreground": "oklch(0.37 0.03 259.73)",
          "destructive": "oklch(0.81 0.10 19.57)",
          "destructive-foreground": "oklch(1.00 0 0)",
          "border": "oklch(0.91 0.05 306.09)",
          "input": "oklch(0.91 0.05 306.09)",
          "ring": "oklch(0.71 0.16 293.54)",
          "chart-1": "oklch(0.71 0.16 293.54)",
          "chart-2": "oklch(0.61 0.22 292.72)",
          "chart-3": "oklch(0.54 0.25 293.01)",
          "chart-4": "oklch(0.49 0.24 292.58)",
          "chart-5": "oklch(0.43 0.21 292.76)",
          "radius": "1.5rem",
          "sidebar": "oklch(0.91 0.05 306.09)",
          "sidebar-foreground": "oklch(0.37 0.03 259.73)",
          "sidebar-primary": "oklch(0.71 0.16 293.54)",
          "sidebar-primary-foreground": "oklch(1.00 0 0)",
          "sidebar-accent": "oklch(0.94 0.03 321.94)",
          "sidebar-accent-foreground": "oklch(0.37 0.03 259.73)",
          "sidebar-border": "oklch(0.91 0.05 306.09)",
          "sidebar-ring": "oklch(0.71 0.16 293.54)",
          "font-sans": "Open Sans, sans-serif",
          "font-serif": "Source Serif 4, serif",
          "font-mono": "IBM Plex Mono, monospace",
          "shadow-color": "hsl(0 0% 0%)",
          "shadow-opacity": "0.08",
          "shadow-blur": "16px",
          "shadow-spread": "-4px",
          "shadow-offset-x": "0px",
          "shadow-offset-y": "8px",
          "letter-spacing": "0em",
          "spacing": "0.25rem",
          "shadow-2xs": "0px 8px 16px -4px hsl(0 0% 0% / 0.04)",
          "shadow-xs": "0px 8px 16px -4px hsl(0 0% 0% / 0.04)",
          "shadow-sm": "0px 8px 16px -4px hsl(0 0% 0% / 0.08), 0px 1px 2px -5px hsl(0 0% 0% / 0.08)",
          "shadow": "0px 8px 16px -4px hsl(0 0% 0% / 0.08), 0px 1px 2px -5px hsl(0 0% 0% / 0.08)",
          "shadow-md": "0px 8px 16px -4px hsl(0 0% 0% / 0.08), 0px 2px 4px -5px hsl(0 0% 0% / 0.08)",
          "shadow-lg": "0px 8px 16px -4px hsl(0 0% 0% / 0.08), 0px 4px 6px -5px hsl(0 0% 0% / 0.08)",
          "shadow-xl": "0px 8px 16px -4px hsl(0 0% 0% / 0.08), 0px 8px 10px -5px hsl(0 0% 0% / 0.08)",
          "shadow-2xl": "0px 8px 16px -4px hsl(0 0% 0% / 0.20)",
          "tracking-normal": "0em"
        },
        "dark": {
          "background": "oklch(0.22 0.01 56.04)",
          "foreground": "oklch(0.93 0.03 272.79)",
          "card": "oklch(0.28 0.03 307.23)",
          "card-foreground": "oklch(0.93 0.03 272.79)",
          "popover": "oklch(0.28 0.03 307.23)",
          "popover-foreground": "oklch(0.93 0.03 272.79)",
          "primary": "oklch(0.79 0.12 295.75)",
          "primary-foreground": "oklch(0.22 0.01 56.04)",
          "secondary": "oklch(0.34 0.04 308.85)",
          "secondary-foreground": "oklch(0.87 0.01 258.34)",
          "muted": "oklch(0.28 0.03 307.23)",
          "muted-foreground": "oklch(0.71 0.02 261.32)",
          "accent": "oklch(0.39 0.05 304.64)",
          "accent-foreground": "oklch(0.87 0.01 258.34)",
          "destructive": "oklch(0.81 0.10 19.57)",
          "destructive-foreground": "oklch(0.22 0.01 56.04)",
          "border": "oklch(0.34 0.04 308.85)",
          "input": "oklch(0.34 0.04 308.85)",
          "ring": "oklch(0.79 0.12 295.75)",
          "chart-1": "oklch(0.79 0.12 295.75)",
          "chart-2": "oklch(0.71 0.16 293.54)",
          "chart-3": "oklch(0.61 0.22 292.72)",
          "chart-4": "oklch(0.54 0.25 293.01)",
          "chart-5": "oklch(0.49 0.24 292.58)",
          "radius": "1.5rem",
          "sidebar": "oklch(0.34 0.04 308.85)",
          "sidebar-foreground": "oklch(0.93 0.03 272.79)",
          "sidebar-primary": "oklch(0.79 0.12 295.75)",
          "sidebar-primary-foreground": "oklch(0.22 0.01 56.04)",
          "sidebar-accent": "oklch(0.39 0.05 304.64)",
          "sidebar-accent-foreground": "oklch(0.87 0.01 258.34)",
          "sidebar-border": "oklch(0.34 0.04 308.85)",
          "sidebar-ring": "oklch(0.79 0.12 295.75)",
          "font-sans": "Open Sans, sans-serif",
          "font-serif": "Source Serif 4, serif",
          "font-mono": "IBM Plex Mono, monospace",
          "shadow-color": "hsl(0 0% 0%)",
          "shadow-opacity": "0.08",
          "shadow-blur": "16px",
          "shadow-spread": "-4px",
          "shadow-offset-x": "0px",
          "shadow-offset-y": "8px",
          "letter-spacing": "0em",
          "spacing": "0.25rem",
          "shadow-2xs": "0px 8px 16px -4px hsl(0 0% 0% / 0.04)",
          "shadow-xs": "0px 8px 16px -4px hsl(0 0% 0% / 0.04)",
          "shadow-sm": "0px 8px 16px -4px hsl(0 0% 0% / 0.08), 0px 1px 2px -5px hsl(0 0% 0% / 0.08)",
          "shadow": "0px 8px 16px -4px hsl(0 0% 0% / 0.08), 0px 1px 2px -5px hsl(0 0% 0% / 0.08)",
          "shadow-md": "0px 8px 16px -4px hsl(0 0% 0% / 0.08), 0px 2px 4px -5px hsl(0 0% 0% / 0.08)",
          "shadow-lg": "0px 8px 16px -4px hsl(0 0% 0% / 0.08), 0px 4px 6px -5px hsl(0 0% 0% / 0.08)",
          "shadow-xl": "0px 8px 16px -4px hsl(0 0% 0% / 0.08), 0px 8px 10px -5px hsl(0 0% 0% / 0.08)",
          "shadow-2xl": "0px 8px 16px -4px hsl(0 0% 0% / 0.20)"
        }
      }
    },
    {
      "name": "clean-slate",
      "type": "registry:style",
      "title": "Clean Slate",
      "description": "A theme based on the Clean Slate color palette.",
      "css": {
        "@layer base": {
          "body": {
            "letter-spacing": "var(--tracking-normal)"
          }
        }
      },
      "cssVars": {
        "theme": {
          "font-sans": "Inter, sans-serif",
          "font-mono": "JetBrains Mono, monospace",
          "font-serif": "Merriweather, serif",
          "radius": "0.5rem",
          "tracking-tighter": "calc(var(--tracking-normal) - 0.05em)",
          "tracking-tight": "calc(var(--tracking-normal) - 0.025em)",
          "tracking-wide": "calc(var(--tracking-normal) + 0.025em)",
          "tracking-wider": "calc(var(--tracking-normal) + 0.05em)",
          "tracking-widest": "calc(var(--tracking-normal) + 0.1em)"
        },
        "light": {
          "background": "oklch(0.98 0.00 247.86)",
          "foreground": "oklch(0.28 0.04 260.03)",
          "card": "oklch(1.00 0 0)",
          "card-foreground": "oklch(0.28 0.04 260.03)",
          "popover": "oklch(1.00 0 0)",
          "popover-foreground": "oklch(0.28 0.04 260.03)",
          "primary": "oklch(0.59 0.20 277.12)",
          "primary-foreground": "oklch(1.00 0 0)",
          "secondary": "oklch(0.93 0.01 264.53)",
          "secondary-foreground": "oklch(0.37 0.03 259.73)",
          "muted": "oklch(0.97 0.00 264.54)",
          "muted-foreground": "oklch(0.55 0.02 264.36)",
          "accent": "oklch(0.93 0.03 272.79)",
          "accent-foreground": "oklch(0.37 0.03 259.73)",
          "destructive": "oklch(0.64 0.21 25.33)",
          "destructive-foreground": "oklch(1.00 0 0)",
          "border": "oklch(0.87 0.01 258.34)",
          "input": "oklch(0.87 0.01 258.34)",
          "ring": "oklch(0.59 0.20 277.12)",
          "chart-1": "oklch(0.59 0.20 277.12)",
          "chart-2": "oklch(0.51 0.23 276.97)",
          "chart-3": "oklch(0.46 0.21 277.02)",
          "chart-4": "oklch(0.40 0.18 277.37)",
          "chart-5": "oklch(0.36 0.14 278.70)",
          "radius": "0.5rem",
          "sidebar": "oklch(0.97 0.00 264.54)",
          "sidebar-foreground": "oklch(0.28 0.04 260.03)",
          "sidebar-primary": "oklch(0.59 0.20 277.12)",
          "sidebar-primary-foreground": "oklch(1.00 0 0)",
          "sidebar-accent": "oklch(0.93 0.03 272.79)",
          "sidebar-accent-foreground": "oklch(0.37 0.03 259.73)",
          "sidebar-border": "oklch(0.87 0.01 258.34)",
          "sidebar-ring": "oklch(0.59 0.20 277.12)",
          "font-sans": "Inter, sans-serif",
          "font-serif": "Merriweather, serif",
          "font-mono": "JetBrains Mono, monospace",
          "shadow-color": "hsl(0 0% 0%)",
          "shadow-opacity": "0.1",
          "shadow-blur": "8px",
          "shadow-spread": "-1px",
          "shadow-offset-x": "0px",
          "shadow-offset-y": "4px",
          "letter-spacing": "0em",
          "spacing": "0.25rem",
          "shadow-2xs": "0px 4px 8px -1px hsl(0 0% 0% / 0.05)",
          "shadow-xs": "0px 4px 8px -1px hsl(0 0% 0% / 0.05)",
          "shadow-sm": "0px 4px 8px -1px hsl(0 0% 0% / 0.10), 0px 1px 2px -2px hsl(0 0% 0% / 0.10)",
          "shadow": "0px 4px 8px -1px hsl(0 0% 0% / 0.10), 0px 1px 2px -2px hsl(0 0% 0% / 0.10)",
          "shadow-md": "0px 4px 8px -1px hsl(0 0% 0% / 0.10), 0px 2px 4px -2px hsl(0 0% 0% / 0.10)",
          "shadow-lg": "0px 4px 8px -1px hsl(0 0% 0% / 0.10), 0px 4px 6px -2px hsl(0 0% 0% / 0.10)",
          "shadow-xl": "0px 4px 8px -1px hsl(0 0% 0% / 0.10), 0px 8px 10px -2px hsl(0 0% 0% / 0.10)",
          "shadow-2xl": "0px 4px 8px -1px hsl(0 0% 0% / 0.25)",
          "tracking-normal": "0em"
        },
        "dark": {
          "background": "oklch(0.21 0.04 265.75)",
          "foreground": "oklch(0.93 0.01 255.51)",
          "card": "oklch(0.28 0.04 260.03)",
          "card-foreground": "oklch(0.93 0.01 255.51)",
          "popover": "oklch(0.28 0.04 260.03)",
          "popover-foreground": "oklch(0.93 0.01 255.51)",
          "primary": "oklch(0.68 0.16 276.93)",
          "primary-foreground": "oklch(0.21 0.04 265.75)",
          "secondary": "oklch(0.34 0.03 260.91)",
          "secondary-foreground": "oklch(0.87 0.01 258.34)",
          "muted": "oklch(0.28 0.04 260.03)",
          "muted-foreground": "oklch(0.71 0.02 261.32)",
          "accent": "oklch(0.37 0.03 259.73)",
          "accent-foreground": "oklch(0.87 0.01 258.34)",
          "destructive": "oklch(0.64 0.21 25.33)",
          "destructive-foreground": "oklch(0.21 0.04 265.75)",
          "border": "oklch(0.45 0.03 256.80)",
          "input": "oklch(0.45 0.03 256.80)",
          "ring": "oklch(0.68 0.16 276.93)",
          "chart-1": "oklch(0.68 0.16 276.93)",
          "chart-2": "oklch(0.59 0.20 277.12)",
          "chart-3": "oklch(0.51 0.23 276.97)",
          "chart-4": "oklch(0.46 0.21 277.02)",
          "chart-5": "oklch(0.40 0.18 277.37)",
          "radius": "0.5rem",
          "sidebar": "oklch(0.28 0.04 260.03)",
          "sidebar-foreground": "oklch(0.93 0.01 255.51)",
          "sidebar-primary": "oklch(0.68 0.16 276.93)",
          "sidebar-primary-foreground": "oklch(0.21 0.04 265.75)",
          "sidebar-accent": "oklch(0.37 0.03 259.73)",
          "sidebar-accent-foreground": "oklch(0.87 0.01 258.34)",
          "sidebar-border": "oklch(0.45 0.03 256.80)",
          "sidebar-ring": "oklch(0.68 0.16 276.93)",
          "font-sans": "Inter, sans-serif",
          "font-serif": "Merriweather, serif",
          "font-mono": "JetBrains Mono, monospace",
          "shadow-color": "hsl(0 0% 0%)",
          "shadow-opacity": "0.1",
          "shadow-blur": "8px",
          "shadow-spread": "-1px",
          "shadow-offset-x": "0px",
          "shadow-offset-y": "4px",
          "letter-spacing": "0em",
          "spacing": "0.25rem",
          "shadow-2xs": "0px 4px 8px -1px hsl(0 0% 0% / 0.05)",
          "shadow-xs": "0px 4px 8px -1px hsl(0 0% 0% / 0.05)",
          "shadow-sm": "0px 4px 8px -1px hsl(0 0% 0% / 0.10), 0px 1px 2px -2px hsl(0 0% 0% / 0.10)",
          "shadow": "0px 4px 8px -1px hsl(0 0% 0% / 0.10), 0px 1px 2px -2px hsl(0 0% 0% / 0.10)",
          "shadow-md": "0px 4px 8px -1px hsl(0 0% 0% / 0.10), 0px 2px 4px -2px hsl(0 0% 0% / 0.10)",
          "shadow-lg": "0px 4px 8px -1px hsl(0 0% 0% / 0.10), 0px 4px 6px -2px hsl(0 0% 0% / 0.10)",
          "shadow-xl": "0px 4px 8px -1px hsl(0 0% 0% / 0.10), 0px 8px 10px -2px hsl(0 0% 0% / 0.10)",
          "shadow-2xl": "0px 4px 8px -1px hsl(0 0% 0% / 0.25)"
        }
      }
    },
    {
      "name": "caffeine",
      "type": "registry:style",
      "title": "Caffeine",
      "description": "A theme based on the Caffeine color palette.",
      "css": {
        "@layer base": {
          "body": {
            "letter-spacing": "var(--tracking-normal)"
          }
        }
      },
      "cssVars": {
        "theme": {
          "font-sans": "ui-sans-serif, system-ui, -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial, 'Noto Sans', sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Noto Color Emoji'",
          "font-mono": "ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, \"Liberation Mono\", \"Courier New\", monospace",
          "font-serif": "ui-serif, Georgia, Cambria, \"Times New Roman\", Times, serif",
          "radius": "0.5rem",
          "tracking-tighter": "calc(var(--tracking-normal) - 0.05em)",
          "tracking-tight": "calc(var(--tracking-normal) - 0.025em)",
          "tracking-wide": "calc(var(--tracking-normal) + 0.025em)",
          "tracking-wider": "calc(var(--tracking-normal) + 0.05em)",
          "tracking-widest": "calc(var(--tracking-normal) + 0.1em)"
        },
        "light": {
          "background": "oklch(0.98 0 0)",
          "foreground": "oklch(0.24 0 0)",
          "card": "oklch(0.99 0 0)",
          "card-foreground": "oklch(0.24 0 0)",
          "popover": "oklch(0.99 0 0)",
          "popover-foreground": "oklch(0.24 0 0)",
          "primary": "oklch(0.43 0.04 41.99)",
          "primary-foreground": "oklch(1.00 0 0)",
          "secondary": "oklch(0.92 0.07 74.37)",
          "secondary-foreground": "oklch(0.35 0.07 40.83)",
          "muted": "oklch(0.95 0 0)",
          "muted-foreground": "oklch(0.50 0 0)",
          "accent": "oklch(0.93 0 0)",
          "accent-foreground": "oklch(0.24 0 0)",
          "destructive": "oklch(0.63 0.19 33.34)",
          "destructive-foreground": "oklch(1.00 0 0)",
          "border": "oklch(0.88 0 0)",
          "input": "oklch(0.88 0 0)",
          "ring": "oklch(0.43 0.04 41.99)",
          "chart-1": "oklch(0.43 0.04 41.99)",
          "chart-2": "oklch(0.92 0.07 74.37)",
          "chart-3": "oklch(0.93 0 0)",
          "chart-4": "oklch(0.94 0.05 75.50)",
          "chart-5": "oklch(0.43 0.04 41.67)",
          "radius": "0.5rem",
          "sidebar": "oklch(0.99 0 0)",
          "sidebar-foreground": "oklch(0.26 0 0)",
          "sidebar-primary": "oklch(0.33 0 0)",
          "sidebar-primary-foreground": "oklch(0.99 0 0)",
          "sidebar-accent": "oklch(0.98 0 0)",
          "sidebar-accent-foreground": "oklch(0.33 0 0)",
          "sidebar-border": "oklch(0.94 0 0)",
          "sidebar-ring": "oklch(0.77 0 0)",
          "font-sans": "ui-sans-serif, system-ui, -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial, 'Noto Sans', sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Noto Color Emoji'",
          "font-serif": "ui-serif, Georgia, Cambria, \"Times New Roman\", Times, serif",
          "font-mono": "ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, \"Liberation Mono\", \"Courier New\", monospace",
          "shadow-color": "hsl(0 0% 0%)",
          "shadow-opacity": "0.1",
          "shadow-blur": "3px",
          "shadow-spread": "0px",
          "shadow-offset-x": "0",
          "shadow-offset-y": "1px",
          "letter-spacing": "0em",
          "spacing": "0.25rem",
          "shadow-2xs": "0 1px 3px 0px hsl(0 0% 0% / 0.05)",
          "shadow-xs": "0 1px 3px 0px hsl(0 0% 0% / 0.05)",
          "shadow-sm": "0 1px 3px 0px hsl(0 0% 0% / 0.10), 0 1px 2px -1px hsl(0 0% 0% / 0.10)",
          "shadow": "0 1px 3px 0px hsl(0 0% 0% / 0.10), 0 1px 2px -1px hsl(0 0% 0% / 0.10)",
          "shadow-md": "0 1px 3px 0px hsl(0 0% 0% / 0.10), 0 2px 4px -1px hsl(0 0% 0% / 0.10)",
          "shadow-lg": "0 1px 3px 0px hsl(0 0% 0% / 0.10), 0 4px 6px -1px hsl(0 0% 0% / 0.10)",
          "shadow-xl": "0 1px 3px 0px hsl(0 0% 0% / 0.10), 0 8px 10px -1px hsl(0 0% 0% / 0.10)",
          "shadow-2xl": "0 1px 3px 0px hsl(0 0% 0% / 0.25)",
          "tracking-normal": "0em"
        },
        "dark": {
          "background": "oklch(0.18 0 0)",
          "foreground": "oklch(0.95 0 0)",
          "card": "oklch(0.21 0 0)",
          "card-foreground": "oklch(0.95 0 0)",
          "popover": "oklch(0.21 0 0)",
          "popover-foreground": "oklch(0.95 0 0)",
          "primary": "oklch(0.92 0.05 66.17)",
          "primary-foreground": "oklch(0.20 0.02 200.20)",
          "secondary": "oklch(0.32 0.02 63.70)",
          "secondary-foreground": "oklch(0.92 0.05 66.17)",
          "muted": "oklch(0.25 0 0)",
          "muted-foreground": "oklch(0.77 0 0)",
          "accent": "oklch(0.29 0 0)",
          "accent-foreground": "oklch(0.95 0 0)",
          "destructive": "oklch(0.63 0.19 33.34)",
          "destructive-foreground": "oklch(1.00 0 0)",
          "border": "oklch(0.24 0.01 91.75)",
          "input": "oklch(0.40 0 0)",
          "ring": "oklch(0.92 0.05 66.17)",
          "chart-1": "oklch(0.92 0.05 66.17)",
          "chart-2": "oklch(0.32 0.02 63.70)",
          "chart-3": "oklch(0.29 0 0)",
          "chart-4": "oklch(0.35 0.02 67.00)",
          "chart-5": "oklch(0.92 0.05 67.09)",
          "radius": "0.5rem",
          "sidebar": "oklch(0.21 0.01 285.89)",
          "sidebar-foreground": "oklch(0.97 0.00 286.38)",
          "sidebar-primary": "oklch(0.49 0.22 264.38)",
          "sidebar-primary-foreground": "oklch(1.00 0 0)",
          "sidebar-accent": "oklch(0.27 0.01 286.03)",
          "sidebar-accent-foreground": "oklch(0.97 0.00 286.38)",
          "sidebar-border": "oklch(0.27 0.01 286.03)",
          "sidebar-ring": "oklch(0.87 0.01 286.29)",
          "font-sans": "ui-sans-serif, system-ui, -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial, 'Noto Sans', sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Noto Color Emoji'",
          "font-serif": "ui-serif, Georgia, Cambria, \"Times New Roman\", Times, serif",
          "font-mono": "ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, \"Liberation Mono\", \"Courier New\", monospace",
          "shadow-color": "hsl(0 0% 0%)",
          "shadow-opacity": "0.1",
          "shadow-blur": "3px",
          "shadow-spread": "0px",
          "shadow-offset-x": "0",
          "shadow-offset-y": "1px",
          "letter-spacing": "0em",
          "spacing": "0.25rem",
          "shadow-2xs": "0 1px 3px 0px hsl(0 0% 0% / 0.05)",
          "shadow-xs": "0 1px 3px 0px hsl(0 0% 0% / 0.05)",
          "shadow-sm": "0 1px 3px 0px hsl(0 0% 0% / 0.10), 0 1px 2px -1px hsl(0 0% 0% / 0.10)",
          "shadow": "0 1px 3px 0px hsl(0 0% 0% / 0.10), 0 1px 2px -1px hsl(0 0% 0% / 0.10)",
          "shadow-md": "0 1px 3px 0px hsl(0 0% 0% / 0.10), 0 2px 4px -1px hsl(0 0% 0% / 0.10)",
          "shadow-lg": "0 1px 3px 0px hsl(0 0% 0% / 0.10), 0 4px 6px -1px hsl(0 0% 0% / 0.10)",
          "shadow-xl": "0 1px 3px 0px hsl(0 0% 0% / 0.10), 0 8px 10px -1px hsl(0 0% 0% / 0.10)",
          "shadow-2xl": "0 1px 3px 0px hsl(0 0% 0% / 0.25)"
        }
      }
    },
    {
      "name": "ocean-breeze",
      "type": "registry:style",
      "title": "Ocean Breeze",
      "description": "A theme based on the Ocean Breeze color palette.",
      "css": {
        "@layer base": {
          "body": {
            "letter-spacing": "var(--tracking-normal)"
          }
        }
      },
      "cssVars": {
        "theme": {
          "font-sans": "DM Sans, sans-serif",
          "font-mono": "IBM Plex Mono, monospace",
          "font-serif": "Lora, serif",
          "radius": "0.5rem",
          "tracking-tighter": "calc(var(--tracking-normal) - 0.05em)",
          "tracking-tight": "calc(var(--tracking-normal) - 0.025em)",
          "tracking-wide": "calc(var(--tracking-normal) + 0.025em)",
          "tracking-wider": "calc(var(--tracking-normal) + 0.05em)",
          "tracking-widest": "calc(var(--tracking-normal) + 0.1em)"
        },
        "light": {
          "background": "oklch(0.98 0.01 244.25)",
          "foreground": "oklch(0.37 0.03 259.73)",
          "card": "oklch(1.00 0 0)",
          "card-foreground": "oklch(0.37 0.03 259.73)",
          "popover": "oklch(1.00 0 0)",
          "popover-foreground": "oklch(0.37 0.03 259.73)",
          "primary": "oklch(0.72 0.19 149.58)",
          "primary-foreground": "oklch(1.00 0 0)",
          "secondary": "oklch(0.95 0.03 236.82)",
          "secondary-foreground": "oklch(0.45 0.03 256.80)",
          "muted": "oklch(0.97 0.00 264.54)",
          "muted-foreground": "oklch(0.55 0.02 264.36)",
          "accent": "oklch(0.95 0.05 163.05)",
          "accent-foreground": "oklch(0.37 0.03 259.73)",
          "destructive": "oklch(0.64 0.21 25.33)",
          "destructive-foreground": "oklch(1.00 0 0)",
          "border": "oklch(0.93 0.01 264.53)",
          "input": "oklch(0.93 0.01 264.53)",
          "ring": "oklch(0.72 0.19 149.58)",
          "chart-1": "oklch(0.72 0.19 149.58)",
          "chart-2": "oklch(0.70 0.15 162.48)",
          "chart-3": "oklch(0.60 0.13 163.23)",
          "chart-4": "oklch(0.51 0.10 165.61)",
          "chart-5": "oklch(0.43 0.09 166.91)",
          "radius": "0.5rem",
          "sidebar": "oklch(0.95 0.03 236.82)",
          "sidebar-foreground": "oklch(0.37 0.03 259.73)",
          "sidebar-primary": "oklch(0.72 0.19 149.58)",
          "sidebar-primary-foreground": "oklch(1.00 0 0)",
          "sidebar-accent": "oklch(0.95 0.05 163.05)",
          "sidebar-accent-foreground": "oklch(0.37 0.03 259.73)",
          "sidebar-border": "oklch(0.93 0.01 264.53)",
          "sidebar-ring": "oklch(0.72 0.19 149.58)",
          "font-sans": "DM Sans, sans-serif",
          "font-serif": "Lora, serif",
          "font-mono": "IBM Plex Mono, monospace",
          "shadow-color": "hsl(0 0% 0%)",
          "shadow-opacity": "0.1",
          "shadow-blur": "8px",
          "shadow-spread": "-1px",
          "shadow-offset-x": "0px",
          "shadow-offset-y": "4px",
          "letter-spacing": "0em",
          "spacing": "0.25rem",
          "shadow-2xs": "0px 4px 8px -1px hsl(0 0% 0% / 0.05)",
          "shadow-xs": "0px 4px 8px -1px hsl(0 0% 0% / 0.05)",
          "shadow-sm": "0px 4px 8px -1px hsl(0 0% 0% / 0.10), 0px 1px 2px -2px hsl(0 0% 0% / 0.10)",
          "shadow": "0px 4px 8px -1px hsl(0 0% 0% / 0.10), 0px 1px 2px -2px hsl(0 0% 0% / 0.10)",
          "shadow-md": "0px 4px 8px -1px hsl(0 0% 0% / 0.10), 0px 2px 4px -2px hsl(0 0% 0% / 0.10)",
          "shadow-lg": "0px 4px 8px -1px hsl(0 0% 0% / 0.10), 0px 4px 6px -2px hsl(0 0% 0% / 0.10)",
          "shadow-xl": "0px 4px 8px -1px hsl(0 0% 0% / 0.10), 0px 8px 10px -2px hsl(0 0% 0% / 0.10)",
          "shadow-2xl": "0px 4px 8px -1px hsl(0 0% 0% / 0.25)",
          "tracking-normal": "0em"
        },
        "dark": {
          "background": "oklch(0.21 0.04 265.75)",
          "foreground": "oklch(0.87 0.01 258.34)",
          "card": "oklch(0.28 0.04 260.03)",
          "card-foreground": "oklch(0.87 0.01 258.34)",
          "popover": "oklch(0.28 0.04 260.03)",
          "popover-foreground": "oklch(0.87 0.01 258.34)",
          "primary": "oklch(0.77 0.15 163.22)",
          "primary-foreground": "oklch(0.21 0.04 265.75)",
          "secondary": "oklch(0.34 0.03 260.91)",
          "secondary-foreground": "oklch(0.71 0.01 286.07)",
          "muted": "oklch(0.28 0.04 260.03)",
          "muted-foreground": "oklch(0.55 0.02 264.36)",
          "accent": "oklch(0.37 0.03 259.73)",
          "accent-foreground": "oklch(0.71 0.01 286.07)",
          "destructive": "oklch(0.64 0.21 25.33)",
          "destructive-foreground": "oklch(0.21 0.04 265.75)",
          "border": "oklch(0.45 0.03 256.80)",
          "input": "oklch(0.45 0.03 256.80)",
          "ring": "oklch(0.77 0.15 163.22)",
          "chart-1": "oklch(0.77 0.15 163.22)",
          "chart-2": "oklch(0.78 0.13 181.91)",
          "chart-3": "oklch(0.72 0.19 149.58)",
          "chart-4": "oklch(0.70 0.15 162.48)",
          "chart-5": "oklch(0.60 0.13 163.23)",
          "radius": "0.5rem",
          "sidebar": "oklch(0.28 0.04 260.03)",
          "sidebar-foreground": "oklch(0.87 0.01 258.34)",
          "sidebar-primary": "oklch(0.77 0.15 163.22)",
          "sidebar-primary-foreground": "oklch(0.21 0.04 265.75)",
          "sidebar-accent": "oklch(0.37 0.03 259.73)",
          "sidebar-accent-foreground": "oklch(0.71 0.01 286.07)",
          "sidebar-border": "oklch(0.45 0.03 256.80)",
          "sidebar-ring": "oklch(0.77 0.15 163.22)",
          "font-sans": "DM Sans, sans-serif",
          "font-serif": "Lora, serif",
          "font-mono": "IBM Plex Mono, monospace",
          "shadow-color": "hsl(0 0% 0%)",
          "shadow-opacity": "0.1",
          "shadow-blur": "8px",
          "shadow-spread": "-1px",
          "shadow-offset-x": "0px",
          "shadow-offset-y": "4px",
          "letter-spacing": "0em",
          "spacing": "0.25rem",
          "shadow-2xs": "0px 4px 8px -1px hsl(0 0% 0% / 0.05)",
          "shadow-xs": "0px 4px 8px -1px hsl(0 0% 0% / 0.05)",
          "shadow-sm": "0px 4px 8px -1px hsl(0 0% 0% / 0.10), 0px 1px 2px -2px hsl(0 0% 0% / 0.10)",
          "shadow": "0px 4px 8px -1px hsl(0 0% 0% / 0.10), 0px 1px 2px -2px hsl(0 0% 0% / 0.10)",
          "shadow-md": "0px 4px 8px -1px hsl(0 0% 0% / 0.10), 0px 2px 4px -2px hsl(0 0% 0% / 0.10)",
          "shadow-lg": "0px 4px 8px -1px hsl(0 0% 0% / 0.10), 0px 4px 6px -2px hsl(0 0% 0% / 0.10)",
          "shadow-xl": "0px 4px 8px -1px hsl(0 0% 0% / 0.10), 0px 8px 10px -2px hsl(0 0% 0% / 0.10)",
          "shadow-2xl": "0px 4px 8px -1px hsl(0 0% 0% / 0.25)"
        }
      }
    },
    {
      "name": "retro-arcade",
      "type": "registry:style",
      "title": "Retro Arcade",
      "description": "A theme based on the Retro Arcade color palette.",
      "css": {
        "@layer base": {
          "body": {
            "letter-spacing": "var(--tracking-normal)"
          }
        }
      },
      "cssVars": {
        "theme": {
          "font-sans": "Outfit, sans-serif",
          "font-mono": "Space Mono, monospace",
          "font-serif": "ui-serif, Georgia, Cambria, \"Times New Roman\", Times, serif",
          "radius": "0.25rem",
          "tracking-tighter": "calc(var(--tracking-normal) - 0.05em)",
          "tracking-tight": "calc(var(--tracking-normal) - 0.025em)",
          "tracking-wide": "calc(var(--tracking-normal) + 0.025em)",
          "tracking-wider": "calc(var(--tracking-normal) + 0.05em)",
          "tracking-widest": "calc(var(--tracking-normal) + 0.1em)"
        },
        "light": {
          "background": "oklch(0.97 0.03 90.10)",
          "foreground": "oklch(0.31 0.05 219.65)",
          "card": "oklch(0.93 0.03 92.40)",
          "card-foreground": "oklch(0.31 0.05 219.65)",
          "popover": "oklch(0.93 0.03 92.40)",
          "popover-foreground": "oklch(0.31 0.05 219.65)",
          "primary": "oklch(0.59 0.20 355.89)",
          "primary-foreground": "oklch(1.00 0 0)",
          "secondary": "oklch(0.64 0.10 187.38)",
          "secondary-foreground": "oklch(1.00 0 0)",
          "muted": "oklch(0.70 0.02 196.79)",
          "muted-foreground": "oklch(0.31 0.05 219.65)",
          "accent": "oklch(0.58 0.17 39.50)",
          "accent-foreground": "oklch(1.00 0 0)",
          "destructive": "oklch(0.59 0.21 27.12)",
          "destructive-foreground": "oklch(1.00 0 0)",
          "border": "oklch(0.65 0.02 205.26)",
          "input": "oklch(0.65 0.02 205.26)",
          "ring": "oklch(0.59 0.20 355.89)",
          "chart-1": "oklch(0.61 0.14 244.93)",
          "chart-2": "oklch(0.64 0.10 187.38)",
          "chart-3": "oklch(0.59 0.20 355.89)",
          "chart-4": "oklch(0.58 0.17 39.50)",
          "chart-5": "oklch(0.59 0.21 27.12)",
          "radius": "0.25rem",
          "sidebar": "oklch(0.97 0.03 90.10)",
          "sidebar-foreground": "oklch(0.31 0.05 219.65)",
          "sidebar-primary": "oklch(0.59 0.20 355.89)",
          "sidebar-primary-foreground": "oklch(1.00 0 0)",
          "sidebar-accent": "oklch(0.64 0.10 187.38)",
          "sidebar-accent-foreground": "oklch(1.00 0 0)",
          "sidebar-border": "oklch(0.65 0.02 205.26)",
          "sidebar-ring": "oklch(0.59 0.20 355.89)",
          "font-sans": "Outfit, sans-serif",
          "font-serif": "ui-serif, Georgia, Cambria, \"Times New Roman\", Times, serif",
          "font-mono": "Space Mono, monospace",
          "shadow-color": "hsl(196 83% 10%)",
          "shadow-opacity": "0.15",
          "shadow-blur": "4px",
          "shadow-spread": "0px",
          "shadow-offset-x": "2px",
          "shadow-offset-y": "2px",
          "letter-spacing": "0em",
          "spacing": "0.25rem",
          "shadow-2xs": "2px 2px 4px 0px hsl(196 83% 10% / 0.07)",
          "shadow-xs": "2px 2px 4px 0px hsl(196 83% 10% / 0.07)",
          "shadow-sm": "2px 2px 4px 0px hsl(196 83% 10% / 0.15), 2px 1px 2px -1px hsl(196 83% 10% / 0.15)",
          "shadow": "2px 2px 4px 0px hsl(196 83% 10% / 0.15), 2px 1px 2px -1px hsl(196 83% 10% / 0.15)",
          "shadow-md": "2px 2px 4px 0px hsl(196 83% 10% / 0.15), 2px 2px 4px -1px hsl(196 83% 10% / 0.15)",
          "shadow-lg": "2px 2px 4px 0px hsl(196 83% 10% / 0.15), 2px 4px 6px -1px hsl(196 83% 10% / 0.15)",
          "shadow-xl": "2px 2px 4px 0px hsl(196 83% 10% / 0.15), 2px 8px 10px -1px hsl(196 83% 10% / 0.15)",
          "shadow-2xl": "2px 2px 4px 0px hsl(196 83% 10% / 0.38)",
          "tracking-normal": "0em"
        },
        "dark": {
          "background": "oklch(0.27 0.05 219.82)",
          "foreground": "oklch(0.70 0.02 196.79)",
          "card": "oklch(0.31 0.05 219.65)",
          "card-foreground": "oklch(0.70 0.02 196.79)",
          "popover": "oklch(0.31 0.05 219.65)",
          "popover-foreground": "oklch(0.70 0.02 196.79)",
          "primary": "oklch(0.59 0.20 355.89)",
          "primary-foreground": "oklch(1.00 0 0)",
          "secondary": "oklch(0.64 0.10 187.38)",
          "secondary-foreground": "oklch(1.00 0 0)",
          "muted": "oklch(0.52 0.03 219.14)",
          "muted-foreground": "oklch(0.70 0.02 196.79)",
          "accent": "oklch(0.58 0.17 39.50)",
          "accent-foreground": "oklch(1.00 0 0)",
          "destructive": "oklch(0.59 0.21 27.12)",
          "destructive-foreground": "oklch(1.00 0 0)",
          "border": "oklch(0.52 0.03 219.14)",
          "input": "oklch(0.52 0.03 219.14)",
          "ring": "oklch(0.59 0.20 355.89)",
          "chart-1": "oklch(0.61 0.14 244.93)",
          "chart-2": "oklch(0.64 0.10 187.38)",
          "chart-3": "oklch(0.59 0.20 355.89)",
          "chart-4": "oklch(0.58 0.17 39.50)",
          "chart-5": "oklch(0.59 0.21 27.12)",
          "radius": "0.25rem",
          "sidebar": "oklch(0.27 0.05 219.82)",
          "sidebar-foreground": "oklch(0.70 0.02 196.79)",
          "sidebar-primary": "oklch(0.59 0.20 355.89)",
          "sidebar-primary-foreground": "oklch(1.00 0 0)",
          "sidebar-accent": "oklch(0.64 0.10 187.38)",
          "sidebar-accent-foreground": "oklch(1.00 0 0)",
          "sidebar-border": "oklch(0.52 0.03 219.14)",
          "sidebar-ring": "oklch(0.59 0.20 355.89)",
          "font-sans": "Outfit, sans-serif",
          "font-serif": "ui-serif, Georgia, Cambria, \"Times New Roman\", Times, serif",
          "font-mono": "Space Mono, monospace",
          "shadow-color": "hsl(196 83% 10%)",
          "shadow-opacity": "0.15",
          "shadow-blur": "4px",
          "shadow-spread": "0px",
          "shadow-offset-x": "2px",
          "shadow-offset-y": "2px",
          "letter-spacing": "0em",
          "spacing": "0.25rem",
          "shadow-2xs": "2px 2px 4px 0px hsl(196 83% 10% / 0.07)",
          "shadow-xs": "2px 2px 4px 0px hsl(196 83% 10% / 0.07)",
          "shadow-sm": "2px 2px 4px 0px hsl(196 83% 10% / 0.15), 2px 1px 2px -1px hsl(196 83% 10% / 0.15)",
          "shadow": "2px 2px 4px 0px hsl(196 83% 10% / 0.15), 2px 1px 2px -1px hsl(196 83% 10% / 0.15)",
          "shadow-md": "2px 2px 4px 0px hsl(196 83% 10% / 0.15), 2px 2px 4px -1px hsl(196 83% 10% / 0.15)",
          "shadow-lg": "2px 2px 4px 0px hsl(196 83% 10% / 0.15), 2px 4px 6px -1px hsl(196 83% 10% / 0.15)",
          "shadow-xl": "2px 2px 4px 0px hsl(196 83% 10% / 0.15), 2px 8px 10px -1px hsl(196 83% 10% / 0.15)",
          "shadow-2xl": "2px 2px 4px 0px hsl(196 83% 10% / 0.38)"
        }
      }
    },
    {
      "name": "midnight-bloom",
      "type": "registry:style",
      "title": "Midnight Bloom",
      "description": "A theme based on the Midnight Bloom color palette.",
      "css": {
        "@layer base": {
          "body": {
            "letter-spacing": "var(--tracking-normal)"
          }
        }
      },
      "cssVars": {
        "theme": {
          "font-sans": "Montserrat, sans-serif",
          "font-mono": "Source Code Pro, monospace",
          "font-serif": "Playfair Display, serif",
          "radius": "0.5rem",
          "tracking-tighter": "calc(var(--tracking-normal) - 0.05em)",
          "tracking-tight": "calc(var(--tracking-normal) - 0.025em)",
          "tracking-wide": "calc(var(--tracking-normal) + 0.025em)",
          "tracking-wider": "calc(var(--tracking-normal) + 0.05em)",
          "tracking-widest": "calc(var(--tracking-normal) + 0.1em)"
        },
        "light": {
          "background": "oklch(0.98 0 0)",
          "foreground": "oklch(0.32 0 0)",
          "card": "oklch(1.00 0 0)",
          "card-foreground": "oklch(0.32 0 0)",
          "popover": "oklch(1.00 0 0)",
          "popover-foreground": "oklch(0.32 0 0)",
          "primary": "oklch(0.57 0.20 283.08)",
          "primary-foreground": "oklch(1.00 0 0)",
          "secondary": "oklch(0.82 0.07 249.35)",
          "secondary-foreground": "oklch(0.32 0 0)",
          "muted": "oklch(0.82 0.02 91.62)",
          "muted-foreground": "oklch(0.54 0 0)",
          "accent": "oklch(0.65 0.06 117.43)",
          "accent-foreground": "oklch(1.00 0 0)",
          "destructive": "oklch(0.64 0.21 25.33)",
          "destructive-foreground": "oklch(1.00 0 0)",
          "border": "oklch(0.87 0 0)",
          "input": "oklch(0.87 0 0)",
          "ring": "oklch(0.57 0.20 283.08)",
          "chart-1": "oklch(0.57 0.20 283.08)",
          "chart-2": "oklch(0.53 0.17 314.65)",
          "chart-3": "oklch(0.34 0.18 301.68)",
          "chart-4": "oklch(0.67 0.14 261.34)",
          "chart-5": "oklch(0.59 0.10 245.74)",
          "radius": "0.5rem",
          "sidebar": "oklch(0.98 0 0)",
          "sidebar-foreground": "oklch(0.32 0 0)",
          "sidebar-primary": "oklch(0.57 0.20 283.08)",
          "sidebar-primary-foreground": "oklch(1.00 0 0)",
          "sidebar-accent": "oklch(0.65 0.06 117.43)",
          "sidebar-accent-foreground": "oklch(1.00 0 0)",
          "sidebar-border": "oklch(0.87 0 0)",
          "sidebar-ring": "oklch(0.57 0.20 283.08)",
          "font-sans": "Montserrat, sans-serif",
          "font-serif": "Playfair Display, serif",
          "font-mono": "Source Code Pro, monospace",
          "shadow-color": "hsl(0 0% 0%)",
          "shadow-opacity": "0.1",
          "shadow-blur": "10px",
          "shadow-spread": "-2px",
          "shadow-offset-x": "0px",
          "shadow-offset-y": "5px",
          "letter-spacing": "0em",
          "spacing": "0.25rem",
          "shadow-2xs": "0px 5px 10px -2px hsl(0 0% 0% / 0.05)",
          "shadow-xs": "0px 5px 10px -2px hsl(0 0% 0% / 0.05)",
          "shadow-sm": "0px 5px 10px -2px hsl(0 0% 0% / 0.10), 0px 1px 2px -3px hsl(0 0% 0% / 0.10)",
          "shadow": "0px 5px 10px -2px hsl(0 0% 0% / 0.10), 0px 1px 2px -3px hsl(0 0% 0% / 0.10)",
          "shadow-md": "0px 5px 10px -2px hsl(0 0% 0% / 0.10), 0px 2px 4px -3px hsl(0 0% 0% / 0.10)",
          "shadow-lg": "0px 5px 10px -2px hsl(0 0% 0% / 0.10), 0px 4px 6px -3px hsl(0 0% 0% / 0.10)",
          "shadow-xl": "0px 5px 10px -2px hsl(0 0% 0% / 0.10), 0px 8px 10px -3px hsl(0 0% 0% / 0.10)",
          "shadow-2xl": "0px 5px 10px -2px hsl(0 0% 0% / 0.25)",
          "tracking-normal": "0em"
        },
        "dark": {
          "background": "oklch(0.23 0.01 264.29)",
          "foreground": "oklch(0.92 0 0)",
          "card": "oklch(0.32 0.01 223.67)",
          "card-foreground": "oklch(0.92 0 0)",
          "popover": "oklch(0.32 0.01 223.67)",
          "popover-foreground": "oklch(0.92 0 0)",
          "primary": "oklch(0.57 0.20 283.08)",
          "primary-foreground": "oklch(1.00 0 0)",
          "secondary": "oklch(0.34 0.18 301.68)",
          "secondary-foreground": "oklch(0.92 0 0)",
          "muted": "oklch(0.39 0 0)",
          "muted-foreground": "oklch(0.72 0 0)",
          "accent": "oklch(0.67 0.14 261.34)",
          "accent-foreground": "oklch(0.92 0 0)",
          "destructive": "oklch(0.64 0.21 25.33)",
          "destructive-foreground": "oklch(1.00 0 0)",
          "border": "oklch(0.39 0 0)",
          "input": "oklch(0.39 0 0)",
          "ring": "oklch(0.57 0.20 283.08)",
          "chart-1": "oklch(0.57 0.20 283.08)",
          "chart-2": "oklch(0.53 0.17 314.65)",
          "chart-3": "oklch(0.34 0.18 301.68)",
          "chart-4": "oklch(0.67 0.14 261.34)",
          "chart-5": "oklch(0.59 0.10 245.74)",
          "radius": "0.5rem",
          "sidebar": "oklch(0.23 0.01 264.29)",
          "sidebar-foreground": "oklch(0.92 0 0)",
          "sidebar-primary": "oklch(0.57 0.20 283.08)",
          "sidebar-primary-foreground": "oklch(1.00 0 0)",
          "sidebar-accent": "oklch(0.67 0.14 261.34)",
          "sidebar-accent-foreground": "oklch(0.92 0 0)",
          "sidebar-border": "oklch(0.39 0 0)",
          "sidebar-ring": "oklch(0.57 0.20 283.08)",
          "font-sans": "Montserrat, sans-serif",
          "font-serif": "Playfair Display, serif",
          "font-mono": "Source Code Pro, monospace",
          "shadow-color": "hsl(0 0% 0%)",
          "shadow-opacity": "0.1",
          "shadow-blur": "10px",
          "shadow-spread": "-2px",
          "shadow-offset-x": "0px",
          "shadow-offset-y": "5px",
          "letter-spacing": "0em",
          "spacing": "0.25rem",
          "shadow-2xs": "0px 5px 10px -2px hsl(0 0% 0% / 0.05)",
          "shadow-xs": "0px 5px 10px -2px hsl(0 0% 0% / 0.05)",
          "shadow-sm": "0px 5px 10px -2px hsl(0 0% 0% / 0.10), 0px 1px 2px -3px hsl(0 0% 0% / 0.10)",
          "shadow": "0px 5px 10px -2px hsl(0 0% 0% / 0.10), 0px 1px 2px -3px hsl(0 0% 0% / 0.10)",
          "shadow-md": "0px 5px 10px -2px hsl(0 0% 0% / 0.10), 0px 2px 4px -3px hsl(0 0% 0% / 0.10)",
          "shadow-lg": "0px 5px 10px -2px hsl(0 0% 0% / 0.10), 0px 4px 6px -3px hsl(0 0% 0% / 0.10)",
          "shadow-xl": "0px 5px 10px -2px hsl(0 0% 0% / 0.10), 0px 8px 10px -3px hsl(0 0% 0% / 0.10)",
          "shadow-2xl": "0px 5px 10px -2px hsl(0 0% 0% / 0.25)"
        }
      }
    },
    {
      "name": "candyland",
      "type": "registry:style",
      "title": "Candyland",
      "description": "A theme based on the Candyland color palette.",
      "css": {
        "@layer base": {
          "body": {
            "letter-spacing": "var(--tracking-normal)"
          }
        }
      },
      "cssVars": {
        "theme": {
          "font-sans": "Poppins, sans-serif",
          "font-mono": "Roboto Mono, monospace",
          "font-serif": "ui-serif, Georgia, Cambria, \"Times New Roman\", Times, serif",
          "radius": "0.5rem",
          "tracking-tighter": "calc(var(--tracking-normal) - 0.05em)",
          "tracking-tight": "calc(var(--tracking-normal) - 0.025em)",
          "tracking-wide": "calc(var(--tracking-normal) + 0.025em)",
          "tracking-wider": "calc(var(--tracking-normal) + 0.05em)",
          "tracking-widest": "calc(var(--tracking-normal) + 0.1em)"
        },
        "light": {
          "background": "oklch(0.98 0.00 228.78)",
          "foreground": "oklch(0.32 0 0)",
          "card": "oklch(1.00 0 0)",
          "card-foreground": "oklch(0.32 0 0)",
          "popover": "oklch(1.00 0 0)",
          "popover-foreground": "oklch(0.32 0 0)",
          "primary": "oklch(0.87 0.07 7.09)",
          "primary-foreground": "oklch(0 0 0)",
          "secondary": "oklch(0.81 0.08 225.75)",
          "secondary-foreground": "oklch(0 0 0)",
          "muted": "oklch(0.88 0.03 98.10)",
          "muted-foreground": "oklch(0.54 0 0)",
          "accent": "oklch(0.97 0.21 109.77)",
          "accent-foreground": "oklch(0 0 0)",
          "destructive": "oklch(0.64 0.21 25.33)",
          "destructive-foreground": "oklch(1.00 0 0)",
          "border": "oklch(0.87 0 0)",
          "input": "oklch(0.87 0 0)",
          "ring": "oklch(0.87 0.07 7.09)",
          "chart-1": "oklch(0.87 0.07 7.09)",
          "chart-2": "oklch(0.81 0.08 225.75)",
          "chart-3": "oklch(0.97 0.21 109.77)",
          "chart-4": "oklch(0.80 0.14 349.23)",
          "chart-5": "oklch(0.74 0.23 142.85)",
          "radius": "0.5rem",
          "sidebar": "oklch(0.98 0.00 228.78)",
          "sidebar-foreground": "oklch(0.32 0 0)",
          "sidebar-primary": "oklch(0.87 0.07 7.09)",
          "sidebar-primary-foreground": "oklch(0 0 0)",
          "sidebar-accent": "oklch(0.97 0.21 109.77)",
          "sidebar-accent-foreground": "oklch(0 0 0)",
          "sidebar-border": "oklch(0.87 0 0)",
          "sidebar-ring": "oklch(0.87 0.07 7.09)",
          "font-sans": "Poppins, sans-serif",
          "font-serif": "ui-serif, Georgia, Cambria, \"Times New Roman\", Times, serif",
          "font-mono": "Roboto Mono, monospace",
          "shadow-color": "hsl(0 0% 0%)",
          "shadow-opacity": "0.1",
          "shadow-blur": "3px",
          "shadow-spread": "0px",
          "shadow-offset-x": "0",
          "shadow-offset-y": "1px",
          "letter-spacing": "0em",
          "spacing": "0.25rem",
          "shadow-2xs": "0 1px 3px 0px hsl(0 0% 0% / 0.05)",
          "shadow-xs": "0 1px 3px 0px hsl(0 0% 0% / 0.05)",
          "shadow-sm": "0 1px 3px 0px hsl(0 0% 0% / 0.10), 0 1px 2px -1px hsl(0 0% 0% / 0.10)",
          "shadow": "0 1px 3px 0px hsl(0 0% 0% / 0.10), 0 1px 2px -1px hsl(0 0% 0% / 0.10)",
          "shadow-md": "0 1px 3px 0px hsl(0 0% 0% / 0.10), 0 2px 4px -1px hsl(0 0% 0% / 0.10)",
          "shadow-lg": "0 1px 3px 0px hsl(0 0% 0% / 0.10), 0 4px 6px -1px hsl(0 0% 0% / 0.10)",
          "shadow-xl": "0 1px 3px 0px hsl(0 0% 0% / 0.10), 0 8px 10px -1px hsl(0 0% 0% / 0.10)",
          "shadow-2xl": "0 1px 3px 0px hsl(0 0% 0% / 0.25)",
          "tracking-normal": "0em"
        },
        "dark": {
          "background": "oklch(0.23 0.01 264.29)",
          "foreground": "oklch(0.92 0 0)",
          "card": "oklch(0.32 0.01 223.67)",
          "card-foreground": "oklch(0.92 0 0)",
          "popover": "oklch(0.32 0.01 223.67)",
          "popover-foreground": "oklch(0.92 0 0)",
          "primary": "oklch(0.80 0.14 349.23)",
          "primary-foreground": "oklch(0 0 0)",
          "secondary": "oklch(0.74 0.23 142.85)",
          "secondary-foreground": "oklch(0 0 0)",
          "muted": "oklch(0.39 0 0)",
          "muted-foreground": "oklch(0.72 0 0)",
          "accent": "oklch(0.81 0.08 225.75)",
          "accent-foreground": "oklch(0 0 0)",
          "destructive": "oklch(0.64 0.21 25.33)",
          "destructive-foreground": "oklch(1.00 0 0)",
          "border": "oklch(0.39 0 0)",
          "input": "oklch(0.39 0 0)",
          "ring": "oklch(0.80 0.14 349.23)",
          "chart-1": "oklch(0.80 0.14 349.23)",
          "chart-2": "oklch(0.74 0.23 142.85)",
          "chart-3": "oklch(0.81 0.08 225.75)",
          "chart-4": "oklch(0.97 0.21 109.77)",
          "chart-5": "oklch(0.87 0.18 90.38)",
          "radius": "0.5rem",
          "sidebar": "oklch(0.23 0.01 264.29)",
          "sidebar-foreground": "oklch(0.92 0 0)",
          "sidebar-primary": "oklch(0.80 0.14 349.23)",
          "sidebar-primary-foreground": "oklch(0 0 0)",
          "sidebar-accent": "oklch(0.81 0.08 225.75)",
          "sidebar-accent-foreground": "oklch(0 0 0)",
          "sidebar-border": "oklch(0.39 0 0)",
          "sidebar-ring": "oklch(0.80 0.14 349.23)",
          "font-sans": "Poppins, sans-serif",
          "font-serif": "ui-serif, Georgia, Cambria, \"Times New Roman\", Times, serif",
          "font-mono": "Roboto Mono, monospace",
          "shadow-color": "hsl(0 0% 0%)",
          "shadow-opacity": "0.1",
          "shadow-blur": "3px",
          "shadow-spread": "0px",
          "shadow-offset-x": "0",
          "shadow-offset-y": "1px",
          "letter-spacing": "0em",
          "spacing": "0.25rem",
          "shadow-2xs": "0 1px 3px 0px hsl(0 0% 0% / 0.05)",
          "shadow-xs": "0 1px 3px 0px hsl(0 0% 0% / 0.05)",
          "shadow-sm": "0 1px 3px 0px hsl(0 0% 0% / 0.10), 0 1px 2px -1px hsl(0 0% 0% / 0.10)",
          "shadow": "0 1px 3px 0px hsl(0 0% 0% / 0.10), 0 1px 2px -1px hsl(0 0% 0% / 0.10)",
          "shadow-md": "0 1px 3px 0px hsl(0 0% 0% / 0.10), 0 2px 4px -1px hsl(0 0% 0% / 0.10)",
          "shadow-lg": "0 1px 3px 0px hsl(0 0% 0% / 0.10), 0 4px 6px -1px hsl(0 0% 0% / 0.10)",
          "shadow-xl": "0 1px 3px 0px hsl(0 0% 0% / 0.10), 0 8px 10px -1px hsl(0 0% 0% / 0.10)",
          "shadow-2xl": "0 1px 3px 0px hsl(0 0% 0% / 0.25)"
        }
      }
    },
    {
      "name": "northern-lights",
      "type": "registry:style",
      "title": "Northern Lights",
      "description": "A theme based on the Northern Lights color palette.",
      "css": {
        "@layer base": {
          "body": {
            "letter-spacing": "var(--tracking-normal)"
          }
        }
      },
      "cssVars": {
        "theme": {
          "font-sans": "Plus Jakarta Sans, sans-serif",
          "font-mono": "JetBrains Mono, monospace",
          "font-serif": "Source Serif 4, serif",
          "radius": "0.5rem",
          "tracking-tighter": "calc(var(--tracking-normal) - 0.05em)",
          "tracking-tight": "calc(var(--tracking-normal) - 0.025em)",
          "tracking-wide": "calc(var(--tracking-normal) + 0.025em)",
          "tracking-wider": "calc(var(--tracking-normal) + 0.05em)",
          "tracking-widest": "calc(var(--tracking-normal) + 0.1em)"
        },
        "light": {
          "background": "oklch(0.98 0.00 286.38)",
          "foreground": "oklch(0.32 0 0)",
          "card": "oklch(1.00 0 0)",
          "card-foreground": "oklch(0.32 0 0)",
          "popover": "oklch(1.00 0 0)",
          "popover-foreground": "oklch(0.32 0 0)",
          "primary": "oklch(0.65 0.15 150.31)",
          "primary-foreground": "oklch(1.00 0 0)",
          "secondary": "oklch(0.67 0.14 261.34)",
          "secondary-foreground": "oklch(1.00 0 0)",
          "muted": "oklch(0.88 0.03 98.10)",
          "muted-foreground": "oklch(0.54 0 0)",
          "accent": "oklch(0.83 0.11 211.96)",
          "accent-foreground": "oklch(0.32 0 0)",
          "destructive": "oklch(0.64 0.21 25.33)",
          "destructive-foreground": "oklch(1.00 0 0)",
          "border": "oklch(0.87 0 0)",
          "input": "oklch(0.87 0 0)",
          "ring": "oklch(0.65 0.15 150.31)",
          "chart-1": "oklch(0.65 0.15 150.31)",
          "chart-2": "oklch(0.67 0.14 261.34)",
          "chart-3": "oklch(0.83 0.11 211.96)",
          "chart-4": "oklch(0.59 0.10 245.74)",
          "chart-5": "oklch(0.59 0.16 148.24)",
          "radius": "0.5rem",
          "sidebar": "oklch(0.98 0.00 286.38)",
          "sidebar-foreground": "oklch(0.32 0 0)",
          "sidebar-primary": "oklch(0.65 0.15 150.31)",
          "sidebar-primary-foreground": "oklch(1.00 0 0)",
          "sidebar-accent": "oklch(0.83 0.11 211.96)",
          "sidebar-accent-foreground": "oklch(0.32 0 0)",
          "sidebar-border": "oklch(0.87 0 0)",
          "sidebar-ring": "oklch(0.65 0.15 150.31)",
          "font-sans": "Plus Jakarta Sans, sans-serif",
          "font-serif": "Source Serif 4, serif",
          "font-mono": "JetBrains Mono, monospace",
          "shadow-color": "hsl(0 0% 0%)",
          "shadow-opacity": "0.1",
          "shadow-blur": "3px",
          "shadow-spread": "0px",
          "shadow-offset-x": "0",
          "shadow-offset-y": "1px",
          "letter-spacing": "0em",
          "spacing": "0.25rem",
          "shadow-2xs": "0 1px 3px 0px hsl(0 0% 0% / 0.05)",
          "shadow-xs": "0 1px 3px 0px hsl(0 0% 0% / 0.05)",
          "shadow-sm": "0 1px 3px 0px hsl(0 0% 0% / 0.10), 0 1px 2px -1px hsl(0 0% 0% / 0.10)",
          "shadow": "0 1px 3px 0px hsl(0 0% 0% / 0.10), 0 1px 2px -1px hsl(0 0% 0% / 0.10)",
          "shadow-md": "0 1px 3px 0px hsl(0 0% 0% / 0.10), 0 2px 4px -1px hsl(0 0% 0% / 0.10)",
          "shadow-lg": "0 1px 3px 0px hsl(0 0% 0% / 0.10), 0 4px 6px -1px hsl(0 0% 0% / 0.10)",
          "shadow-xl": "0 1px 3px 0px hsl(0 0% 0% / 0.10), 0 8px 10px -1px hsl(0 0% 0% / 0.10)",
          "shadow-2xl": "0 1px 3px 0px hsl(0 0% 0% / 0.25)",
          "tracking-normal": "0em"
        },
        "dark": {
          "background": "oklch(0.23 0.01 264.29)",
          "foreground": "oklch(0.92 0 0)",
          "card": "oklch(0.32 0.01 223.67)",
          "card-foreground": "oklch(0.92 0 0)",
          "popover": "oklch(0.32 0.01 223.67)",
          "popover-foreground": "oklch(0.92 0 0)",
          "primary": "oklch(0.65 0.15 150.31)",
          "primary-foreground": "oklch(1.00 0 0)",
          "secondary": "oklch(0.59 0.10 245.74)",
          "secondary-foreground": "oklch(0.92 0 0)",
          "muted": "oklch(0.39 0 0)",
          "muted-foreground": "oklch(0.72 0 0)",
          "accent": "oklch(0.67 0.14 261.34)",
          "accent-foreground": "oklch(0.92 0 0)",
          "destructive": "oklch(0.64 0.21 25.33)",
          "destructive-foreground": "oklch(1.00 0 0)",
          "border": "oklch(0.39 0 0)",
          "input": "oklch(0.39 0 0)",
          "ring": "oklch(0.65 0.15 150.31)",
          "chart-1": "oklch(0.65 0.15 150.31)",
          "chart-2": "oklch(0.59 0.10 245.74)",
          "chart-3": "oklch(0.67 0.14 261.34)",
          "chart-4": "oklch(0.83 0.11 211.96)",
          "chart-5": "oklch(0.59 0.16 148.24)",
          "radius": "0.5rem",
          "sidebar": "oklch(0.23 0.01 264.29)",
          "sidebar-foreground": "oklch(0.92 0 0)",
          "sidebar-primary": "oklch(0.65 0.15 150.31)",
          "sidebar-primary-foreground": "oklch(1.00 0 0)",
          "sidebar-accent": "oklch(0.67 0.14 261.34)",
          "sidebar-accent-foreground": "oklch(0.92 0 0)",
          "sidebar-border": "oklch(0.39 0 0)",
          "sidebar-ring": "oklch(0.65 0.15 150.31)",
          "font-sans": "Plus Jakarta Sans, sans-serif",
          "font-serif": "Source Serif 4, serif",
          "font-mono": "JetBrains Mono, monospace",
          "shadow-color": "hsl(0 0% 0%)",
          "shadow-opacity": "0.1",
          "shadow-blur": "3px",
          "shadow-spread": "0px",
          "shadow-offset-x": "0",
          "shadow-offset-y": "1px",
          "letter-spacing": "0em",
          "spacing": "0.25rem",
          "shadow-2xs": "0 1px 3px 0px hsl(0 0% 0% / 0.05)",
          "shadow-xs": "0 1px 3px 0px hsl(0 0% 0% / 0.05)",
          "shadow-sm": "0 1px 3px 0px hsl(0 0% 0% / 0.10), 0 1px 2px -1px hsl(0 0% 0% / 0.10)",
          "shadow": "0 1px 3px 0px hsl(0 0% 0% / 0.10), 0 1px 2px -1px hsl(0 0% 0% / 0.10)",
          "shadow-md": "0 1px 3px 0px hsl(0 0% 0% / 0.10), 0 2px 4px -1px hsl(0 0% 0% / 0.10)",
          "shadow-lg": "0 1px 3px 0px hsl(0 0% 0% / 0.10), 0 4px 6px -1px hsl(0 0% 0% / 0.10)",
          "shadow-xl": "0 1px 3px 0px hsl(0 0% 0% / 0.10), 0 8px 10px -1px hsl(0 0% 0% / 0.10)",
          "shadow-2xl": "0 1px 3px 0px hsl(0 0% 0% / 0.25)"
        }
      }
    },
    {
      "name": "vintage-paper",
      "type": "registry:style",
      "title": "Vintage Paper",
      "description": "A theme based on the Vintage Paper color palette.",
      "css": {
        "@layer base": {
          "body": {
            "letter-spacing": "var(--tracking-normal)"
          }
        }
      },
      "cssVars": {
        "theme": {
          "font-sans": "Libre Baskerville, serif",
          "font-mono": "IBM Plex Mono, monospace",
          "font-serif": "Lora, serif",
          "radius": "0.25rem",
          "tracking-tighter": "calc(var(--tracking-normal) - 0.05em)",
          "tracking-tight": "calc(var(--tracking-normal) - 0.025em)",
          "tracking-wide": "calc(var(--tracking-normal) + 0.025em)",
          "tracking-wider": "calc(var(--tracking-normal) + 0.05em)",
          "tracking-widest": "calc(var(--tracking-normal) + 0.1em)"
        },
        "light": {
          "background": "oklch(0.96 0.02 90.24)",
          "foreground": "oklch(0.38 0.02 64.34)",
          "card": "oklch(0.99 0.01 87.47)",
          "card-foreground": "oklch(0.38 0.02 64.34)",
          "popover": "oklch(0.99 0.01 87.47)",
          "popover-foreground": "oklch(0.38 0.02 64.34)",
          "primary": "oklch(0.62 0.08 65.54)",
          "primary-foreground": "oklch(1.00 0 0)",
          "secondary": "oklch(0.88 0.03 85.57)",
          "secondary-foreground": "oklch(0.43 0.03 64.93)",
          "muted": "oklch(0.92 0.02 83.06)",
          "muted-foreground": "oklch(0.54 0.04 71.17)",
          "accent": "oklch(0.83 0.04 88.81)",
          "accent-foreground": "oklch(0.38 0.02 64.34)",
          "destructive": "oklch(0.55 0.14 32.91)",
          "destructive-foreground": "oklch(1.00 0 0)",
          "border": "oklch(0.86 0.03 84.59)",
          "input": "oklch(0.86 0.03 84.59)",
          "ring": "oklch(0.62 0.08 65.54)",
          "chart-1": "oklch(0.62 0.08 65.54)",
          "chart-2": "oklch(0.56 0.06 68.58)",
          "chart-3": "oklch(0.49 0.06 72.68)",
          "chart-4": "oklch(0.68 0.06 64.78)",
          "chart-5": "oklch(0.73 0.06 66.70)",
          "radius": "0.25rem",
          "sidebar": "oklch(0.92 0.02 83.06)",
          "sidebar-foreground": "oklch(0.38 0.02 64.34)",
          "sidebar-primary": "oklch(0.62 0.08 65.54)",
          "sidebar-primary-foreground": "oklch(1.00 0 0)",
          "sidebar-accent": "oklch(0.83 0.04 88.81)",
          "sidebar-accent-foreground": "oklch(0.38 0.02 64.34)",
          "sidebar-border": "oklch(0.86 0.03 84.59)",
          "sidebar-ring": "oklch(0.62 0.08 65.54)",
          "font-sans": "Libre Baskerville, serif",
          "font-serif": "Lora, serif",
          "font-mono": "IBM Plex Mono, monospace",
          "shadow-color": "hsl(28 13% 20%)",
          "shadow-opacity": "0.12",
          "shadow-blur": "5px",
          "shadow-spread": "0px",
          "shadow-offset-x": "2px",
          "shadow-offset-y": "3px",
          "letter-spacing": "0em",
          "spacing": "0.25rem",
          "shadow-2xs": "2px 3px 5px 0px hsl(28 13% 20% / 0.06)",
          "shadow-xs": "2px 3px 5px 0px hsl(28 13% 20% / 0.06)",
          "shadow-sm": "2px 3px 5px 0px hsl(28 13% 20% / 0.12), 2px 1px 2px -1px hsl(28 13% 20% / 0.12)",
          "shadow": "2px 3px 5px 0px hsl(28 13% 20% / 0.12), 2px 1px 2px -1px hsl(28 13% 20% / 0.12)",
          "shadow-md": "2px 3px 5px 0px hsl(28 13% 20% / 0.12), 2px 2px 4px -1px hsl(28 13% 20% / 0.12)",
          "shadow-lg": "2px 3px 5px 0px hsl(28 13% 20% / 0.12), 2px 4px 6px -1px hsl(28 13% 20% / 0.12)",
          "shadow-xl": "2px 3px 5px 0px hsl(28 13% 20% / 0.12), 2px 8px 10px -1px hsl(28 13% 20% / 0.12)",
          "shadow-2xl": "2px 3px 5px 0px hsl(28 13% 20% / 0.30)",
          "tracking-normal": "0em"
        },
        "dark": {
          "background": "oklch(0.27 0.01 57.65)",
          "foreground": "oklch(0.92 0.02 83.06)",
          "card": "oklch(0.32 0.02 59.06)",
          "card-foreground": "oklch(0.92 0.02 83.06)",
          "popover": "oklch(0.32 0.02 59.06)",
          "popover-foreground": "oklch(0.92 0.02 83.06)",
          "primary": "oklch(0.73 0.06 66.70)",
          "primary-foreground": "oklch(0.27 0.01 57.65)",
          "secondary": "oklch(0.38 0.02 57.13)",
          "secondary-foreground": "oklch(0.92 0.02 83.06)",
          "muted": "oklch(0.32 0.02 59.06)",
          "muted-foreground": "oklch(0.80 0.02 82.11)",
          "accent": "oklch(0.42 0.03 56.34)",
          "accent-foreground": "oklch(0.92 0.02 83.06)",
          "destructive": "oklch(0.55 0.14 32.91)",
          "destructive-foreground": "oklch(1.00 0 0)",
          "border": "oklch(0.38 0.02 57.13)",
          "input": "oklch(0.38 0.02 57.13)",
          "ring": "oklch(0.73 0.06 66.70)",
          "chart-1": "oklch(0.73 0.06 66.70)",
          "chart-2": "oklch(0.68 0.06 64.78)",
          "chart-3": "oklch(0.62 0.08 65.54)",
          "chart-4": "oklch(0.56 0.06 68.58)",
          "chart-5": "oklch(0.49 0.06 72.68)",
          "radius": "0.25rem",
          "sidebar": "oklch(0.27 0.01 57.65)",
          "sidebar-foreground": "oklch(0.92 0.02 83.06)",
          "sidebar-primary": "oklch(0.73 0.06 66.70)",
          "sidebar-primary-foreground": "oklch(0.27 0.01 57.65)",
          "sidebar-accent": "oklch(0.42 0.03 56.34)",
          "sidebar-accent-foreground": "oklch(0.92 0.02 83.06)",
          "sidebar-border": "oklch(0.38 0.02 57.13)",
          "sidebar-ring": "oklch(0.73 0.06 66.70)",
          "font-sans": "Libre Baskerville, serif",
          "font-serif": "Lora, serif",
          "font-mono": "IBM Plex Mono, monospace",
          "shadow-color": "hsl(28 13% 20%)",
          "shadow-opacity": "0.12",
          "shadow-blur": "5px",
          "shadow-spread": "0px",
          "shadow-offset-x": "2px",
          "shadow-offset-y": "3px",
          "letter-spacing": "0em",
          "spacing": "0.25rem",
          "shadow-2xs": "2px 3px 5px 0px hsl(28 13% 20% / 0.06)",
          "shadow-xs": "2px 3px 5px 0px hsl(28 13% 20% / 0.06)",
          "shadow-sm": "2px 3px 5px 0px hsl(28 13% 20% / 0.12), 2px 1px 2px -1px hsl(28 13% 20% / 0.12)",
          "shadow": "2px 3px 5px 0px hsl(28 13% 20% / 0.12), 2px 1px 2px -1px hsl(28 13% 20% / 0.12)",
          "shadow-md": "2px 3px 5px 0px hsl(28 13% 20% / 0.12), 2px 2px 4px -1px hsl(28 13% 20% / 0.12)",
          "shadow-lg": "2px 3px 5px 0px hsl(28 13% 20% / 0.12), 2px 4px 6px -1px hsl(28 13% 20% / 0.12)",
          "shadow-xl": "2px 3px 5px 0px hsl(28 13% 20% / 0.12), 2px 8px 10px -1px hsl(28 13% 20% / 0.12)",
          "shadow-2xl": "2px 3px 5px 0px hsl(28 13% 20% / 0.30)"
        }
      }
    },
    {
      "name": "sunset-horizon",
      "type": "registry:style",
      "title": "Sunset Horizon",
      "description": "A theme based on the Sunset Horizon color palette.",
      "css": {
        "@layer base": {
          "body": {
            "letter-spacing": "var(--tracking-normal)"
          }
        }
      },
      "cssVars": {
        "theme": {
          "font-sans": "Montserrat, sans-serif",
          "font-mono": "Ubuntu Mono, monospace",
          "font-serif": "Merriweather, serif",
          "radius": "0.625rem",
          "tracking-tighter": "calc(var(--tracking-normal) - 0.05em)",
          "tracking-tight": "calc(var(--tracking-normal) - 0.025em)",
          "tracking-wide": "calc(var(--tracking-normal) + 0.025em)",
          "tracking-wider": "calc(var(--tracking-normal) + 0.05em)",
          "tracking-widest": "calc(var(--tracking-normal) + 0.1em)"
        },
        "light": {
          "background": "oklch(0.99 0.01 56.32)",
          "foreground": "oklch(0.34 0.01 2.77)",
          "card": "oklch(1.00 0 0)",
          "card-foreground": "oklch(0.34 0.01 2.77)",
          "popover": "oklch(1.00 0 0)",
          "popover-foreground": "oklch(0.34 0.01 2.77)",
          "primary": "oklch(0.74 0.16 34.71)",
          "primary-foreground": "oklch(1.00 0 0)",
          "secondary": "oklch(0.96 0.02 28.90)",
          "secondary-foreground": "oklch(0.56 0.13 32.74)",
          "muted": "oklch(0.97 0.02 39.40)",
          "muted-foreground": "oklch(0.55 0.01 58.07)",
          "accent": "oklch(0.83 0.11 58.00)",
          "accent-foreground": "oklch(0.34 0.01 2.77)",
          "destructive": "oklch(0.61 0.21 22.24)",
          "destructive-foreground": "oklch(1.00 0 0)",
          "border": "oklch(0.93 0.04 38.69)",
          "input": "oklch(0.93 0.04 38.69)",
          "ring": "oklch(0.74 0.16 34.71)",
          "chart-1": "oklch(0.74 0.16 34.71)",
          "chart-2": "oklch(0.83 0.11 58.00)",
          "chart-3": "oklch(0.88 0.08 54.93)",
          "chart-4": "oklch(0.82 0.11 40.89)",
          "chart-5": "oklch(0.64 0.13 32.07)",
          "radius": "0.625rem",
          "sidebar": "oklch(0.97 0.02 39.40)",
          "sidebar-foreground": "oklch(0.34 0.01 2.77)",
          "sidebar-primary": "oklch(0.74 0.16 34.71)",
          "sidebar-primary-foreground": "oklch(1.00 0 0)",
          "sidebar-accent": "oklch(0.83 0.11 58.00)",
          "sidebar-accent-foreground": "oklch(0.34 0.01 2.77)",
          "sidebar-border": "oklch(0.93 0.04 38.69)",
          "sidebar-ring": "oklch(0.74 0.16 34.71)",
          "font-sans": "Montserrat, sans-serif",
          "font-serif": "Merriweather, serif",
          "font-mono": "Ubuntu Mono, monospace",
          "shadow-color": "hsl(0 0% 0%)",
          "shadow-opacity": "0.09",
          "shadow-blur": "12px",
          "shadow-spread": "-3px",
          "shadow-offset-x": "0px",
          "shadow-offset-y": "6px",
          "letter-spacing": "0em",
          "spacing": "0.25rem",
          "shadow-2xs": "0px 6px 12px -3px hsl(0 0% 0% / 0.04)",
          "shadow-xs": "0px 6px 12px -3px hsl(0 0% 0% / 0.04)",
          "shadow-sm": "0px 6px 12px -3px hsl(0 0% 0% / 0.09), 0px 1px 2px -4px hsl(0 0% 0% / 0.09)",
          "shadow": "0px 6px 12px -3px hsl(0 0% 0% / 0.09), 0px 1px 2px -4px hsl(0 0% 0% / 0.09)",
          "shadow-md": "0px 6px 12px -3px hsl(0 0% 0% / 0.09), 0px 2px 4px -4px hsl(0 0% 0% / 0.09)",
          "shadow-lg": "0px 6px 12px -3px hsl(0 0% 0% / 0.09), 0px 4px 6px -4px hsl(0 0% 0% / 0.09)",
          "shadow-xl": "0px 6px 12px -3px hsl(0 0% 0% / 0.09), 0px 8px 10px -4px hsl(0 0% 0% / 0.09)",
          "shadow-2xl": "0px 6px 12px -3px hsl(0 0% 0% / 0.22)",
          "tracking-normal": "0em"
        },
        "dark": {
          "background": "oklch(0.26 0.02 352.40)",
          "foreground": "oklch(0.94 0.01 51.32)",
          "card": "oklch(0.32 0.02 341.45)",
          "card-foreground": "oklch(0.94 0.01 51.32)",
          "popover": "oklch(0.32 0.02 341.45)",
          "popover-foreground": "oklch(0.94 0.01 51.32)",
          "primary": "oklch(0.74 0.16 34.71)",
          "primary-foreground": "oklch(1.00 0 0)",
          "secondary": "oklch(0.36 0.02 342.27)",
          "secondary-foreground": "oklch(0.94 0.01 51.32)",
          "muted": "oklch(0.32 0.02 341.45)",
          "muted-foreground": "oklch(0.84 0.02 52.63)",
          "accent": "oklch(0.83 0.11 58.00)",
          "accent-foreground": "oklch(0.26 0.02 352.40)",
          "destructive": "oklch(0.61 0.21 22.24)",
          "destructive-foreground": "oklch(1.00 0 0)",
          "border": "oklch(0.36 0.02 342.27)",
          "input": "oklch(0.36 0.02 342.27)",
          "ring": "oklch(0.74 0.16 34.71)",
          "chart-1": "oklch(0.74 0.16 34.71)",
          "chart-2": "oklch(0.83 0.11 58.00)",
          "chart-3": "oklch(0.88 0.08 54.93)",
          "chart-4": "oklch(0.82 0.11 40.89)",
          "chart-5": "oklch(0.64 0.13 32.07)",
          "radius": "0.625rem",
          "sidebar": "oklch(0.26 0.02 352.40)",
          "sidebar-foreground": "oklch(0.94 0.01 51.32)",
          "sidebar-primary": "oklch(0.74 0.16 34.71)",
          "sidebar-primary-foreground": "oklch(1.00 0 0)",
          "sidebar-accent": "oklch(0.83 0.11 58.00)",
          "sidebar-accent-foreground": "oklch(0.26 0.02 352.40)",
          "sidebar-border": "oklch(0.36 0.02 342.27)",
          "sidebar-ring": "oklch(0.74 0.16 34.71)",
          "font-sans": "Montserrat, sans-serif",
          "font-serif": "Merriweather, serif",
          "font-mono": "Ubuntu Mono, monospace",
          "shadow-color": "hsl(0 0% 0%)",
          "shadow-opacity": "0.09",
          "shadow-blur": "12px",
          "shadow-spread": "-3px",
          "shadow-offset-x": "0px",
          "shadow-offset-y": "6px",
          "letter-spacing": "0em",
          "spacing": "0.25rem",
          "shadow-2xs": "0px 6px 12px -3px hsl(0 0% 0% / 0.04)",
          "shadow-xs": "0px 6px 12px -3px hsl(0 0% 0% / 0.04)",
          "shadow-sm": "0px 6px 12px -3px hsl(0 0% 0% / 0.09), 0px 1px 2px -4px hsl(0 0% 0% / 0.09)",
          "shadow": "0px 6px 12px -3px hsl(0 0% 0% / 0.09), 0px 1px 2px -4px hsl(0 0% 0% / 0.09)",
          "shadow-md": "0px 6px 12px -3px hsl(0 0% 0% / 0.09), 0px 2px 4px -4px hsl(0 0% 0% / 0.09)",
          "shadow-lg": "0px 6px 12px -3px hsl(0 0% 0% / 0.09), 0px 4px 6px -4px hsl(0 0% 0% / 0.09)",
          "shadow-xl": "0px 6px 12px -3px hsl(0 0% 0% / 0.09), 0px 8px 10px -4px hsl(0 0% 0% / 0.09)",
          "shadow-2xl": "0px 6px 12px -3px hsl(0 0% 0% / 0.22)"
        }
      }
    },
    {
      "name": "starry-night",
      "type": "registry:style",
      "title": "Starry Night",
      "description": "A theme based on the Starry Night color palette.",
      "css": {
        "@layer base": {
          "body": {
            "letter-spacing": "var(--tracking-normal)"
          }
        }
      },
      "cssVars": {
        "theme": {
          "font-sans": "Libre Baskerville, serif",
          "font-mono": "ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, \"Liberation Mono\", \"Courier New\", monospace",
          "font-serif": "ui-serif, Georgia, Cambria, \"Times New Roman\", Times, serif",
          "radius": "0.5rem",
          "tracking-tighter": "calc(var(--tracking-normal) - 0.05em)",
          "tracking-tight": "calc(var(--tracking-normal) - 0.025em)",
          "tracking-wide": "calc(var(--tracking-normal) + 0.025em)",
          "tracking-wider": "calc(var(--tracking-normal) + 0.05em)",
          "tracking-widest": "calc(var(--tracking-normal) + 0.1em)"
        },
        "light": {
          "background": "oklch(0.98 0.00 258.32)",
          "foreground": "oklch(0.26 0.04 268.07)",
          "card": "oklch(0.93 0.01 251.56)",
          "card-foreground": "oklch(0.26 0.04 268.07)",
          "popover": "oklch(0.99 0.03 98.05)",
          "popover-foreground": "oklch(0.26 0.04 268.07)",
          "primary": "oklch(0.48 0.12 263.38)",
          "primary-foreground": "oklch(0.99 0.03 98.05)",
          "secondary": "oklch(0.86 0.12 81.01)",
          "secondary-foreground": "oklch(0.26 0.04 268.07)",
          "muted": "oklch(0.92 0.01 106.56)",
          "muted-foreground": "oklch(0.48 0.12 263.38)",
          "accent": "oklch(0.69 0.07 234.04)",
          "accent-foreground": "oklch(0.99 0.03 98.05)",
          "destructive": "oklch(0.26 0.04 322.53)",
          "destructive-foreground": "oklch(0.99 0.03 98.05)",
          "border": "oklch(0.78 0.02 251.19)",
          "input": "oklch(0.69 0.07 234.04)",
          "ring": "oklch(0.86 0.12 81.01)",
          "chart-1": "oklch(0.48 0.12 263.38)",
          "chart-2": "oklch(0.86 0.12 81.01)",
          "chart-3": "oklch(0.69 0.07 234.04)",
          "chart-4": "oklch(0.78 0.02 251.19)",
          "chart-5": "oklch(0.26 0.04 322.53)",
          "radius": "0.5rem",
          "sidebar": "oklch(0.93 0.01 251.56)",
          "sidebar-foreground": "oklch(0.26 0.04 268.07)",
          "sidebar-primary": "oklch(0.48 0.12 263.38)",
          "sidebar-primary-foreground": "oklch(0.99 0.03 98.05)",
          "sidebar-accent": "oklch(0.86 0.12 81.01)",
          "sidebar-accent-foreground": "oklch(0.26 0.04 268.07)",
          "sidebar-border": "oklch(0.78 0.02 251.19)",
          "sidebar-ring": "oklch(0.86 0.12 81.01)",
          "font-sans": "Libre Baskerville, serif",
          "font-serif": "ui-serif, Georgia, Cambria, \"Times New Roman\", Times, serif",
          "font-mono": "ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, \"Liberation Mono\", \"Courier New\", monospace",
          "shadow-color": "hsl(0 0% 0%)",
          "shadow-opacity": "0.1",
          "shadow-blur": "3px",
          "shadow-spread": "0px",
          "shadow-offset-x": "0",
          "shadow-offset-y": "1px",
          "letter-spacing": "0em",
          "spacing": "0.25rem",
          "shadow-2xs": "0 1px 3px 0px hsl(0 0% 0% / 0.05)",
          "shadow-xs": "0 1px 3px 0px hsl(0 0% 0% / 0.05)",
          "shadow-sm": "0 1px 3px 0px hsl(0 0% 0% / 0.10), 0 1px 2px -1px hsl(0 0% 0% / 0.10)",
          "shadow": "0 1px 3px 0px hsl(0 0% 0% / 0.10), 0 1px 2px -1px hsl(0 0% 0% / 0.10)",
          "shadow-md": "0 1px 3px 0px hsl(0 0% 0% / 0.10), 0 2px 4px -1px hsl(0 0% 0% / 0.10)",
          "shadow-lg": "0 1px 3px 0px hsl(0 0% 0% / 0.10), 0 4px 6px -1px hsl(0 0% 0% / 0.10)",
          "shadow-xl": "0 1px 3px 0px hsl(0 0% 0% / 0.10), 0 8px 10px -1px hsl(0 0% 0% / 0.10)",
          "shadow-2xl": "0 1px 3px 0px hsl(0 0% 0% / 0.25)",
          "tracking-normal": "0em"
        },
        "dark": {
          "background": "oklch(0.22 0.02 275.84)",
          "foreground": "oklch(0.94 0.01 266.70)",
          "card": "oklch(0.27 0.04 281.30)",
          "card-foreground": "oklch(0.94 0.01 266.70)",
          "popover": "oklch(0.27 0.04 281.30)",
          "popover-foreground": "oklch(0.91 0.14 95.11)",
          "primary": "oklch(0.48 0.12 263.38)",
          "primary-foreground": "oklch(0.91 0.14 95.11)",
          "secondary": "oklch(0.91 0.14 95.11)",
          "secondary-foreground": "oklch(0.27 0.04 281.30)",
          "muted": "oklch(0.27 0.04 281.30)",
          "muted-foreground": "oklch(0.62 0.04 262.04)",
          "accent": "oklch(0.85 0.05 264.78)",
          "accent-foreground": "oklch(0.22 0.02 275.84)",
          "destructive": "oklch(0.53 0.12 357.11)",
          "destructive-foreground": "oklch(0.91 0.14 95.11)",
          "border": "oklch(0.31 0.03 281.77)",
          "input": "oklch(0.48 0.12 263.38)",
          "ring": "oklch(0.91 0.14 95.11)",
          "chart-1": "oklch(0.48 0.12 263.38)",
          "chart-2": "oklch(0.91 0.14 95.11)",
          "chart-3": "oklch(0.69 0.07 234.04)",
          "chart-4": "oklch(0.62 0.04 262.04)",
          "chart-5": "oklch(0.53 0.12 357.11)",
          "radius": "0.5rem",
          "sidebar": "oklch(0.27 0.04 281.30)",
          "sidebar-foreground": "oklch(0.94 0.01 266.70)",
          "sidebar-primary": "oklch(0.48 0.12 263.38)",
          "sidebar-primary-foreground": "oklch(0.91 0.14 95.11)",
          "sidebar-accent": "oklch(0.91 0.14 95.11)",
          "sidebar-accent-foreground": "oklch(0.27 0.04 281.30)",
          "sidebar-border": "oklch(0.31 0.03 281.77)",
          "sidebar-ring": "oklch(0.91 0.14 95.11)",
          "font-sans": "Libre Baskerville, serif",
          "font-serif": "ui-serif, Georgia, Cambria, \"Times New Roman\", Times, serif",
          "font-mono": "ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, \"Liberation Mono\", \"Courier New\", monospace",
          "shadow-color": "hsl(0 0% 0%)",
          "shadow-opacity": "0.1",
          "shadow-blur": "3px",
          "shadow-spread": "0px",
          "shadow-offset-x": "0",
          "shadow-offset-y": "1px",
          "letter-spacing": "0em",
          "spacing": "0.25rem",
          "shadow-2xs": "0 1px 3px 0px hsl(0 0% 0% / 0.05)",
          "shadow-xs": "0 1px 3px 0px hsl(0 0% 0% / 0.05)",
          "shadow-sm": "0 1px 3px 0px hsl(0 0% 0% / 0.10), 0 1px 2px -1px hsl(0 0% 0% / 0.10)",
          "shadow": "0 1px 3px 0px hsl(0 0% 0% / 0.10), 0 1px 2px -1px hsl(0 0% 0% / 0.10)",
          "shadow-md": "0 1px 3px 0px hsl(0 0% 0% / 0.10), 0 2px 4px -1px hsl(0 0% 0% / 0.10)",
          "shadow-lg": "0 1px 3px 0px hsl(0 0% 0% / 0.10), 0 4px 6px -1px hsl(0 0% 0% / 0.10)",
          "shadow-xl": "0 1px 3px 0px hsl(0 0% 0% / 0.10), 0 8px 10px -1px hsl(0 0% 0% / 0.10)",
          "shadow-2xl": "0 1px 3px 0px hsl(0 0% 0% / 0.25)"
        }
      }
    },
    {
      "name": "claude",
      "type": "registry:style",
      "title": "Claude",
      "description": "A theme based on the Claude color palette.",
      "css": {
        "@layer base": {
          "body": {
            "letter-spacing": "var(--tracking-normal)"
          }
        }
      },
      "cssVars": {
        "theme": {
          "font-sans": "ui-sans-serif, system-ui, -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial, 'Noto Sans', sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Noto Color Emoji'",
          "font-mono": "ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, \"Liberation Mono\", \"Courier New\", monospace",
          "font-serif": "ui-serif, Georgia, Cambria, \"Times New Roman\", Times, serif",
          "radius": "0.5rem",
          "tracking-tighter": "calc(var(--tracking-normal) - 0.05em)",
          "tracking-tight": "calc(var(--tracking-normal) - 0.025em)",
          "tracking-wide": "calc(var(--tracking-normal) + 0.025em)",
          "tracking-wider": "calc(var(--tracking-normal) + 0.05em)",
          "tracking-widest": "calc(var(--tracking-normal) + 0.1em)"
        },
        "light": {
          "background": "oklch(0.98 0.01 95.10)",
          "foreground": "oklch(0.34 0.03 95.72)",
          "card": "oklch(0.98 0.01 95.10)",
          "card-foreground": "oklch(0.19 0.00 106.59)",
          "popover": "oklch(1.00 0 0)",
          "popover-foreground": "oklch(0.27 0.02 98.94)",
          "primary": "oklch(0.62 0.14 39.04)",
          "primary-foreground": "oklch(1.00 0 0)",
          "secondary": "oklch(0.92 0.01 92.99)",
          "secondary-foreground": "oklch(0.43 0.02 98.60)",
          "muted": "oklch(0.93 0.02 90.24)",
          "muted-foreground": "oklch(0.61 0.01 97.42)",
          "accent": "oklch(0.92 0.01 92.99)",
          "accent-foreground": "oklch(0.27 0.02 98.94)",
          "destructive": "oklch(0.19 0.00 106.59)",
          "destructive-foreground": "oklch(1.00 0 0)",
          "border": "oklch(0.88 0.01 97.36)",
          "input": "oklch(0.76 0.02 98.35)",
          "ring": "oklch(0.59 0.17 253.06)",
          "chart-1": "oklch(0.56 0.13 43.00)",
          "chart-2": "oklch(0.69 0.16 290.41)",
          "chart-3": "oklch(0.88 0.03 93.13)",
          "chart-4": "oklch(0.88 0.04 298.18)",
          "chart-5": "oklch(0.56 0.13 42.06)",
          "radius": "0.5rem",
          "sidebar": "oklch(0.97 0.01 98.88)",
          "sidebar-foreground": "oklch(0.36 0.01 106.65)",
          "sidebar-primary": "oklch(0.62 0.14 39.04)",
          "sidebar-primary-foreground": "oklch(0.99 0 0)",
          "sidebar-accent": "oklch(0.92 0.01 92.99)",
          "sidebar-accent-foreground": "oklch(0.33 0 0)",
          "sidebar-border": "oklch(0.94 0 0)",
          "sidebar-ring": "oklch(0.77 0 0)",
          "font-sans": "ui-sans-serif, system-ui, -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial, 'Noto Sans', sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Noto Color Emoji'",
          "font-serif": "ui-serif, Georgia, Cambria, \"Times New Roman\", Times, serif",
          "font-mono": "ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, \"Liberation Mono\", \"Courier New\", monospace",
          "shadow-color": "hsl(0 0% 0%)",
          "shadow-opacity": "0.1",
          "shadow-blur": "3px",
          "shadow-spread": "0px",
          "shadow-offset-x": "0",
          "shadow-offset-y": "1px",
          "letter-spacing": "0em",
          "spacing": "0.25rem",
          "shadow-2xs": "0 1px 3px 0px hsl(0 0% 0% / 0.05)",
          "shadow-xs": "0 1px 3px 0px hsl(0 0% 0% / 0.05)",
          "shadow-sm": "0 1px 3px 0px hsl(0 0% 0% / 0.10), 0 1px 2px -1px hsl(0 0% 0% / 0.10)",
          "shadow": "0 1px 3px 0px hsl(0 0% 0% / 0.10), 0 1px 2px -1px hsl(0 0% 0% / 0.10)",
          "shadow-md": "0 1px 3px 0px hsl(0 0% 0% / 0.10), 0 2px 4px -1px hsl(0 0% 0% / 0.10)",
          "shadow-lg": "0 1px 3px 0px hsl(0 0% 0% / 0.10), 0 4px 6px -1px hsl(0 0% 0% / 0.10)",
          "shadow-xl": "0 1px 3px 0px hsl(0 0% 0% / 0.10), 0 8px 10px -1px hsl(0 0% 0% / 0.10)",
          "shadow-2xl": "0 1px 3px 0px hsl(0 0% 0% / 0.25)",
          "tracking-normal": "0em"
        },
        "dark": {
          "background": "oklch(0.27 0.00 106.64)",
          "foreground": "oklch(0.81 0.01 93.01)",
          "card": "oklch(0.27 0.00 106.64)",
          "card-foreground": "oklch(0.98 0.01 95.10)",
          "popover": "oklch(0.31 0.00 106.60)",
          "popover-foreground": "oklch(0.92 0.00 106.48)",
          "primary": "oklch(0.67 0.13 38.76)",
          "primary-foreground": "oklch(1.00 0 0)",
          "secondary": "oklch(0.98 0.01 95.10)",
          "secondary-foreground": "oklch(0.31 0.00 106.60)",
          "muted": "oklch(0.22 0.00 106.71)",
          "muted-foreground": "oklch(0.77 0.02 99.07)",
          "accent": "oklch(0.21 0.01 95.42)",
          "accent-foreground": "oklch(0.97 0.01 98.88)",
          "destructive": "oklch(0.64 0.21 25.33)",
          "destructive-foreground": "oklch(1.00 0 0)",
          "border": "oklch(0.36 0.01 106.89)",
          "input": "oklch(0.43 0.01 100.22)",
          "ring": "oklch(0.59 0.17 253.06)",
          "chart-1": "oklch(0.56 0.13 43.00)",
          "chart-2": "oklch(0.69 0.16 290.41)",
          "chart-3": "oklch(0.21 0.01 95.42)",
          "chart-4": "oklch(0.31 0.05 289.32)",
          "chart-5": "oklch(0.56 0.13 42.06)",
          "radius": "0.5rem",
          "sidebar": "oklch(0.24 0.00 67.71)",
          "sidebar-foreground": "oklch(0.81 0.01 93.01)",
          "sidebar-primary": "oklch(0.33 0 0)",
          "sidebar-primary-foreground": "oklch(0.99 0 0)",
          "sidebar-accent": "oklch(0.17 0.00 106.62)",
          "sidebar-accent-foreground": "oklch(0.81 0.01 93.01)",
          "sidebar-border": "oklch(0.94 0 0)",
          "sidebar-ring": "oklch(0.77 0 0)",
          "font-sans": "ui-sans-serif, system-ui, -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial, 'Noto Sans', sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Noto Color Emoji'",
          "font-serif": "ui-serif, Georgia, Cambria, \"Times New Roman\", Times, serif",
          "font-mono": "ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, \"Liberation Mono\", \"Courier New\", monospace",
          "shadow-color": "hsl(0 0% 0%)",
          "shadow-opacity": "0.1",
          "shadow-blur": "3px",
          "shadow-spread": "0px",
          "shadow-offset-x": "0",
          "shadow-offset-y": "1px",
          "letter-spacing": "0em",
          "spacing": "0.25rem",
          "shadow-2xs": "0 1px 3px 0px hsl(0 0% 0% / 0.05)",
          "shadow-xs": "0 1px 3px 0px hsl(0 0% 0% / 0.05)",
          "shadow-sm": "0 1px 3px 0px hsl(0 0% 0% / 0.10), 0 1px 2px -1px hsl(0 0% 0% / 0.10)",
          "shadow": "0 1px 3px 0px hsl(0 0% 0% / 0.10), 0 1px 2px -1px hsl(0 0% 0% / 0.10)",
          "shadow-md": "0 1px 3px 0px hsl(0 0% 0% / 0.10), 0 2px 4px -1px hsl(0 0% 0% / 0.10)",
          "shadow-lg": "0 1px 3px 0px hsl(0 0% 0% / 0.10), 0 4px 6px -1px hsl(0 0% 0% / 0.10)",
          "shadow-xl": "0 1px 3px 0px hsl(0 0% 0% / 0.10), 0 8px 10px -1px hsl(0 0% 0% / 0.10)",
          "shadow-2xl": "0 1px 3px 0px hsl(0 0% 0% / 0.25)"
        }
      }
    },
    {
      "name": "vercel",
      "type": "registry:style",
      "title": "Vercel",
      "description": "A theme based on the Vercel color palette.",
      "css": {
        "@layer base": {
          "body": {
            "letter-spacing": "var(--tracking-normal)"
          }
        }
      },
      "cssVars": {
        "theme": {
          "font-sans": "Geist, sans-serif",
          "font-mono": "Geist Mono, monospace",
          "font-serif": "Georgia, serif",
          "radius": "0.5rem",
          "tracking-tighter": "calc(var(--tracking-normal) - 0.05em)",
          "tracking-tight": "calc(var(--tracking-normal) - 0.025em)",
          "tracking-wide": "calc(var(--tracking-normal) + 0.025em)",
          "tracking-wider": "calc(var(--tracking-normal) + 0.05em)",
          "tracking-widest": "calc(var(--tracking-normal) + 0.1em)"
        },
        "light": {
          "background": "oklch(0.99 0 0)",
          "foreground": "oklch(0 0 0)",
          "card": "oklch(1 0 0)",
          "card-foreground": "oklch(0 0 0)",
          "popover": "oklch(0.99 0 0)",
          "popover-foreground": "oklch(0 0 0)",
          "primary": "oklch(0 0 0)",
          "primary-foreground": "oklch(1 0 0)",
          "secondary": "oklch(0.94 0 0)",
          "secondary-foreground": "oklch(0 0 0)",
          "muted": "oklch(0.97 0 0)",
          "muted-foreground": "oklch(0.44 0 0)",
          "accent": "oklch(0.94 0 0)",
          "accent-foreground": "oklch(0 0 0)",
          "destructive": "oklch(0.63 0.19 23.03)",
          "destructive-foreground": "oklch(1 0 0)",
          "border": "oklch(0.92 0 0)",
          "input": "oklch(0.94 0 0)",
          "ring": "oklch(0 0 0)",
          "chart-1": "oklch(0.81 0.17 75.35)",
          "chart-2": "oklch(0.55 0.22 264.53)",
          "chart-3": "oklch(0.72 0 0)",
          "chart-4": "oklch(0.92 0 0)",
          "chart-5": "oklch(0.56 0 0)",
          "radius": "0.5rem",
          "sidebar": "oklch(0.99 0 0)",
          "sidebar-foreground": "oklch(0 0 0)",
          "sidebar-primary": "oklch(0 0 0)",
          "sidebar-primary-foreground": "oklch(1 0 0)",
          "sidebar-accent": "oklch(0.94 0 0)",
          "sidebar-accent-foreground": "oklch(0 0 0)",
          "sidebar-border": "oklch(0.94 0 0)",
          "sidebar-ring": "oklch(0 0 0)",
          "font-sans": "Geist, sans-serif",
          "font-serif": "Georgia, serif",
          "font-mono": "Geist Mono, monospace",
          "shadow-color": "hsl(0 0% 0%)",
          "shadow-opacity": "0.18",
          "shadow-blur": "2px",
          "shadow-spread": "0px",
          "shadow-offset-x": "0px",
          "shadow-offset-y": "1px",
          "letter-spacing": "0em",
          "spacing": "0.25rem",
          "shadow-2xs": "0px 1px 2px 0px hsl(0 0% 0% / 0.09)",
          "shadow-xs": "0px 1px 2px 0px hsl(0 0% 0% / 0.09)",
          "shadow-sm": "0px 1px 2px 0px hsl(0 0% 0% / 0.18), 0px 1px 2px -1px hsl(0 0% 0% / 0.18)",
          "shadow": "0px 1px 2px 0px hsl(0 0% 0% / 0.18), 0px 1px 2px -1px hsl(0 0% 0% / 0.18)",
          "shadow-md": "0px 1px 2px 0px hsl(0 0% 0% / 0.18), 0px 2px 4px -1px hsl(0 0% 0% / 0.18)",
          "shadow-lg": "0px 1px 2px 0px hsl(0 0% 0% / 0.18), 0px 4px 6px -1px hsl(0 0% 0% / 0.18)",
          "shadow-xl": "0px 1px 2px 0px hsl(0 0% 0% / 0.18), 0px 8px 10px -1px hsl(0 0% 0% / 0.18)",
          "shadow-2xl": "0px 1px 2px 0px hsl(0 0% 0% / 0.45)",
          "tracking-normal": "0em"
        },
        "dark": {
          "background": "oklch(0 0 0)",
          "foreground": "oklch(1 0 0)",
          "card": "oklch(0.14 0 0)",
          "card-foreground": "oklch(1 0 0)",
          "popover": "oklch(0.18 0 0)",
          "popover-foreground": "oklch(1 0 0)",
          "primary": "oklch(1 0 0)",
          "primary-foreground": "oklch(0 0 0)",
          "secondary": "oklch(0.25 0 0)",
          "secondary-foreground": "oklch(1 0 0)",
          "muted": "oklch(0.23 0 0)",
          "muted-foreground": "oklch(0.72 0 0)",
          "accent": "oklch(0.32 0 0)",
          "accent-foreground": "oklch(1 0 0)",
          "destructive": "oklch(0.69 0.20 23.91)",
          "destructive-foreground": "oklch(0 0 0)",
          "border": "oklch(0.26 0 0)",
          "input": "oklch(0.32 0 0)",
          "ring": "oklch(0.72 0 0)",
          "chart-1": "oklch(0.81 0.17 75.35)",
          "chart-2": "oklch(0.58 0.21 260.84)",
          "chart-3": "oklch(0.56 0 0)",
          "chart-4": "oklch(0.44 0 0)",
          "chart-5": "oklch(0.92 0 0)",
          "radius": "0.5rem",
          "sidebar": "oklch(0.18 0 0)",
          "sidebar-foreground": "oklch(1 0 0)",
          "sidebar-primary": "oklch(1 0 0)",
          "sidebar-primary-foreground": "oklch(0 0 0)",
          "sidebar-accent": "oklch(0.32 0 0)",
          "sidebar-accent-foreground": "oklch(1 0 0)",
          "sidebar-border": "oklch(0.32 0 0)",
          "sidebar-ring": "oklch(0.72 0 0)",
          "font-sans": "Geist, sans-serif",
          "font-serif": "Georgia, serif",
          "font-mono": "Geist Mono, monospace",
          "shadow-color": "hsl(0 0% 0%)",
          "shadow-opacity": "0.18",
          "shadow-blur": "2px",
          "shadow-spread": "0px",
          "shadow-offset-x": "0px",
          "shadow-offset-y": "1px",
          "letter-spacing": "0em",
          "spacing": "0.25rem",
          "shadow-2xs": "0px 1px 2px 0px hsl(0 0% 0% / 0.09)",
          "shadow-xs": "0px 1px 2px 0px hsl(0 0% 0% / 0.09)",
          "shadow-sm": "0px 1px 2px 0px hsl(0 0% 0% / 0.18), 0px 1px 2px -1px hsl(0 0% 0% / 0.18)",
          "shadow": "0px 1px 2px 0px hsl(0 0% 0% / 0.18), 0px 1px 2px -1px hsl(0 0% 0% / 0.18)",
          "shadow-md": "0px 1px 2px 0px hsl(0 0% 0% / 0.18), 0px 2px 4px -1px hsl(0 0% 0% / 0.18)",
          "shadow-lg": "0px 1px 2px 0px hsl(0 0% 0% / 0.18), 0px 4px 6px -1px hsl(0 0% 0% / 0.18)",
          "shadow-xl": "0px 1px 2px 0px hsl(0 0% 0% / 0.18), 0px 8px 10px -1px hsl(0 0% 0% / 0.18)",
          "shadow-2xl": "0px 1px 2px 0px hsl(0 0% 0% / 0.45)"
        }
      }
    },
    {
      "name": "mono",
      "type": "registry:style",
      "title": "Mono",
      "description": "A theme based on the Mono color palette.",
      "css": {
        "@layer base": {
          "body": {
            "letter-spacing": "var(--tracking-normal)"
          }
        }
      },
      "cssVars": {
        "theme": {
          "font-sans": "Geist Mono, monospace",
          "font-mono": "Geist Mono, monospace",
          "font-serif": "Geist Mono, monospace",
          "radius": "0rem",
          "tracking-tighter": "calc(var(--tracking-normal) - 0.05em)",
          "tracking-tight": "calc(var(--tracking-normal) - 0.025em)",
          "tracking-wide": "calc(var(--tracking-normal) + 0.025em)",
          "tracking-wider": "calc(var(--tracking-normal) + 0.05em)",
          "tracking-widest": "calc(var(--tracking-normal) + 0.1em)"
        },
        "light": {
          "background": "oklch(1.00 0 0)",
          "foreground": "oklch(0.14 0 0)",
          "card": "oklch(1.00 0 0)",
          "card-foreground": "oklch(0.14 0 0)",
          "popover": "oklch(1.00 0 0)",
          "popover-foreground": "oklch(0.14 0 0)",
          "primary": "oklch(0.56 0 0)",
          "primary-foreground": "oklch(0.99 0 0)",
          "secondary": "oklch(0.97 0 0)",
          "secondary-foreground": "oklch(0.20 0 0)",
          "muted": "oklch(0.97 0 0)",
          "muted-foreground": "oklch(0.55 0 0)",
          "accent": "oklch(0.97 0 0)",
          "accent-foreground": "oklch(0.20 0 0)",
          "destructive": "oklch(0.58 0.24 28.48)",
          "destructive-foreground": "oklch(0.97 0 0)",
          "border": "oklch(0.92 0 0)",
          "input": "oklch(0.92 0 0)",
          "ring": "oklch(0.71 0 0)",
          "chart-1": "oklch(0.56 0 0)",
          "chart-2": "oklch(0.56 0 0)",
          "chart-3": "oklch(0.56 0 0)",
          "chart-4": "oklch(0.56 0 0)",
          "chart-5": "oklch(0.56 0 0)",
          "radius": "0rem",
          "sidebar": "oklch(0.99 0 0)",
          "sidebar-foreground": "oklch(0.14 0 0)",
          "sidebar-primary": "oklch(0.20 0 0)",
          "sidebar-primary-foreground": "oklch(0.99 0 0)",
          "sidebar-accent": "oklch(0.97 0 0)",
          "sidebar-accent-foreground": "oklch(0.20 0 0)",
          "sidebar-border": "oklch(0.92 0 0)",
          "sidebar-ring": "oklch(0.71 0 0)",
          "font-sans": "Geist Mono, monospace",
          "font-serif": "Geist Mono, monospace",
          "font-mono": "Geist Mono, monospace",
          "shadow-color": "hsl(0 0% 0%)",
          "shadow-opacity": "0",
          "shadow-blur": "0px",
          "shadow-spread": "0px",
          "shadow-offset-x": "0px",
          "shadow-offset-y": "1px",
          "letter-spacing": "0em",
          "spacing": "0.25rem",
          "shadow-2xs": "0px 1px 0px 0px hsl(0 0% 0% / 0.00)",
          "shadow-xs": "0px 1px 0px 0px hsl(0 0% 0% / 0.00)",
          "shadow-sm": "0px 1px 0px 0px hsl(0 0% 0% / 0.00), 0px 1px 2px -1px hsl(0 0% 0% / 0.00)",
          "shadow": "0px 1px 0px 0px hsl(0 0% 0% / 0.00), 0px 1px 2px -1px hsl(0 0% 0% / 0.00)",
          "shadow-md": "0px 1px 0px 0px hsl(0 0% 0% / 0.00), 0px 2px 4px -1px hsl(0 0% 0% / 0.00)",
          "shadow-lg": "0px 1px 0px 0px hsl(0 0% 0% / 0.00), 0px 4px 6px -1px hsl(0 0% 0% / 0.00)",
          "shadow-xl": "0px 1px 0px 0px hsl(0 0% 0% / 0.00), 0px 8px 10px -1px hsl(0 0% 0% / 0.00)",
          "shadow-2xl": "0px 1px 0px 0px hsl(0 0% 0% / 0.00)",
          "tracking-normal": "0em"
        },
        "dark": {
          "background": "oklch(0.14 0 0)",
          "foreground": "oklch(0.99 0 0)",
          "card": "oklch(0.21 0 0)",
          "card-foreground": "oklch(0.99 0 0)",
          "popover": "oklch(0.27 0 0)",
          "popover-foreground": "oklch(0.99 0 0)",
          "primary": "oklch(0.56 0 0)",
          "primary-foreground": "oklch(0.99 0 0)",
          "secondary": "oklch(0.27 0 0)",
          "secondary-foreground": "oklch(0.99 0 0)",
          "muted": "oklch(0.27 0 0)",
          "muted-foreground": "oklch(0.71 0 0)",
          "accent": "oklch(0.37 0 0)",
          "accent-foreground": "oklch(0.99 0 0)",
          "destructive": "oklch(0.70 0.19 22.23)",
          "destructive-foreground": "oklch(0.27 0 0)",
          "border": "oklch(0.34 0 0)",
          "input": "oklch(0.44 0 0)",
          "ring": "oklch(0.56 0 0)",
          "chart-1": "oklch(0.56 0 0)",
          "chart-2": "oklch(0.56 0 0)",
          "chart-3": "oklch(0.56 0 0)",
          "chart-4": "oklch(0.56 0 0)",
          "chart-5": "oklch(0.56 0 0)",
          "radius": "0rem",
          "sidebar": "oklch(0.20 0 0)",
          "sidebar-foreground": "oklch(0.99 0 0)",
          "sidebar-primary": "oklch(0.99 0 0)",
          "sidebar-primary-foreground": "oklch(0.20 0 0)",
          "sidebar-accent": "oklch(0.27 0 0)",
          "sidebar-accent-foreground": "oklch(0.99 0 0)",
          "sidebar-border": "oklch(1.00 0 0)",
          "sidebar-ring": "oklch(0.44 0 0)",
          "font-sans": "Geist Mono, monospace",
          "font-serif": "Geist Mono, monospace",
          "font-mono": "Geist Mono, monospace",
          "shadow-color": "hsl(0 0% 0%)",
          "shadow-opacity": "0",
          "shadow-blur": "0px",
          "shadow-spread": "0px",
          "shadow-offset-x": "0px",
          "shadow-offset-y": "1px",
          "letter-spacing": "0em",
          "spacing": "0.25rem",
          "shadow-2xs": "0px 1px 0px 0px hsl(0 0% 0% / 0.00)",
          "shadow-xs": "0px 1px 0px 0px hsl(0 0% 0% / 0.00)",
          "shadow-sm": "0px 1px 0px 0px hsl(0 0% 0% / 0.00), 0px 1px 2px -1px hsl(0 0% 0% / 0.00)",
          "shadow": "0px 1px 0px 0px hsl(0 0% 0% / 0.00), 0px 1px 2px -1px hsl(0 0% 0% / 0.00)",
          "shadow-md": "0px 1px 0px 0px hsl(0 0% 0% / 0.00), 0px 2px 4px -1px hsl(0 0% 0% / 0.00)",
          "shadow-lg": "0px 1px 0px 0px hsl(0 0% 0% / 0.00), 0px 4px 6px -1px hsl(0 0% 0% / 0.00)",
          "shadow-xl": "0px 1px 0px 0px hsl(0 0% 0% / 0.00), 0px 8px 10px -1px hsl(0 0% 0% / 0.00)",
          "shadow-2xl": "0px 1px 0px 0px hsl(0 0% 0% / 0.00)"
        }
      }
    }
  ]
}
</file>

<file path="public/r/themes/retro-arcade.json">
{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "retro-arcade",
  "type": "registry:style",
  "css": {
    "@layer base": {
      "body": {
        "letter-spacing": "var(--tracking-normal)"
      }
    }
  },
  "cssVars": {
    "theme": {
      "font-sans": "Outfit, sans-serif",
      "font-mono": "Space Mono, monospace",
      "font-serif": "ui-serif, Georgia, Cambria, \"Times New Roman\", Times, serif",
      "radius": "0.25rem",
      "tracking-tighter": "calc(var(--tracking-normal) - 0.05em)",
      "tracking-tight": "calc(var(--tracking-normal) - 0.025em)",
      "tracking-wide": "calc(var(--tracking-normal) + 0.025em)",
      "tracking-wider": "calc(var(--tracking-normal) + 0.05em)",
      "tracking-widest": "calc(var(--tracking-normal) + 0.1em)"
    },
    "light": {
      "background": "oklch(0.97 0.03 90.10)",
      "foreground": "oklch(0.31 0.05 219.65)",
      "card": "oklch(0.93 0.03 92.40)",
      "card-foreground": "oklch(0.31 0.05 219.65)",
      "popover": "oklch(0.93 0.03 92.40)",
      "popover-foreground": "oklch(0.31 0.05 219.65)",
      "primary": "oklch(0.59 0.20 355.89)",
      "primary-foreground": "oklch(1.00 0 0)",
      "secondary": "oklch(0.64 0.10 187.38)",
      "secondary-foreground": "oklch(1.00 0 0)",
      "muted": "oklch(0.70 0.02 196.79)",
      "muted-foreground": "oklch(0.31 0.05 219.65)",
      "accent": "oklch(0.58 0.17 39.50)",
      "accent-foreground": "oklch(1.00 0 0)",
      "destructive": "oklch(0.59 0.21 27.12)",
      "destructive-foreground": "oklch(1.00 0 0)",
      "border": "oklch(0.65 0.02 205.26)",
      "input": "oklch(0.65 0.02 205.26)",
      "ring": "oklch(0.59 0.20 355.89)",
      "chart-1": "oklch(0.61 0.14 244.93)",
      "chart-2": "oklch(0.64 0.10 187.38)",
      "chart-3": "oklch(0.59 0.20 355.89)",
      "chart-4": "oklch(0.58 0.17 39.50)",
      "chart-5": "oklch(0.59 0.21 27.12)",
      "radius": "0.25rem",
      "sidebar": "oklch(0.97 0.03 90.10)",
      "sidebar-foreground": "oklch(0.31 0.05 219.65)",
      "sidebar-primary": "oklch(0.59 0.20 355.89)",
      "sidebar-primary-foreground": "oklch(1.00 0 0)",
      "sidebar-accent": "oklch(0.64 0.10 187.38)",
      "sidebar-accent-foreground": "oklch(1.00 0 0)",
      "sidebar-border": "oklch(0.65 0.02 205.26)",
      "sidebar-ring": "oklch(0.59 0.20 355.89)",
      "font-sans": "Outfit, sans-serif",
      "font-serif": "ui-serif, Georgia, Cambria, \"Times New Roman\", Times, serif",
      "font-mono": "Space Mono, monospace",
      "shadow-color": "hsl(196 83% 10%)",
      "shadow-opacity": "0.15",
      "shadow-blur": "4px",
      "shadow-spread": "0px",
      "shadow-offset-x": "2px",
      "shadow-offset-y": "2px",
      "letter-spacing": "0em",
      "spacing": "0.25rem",
      "shadow-2xs": "2px 2px 4px 0px hsl(196 83% 10% / 0.07)",
      "shadow-xs": "2px 2px 4px 0px hsl(196 83% 10% / 0.07)",
      "shadow-sm": "2px 2px 4px 0px hsl(196 83% 10% / 0.15), 2px 1px 2px -1px hsl(196 83% 10% / 0.15)",
      "shadow": "2px 2px 4px 0px hsl(196 83% 10% / 0.15), 2px 1px 2px -1px hsl(196 83% 10% / 0.15)",
      "shadow-md": "2px 2px 4px 0px hsl(196 83% 10% / 0.15), 2px 2px 4px -1px hsl(196 83% 10% / 0.15)",
      "shadow-lg": "2px 2px 4px 0px hsl(196 83% 10% / 0.15), 2px 4px 6px -1px hsl(196 83% 10% / 0.15)",
      "shadow-xl": "2px 2px 4px 0px hsl(196 83% 10% / 0.15), 2px 8px 10px -1px hsl(196 83% 10% / 0.15)",
      "shadow-2xl": "2px 2px 4px 0px hsl(196 83% 10% / 0.38)",
      "tracking-normal": "0em"
    },
    "dark": {
      "background": "oklch(0.27 0.05 219.82)",
      "foreground": "oklch(0.70 0.02 196.79)",
      "card": "oklch(0.31 0.05 219.65)",
      "card-foreground": "oklch(0.70 0.02 196.79)",
      "popover": "oklch(0.31 0.05 219.65)",
      "popover-foreground": "oklch(0.70 0.02 196.79)",
      "primary": "oklch(0.59 0.20 355.89)",
      "primary-foreground": "oklch(1.00 0 0)",
      "secondary": "oklch(0.64 0.10 187.38)",
      "secondary-foreground": "oklch(1.00 0 0)",
      "muted": "oklch(0.52 0.03 219.14)",
      "muted-foreground": "oklch(0.70 0.02 196.79)",
      "accent": "oklch(0.58 0.17 39.50)",
      "accent-foreground": "oklch(1.00 0 0)",
      "destructive": "oklch(0.59 0.21 27.12)",
      "destructive-foreground": "oklch(1.00 0 0)",
      "border": "oklch(0.52 0.03 219.14)",
      "input": "oklch(0.52 0.03 219.14)",
      "ring": "oklch(0.59 0.20 355.89)",
      "chart-1": "oklch(0.61 0.14 244.93)",
      "chart-2": "oklch(0.64 0.10 187.38)",
      "chart-3": "oklch(0.59 0.20 355.89)",
      "chart-4": "oklch(0.58 0.17 39.50)",
      "chart-5": "oklch(0.59 0.21 27.12)",
      "radius": "0.25rem",
      "sidebar": "oklch(0.27 0.05 219.82)",
      "sidebar-foreground": "oklch(0.70 0.02 196.79)",
      "sidebar-primary": "oklch(0.59 0.20 355.89)",
      "sidebar-primary-foreground": "oklch(1.00 0 0)",
      "sidebar-accent": "oklch(0.64 0.10 187.38)",
      "sidebar-accent-foreground": "oklch(1.00 0 0)",
      "sidebar-border": "oklch(0.52 0.03 219.14)",
      "sidebar-ring": "oklch(0.59 0.20 355.89)",
      "font-sans": "Outfit, sans-serif",
      "font-serif": "ui-serif, Georgia, Cambria, \"Times New Roman\", Times, serif",
      "font-mono": "Space Mono, monospace",
      "shadow-color": "hsl(196 83% 10%)",
      "shadow-opacity": "0.15",
      "shadow-blur": "4px",
      "shadow-spread": "0px",
      "shadow-offset-x": "2px",
      "shadow-offset-y": "2px",
      "letter-spacing": "0em",
      "spacing": "0.25rem",
      "shadow-2xs": "2px 2px 4px 0px hsl(196 83% 10% / 0.07)",
      "shadow-xs": "2px 2px 4px 0px hsl(196 83% 10% / 0.07)",
      "shadow-sm": "2px 2px 4px 0px hsl(196 83% 10% / 0.15), 2px 1px 2px -1px hsl(196 83% 10% / 0.15)",
      "shadow": "2px 2px 4px 0px hsl(196 83% 10% / 0.15), 2px 1px 2px -1px hsl(196 83% 10% / 0.15)",
      "shadow-md": "2px 2px 4px 0px hsl(196 83% 10% / 0.15), 2px 2px 4px -1px hsl(196 83% 10% / 0.15)",
      "shadow-lg": "2px 2px 4px 0px hsl(196 83% 10% / 0.15), 2px 4px 6px -1px hsl(196 83% 10% / 0.15)",
      "shadow-xl": "2px 2px 4px 0px hsl(196 83% 10% / 0.15), 2px 8px 10px -1px hsl(196 83% 10% / 0.15)",
      "shadow-2xl": "2px 2px 4px 0px hsl(196 83% 10% / 0.38)"
    }
  }
}
</file>

<file path="public/r/themes/solar-dusk.json">
{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "solar-dusk",
  "type": "registry:style",
  "css": {
    "@layer base": {
      "body": {
        "letter-spacing": "var(--tracking-normal)"
      }
    }
  },
  "cssVars": {
    "theme": {
      "font-sans": "Oxanium, sans-serif",
      "font-mono": "Fira Code, monospace",
      "font-serif": "Merriweather, serif",
      "radius": "0.3rem",
      "tracking-tighter": "calc(var(--tracking-normal) - 0.05em)",
      "tracking-tight": "calc(var(--tracking-normal) - 0.025em)",
      "tracking-wide": "calc(var(--tracking-normal) + 0.025em)",
      "tracking-wider": "calc(var(--tracking-normal) + 0.05em)",
      "tracking-widest": "calc(var(--tracking-normal) + 0.1em)"
    },
    "light": {
      "background": "oklch(0.99 0.01 84.57)",
      "foreground": "oklch(0.37 0.03 49.61)",
      "card": "oklch(0.97 0.01 78.28)",
      "card-foreground": "oklch(0.37 0.03 49.61)",
      "popover": "oklch(0.97 0.01 78.28)",
      "popover-foreground": "oklch(0.37 0.03 49.61)",
      "primary": "oklch(0.56 0.15 49.00)",
      "primary-foreground": "oklch(1.00 0 0)",
      "secondary": "oklch(0.83 0.08 74.44)",
      "secondary-foreground": "oklch(0.44 0.01 73.64)",
      "muted": "oklch(0.94 0.02 83.26)",
      "muted-foreground": "oklch(0.55 0.01 58.07)",
      "accent": "oklch(0.90 0.05 74.99)",
      "accent-foreground": "oklch(0.44 0.01 73.64)",
      "destructive": "oklch(0.44 0.16 26.90)",
      "destructive-foreground": "oklch(1.00 0 0)",
      "border": "oklch(0.89 0.04 89.70)",
      "input": "oklch(0.89 0.04 89.70)",
      "ring": "oklch(0.56 0.15 49.00)",
      "chart-1": "oklch(0.56 0.15 49.00)",
      "chart-2": "oklch(0.55 0.01 58.07)",
      "chart-3": "oklch(0.55 0.12 66.44)",
      "chart-4": "oklch(0.55 0.01 58.07)",
      "chart-5": "oklch(0.68 0.14 75.83)",
      "radius": "0.3rem",
      "sidebar": "oklch(0.94 0.02 83.26)",
      "sidebar-foreground": "oklch(0.37 0.03 49.61)",
      "sidebar-primary": "oklch(0.56 0.15 49.00)",
      "sidebar-primary-foreground": "oklch(1.00 0 0)",
      "sidebar-accent": "oklch(0.55 0.12 66.44)",
      "sidebar-accent-foreground": "oklch(1.00 0 0)",
      "sidebar-border": "oklch(0.89 0.04 89.70)",
      "sidebar-ring": "oklch(0.56 0.15 49.00)",
      "font-sans": "Oxanium, sans-serif",
      "font-serif": "Merriweather, serif",
      "font-mono": "Fira Code, monospace",
      "shadow-color": "hsl(28 18% 25%)",
      "shadow-opacity": "0.18",
      "shadow-blur": "3px",
      "shadow-spread": "0px",
      "shadow-offset-x": "0px",
      "shadow-offset-y": "2px",
      "letter-spacing": "0em",
      "spacing": "0.25rem",
      "shadow-2xs": "0px 2px 3px 0px hsl(28 18% 25% / 0.09)",
      "shadow-xs": "0px 2px 3px 0px hsl(28 18% 25% / 0.09)",
      "shadow-sm": "0px 2px 3px 0px hsl(28 18% 25% / 0.18), 0px 1px 2px -1px hsl(28 18% 25% / 0.18)",
      "shadow": "0px 2px 3px 0px hsl(28 18% 25% / 0.18), 0px 1px 2px -1px hsl(28 18% 25% / 0.18)",
      "shadow-md": "0px 2px 3px 0px hsl(28 18% 25% / 0.18), 0px 2px 4px -1px hsl(28 18% 25% / 0.18)",
      "shadow-lg": "0px 2px 3px 0px hsl(28 18% 25% / 0.18), 0px 4px 6px -1px hsl(28 18% 25% / 0.18)",
      "shadow-xl": "0px 2px 3px 0px hsl(28 18% 25% / 0.18), 0px 8px 10px -1px hsl(28 18% 25% / 0.18)",
      "shadow-2xl": "0px 2px 3px 0px hsl(28 18% 25% / 0.45)",
      "tracking-normal": "0em"
    },
    "dark": {
      "background": "oklch(0.22 0.01 56.04)",
      "foreground": "oklch(0.97 0.00 106.42)",
      "card": "oklch(0.27 0.01 34.30)",
      "card-foreground": "oklch(0.97 0.00 106.42)",
      "popover": "oklch(0.27 0.01 34.30)",
      "popover-foreground": "oklch(0.97 0.00 106.42)",
      "primary": "oklch(0.70 0.19 47.60)",
      "primary-foreground": "oklch(1.00 0 0)",
      "secondary": "oklch(0.44 0.01 73.64)",
      "secondary-foreground": "oklch(0.92 0.00 48.72)",
      "muted": "oklch(0.27 0.01 34.30)",
      "muted-foreground": "oklch(0.72 0.01 56.26)",
      "accent": "oklch(0.36 0.05 229.32)",
      "accent-foreground": "oklch(0.92 0.00 48.72)",
      "destructive": "oklch(0.58 0.22 27.33)",
      "destructive-foreground": "oklch(1.00 0 0)",
      "border": "oklch(0.37 0.01 67.56)",
      "input": "oklch(0.37 0.01 67.56)",
      "ring": "oklch(0.70 0.19 47.60)",
      "chart-1": "oklch(0.70 0.19 47.60)",
      "chart-2": "oklch(0.68 0.15 237.32)",
      "chart-3": "oklch(0.80 0.16 86.05)",
      "chart-4": "oklch(0.72 0.01 56.26)",
      "chart-5": "oklch(0.55 0.01 58.07)",
      "radius": "0.3rem",
      "sidebar": "oklch(0.27 0.01 34.30)",
      "sidebar-foreground": "oklch(0.97 0.00 106.42)",
      "sidebar-primary": "oklch(0.70 0.19 47.60)",
      "sidebar-primary-foreground": "oklch(1.00 0 0)",
      "sidebar-accent": "oklch(0.68 0.15 237.32)",
      "sidebar-accent-foreground": "oklch(0.28 0.07 254.54)",
      "sidebar-border": "oklch(0.37 0.01 67.56)",
      "sidebar-ring": "oklch(0.70 0.19 47.60)",
      "font-sans": "Oxanium, sans-serif",
      "font-serif": "Merriweather, serif",
      "font-mono": "Fira Code, monospace",
      "shadow-color": "hsl(0 0% 5%)",
      "shadow-opacity": "0.18",
      "shadow-blur": "3px",
      "shadow-spread": "0px",
      "shadow-offset-x": "0px",
      "shadow-offset-y": "2px",
      "letter-spacing": "0em",
      "spacing": "0.25rem",
      "shadow-2xs": "0px 2px 3px 0px hsl(0 0% 5% / 0.09)",
      "shadow-xs": "0px 2px 3px 0px hsl(0 0% 5% / 0.09)",
      "shadow-sm": "0px 2px 3px 0px hsl(0 0% 5% / 0.18), 0px 1px 2px -1px hsl(0 0% 5% / 0.18)",
      "shadow": "0px 2px 3px 0px hsl(0 0% 5% / 0.18), 0px 1px 2px -1px hsl(0 0% 5% / 0.18)",
      "shadow-md": "0px 2px 3px 0px hsl(0 0% 5% / 0.18), 0px 2px 4px -1px hsl(0 0% 5% / 0.18)",
      "shadow-lg": "0px 2px 3px 0px hsl(0 0% 5% / 0.18), 0px 4px 6px -1px hsl(0 0% 5% / 0.18)",
      "shadow-xl": "0px 2px 3px 0px hsl(0 0% 5% / 0.18), 0px 8px 10px -1px hsl(0 0% 5% / 0.18)",
      "shadow-2xl": "0px 2px 3px 0px hsl(0 0% 5% / 0.45)"
    }
  }
}
</file>

<file path="public/r/themes/starry-night.json">
{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "starry-night",
  "type": "registry:style",
  "css": {
    "@layer base": {
      "body": {
        "letter-spacing": "var(--tracking-normal)"
      }
    }
  },
  "cssVars": {
    "theme": {
      "font-sans": "Libre Baskerville, serif",
      "font-mono": "ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, \"Liberation Mono\", \"Courier New\", monospace",
      "font-serif": "ui-serif, Georgia, Cambria, \"Times New Roman\", Times, serif",
      "radius": "0.5rem",
      "tracking-tighter": "calc(var(--tracking-normal) - 0.05em)",
      "tracking-tight": "calc(var(--tracking-normal) - 0.025em)",
      "tracking-wide": "calc(var(--tracking-normal) + 0.025em)",
      "tracking-wider": "calc(var(--tracking-normal) + 0.05em)",
      "tracking-widest": "calc(var(--tracking-normal) + 0.1em)"
    },
    "light": {
      "background": "oklch(0.98 0.00 258.32)",
      "foreground": "oklch(0.26 0.04 268.07)",
      "card": "oklch(0.93 0.01 251.56)",
      "card-foreground": "oklch(0.26 0.04 268.07)",
      "popover": "oklch(0.99 0.03 98.05)",
      "popover-foreground": "oklch(0.26 0.04 268.07)",
      "primary": "oklch(0.48 0.12 263.38)",
      "primary-foreground": "oklch(0.99 0.03 98.05)",
      "secondary": "oklch(0.86 0.12 81.01)",
      "secondary-foreground": "oklch(0.26 0.04 268.07)",
      "muted": "oklch(0.92 0.01 106.56)",
      "muted-foreground": "oklch(0.48 0.12 263.38)",
      "accent": "oklch(0.69 0.07 234.04)",
      "accent-foreground": "oklch(0.99 0.03 98.05)",
      "destructive": "oklch(0.26 0.04 322.53)",
      "destructive-foreground": "oklch(0.99 0.03 98.05)",
      "border": "oklch(0.78 0.02 251.19)",
      "input": "oklch(0.69 0.07 234.04)",
      "ring": "oklch(0.86 0.12 81.01)",
      "chart-1": "oklch(0.48 0.12 263.38)",
      "chart-2": "oklch(0.86 0.12 81.01)",
      "chart-3": "oklch(0.69 0.07 234.04)",
      "chart-4": "oklch(0.78 0.02 251.19)",
      "chart-5": "oklch(0.26 0.04 322.53)",
      "radius": "0.5rem",
      "sidebar": "oklch(0.93 0.01 251.56)",
      "sidebar-foreground": "oklch(0.26 0.04 268.07)",
      "sidebar-primary": "oklch(0.48 0.12 263.38)",
      "sidebar-primary-foreground": "oklch(0.99 0.03 98.05)",
      "sidebar-accent": "oklch(0.86 0.12 81.01)",
      "sidebar-accent-foreground": "oklch(0.26 0.04 268.07)",
      "sidebar-border": "oklch(0.78 0.02 251.19)",
      "sidebar-ring": "oklch(0.86 0.12 81.01)",
      "font-sans": "Libre Baskerville, serif",
      "font-serif": "ui-serif, Georgia, Cambria, \"Times New Roman\", Times, serif",
      "font-mono": "ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, \"Liberation Mono\", \"Courier New\", monospace",
      "shadow-color": "hsl(0 0% 0%)",
      "shadow-opacity": "0.1",
      "shadow-blur": "3px",
      "shadow-spread": "0px",
      "shadow-offset-x": "0",
      "shadow-offset-y": "1px",
      "letter-spacing": "0em",
      "spacing": "0.25rem",
      "shadow-2xs": "0 1px 3px 0px hsl(0 0% 0% / 0.05)",
      "shadow-xs": "0 1px 3px 0px hsl(0 0% 0% / 0.05)",
      "shadow-sm": "0 1px 3px 0px hsl(0 0% 0% / 0.10), 0 1px 2px -1px hsl(0 0% 0% / 0.10)",
      "shadow": "0 1px 3px 0px hsl(0 0% 0% / 0.10), 0 1px 2px -1px hsl(0 0% 0% / 0.10)",
      "shadow-md": "0 1px 3px 0px hsl(0 0% 0% / 0.10), 0 2px 4px -1px hsl(0 0% 0% / 0.10)",
      "shadow-lg": "0 1px 3px 0px hsl(0 0% 0% / 0.10), 0 4px 6px -1px hsl(0 0% 0% / 0.10)",
      "shadow-xl": "0 1px 3px 0px hsl(0 0% 0% / 0.10), 0 8px 10px -1px hsl(0 0% 0% / 0.10)",
      "shadow-2xl": "0 1px 3px 0px hsl(0 0% 0% / 0.25)",
      "tracking-normal": "0em"
    },
    "dark": {
      "background": "oklch(0.22 0.02 275.84)",
      "foreground": "oklch(0.94 0.01 266.70)",
      "card": "oklch(0.27 0.04 281.30)",
      "card-foreground": "oklch(0.94 0.01 266.70)",
      "popover": "oklch(0.27 0.04 281.30)",
      "popover-foreground": "oklch(0.91 0.14 95.11)",
      "primary": "oklch(0.48 0.12 263.38)",
      "primary-foreground": "oklch(0.91 0.14 95.11)",
      "secondary": "oklch(0.91 0.14 95.11)",
      "secondary-foreground": "oklch(0.27 0.04 281.30)",
      "muted": "oklch(0.27 0.04 281.30)",
      "muted-foreground": "oklch(0.62 0.04 262.04)",
      "accent": "oklch(0.85 0.05 264.78)",
      "accent-foreground": "oklch(0.22 0.02 275.84)",
      "destructive": "oklch(0.53 0.12 357.11)",
      "destructive-foreground": "oklch(0.91 0.14 95.11)",
      "border": "oklch(0.31 0.03 281.77)",
      "input": "oklch(0.48 0.12 263.38)",
      "ring": "oklch(0.91 0.14 95.11)",
      "chart-1": "oklch(0.48 0.12 263.38)",
      "chart-2": "oklch(0.91 0.14 95.11)",
      "chart-3": "oklch(0.69 0.07 234.04)",
      "chart-4": "oklch(0.62 0.04 262.04)",
      "chart-5": "oklch(0.53 0.12 357.11)",
      "radius": "0.5rem",
      "sidebar": "oklch(0.27 0.04 281.30)",
      "sidebar-foreground": "oklch(0.94 0.01 266.70)",
      "sidebar-primary": "oklch(0.48 0.12 263.38)",
      "sidebar-primary-foreground": "oklch(0.91 0.14 95.11)",
      "sidebar-accent": "oklch(0.91 0.14 95.11)",
      "sidebar-accent-foreground": "oklch(0.27 0.04 281.30)",
      "sidebar-border": "oklch(0.31 0.03 281.77)",
      "sidebar-ring": "oklch(0.91 0.14 95.11)",
      "font-sans": "Libre Baskerville, serif",
      "font-serif": "ui-serif, Georgia, Cambria, \"Times New Roman\", Times, serif",
      "font-mono": "ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, \"Liberation Mono\", \"Courier New\", monospace",
      "shadow-color": "hsl(0 0% 0%)",
      "shadow-opacity": "0.1",
      "shadow-blur": "3px",
      "shadow-spread": "0px",
      "shadow-offset-x": "0",
      "shadow-offset-y": "1px",
      "letter-spacing": "0em",
      "spacing": "0.25rem",
      "shadow-2xs": "0 1px 3px 0px hsl(0 0% 0% / 0.05)",
      "shadow-xs": "0 1px 3px 0px hsl(0 0% 0% / 0.05)",
      "shadow-sm": "0 1px 3px 0px hsl(0 0% 0% / 0.10), 0 1px 2px -1px hsl(0 0% 0% / 0.10)",
      "shadow": "0 1px 3px 0px hsl(0 0% 0% / 0.10), 0 1px 2px -1px hsl(0 0% 0% / 0.10)",
      "shadow-md": "0 1px 3px 0px hsl(0 0% 0% / 0.10), 0 2px 4px -1px hsl(0 0% 0% / 0.10)",
      "shadow-lg": "0 1px 3px 0px hsl(0 0% 0% / 0.10), 0 4px 6px -1px hsl(0 0% 0% / 0.10)",
      "shadow-xl": "0 1px 3px 0px hsl(0 0% 0% / 0.10), 0 8px 10px -1px hsl(0 0% 0% / 0.10)",
      "shadow-2xl": "0 1px 3px 0px hsl(0 0% 0% / 0.25)"
    }
  }
}
</file>

<file path="public/r/themes/sunset-horizon.json">
{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "sunset-horizon",
  "type": "registry:style",
  "css": {
    "@layer base": {
      "body": {
        "letter-spacing": "var(--tracking-normal)"
      }
    }
  },
  "cssVars": {
    "theme": {
      "font-sans": "Montserrat, sans-serif",
      "font-mono": "Ubuntu Mono, monospace",
      "font-serif": "Merriweather, serif",
      "radius": "0.625rem",
      "tracking-tighter": "calc(var(--tracking-normal) - 0.05em)",
      "tracking-tight": "calc(var(--tracking-normal) - 0.025em)",
      "tracking-wide": "calc(var(--tracking-normal) + 0.025em)",
      "tracking-wider": "calc(var(--tracking-normal) + 0.05em)",
      "tracking-widest": "calc(var(--tracking-normal) + 0.1em)"
    },
    "light": {
      "background": "oklch(0.99 0.01 56.32)",
      "foreground": "oklch(0.34 0.01 2.77)",
      "card": "oklch(1.00 0 0)",
      "card-foreground": "oklch(0.34 0.01 2.77)",
      "popover": "oklch(1.00 0 0)",
      "popover-foreground": "oklch(0.34 0.01 2.77)",
      "primary": "oklch(0.74 0.16 34.71)",
      "primary-foreground": "oklch(1.00 0 0)",
      "secondary": "oklch(0.96 0.02 28.90)",
      "secondary-foreground": "oklch(0.56 0.13 32.74)",
      "muted": "oklch(0.97 0.02 39.40)",
      "muted-foreground": "oklch(0.55 0.01 58.07)",
      "accent": "oklch(0.83 0.11 58.00)",
      "accent-foreground": "oklch(0.34 0.01 2.77)",
      "destructive": "oklch(0.61 0.21 22.24)",
      "destructive-foreground": "oklch(1.00 0 0)",
      "border": "oklch(0.93 0.04 38.69)",
      "input": "oklch(0.93 0.04 38.69)",
      "ring": "oklch(0.74 0.16 34.71)",
      "chart-1": "oklch(0.74 0.16 34.71)",
      "chart-2": "oklch(0.83 0.11 58.00)",
      "chart-3": "oklch(0.88 0.08 54.93)",
      "chart-4": "oklch(0.82 0.11 40.89)",
      "chart-5": "oklch(0.64 0.13 32.07)",
      "radius": "0.625rem",
      "sidebar": "oklch(0.97 0.02 39.40)",
      "sidebar-foreground": "oklch(0.34 0.01 2.77)",
      "sidebar-primary": "oklch(0.74 0.16 34.71)",
      "sidebar-primary-foreground": "oklch(1.00 0 0)",
      "sidebar-accent": "oklch(0.83 0.11 58.00)",
      "sidebar-accent-foreground": "oklch(0.34 0.01 2.77)",
      "sidebar-border": "oklch(0.93 0.04 38.69)",
      "sidebar-ring": "oklch(0.74 0.16 34.71)",
      "font-sans": "Montserrat, sans-serif",
      "font-serif": "Merriweather, serif",
      "font-mono": "Ubuntu Mono, monospace",
      "shadow-color": "hsl(0 0% 0%)",
      "shadow-opacity": "0.09",
      "shadow-blur": "12px",
      "shadow-spread": "-3px",
      "shadow-offset-x": "0px",
      "shadow-offset-y": "6px",
      "letter-spacing": "0em",
      "spacing": "0.25rem",
      "shadow-2xs": "0px 6px 12px -3px hsl(0 0% 0% / 0.04)",
      "shadow-xs": "0px 6px 12px -3px hsl(0 0% 0% / 0.04)",
      "shadow-sm": "0px 6px 12px -3px hsl(0 0% 0% / 0.09), 0px 1px 2px -4px hsl(0 0% 0% / 0.09)",
      "shadow": "0px 6px 12px -3px hsl(0 0% 0% / 0.09), 0px 1px 2px -4px hsl(0 0% 0% / 0.09)",
      "shadow-md": "0px 6px 12px -3px hsl(0 0% 0% / 0.09), 0px 2px 4px -4px hsl(0 0% 0% / 0.09)",
      "shadow-lg": "0px 6px 12px -3px hsl(0 0% 0% / 0.09), 0px 4px 6px -4px hsl(0 0% 0% / 0.09)",
      "shadow-xl": "0px 6px 12px -3px hsl(0 0% 0% / 0.09), 0px 8px 10px -4px hsl(0 0% 0% / 0.09)",
      "shadow-2xl": "0px 6px 12px -3px hsl(0 0% 0% / 0.22)",
      "tracking-normal": "0em"
    },
    "dark": {
      "background": "oklch(0.26 0.02 352.40)",
      "foreground": "oklch(0.94 0.01 51.32)",
      "card": "oklch(0.32 0.02 341.45)",
      "card-foreground": "oklch(0.94 0.01 51.32)",
      "popover": "oklch(0.32 0.02 341.45)",
      "popover-foreground": "oklch(0.94 0.01 51.32)",
      "primary": "oklch(0.74 0.16 34.71)",
      "primary-foreground": "oklch(1.00 0 0)",
      "secondary": "oklch(0.36 0.02 342.27)",
      "secondary-foreground": "oklch(0.94 0.01 51.32)",
      "muted": "oklch(0.32 0.02 341.45)",
      "muted-foreground": "oklch(0.84 0.02 52.63)",
      "accent": "oklch(0.83 0.11 58.00)",
      "accent-foreground": "oklch(0.26 0.02 352.40)",
      "destructive": "oklch(0.61 0.21 22.24)",
      "destructive-foreground": "oklch(1.00 0 0)",
      "border": "oklch(0.36 0.02 342.27)",
      "input": "oklch(0.36 0.02 342.27)",
      "ring": "oklch(0.74 0.16 34.71)",
      "chart-1": "oklch(0.74 0.16 34.71)",
      "chart-2": "oklch(0.83 0.11 58.00)",
      "chart-3": "oklch(0.88 0.08 54.93)",
      "chart-4": "oklch(0.82 0.11 40.89)",
      "chart-5": "oklch(0.64 0.13 32.07)",
      "radius": "0.625rem",
      "sidebar": "oklch(0.26 0.02 352.40)",
      "sidebar-foreground": "oklch(0.94 0.01 51.32)",
      "sidebar-primary": "oklch(0.74 0.16 34.71)",
      "sidebar-primary-foreground": "oklch(1.00 0 0)",
      "sidebar-accent": "oklch(0.83 0.11 58.00)",
      "sidebar-accent-foreground": "oklch(0.26 0.02 352.40)",
      "sidebar-border": "oklch(0.36 0.02 342.27)",
      "sidebar-ring": "oklch(0.74 0.16 34.71)",
      "font-sans": "Montserrat, sans-serif",
      "font-serif": "Merriweather, serif",
      "font-mono": "Ubuntu Mono, monospace",
      "shadow-color": "hsl(0 0% 0%)",
      "shadow-opacity": "0.09",
      "shadow-blur": "12px",
      "shadow-spread": "-3px",
      "shadow-offset-x": "0px",
      "shadow-offset-y": "6px",
      "letter-spacing": "0em",
      "spacing": "0.25rem",
      "shadow-2xs": "0px 6px 12px -3px hsl(0 0% 0% / 0.04)",
      "shadow-xs": "0px 6px 12px -3px hsl(0 0% 0% / 0.04)",
      "shadow-sm": "0px 6px 12px -3px hsl(0 0% 0% / 0.09), 0px 1px 2px -4px hsl(0 0% 0% / 0.09)",
      "shadow": "0px 6px 12px -3px hsl(0 0% 0% / 0.09), 0px 1px 2px -4px hsl(0 0% 0% / 0.09)",
      "shadow-md": "0px 6px 12px -3px hsl(0 0% 0% / 0.09), 0px 2px 4px -4px hsl(0 0% 0% / 0.09)",
      "shadow-lg": "0px 6px 12px -3px hsl(0 0% 0% / 0.09), 0px 4px 6px -4px hsl(0 0% 0% / 0.09)",
      "shadow-xl": "0px 6px 12px -3px hsl(0 0% 0% / 0.09), 0px 8px 10px -4px hsl(0 0% 0% / 0.09)",
      "shadow-2xl": "0px 6px 12px -3px hsl(0 0% 0% / 0.22)"
    }
  }
}
</file>

<file path="public/r/themes/supabase.json">
{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "supabase",
  "type": "registry:style",
  "css": {
    "@layer base": {
      "body": {
        "letter-spacing": "var(--tracking-normal)"
      }
    }
  },
  "cssVars": {
    "theme": {
      "font-sans": "Outfit, sans-serif",
      "font-mono": "monospace",
      "font-serif": "ui-serif, Georgia, Cambria, \"Times New Roman\", Times, serif",
      "radius": "0.5rem",
      "tracking-tighter": "calc(var(--tracking-normal) - 0.05em)",
      "tracking-tight": "calc(var(--tracking-normal) - 0.025em)",
      "tracking-wide": "calc(var(--tracking-normal) + 0.025em)",
      "tracking-wider": "calc(var(--tracking-normal) + 0.05em)",
      "tracking-widest": "calc(var(--tracking-normal) + 0.1em)"
    },
    "light": {
      "background": "oklch(0.99 0 0)",
      "foreground": "oklch(0.20 0 0)",
      "card": "oklch(0.99 0 0)",
      "card-foreground": "oklch(0.20 0 0)",
      "popover": "oklch(0.99 0 0)",
      "popover-foreground": "oklch(0.44 0 0)",
      "primary": "oklch(0.83 0.13 160.91)",
      "primary-foreground": "oklch(0.26 0.01 166.46)",
      "secondary": "oklch(0.99 0 0)",
      "secondary-foreground": "oklch(0.20 0 0)",
      "muted": "oklch(0.95 0 0)",
      "muted-foreground": "oklch(0.24 0 0)",
      "accent": "oklch(0.95 0 0)",
      "accent-foreground": "oklch(0.24 0 0)",
      "destructive": "oklch(0.55 0.19 32.73)",
      "destructive-foreground": "oklch(0.99 0.00 17.21)",
      "border": "oklch(0.90 0 0)",
      "input": "oklch(0.97 0 0)",
      "ring": "oklch(0.83 0.13 160.91)",
      "chart-1": "oklch(0.83 0.13 160.91)",
      "chart-2": "oklch(0.62 0.19 259.81)",
      "chart-3": "oklch(0.61 0.22 292.72)",
      "chart-4": "oklch(0.77 0.16 70.08)",
      "chart-5": "oklch(0.70 0.15 162.48)",
      "radius": "0.5rem",
      "sidebar": "oklch(0.99 0 0)",
      "sidebar-foreground": "oklch(0.55 0 0)",
      "sidebar-primary": "oklch(0.83 0.13 160.91)",
      "sidebar-primary-foreground": "oklch(0.26 0.01 166.46)",
      "sidebar-accent": "oklch(0.95 0 0)",
      "sidebar-accent-foreground": "oklch(0.24 0 0)",
      "sidebar-border": "oklch(0.90 0 0)",
      "sidebar-ring": "oklch(0.83 0.13 160.91)",
      "font-sans": "Outfit, sans-serif",
      "font-serif": "ui-serif, Georgia, Cambria, \"Times New Roman\", Times, serif",
      "font-mono": "monospace",
      "shadow-color": "#000000",
      "shadow-opacity": "0.17",
      "shadow-blur": "3px",
      "shadow-spread": "0px",
      "shadow-offset-x": "0px",
      "shadow-offset-y": "1px",
      "letter-spacing": "0.025em",
      "spacing": "0.25rem",
      "shadow-2xs": "0px 1px 3px 0px hsl(0 0% 0% / 0.09)",
      "shadow-xs": "0px 1px 3px 0px hsl(0 0% 0% / 0.09)",
      "shadow-sm": "0px 1px 3px 0px hsl(0 0% 0% / 0.17), 0px 1px 2px -1px hsl(0 0% 0% / 0.17)",
      "shadow": "0px 1px 3px 0px hsl(0 0% 0% / 0.17), 0px 1px 2px -1px hsl(0 0% 0% / 0.17)",
      "shadow-md": "0px 1px 3px 0px hsl(0 0% 0% / 0.17), 0px 2px 4px -1px hsl(0 0% 0% / 0.17)",
      "shadow-lg": "0px 1px 3px 0px hsl(0 0% 0% / 0.17), 0px 4px 6px -1px hsl(0 0% 0% / 0.17)",
      "shadow-xl": "0px 1px 3px 0px hsl(0 0% 0% / 0.17), 0px 8px 10px -1px hsl(0 0% 0% / 0.17)",
      "shadow-2xl": "0px 1px 3px 0px hsl(0 0% 0% / 0.43)",
      "tracking-normal": "0.025em"
    },
    "dark": {
      "background": "oklch(0.18 0 0)",
      "foreground": "oklch(0.93 0.01 255.51)",
      "card": "oklch(0.20 0 0)",
      "card-foreground": "oklch(0.93 0.01 255.51)",
      "popover": "oklch(0.26 0 0)",
      "popover-foreground": "oklch(0.73 0 0)",
      "primary": "oklch(0.44 0.10 156.76)",
      "primary-foreground": "oklch(0.92 0.01 167.16)",
      "secondary": "oklch(0.26 0 0)",
      "secondary-foreground": "oklch(0.99 0 0)",
      "muted": "oklch(0.24 0 0)",
      "muted-foreground": "oklch(0.71 0 0)",
      "accent": "oklch(0.31 0 0)",
      "accent-foreground": "oklch(0.99 0 0)",
      "destructive": "oklch(0.31 0.09 29.79)",
      "destructive-foreground": "oklch(0.94 0.00 34.31)",
      "border": "oklch(0.28 0 0)",
      "input": "oklch(0.26 0 0)",
      "ring": "oklch(0.80 0.18 151.71)",
      "chart-1": "oklch(0.80 0.18 151.71)",
      "chart-2": "oklch(0.71 0.14 254.62)",
      "chart-3": "oklch(0.71 0.16 293.54)",
      "chart-4": "oklch(0.84 0.16 84.43)",
      "chart-5": "oklch(0.78 0.13 181.91)",
      "radius": "0.5rem",
      "sidebar": "oklch(0.18 0 0)",
      "sidebar-foreground": "oklch(0.63 0 0)",
      "sidebar-primary": "oklch(0.44 0.10 156.76)",
      "sidebar-primary-foreground": "oklch(0.92 0.01 167.16)",
      "sidebar-accent": "oklch(0.31 0 0)",
      "sidebar-accent-foreground": "oklch(0.99 0 0)",
      "sidebar-border": "oklch(0.28 0 0)",
      "sidebar-ring": "oklch(0.80 0.18 151.71)",
      "font-sans": "Outfit, sans-serif",
      "font-serif": "ui-serif, Georgia, Cambria, \"Times New Roman\", Times, serif",
      "font-mono": "monospace",
      "shadow-color": "#000000",
      "shadow-opacity": "0.17",
      "shadow-blur": "3px",
      "shadow-spread": "0px",
      "shadow-offset-x": "0px",
      "shadow-offset-y": "1px",
      "letter-spacing": "0.025em",
      "spacing": "0.25rem",
      "shadow-2xs": "0px 1px 3px 0px hsl(0 0% 0% / 0.09)",
      "shadow-xs": "0px 1px 3px 0px hsl(0 0% 0% / 0.09)",
      "shadow-sm": "0px 1px 3px 0px hsl(0 0% 0% / 0.17), 0px 1px 2px -1px hsl(0 0% 0% / 0.17)",
      "shadow": "0px 1px 3px 0px hsl(0 0% 0% / 0.17), 0px 1px 2px -1px hsl(0 0% 0% / 0.17)",
      "shadow-md": "0px 1px 3px 0px hsl(0 0% 0% / 0.17), 0px 2px 4px -1px hsl(0 0% 0% / 0.17)",
      "shadow-lg": "0px 1px 3px 0px hsl(0 0% 0% / 0.17), 0px 4px 6px -1px hsl(0 0% 0% / 0.17)",
      "shadow-xl": "0px 1px 3px 0px hsl(0 0% 0% / 0.17), 0px 8px 10px -1px hsl(0 0% 0% / 0.17)",
      "shadow-2xl": "0px 1px 3px 0px hsl(0 0% 0% / 0.43)"
    }
  }
}
</file>

<file path="public/r/themes/t3-chat.json">
{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "t3-chat",
  "type": "registry:style",
  "css": {
    "@layer base": {
      "body": {
        "letter-spacing": "var(--tracking-normal)"
      }
    }
  },
  "cssVars": {
    "theme": {
      "font-sans": "ui-sans-serif, system-ui, -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial, 'Noto Sans', sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Noto Color Emoji'",
      "font-mono": "ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, \"Liberation Mono\", \"Courier New\", monospace",
      "font-serif": "ui-serif, Georgia, Cambria, \"Times New Roman\", Times, serif",
      "radius": "0.5rem",
      "tracking-tighter": "calc(var(--tracking-normal) - 0.05em)",
      "tracking-tight": "calc(var(--tracking-normal) - 0.025em)",
      "tracking-wide": "calc(var(--tracking-normal) + 0.025em)",
      "tracking-wider": "calc(var(--tracking-normal) + 0.05em)",
      "tracking-widest": "calc(var(--tracking-normal) + 0.1em)"
    },
    "light": {
      "background": "oklch(0.98 0.01 325.64)",
      "foreground": "oklch(0.33 0.12 325.04)",
      "card": "oklch(0.98 0.01 325.64)",
      "card-foreground": "oklch(0.33 0.12 325.04)",
      "popover": "oklch(1.00 0 0)",
      "popover-foreground": "oklch(0.33 0.12 325.04)",
      "primary": "oklch(0.53 0.14 355.20)",
      "primary-foreground": "oklch(1.00 0 0)",
      "secondary": "oklch(0.87 0.07 334.90)",
      "secondary-foreground": "oklch(0.44 0.13 324.80)",
      "muted": "oklch(0.94 0.03 331.55)",
      "muted-foreground": "oklch(0.49 0.12 324.45)",
      "accent": "oklch(0.87 0.07 334.90)",
      "accent-foreground": "oklch(0.44 0.13 324.80)",
      "destructive": "oklch(0.52 0.14 20.83)",
      "destructive-foreground": "oklch(1.00 0 0)",
      "border": "oklch(0.86 0.08 328.91)",
      "input": "oklch(0.85 0.06 336.60)",
      "ring": "oklch(0.59 0.22 0.58)",
      "chart-1": "oklch(0.60 0.24 344.47)",
      "chart-2": "oklch(0.44 0.23 300.62)",
      "chart-3": "oklch(0.38 0.04 226.15)",
      "chart-4": "oklch(0.83 0.12 88.35)",
      "chart-5": "oklch(0.78 0.13 59.00)",
      "radius": "0.5rem",
      "sidebar": "oklch(0.94 0.03 320.58)",
      "sidebar-foreground": "oklch(0.49 0.19 354.54)",
      "sidebar-primary": "oklch(0.40 0.03 285.20)",
      "sidebar-primary-foreground": "oklch(0.97 0.01 337.52)",
      "sidebar-accent": "oklch(0.98 0.00 106.42)",
      "sidebar-accent-foreground": "oklch(0.40 0.03 285.20)",
      "sidebar-border": "oklch(0.94 0.00 48.72)",
      "sidebar-ring": "oklch(0.59 0.22 0.58)",
      "font-sans": "ui-sans-serif, system-ui, -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial, 'Noto Sans', sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Noto Color Emoji'",
      "font-serif": "ui-serif, Georgia, Cambria, \"Times New Roman\", Times, serif",
      "font-mono": "ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, \"Liberation Mono\", \"Courier New\", monospace",
      "shadow-color": "hsl(0 0% 0%)",
      "shadow-opacity": "0.1",
      "shadow-blur": "3px",
      "shadow-spread": "0px",
      "shadow-offset-x": "0",
      "shadow-offset-y": "1px",
      "letter-spacing": "0em",
      "spacing": "0.25rem",
      "shadow-2xs": "0 1px 3px 0px hsl(0 0% 0% / 0.05)",
      "shadow-xs": "0 1px 3px 0px hsl(0 0% 0% / 0.05)",
      "shadow-sm": "0 1px 3px 0px hsl(0 0% 0% / 0.10), 0 1px 2px -1px hsl(0 0% 0% / 0.10)",
      "shadow": "0 1px 3px 0px hsl(0 0% 0% / 0.10), 0 1px 2px -1px hsl(0 0% 0% / 0.10)",
      "shadow-md": "0 1px 3px 0px hsl(0 0% 0% / 0.10), 0 2px 4px -1px hsl(0 0% 0% / 0.10)",
      "shadow-lg": "0 1px 3px 0px hsl(0 0% 0% / 0.10), 0 4px 6px -1px hsl(0 0% 0% / 0.10)",
      "shadow-xl": "0 1px 3px 0px hsl(0 0% 0% / 0.10), 0 8px 10px -1px hsl(0 0% 0% / 0.10)",
      "shadow-2xl": "0 1px 3px 0px hsl(0 0% 0% / 0.25)",
      "tracking-normal": "0em"
    },
    "dark": {
      "background": "oklch(0.24 0.02 307.53)",
      "foreground": "oklch(0.84 0.04 309.54)",
      "card": "oklch(0.28 0.02 307.54)",
      "card-foreground": "oklch(0.85 0.03 341.46)",
      "popover": "oklch(0.15 0.01 338.90)",
      "popover-foreground": "oklch(0.96 0.01 341.80)",
      "primary": "oklch(0.46 0.19 4.10)",
      "primary-foreground": "oklch(0.86 0.06 346.37)",
      "secondary": "oklch(0.31 0.03 310.06)",
      "secondary-foreground": "oklch(0.85 0.04 307.96)",
      "muted": "oklch(0.26 0.02 309.47)",
      "muted-foreground": "oklch(0.79 0.04 307.10)",
      "accent": "oklch(0.36 0.05 308.49)",
      "accent-foreground": "oklch(0.96 0.01 341.80)",
      "destructive": "oklch(0.23 0.05 12.61)",
      "destructive-foreground": "oklch(1.00 0 0)",
      "border": "oklch(0.33 0.02 343.45)",
      "input": "oklch(0.34 0.02 332.83)",
      "ring": "oklch(0.59 0.22 0.58)",
      "chart-1": "oklch(0.53 0.14 355.20)",
      "chart-2": "oklch(0.56 0.19 306.86)",
      "chart-3": "oklch(0.72 0.15 60.58)",
      "chart-4": "oklch(0.62 0.20 312.74)",
      "chart-5": "oklch(0.61 0.21 6.14)",
      "radius": "0.5rem",
      "sidebar": "oklch(0.19 0.02 331.05)",
      "sidebar-foreground": "oklch(0.86 0.03 343.66)",
      "sidebar-primary": "oklch(0.49 0.22 264.38)",
      "sidebar-primary-foreground": "oklch(1.00 0 0)",
      "sidebar-accent": "oklch(0.23 0.03 338.20)",
      "sidebar-accent-foreground": "oklch(0.97 0.00 286.38)",
      "sidebar-border": "oklch(0 0 0)",
      "sidebar-ring": "oklch(0.59 0.22 0.58)",
      "font-sans": "ui-sans-serif, system-ui, -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial, 'Noto Sans', sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Noto Color Emoji'",
      "font-serif": "ui-serif, Georgia, Cambria, \"Times New Roman\", Times, serif",
      "font-mono": "ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, \"Liberation Mono\", \"Courier New\", monospace",
      "shadow-color": "hsl(0 0% 0%)",
      "shadow-opacity": "0.1",
      "shadow-blur": "3px",
      "shadow-spread": "0px",
      "shadow-offset-x": "0",
      "shadow-offset-y": "1px",
      "letter-spacing": "0em",
      "spacing": "0.25rem",
      "shadow-2xs": "0 1px 3px 0px hsl(0 0% 0% / 0.05)",
      "shadow-xs": "0 1px 3px 0px hsl(0 0% 0% / 0.05)",
      "shadow-sm": "0 1px 3px 0px hsl(0 0% 0% / 0.10), 0 1px 2px -1px hsl(0 0% 0% / 0.10)",
      "shadow": "0 1px 3px 0px hsl(0 0% 0% / 0.10), 0 1px 2px -1px hsl(0 0% 0% / 0.10)",
      "shadow-md": "0 1px 3px 0px hsl(0 0% 0% / 0.10), 0 2px 4px -1px hsl(0 0% 0% / 0.10)",
      "shadow-lg": "0 1px 3px 0px hsl(0 0% 0% / 0.10), 0 4px 6px -1px hsl(0 0% 0% / 0.10)",
      "shadow-xl": "0 1px 3px 0px hsl(0 0% 0% / 0.10), 0 8px 10px -1px hsl(0 0% 0% / 0.10)",
      "shadow-2xl": "0 1px 3px 0px hsl(0 0% 0% / 0.25)"
    }
  }
}
</file>

<file path="public/r/themes/tangerine.json">
{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "tangerine",
  "type": "registry:style",
  "css": {
    "@layer base": {
      "body": {
        "letter-spacing": "var(--tracking-normal)"
      }
    }
  },
  "cssVars": {
    "theme": {
      "font-sans": "Inter, sans-serif",
      "font-mono": "JetBrains Mono, monospace",
      "font-serif": "Source Serif 4, serif",
      "radius": "0.75rem",
      "tracking-tighter": "calc(var(--tracking-normal) - 0.05em)",
      "tracking-tight": "calc(var(--tracking-normal) - 0.025em)",
      "tracking-wide": "calc(var(--tracking-normal) + 0.025em)",
      "tracking-wider": "calc(var(--tracking-normal) + 0.05em)",
      "tracking-widest": "calc(var(--tracking-normal) + 0.1em)"
    },
    "light": {
      "background": "oklch(0.94 0.00 236.50)",
      "foreground": "oklch(0.32 0 0)",
      "card": "oklch(1.00 0 0)",
      "card-foreground": "oklch(0.32 0 0)",
      "popover": "oklch(1.00 0 0)",
      "popover-foreground": "oklch(0.32 0 0)",
      "primary": "oklch(0.64 0.17 36.44)",
      "primary-foreground": "oklch(1.00 0 0)",
      "secondary": "oklch(0.97 0.00 264.54)",
      "secondary-foreground": "oklch(0.45 0.03 256.80)",
      "muted": "oklch(0.98 0.00 247.84)",
      "muted-foreground": "oklch(0.55 0.02 264.36)",
      "accent": "oklch(0.91 0.02 243.82)",
      "accent-foreground": "oklch(0.38 0.14 265.52)",
      "destructive": "oklch(0.64 0.21 25.33)",
      "destructive-foreground": "oklch(1.00 0 0)",
      "border": "oklch(0.90 0.01 247.88)",
      "input": "oklch(0.97 0.00 264.54)",
      "ring": "oklch(0.64 0.17 36.44)",
      "chart-1": "oklch(0.72 0.06 248.68)",
      "chart-2": "oklch(0.79 0.09 35.96)",
      "chart-3": "oklch(0.58 0.08 254.16)",
      "chart-4": "oklch(0.50 0.08 259.49)",
      "chart-5": "oklch(0.42 0.10 264.03)",
      "radius": "0.75rem",
      "sidebar": "oklch(0.90 0.00 258.33)",
      "sidebar-foreground": "oklch(0.32 0 0)",
      "sidebar-primary": "oklch(0.64 0.17 36.44)",
      "sidebar-primary-foreground": "oklch(1.00 0 0)",
      "sidebar-accent": "oklch(0.91 0.02 243.82)",
      "sidebar-accent-foreground": "oklch(0.38 0.14 265.52)",
      "sidebar-border": "oklch(0.93 0.01 264.53)",
      "sidebar-ring": "oklch(0.64 0.17 36.44)",
      "font-sans": "Inter, sans-serif",
      "font-serif": "Source Serif 4, serif",
      "font-mono": "JetBrains Mono, monospace",
      "shadow-color": "hsl(0 0% 0%)",
      "shadow-opacity": "0.1",
      "shadow-blur": "3px",
      "shadow-spread": "0px",
      "shadow-offset-x": "0px",
      "shadow-offset-y": "1px",
      "letter-spacing": "0em",
      "spacing": "0.25rem",
      "shadow-2xs": "0px 1px 3px 0px hsl(0 0% 0% / 0.05)",
      "shadow-xs": "0px 1px 3px 0px hsl(0 0% 0% / 0.05)",
      "shadow-sm": "0px 1px 3px 0px hsl(0 0% 0% / 0.10), 0px 1px 2px -1px hsl(0 0% 0% / 0.10)",
      "shadow": "0px 1px 3px 0px hsl(0 0% 0% / 0.10), 0px 1px 2px -1px hsl(0 0% 0% / 0.10)",
      "shadow-md": "0px 1px 3px 0px hsl(0 0% 0% / 0.10), 0px 2px 4px -1px hsl(0 0% 0% / 0.10)",
      "shadow-lg": "0px 1px 3px 0px hsl(0 0% 0% / 0.10), 0px 4px 6px -1px hsl(0 0% 0% / 0.10)",
      "shadow-xl": "0px 1px 3px 0px hsl(0 0% 0% / 0.10), 0px 8px 10px -1px hsl(0 0% 0% / 0.10)",
      "shadow-2xl": "0px 1px 3px 0px hsl(0 0% 0% / 0.25)",
      "tracking-normal": "0em"
    },
    "dark": {
      "background": "oklch(0.26 0.03 262.67)",
      "foreground": "oklch(0.92 0 0)",
      "card": "oklch(0.31 0.03 268.64)",
      "card-foreground": "oklch(0.92 0 0)",
      "popover": "oklch(0.29 0.02 268.40)",
      "popover-foreground": "oklch(0.92 0 0)",
      "primary": "oklch(0.64 0.17 36.44)",
      "primary-foreground": "oklch(1.00 0 0)",
      "secondary": "oklch(0.31 0.03 266.71)",
      "secondary-foreground": "oklch(0.92 0 0)",
      "muted": "oklch(0.31 0.03 266.71)",
      "muted-foreground": "oklch(0.72 0 0)",
      "accent": "oklch(0.34 0.06 267.59)",
      "accent-foreground": "oklch(0.88 0.06 254.13)",
      "destructive": "oklch(0.64 0.21 25.33)",
      "destructive-foreground": "oklch(1.00 0 0)",
      "border": "oklch(0.38 0.03 269.73)",
      "input": "oklch(0.38 0.03 269.73)",
      "ring": "oklch(0.64 0.17 36.44)",
      "chart-1": "oklch(0.72 0.06 248.68)",
      "chart-2": "oklch(0.77 0.09 34.19)",
      "chart-3": "oklch(0.58 0.08 254.16)",
      "chart-4": "oklch(0.50 0.08 259.49)",
      "chart-5": "oklch(0.42 0.10 264.03)",
      "radius": "0.75rem",
      "sidebar": "oklch(0.31 0.03 267.74)",
      "sidebar-foreground": "oklch(0.92 0 0)",
      "sidebar-primary": "oklch(0.64 0.17 36.44)",
      "sidebar-primary-foreground": "oklch(1.00 0 0)",
      "sidebar-accent": "oklch(0.34 0.06 267.59)",
      "sidebar-accent-foreground": "oklch(0.88 0.06 254.13)",
      "sidebar-border": "oklch(0.38 0.03 269.73)",
      "sidebar-ring": "oklch(0.64 0.17 36.44)",
      "font-sans": "Inter, sans-serif",
      "font-serif": "Source Serif 4, serif",
      "font-mono": "JetBrains Mono, monospace",
      "shadow-color": "hsl(0 0% 0%)",
      "shadow-opacity": "0.1",
      "shadow-blur": "3px",
      "shadow-spread": "0px",
      "shadow-offset-x": "0px",
      "shadow-offset-y": "1px",
      "letter-spacing": "0em",
      "spacing": "0.25rem",
      "shadow-2xs": "0px 1px 3px 0px hsl(0 0% 0% / 0.05)",
      "shadow-xs": "0px 1px 3px 0px hsl(0 0% 0% / 0.05)",
      "shadow-sm": "0px 1px 3px 0px hsl(0 0% 0% / 0.10), 0px 1px 2px -1px hsl(0 0% 0% / 0.10)",
      "shadow": "0px 1px 3px 0px hsl(0 0% 0% / 0.10), 0px 1px 2px -1px hsl(0 0% 0% / 0.10)",
      "shadow-md": "0px 1px 3px 0px hsl(0 0% 0% / 0.10), 0px 2px 4px -1px hsl(0 0% 0% / 0.10)",
      "shadow-lg": "0px 1px 3px 0px hsl(0 0% 0% / 0.10), 0px 4px 6px -1px hsl(0 0% 0% / 0.10)",
      "shadow-xl": "0px 1px 3px 0px hsl(0 0% 0% / 0.10), 0px 8px 10px -1px hsl(0 0% 0% / 0.10)",
      "shadow-2xl": "0px 1px 3px 0px hsl(0 0% 0% / 0.25)"
    }
  }
}
</file>

<file path="public/r/themes/twitter.json">
{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "twitter",
  "type": "registry:style",
  "css": {
    "@layer base": {
      "body": {
        "letter-spacing": "var(--tracking-normal)"
      }
    }
  },
  "cssVars": {
    "theme": {
      "font-sans": "Open Sans, sans-serif",
      "font-mono": "Menlo, monospace",
      "font-serif": "Georgia, serif",
      "radius": "1.3rem",
      "tracking-tighter": "calc(var(--tracking-normal) - 0.05em)",
      "tracking-tight": "calc(var(--tracking-normal) - 0.025em)",
      "tracking-wide": "calc(var(--tracking-normal) + 0.025em)",
      "tracking-wider": "calc(var(--tracking-normal) + 0.05em)",
      "tracking-widest": "calc(var(--tracking-normal) + 0.1em)"
    },
    "light": {
      "background": "oklch(1.00 0 0)",
      "foreground": "oklch(0.19 0.01 248.51)",
      "card": "oklch(0.98 0.00 197.14)",
      "card-foreground": "oklch(0.19 0.01 248.51)",
      "popover": "oklch(1.00 0 0)",
      "popover-foreground": "oklch(0.19 0.01 248.51)",
      "primary": "oklch(0.67 0.16 245.00)",
      "primary-foreground": "oklch(1.00 0 0)",
      "secondary": "oklch(0.19 0.01 248.51)",
      "secondary-foreground": "oklch(1.00 0 0)",
      "muted": "oklch(0.92 0.00 286.37)",
      "muted-foreground": "oklch(0.19 0.01 248.51)",
      "accent": "oklch(0.94 0.02 250.85)",
      "accent-foreground": "oklch(0.67 0.16 245.00)",
      "destructive": "oklch(0.62 0.24 25.77)",
      "destructive-foreground": "oklch(1.00 0 0)",
      "border": "oklch(0.93 0.01 231.66)",
      "input": "oklch(0.98 0.00 228.78)",
      "ring": "oklch(0.68 0.16 243.35)",
      "chart-1": "oklch(0.67 0.16 245.00)",
      "chart-2": "oklch(0.69 0.16 160.35)",
      "chart-3": "oklch(0.82 0.16 82.53)",
      "chart-4": "oklch(0.71 0.18 151.71)",
      "chart-5": "oklch(0.59 0.22 10.58)",
      "radius": "1.3rem",
      "sidebar": "oklch(0.98 0.00 197.14)",
      "sidebar-foreground": "oklch(0.19 0.01 248.51)",
      "sidebar-primary": "oklch(0.67 0.16 245.00)",
      "sidebar-primary-foreground": "oklch(1.00 0 0)",
      "sidebar-accent": "oklch(0.94 0.02 250.85)",
      "sidebar-accent-foreground": "oklch(0.67 0.16 245.00)",
      "sidebar-border": "oklch(0.93 0.01 238.52)",
      "sidebar-ring": "oklch(0.68 0.16 243.35)",
      "font-sans": "Open Sans, sans-serif",
      "font-serif": "Georgia, serif",
      "font-mono": "Menlo, monospace",
      "shadow-color": "rgba(29,161,242,0.15)",
      "shadow-opacity": "0",
      "shadow-blur": "0px",
      "shadow-spread": "0px",
      "shadow-offset-x": "0px",
      "shadow-offset-y": "2px",
      "letter-spacing": "0em",
      "spacing": "0.25rem",
      "shadow-2xs": "0px 2px 0px 0px hsl(202.82 89.12% 53.14% / 0.00)",
      "shadow-xs": "0px 2px 0px 0px hsl(202.82 89.12% 53.14% / 0.00)",
      "shadow-sm": "0px 2px 0px 0px hsl(202.82 89.12% 53.14% / 0.00), 0px 1px 2px -1px hsl(202.82 89.12% 53.14% / 0.00)",
      "shadow": "0px 2px 0px 0px hsl(202.82 89.12% 53.14% / 0.00), 0px 1px 2px -1px hsl(202.82 89.12% 53.14% / 0.00)",
      "shadow-md": "0px 2px 0px 0px hsl(202.82 89.12% 53.14% / 0.00), 0px 2px 4px -1px hsl(202.82 89.12% 53.14% / 0.00)",
      "shadow-lg": "0px 2px 0px 0px hsl(202.82 89.12% 53.14% / 0.00), 0px 4px 6px -1px hsl(202.82 89.12% 53.14% / 0.00)",
      "shadow-xl": "0px 2px 0px 0px hsl(202.82 89.12% 53.14% / 0.00), 0px 8px 10px -1px hsl(202.82 89.12% 53.14% / 0.00)",
      "shadow-2xl": "0px 2px 0px 0px hsl(202.82 89.12% 53.14% / 0.00)",
      "tracking-normal": "0em"
    },
    "dark": {
      "background": "oklch(0 0 0)",
      "foreground": "oklch(0.93 0.00 228.79)",
      "card": "oklch(0.21 0.01 274.53)",
      "card-foreground": "oklch(0.89 0 0)",
      "popover": "oklch(0 0 0)",
      "popover-foreground": "oklch(0.93 0.00 228.79)",
      "primary": "oklch(0.67 0.16 245.01)",
      "primary-foreground": "oklch(1.00 0 0)",
      "secondary": "oklch(0.96 0.00 219.53)",
      "secondary-foreground": "oklch(0.19 0.01 248.51)",
      "muted": "oklch(0.21 0 0)",
      "muted-foreground": "oklch(0.56 0.01 247.97)",
      "accent": "oklch(0.19 0.03 242.55)",
      "accent-foreground": "oklch(0.67 0.16 245.01)",
      "destructive": "oklch(0.62 0.24 25.77)",
      "destructive-foreground": "oklch(1.00 0 0)",
      "border": "oklch(0.27 0.00 248.00)",
      "input": "oklch(0.30 0.03 244.82)",
      "ring": "oklch(0.68 0.16 243.35)",
      "chart-1": "oklch(0.67 0.16 245.00)",
      "chart-2": "oklch(0.69 0.16 160.35)",
      "chart-3": "oklch(0.82 0.16 82.53)",
      "chart-4": "oklch(0.71 0.18 151.71)",
      "chart-5": "oklch(0.59 0.22 10.58)",
      "radius": "1.3rem",
      "sidebar": "oklch(0.21 0.01 274.53)",
      "sidebar-foreground": "oklch(0.89 0 0)",
      "sidebar-primary": "oklch(0.68 0.16 243.35)",
      "sidebar-primary-foreground": "oklch(1.00 0 0)",
      "sidebar-accent": "oklch(0.19 0.03 242.55)",
      "sidebar-accent-foreground": "oklch(0.67 0.16 245.01)",
      "sidebar-border": "oklch(0.38 0.02 240.59)",
      "sidebar-ring": "oklch(0.68 0.16 243.35)",
      "font-sans": "Open Sans, sans-serif",
      "font-serif": "Georgia, serif",
      "font-mono": "Menlo, monospace",
      "shadow-color": "rgba(29,161,242,0.25)",
      "shadow-opacity": "0",
      "shadow-blur": "0px",
      "shadow-spread": "0px",
      "shadow-offset-x": "0px",
      "shadow-offset-y": "2px",
      "letter-spacing": "0em",
      "spacing": "0.25rem",
      "shadow-2xs": "0px 2px 0px 0px hsl(202.82 89.12% 53.14% / 0.00)",
      "shadow-xs": "0px 2px 0px 0px hsl(202.82 89.12% 53.14% / 0.00)",
      "shadow-sm": "0px 2px 0px 0px hsl(202.82 89.12% 53.14% / 0.00), 0px 1px 2px -1px hsl(202.82 89.12% 53.14% / 0.00)",
      "shadow": "0px 2px 0px 0px hsl(202.82 89.12% 53.14% / 0.00), 0px 1px 2px -1px hsl(202.82 89.12% 53.14% / 0.00)",
      "shadow-md": "0px 2px 0px 0px hsl(202.82 89.12% 53.14% / 0.00), 0px 2px 4px -1px hsl(202.82 89.12% 53.14% / 0.00)",
      "shadow-lg": "0px 2px 0px 0px hsl(202.82 89.12% 53.14% / 0.00), 0px 4px 6px -1px hsl(202.82 89.12% 53.14% / 0.00)",
      "shadow-xl": "0px 2px 0px 0px hsl(202.82 89.12% 53.14% / 0.00), 0px 8px 10px -1px hsl(202.82 89.12% 53.14% / 0.00)",
      "shadow-2xl": "0px 2px 0px 0px hsl(202.82 89.12% 53.14% / 0.00)"
    }
  }
}
</file>

<file path="public/r/themes/vercel.json">
{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "vercel",
  "type": "registry:style",
  "css": {
    "@layer base": {
      "body": {
        "letter-spacing": "var(--tracking-normal)"
      }
    }
  },
  "cssVars": {
    "theme": {
      "font-sans": "Geist, sans-serif",
      "font-mono": "Geist Mono, monospace",
      "font-serif": "Georgia, serif",
      "radius": "0.5rem",
      "tracking-tighter": "calc(var(--tracking-normal) - 0.05em)",
      "tracking-tight": "calc(var(--tracking-normal) - 0.025em)",
      "tracking-wide": "calc(var(--tracking-normal) + 0.025em)",
      "tracking-wider": "calc(var(--tracking-normal) + 0.05em)",
      "tracking-widest": "calc(var(--tracking-normal) + 0.1em)"
    },
    "light": {
      "background": "oklch(0.99 0 0)",
      "foreground": "oklch(0 0 0)",
      "card": "oklch(1 0 0)",
      "card-foreground": "oklch(0 0 0)",
      "popover": "oklch(0.99 0 0)",
      "popover-foreground": "oklch(0 0 0)",
      "primary": "oklch(0 0 0)",
      "primary-foreground": "oklch(1 0 0)",
      "secondary": "oklch(0.94 0 0)",
      "secondary-foreground": "oklch(0 0 0)",
      "muted": "oklch(0.97 0 0)",
      "muted-foreground": "oklch(0.44 0 0)",
      "accent": "oklch(0.94 0 0)",
      "accent-foreground": "oklch(0 0 0)",
      "destructive": "oklch(0.63 0.19 23.03)",
      "destructive-foreground": "oklch(1 0 0)",
      "border": "oklch(0.92 0 0)",
      "input": "oklch(0.94 0 0)",
      "ring": "oklch(0 0 0)",
      "chart-1": "oklch(0.81 0.17 75.35)",
      "chart-2": "oklch(0.55 0.22 264.53)",
      "chart-3": "oklch(0.72 0 0)",
      "chart-4": "oklch(0.92 0 0)",
      "chart-5": "oklch(0.56 0 0)",
      "radius": "0.5rem",
      "sidebar": "oklch(0.99 0 0)",
      "sidebar-foreground": "oklch(0 0 0)",
      "sidebar-primary": "oklch(0 0 0)",
      "sidebar-primary-foreground": "oklch(1 0 0)",
      "sidebar-accent": "oklch(0.94 0 0)",
      "sidebar-accent-foreground": "oklch(0 0 0)",
      "sidebar-border": "oklch(0.94 0 0)",
      "sidebar-ring": "oklch(0 0 0)",
      "font-sans": "Geist, sans-serif",
      "font-serif": "Georgia, serif",
      "font-mono": "Geist Mono, monospace",
      "shadow-color": "hsl(0 0% 0%)",
      "shadow-opacity": "0.18",
      "shadow-blur": "2px",
      "shadow-spread": "0px",
      "shadow-offset-x": "0px",
      "shadow-offset-y": "1px",
      "letter-spacing": "0em",
      "spacing": "0.25rem",
      "shadow-2xs": "0px 1px 2px 0px hsl(0 0% 0% / 0.09)",
      "shadow-xs": "0px 1px 2px 0px hsl(0 0% 0% / 0.09)",
      "shadow-sm": "0px 1px 2px 0px hsl(0 0% 0% / 0.18), 0px 1px 2px -1px hsl(0 0% 0% / 0.18)",
      "shadow": "0px 1px 2px 0px hsl(0 0% 0% / 0.18), 0px 1px 2px -1px hsl(0 0% 0% / 0.18)",
      "shadow-md": "0px 1px 2px 0px hsl(0 0% 0% / 0.18), 0px 2px 4px -1px hsl(0 0% 0% / 0.18)",
      "shadow-lg": "0px 1px 2px 0px hsl(0 0% 0% / 0.18), 0px 4px 6px -1px hsl(0 0% 0% / 0.18)",
      "shadow-xl": "0px 1px 2px 0px hsl(0 0% 0% / 0.18), 0px 8px 10px -1px hsl(0 0% 0% / 0.18)",
      "shadow-2xl": "0px 1px 2px 0px hsl(0 0% 0% / 0.45)",
      "tracking-normal": "0em"
    },
    "dark": {
      "background": "oklch(0 0 0)",
      "foreground": "oklch(1 0 0)",
      "card": "oklch(0.14 0 0)",
      "card-foreground": "oklch(1 0 0)",
      "popover": "oklch(0.18 0 0)",
      "popover-foreground": "oklch(1 0 0)",
      "primary": "oklch(1 0 0)",
      "primary-foreground": "oklch(0 0 0)",
      "secondary": "oklch(0.25 0 0)",
      "secondary-foreground": "oklch(1 0 0)",
      "muted": "oklch(0.23 0 0)",
      "muted-foreground": "oklch(0.72 0 0)",
      "accent": "oklch(0.32 0 0)",
      "accent-foreground": "oklch(1 0 0)",
      "destructive": "oklch(0.69 0.20 23.91)",
      "destructive-foreground": "oklch(0 0 0)",
      "border": "oklch(0.26 0 0)",
      "input": "oklch(0.32 0 0)",
      "ring": "oklch(0.72 0 0)",
      "chart-1": "oklch(0.81 0.17 75.35)",
      "chart-2": "oklch(0.58 0.21 260.84)",
      "chart-3": "oklch(0.56 0 0)",
      "chart-4": "oklch(0.44 0 0)",
      "chart-5": "oklch(0.92 0 0)",
      "radius": "0.5rem",
      "sidebar": "oklch(0.18 0 0)",
      "sidebar-foreground": "oklch(1 0 0)",
      "sidebar-primary": "oklch(1 0 0)",
      "sidebar-primary-foreground": "oklch(0 0 0)",
      "sidebar-accent": "oklch(0.32 0 0)",
      "sidebar-accent-foreground": "oklch(1 0 0)",
      "sidebar-border": "oklch(0.32 0 0)",
      "sidebar-ring": "oklch(0.72 0 0)",
      "font-sans": "Geist, sans-serif",
      "font-serif": "Georgia, serif",
      "font-mono": "Geist Mono, monospace",
      "shadow-color": "hsl(0 0% 0%)",
      "shadow-opacity": "0.18",
      "shadow-blur": "2px",
      "shadow-spread": "0px",
      "shadow-offset-x": "0px",
      "shadow-offset-y": "1px",
      "letter-spacing": "0em",
      "spacing": "0.25rem",
      "shadow-2xs": "0px 1px 2px 0px hsl(0 0% 0% / 0.09)",
      "shadow-xs": "0px 1px 2px 0px hsl(0 0% 0% / 0.09)",
      "shadow-sm": "0px 1px 2px 0px hsl(0 0% 0% / 0.18), 0px 1px 2px -1px hsl(0 0% 0% / 0.18)",
      "shadow": "0px 1px 2px 0px hsl(0 0% 0% / 0.18), 0px 1px 2px -1px hsl(0 0% 0% / 0.18)",
      "shadow-md": "0px 1px 2px 0px hsl(0 0% 0% / 0.18), 0px 2px 4px -1px hsl(0 0% 0% / 0.18)",
      "shadow-lg": "0px 1px 2px 0px hsl(0 0% 0% / 0.18), 0px 4px 6px -1px hsl(0 0% 0% / 0.18)",
      "shadow-xl": "0px 1px 2px 0px hsl(0 0% 0% / 0.18), 0px 8px 10px -1px hsl(0 0% 0% / 0.18)",
      "shadow-2xl": "0px 1px 2px 0px hsl(0 0% 0% / 0.45)"
    }
  }
}
</file>

<file path="public/r/themes/vintage-paper.json">
{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "vintage-paper",
  "type": "registry:style",
  "css": {
    "@layer base": {
      "body": {
        "letter-spacing": "var(--tracking-normal)"
      }
    }
  },
  "cssVars": {
    "theme": {
      "font-sans": "Libre Baskerville, serif",
      "font-mono": "IBM Plex Mono, monospace",
      "font-serif": "Lora, serif",
      "radius": "0.25rem",
      "tracking-tighter": "calc(var(--tracking-normal) - 0.05em)",
      "tracking-tight": "calc(var(--tracking-normal) - 0.025em)",
      "tracking-wide": "calc(var(--tracking-normal) + 0.025em)",
      "tracking-wider": "calc(var(--tracking-normal) + 0.05em)",
      "tracking-widest": "calc(var(--tracking-normal) + 0.1em)"
    },
    "light": {
      "background": "oklch(0.96 0.02 90.24)",
      "foreground": "oklch(0.38 0.02 64.34)",
      "card": "oklch(0.99 0.01 87.47)",
      "card-foreground": "oklch(0.38 0.02 64.34)",
      "popover": "oklch(0.99 0.01 87.47)",
      "popover-foreground": "oklch(0.38 0.02 64.34)",
      "primary": "oklch(0.62 0.08 65.54)",
      "primary-foreground": "oklch(1.00 0 0)",
      "secondary": "oklch(0.88 0.03 85.57)",
      "secondary-foreground": "oklch(0.43 0.03 64.93)",
      "muted": "oklch(0.92 0.02 83.06)",
      "muted-foreground": "oklch(0.54 0.04 71.17)",
      "accent": "oklch(0.83 0.04 88.81)",
      "accent-foreground": "oklch(0.38 0.02 64.34)",
      "destructive": "oklch(0.55 0.14 32.91)",
      "destructive-foreground": "oklch(1.00 0 0)",
      "border": "oklch(0.86 0.03 84.59)",
      "input": "oklch(0.86 0.03 84.59)",
      "ring": "oklch(0.62 0.08 65.54)",
      "chart-1": "oklch(0.62 0.08 65.54)",
      "chart-2": "oklch(0.56 0.06 68.58)",
      "chart-3": "oklch(0.49 0.06 72.68)",
      "chart-4": "oklch(0.68 0.06 64.78)",
      "chart-5": "oklch(0.73 0.06 66.70)",
      "radius": "0.25rem",
      "sidebar": "oklch(0.92 0.02 83.06)",
      "sidebar-foreground": "oklch(0.38 0.02 64.34)",
      "sidebar-primary": "oklch(0.62 0.08 65.54)",
      "sidebar-primary-foreground": "oklch(1.00 0 0)",
      "sidebar-accent": "oklch(0.83 0.04 88.81)",
      "sidebar-accent-foreground": "oklch(0.38 0.02 64.34)",
      "sidebar-border": "oklch(0.86 0.03 84.59)",
      "sidebar-ring": "oklch(0.62 0.08 65.54)",
      "font-sans": "Libre Baskerville, serif",
      "font-serif": "Lora, serif",
      "font-mono": "IBM Plex Mono, monospace",
      "shadow-color": "hsl(28 13% 20%)",
      "shadow-opacity": "0.12",
      "shadow-blur": "5px",
      "shadow-spread": "0px",
      "shadow-offset-x": "2px",
      "shadow-offset-y": "3px",
      "letter-spacing": "0em",
      "spacing": "0.25rem",
      "shadow-2xs": "2px 3px 5px 0px hsl(28 13% 20% / 0.06)",
      "shadow-xs": "2px 3px 5px 0px hsl(28 13% 20% / 0.06)",
      "shadow-sm": "2px 3px 5px 0px hsl(28 13% 20% / 0.12), 2px 1px 2px -1px hsl(28 13% 20% / 0.12)",
      "shadow": "2px 3px 5px 0px hsl(28 13% 20% / 0.12), 2px 1px 2px -1px hsl(28 13% 20% / 0.12)",
      "shadow-md": "2px 3px 5px 0px hsl(28 13% 20% / 0.12), 2px 2px 4px -1px hsl(28 13% 20% / 0.12)",
      "shadow-lg": "2px 3px 5px 0px hsl(28 13% 20% / 0.12), 2px 4px 6px -1px hsl(28 13% 20% / 0.12)",
      "shadow-xl": "2px 3px 5px 0px hsl(28 13% 20% / 0.12), 2px 8px 10px -1px hsl(28 13% 20% / 0.12)",
      "shadow-2xl": "2px 3px 5px 0px hsl(28 13% 20% / 0.30)",
      "tracking-normal": "0em"
    },
    "dark": {
      "background": "oklch(0.27 0.01 57.65)",
      "foreground": "oklch(0.92 0.02 83.06)",
      "card": "oklch(0.32 0.02 59.06)",
      "card-foreground": "oklch(0.92 0.02 83.06)",
      "popover": "oklch(0.32 0.02 59.06)",
      "popover-foreground": "oklch(0.92 0.02 83.06)",
      "primary": "oklch(0.73 0.06 66.70)",
      "primary-foreground": "oklch(0.27 0.01 57.65)",
      "secondary": "oklch(0.38 0.02 57.13)",
      "secondary-foreground": "oklch(0.92 0.02 83.06)",
      "muted": "oklch(0.32 0.02 59.06)",
      "muted-foreground": "oklch(0.80 0.02 82.11)",
      "accent": "oklch(0.42 0.03 56.34)",
      "accent-foreground": "oklch(0.92 0.02 83.06)",
      "destructive": "oklch(0.55 0.14 32.91)",
      "destructive-foreground": "oklch(1.00 0 0)",
      "border": "oklch(0.38 0.02 57.13)",
      "input": "oklch(0.38 0.02 57.13)",
      "ring": "oklch(0.73 0.06 66.70)",
      "chart-1": "oklch(0.73 0.06 66.70)",
      "chart-2": "oklch(0.68 0.06 64.78)",
      "chart-3": "oklch(0.62 0.08 65.54)",
      "chart-4": "oklch(0.56 0.06 68.58)",
      "chart-5": "oklch(0.49 0.06 72.68)",
      "radius": "0.25rem",
      "sidebar": "oklch(0.27 0.01 57.65)",
      "sidebar-foreground": "oklch(0.92 0.02 83.06)",
      "sidebar-primary": "oklch(0.73 0.06 66.70)",
      "sidebar-primary-foreground": "oklch(0.27 0.01 57.65)",
      "sidebar-accent": "oklch(0.42 0.03 56.34)",
      "sidebar-accent-foreground": "oklch(0.92 0.02 83.06)",
      "sidebar-border": "oklch(0.38 0.02 57.13)",
      "sidebar-ring": "oklch(0.73 0.06 66.70)",
      "font-sans": "Libre Baskerville, serif",
      "font-serif": "Lora, serif",
      "font-mono": "IBM Plex Mono, monospace",
      "shadow-color": "hsl(28 13% 20%)",
      "shadow-opacity": "0.12",
      "shadow-blur": "5px",
      "shadow-spread": "0px",
      "shadow-offset-x": "2px",
      "shadow-offset-y": "3px",
      "letter-spacing": "0em",
      "spacing": "0.25rem",
      "shadow-2xs": "2px 3px 5px 0px hsl(28 13% 20% / 0.06)",
      "shadow-xs": "2px 3px 5px 0px hsl(28 13% 20% / 0.06)",
      "shadow-sm": "2px 3px 5px 0px hsl(28 13% 20% / 0.12), 2px 1px 2px -1px hsl(28 13% 20% / 0.12)",
      "shadow": "2px 3px 5px 0px hsl(28 13% 20% / 0.12), 2px 1px 2px -1px hsl(28 13% 20% / 0.12)",
      "shadow-md": "2px 3px 5px 0px hsl(28 13% 20% / 0.12), 2px 2px 4px -1px hsl(28 13% 20% / 0.12)",
      "shadow-lg": "2px 3px 5px 0px hsl(28 13% 20% / 0.12), 2px 4px 6px -1px hsl(28 13% 20% / 0.12)",
      "shadow-xl": "2px 3px 5px 0px hsl(28 13% 20% / 0.12), 2px 8px 10px -1px hsl(28 13% 20% / 0.12)",
      "shadow-2xl": "2px 3px 5px 0px hsl(28 13% 20% / 0.30)"
    }
  }
}
</file>

<file path="public/registry/theme.css">
.theme-zinc {
  --background: 0 0% 100%;
  --foreground: 240 10% 3.9%;

  --muted: 240 4.8% 95.9%;
  --muted-foreground: 240 3.8% 46.1%;

  --popover: 0 0% 100%;
  --popover-foreground: 240 10% 3.9%;

  --card: 0 0% 100%;
  --card-foreground: 240 10% 3.9%;

  --border: 240 5.9% 90%;
  --input: 240 5.9% 90%;

  --primary: 240 5.9% 10%;
  --primary-foreground: 0 0% 98%;

  --secondary: 240 4.8% 95.9%;
  --secondary-foreground: 240 5.9% 10%;

  --accent: 240 4.8% 95.9%;
  --accent-foreground: 240 5.9% 10%;

  --destructive: 0 84.2% 60.2%;
  --destructive-foreground: 0 0% 98%;

  --ring: 240 5.9% 10%;

  --radius: 0.5rem;
}

.dark .theme-zinc {
  --background: 240 10% 3.9%;
  --foreground: 0 0% 98%;

  --muted: 240 3.7% 15.9%;
  --muted-foreground: 240 5% 64.9%;

  --popover: 240 10% 3.9%;
  --popover-foreground: 0 0% 98%;

  --card: 240 10% 3.9%;
  --card-foreground: 0 0% 98%;

  --border: 240 3.7% 15.9%;
  --input: 240 3.7% 15.9%;

  --primary: 0 0% 98%;
  --primary-foreground: 240 5.9% 10%;

  --secondary: 240 3.7% 15.9%;
  --secondary-foreground: 0 0% 98%;

  --accent: 240 3.7% 15.9%;
  --accent-foreground: 0 0% 98%;

  --destructive: 0 62.8% 30.6%;
  --destructive-foreground: 0 0% 98%;

  --ring: 240 4.9% 83.9%;
}

.theme-slate {
  --background: 0 0% 100%;
  --foreground: 222.2 84% 4.9%;

  --muted: 210 40% 96.1%;
  --muted-foreground: 215.4 16.3% 46.9%;

  --popover: 0 0% 100%;
  --popover-foreground: 222.2 84% 4.9%;

  --card: 0 0% 100%;
  --card-foreground: 222.2 84% 4.9%;

  --border: 214.3 31.8% 91.4%;
  --input: 214.3 31.8% 91.4%;

  --primary: 222.2 47.4% 11.2%;
  --primary-foreground: 210 40% 98%;

  --secondary: 210 40% 96.1%;
  --secondary-foreground: 222.2 47.4% 11.2%;

  --accent: 210 40% 96.1%;
  --accent-foreground: 222.2 47.4% 11.2%;

  --destructive: 0 84.2% 60.2%;
  --destructive-foreground: 210 40% 98%;

  --ring: 222.2 84% 4.9%;

  --radius: 0.5rem;
}

.dark .theme-slate {
  --background: 222.2 84% 4.9%;
  --foreground: 210 40% 98%;

  --muted: 217.2 32.6% 17.5%;
  --muted-foreground: 215 20.2% 65.1%;

  --popover: 222.2 84% 4.9%;
  --popover-foreground: 210 40% 98%;

  --card: 222.2 84% 4.9%;
  --card-foreground: 210 40% 98%;

  --border: 217.2 32.6% 17.5%;
  --input: 217.2 32.6% 17.5%;

  --primary: 210 40% 98%;
  --primary-foreground: 222.2 47.4% 11.2%;

  --secondary: 217.2 32.6% 17.5%;
  --secondary-foreground: 210 40% 98%;

  --accent: 217.2 32.6% 17.5%;
  --accent-foreground: 210 40% 98%;

  --destructive: 0 62.8% 30.6%;
  --destructive-foreground: 210 40% 98%;

  --ring: 212.7 26.8% 83.9;
}

.theme-stone {
  --background: 0 0% 100%;
  --foreground: 20 14.3% 4.1%;

  --muted: 60 4.8% 95.9%;
  --muted-foreground: 25 5.3% 44.7%;

  --popover: 0 0% 100%;
  --popover-foreground: 20 14.3% 4.1%;

  --card: 0 0% 100%;
  --card-foreground: 20 14.3% 4.1%;

  --border: 20 5.9% 90%;
  --input: 20 5.9% 90%;

  --primary: 24 9.8% 10%;
  --primary-foreground: 60 9.1% 97.8%;

  --secondary: 60 4.8% 95.9%;
  --secondary-foreground: 24 9.8% 10%;

  --accent: 60 4.8% 95.9%;
  --accent-foreground: 24 9.8% 10%;

  --destructive: 0 84.2% 60.2%;
  --destructive-foreground: 60 9.1% 97.8%;

  --ring: 20 14.3% 4.1%;

  --radius: 0.95rem;
}

.dark .theme-stone {
  --background: 20 14.3% 4.1%;
  --foreground: 60 9.1% 97.8%;

  --muted: 12 6.5% 15.1%;
  --muted-foreground: 24 5.4% 63.9%;

  --popover: 20 14.3% 4.1%;
  --popover-foreground: 60 9.1% 97.8%;

  --card: 20 14.3% 4.1%;
  --card-foreground: 60 9.1% 97.8%;

  --border: 12 6.5% 15.1%;
  --input: 12 6.5% 15.1%;

  --primary: 60 9.1% 97.8%;
  --primary-foreground: 24 9.8% 10%;

  --secondary: 12 6.5% 15.1%;
  --secondary-foreground: 60 9.1% 97.8%;

  --accent: 12 6.5% 15.1%;
  --accent-foreground: 60 9.1% 97.8%;

  --destructive: 0 62.8% 30.6%;
  --destructive-foreground: 60 9.1% 97.8%;

  --ring: 24 5.7% 82.9%;
}

.theme-gray {
  --background: 0 0% 100%;
  --foreground: 224 71.4% 4.1%;

  --muted: 220 14.3% 95.9%;
  --muted-foreground: 220 8.9% 46.1%;

  --popover: 0 0% 100%;
  --popover-foreground: 224 71.4% 4.1%;

  --card: 0 0% 100%;
  --card-foreground: 224 71.4% 4.1%;

  --border: 220 13% 91%;
  --input: 220 13% 91%;

  --primary: 220.9 39.3% 11%;
  --primary-foreground: 210 20% 98%;

  --secondary: 220 14.3% 95.9%;
  --secondary-foreground: 220.9 39.3% 11%;

  --accent: 220 14.3% 95.9%;
  --accent-foreground: 220.9 39.3% 11%;

  --destructive: 0 84.2% 60.2%;
  --destructive-foreground: 210 20% 98%;

  --ring: 224 71.4% 4.1%;

  --radius: 0.35rem;
}

.dark .theme-gray {
  --background: 224 71.4% 4.1%;
  --foreground: 210 20% 98%;

  --muted: 215 27.9% 16.9%;
  --muted-foreground: 217.9 10.6% 64.9%;

  --popover: 224 71.4% 4.1%;
  --popover-foreground: 210 20% 98%;

  --card: 224 71.4% 4.1%;
  --card-foreground: 210 20% 98%;

  --border: 215 27.9% 16.9%;
  --input: 215 27.9% 16.9%;

  --primary: 210 20% 98%;
  --primary-foreground: 220.9 39.3% 11%;

  --secondary: 215 27.9% 16.9%;
  --secondary-foreground: 210 20% 98%;

  --accent: 215 27.9% 16.9%;
  --accent-foreground: 210 20% 98%;

  --destructive: 0 62.8% 30.6%;
  --destructive-foreground: 210 20% 98%;

  --ring: 216 12.2% 83.9%;
}

.theme-neutral {
  --background: 0 0% 100%;
  --foreground: 0 0% 3.9%;

  --muted: 0 0% 96.1%;
  --muted-foreground: 0 0% 45.1%;

  --popover: 0 0% 100%;
  --popover-foreground: 0 0% 3.9%;

  --card: 0 0% 100%;
  --card-foreground: 0 0% 3.9%;

  --border: 0 0% 89.8%;
  --input: 0 0% 89.8%;

  --primary: 0 0% 9%;
  --primary-foreground: 0 0% 98%;

  --secondary: 0 0% 96.1%;
  --secondary-foreground: 0 0% 9%;

  --accent: 0 0% 96.1%;
  --accent-foreground: 0 0% 9%;

  --destructive: 0 84.2% 60.2%;
  --destructive-foreground: 0 0% 98%;

  --ring: 0 0% 3.9%;

  --radius: ;
}

.dark .theme-neutral {
  --background: 0 0% 3.9%;
  --foreground: 0 0% 98%;

  --muted: 0 0% 14.9%;
  --muted-foreground: 0 0% 63.9%;

  --popover: 0 0% 3.9%;
  --popover-foreground: 0 0% 98%;

  --card: 0 0% 3.9%;
  --card-foreground: 0 0% 98%;

  --border: 0 0% 14.9%;
  --input: 0 0% 14.9%;

  --primary: 0 0% 98%;
  --primary-foreground: 0 0% 9%;

  --secondary: 0 0% 14.9%;
  --secondary-foreground: 0 0% 98%;

  --accent: 0 0% 14.9%;
  --accent-foreground: 0 0% 98%;

  --destructive: 0 62.8% 30.6%;
  --destructive-foreground: 0 0% 98%;

  --ring: 0 0% 83.1%;
}

.theme-red {
  --background: 0 0% 100%;
  --foreground: 0 0% 3.9%;

  --muted: 0 0% 96.1%;
  --muted-foreground: 0 0% 45.1%;

  --popover: 0 0% 100%;
  --popover-foreground: 0 0% 3.9%;

  --card: 0 0% 100%;
  --card-foreground: 0 0% 3.9%;

  --border: 0 0% 89.8%;
  --input: 0 0% 89.8%;

  --primary: 0 72.2% 50.6%;
  --primary-foreground: 0 85.7% 97.3%;

  --secondary: 0 0% 96.1%;
  --secondary-foreground: 0 0% 9%;

  --accent: 0 0% 96.1%;
  --accent-foreground: 0 0% 9%;

  --destructive: 0 84.2% 60.2%;
  --destructive-foreground: 0 0% 98%;

  --ring: 0 72.2% 50.6%;

  --radius: 0.4rem;
}

.dark .theme-red {
  --background: 0 0% 3.9%;
  --foreground: 0 0% 98%;

  --muted: 0 0% 14.9%;
  --muted-foreground: 0 0% 63.9%;

  --popover: 0 0% 3.9%;
  --popover-foreground: 0 0% 98%;

  --card: 0 0% 3.9%;
  --card-foreground: 0 0% 98%;

  --border: 0 0% 14.9%;
  --input: 0 0% 14.9%;

  --primary: 0 72.2% 50.6%;
  --primary-foreground: 0 85.7% 97.3%;

  --secondary: 0 0% 14.9%;
  --secondary-foreground: 0 0% 98%;

  --accent: 0 0% 14.9%;
  --accent-foreground: 0 0% 98%;

  --destructive: 0 62.8% 30.6%;
  --destructive-foreground: 0 0% 98%;

  --ring: 0 72.2% 50.6%;
}

.theme-rose {
  --background: 0 0% 100%;
  --foreground: 240 10% 3.9%;

  --muted: 240 4.8% 95.9%;
  --muted-foreground: 240 3.8% 46.1%;

  --popover: 0 0% 100%;
  --popover-foreground: 240 10% 3.9%;

  --card: 0 0% 100%;
  --card-foreground: 240 10% 3.9%;

  --border: 240 5.9% 90%;
  --input: 240 5.9% 90%;

  --primary: 346.8 77.2% 49.8%;
  --primary-foreground: 355.7 100% 97.3%;

  --secondary: 240 4.8% 95.9%;
  --secondary-foreground: 240 5.9% 10%;

  --accent: 240 4.8% 95.9%;
  --accent-foreground: 240 5.9% 10%;

  --destructive: 0 84.2% 60.2%;
  --destructive-foreground: 0 0% 98%;

  --ring: 346.8 77.2% 49.8%;

  --radius: 0.5rem;
}

.dark .theme-rose {
  --background: 20 14.3% 4.1%;
  --foreground: 0 0% 95%;

  --muted: 0 0% 15%;
  --muted-foreground: 240 5% 64.9%;

  --popover: 0 0% 9%;
  --popover-foreground: 0 0% 95%;

  --card: 24 9.8% 10%;
  --card-foreground: 0 0% 95%;

  --border: 240 3.7% 15.9%;
  --input: 240 3.7% 15.9%;

  --primary: 346.8 77.2% 49.8%;
  --primary-foreground: 355.7 100% 97.3%;

  --secondary: 240 3.7% 15.9%;
  --secondary-foreground: 0 0% 98%;

  --accent: 12 6.5% 15.1%;
  --accent-foreground: 0 0% 98%;

  --destructive: 0 62.8% 30.6%;
  --destructive-foreground: 0 85.7% 97.3%;

  --ring: 346.8 77.2% 49.8%;
}

.theme-orange {
  --background: 0 0% 100%;
  --foreground: 20 14.3% 4.1%;

  --muted: 60 4.8% 95.9%;
  --muted-foreground: 25 5.3% 44.7%;

  --popover: 0 0% 100%;
  --popover-foreground: 20 14.3% 4.1%;

  --card: 0 0% 100%;
  --card-foreground: 20 14.3% 4.1%;

  --border: 20 5.9% 90%;
  --input: 20 5.9% 90%;

  --primary: 24.6 95% 53.1%;
  --primary-foreground: 60 9.1% 97.8%;

  --secondary: 60 4.8% 95.9%;
  --secondary-foreground: 24 9.8% 10%;

  --accent: 60 4.8% 95.9%;
  --accent-foreground: 24 9.8% 10%;

  --destructive: 0 84.2% 60.2%;
  --destructive-foreground: 60 9.1% 97.8%;

  --ring: 24.6 95% 53.1%;

  --radius: 0.95rem;
}

.dark .theme-orange {
  --background: 20 14.3% 4.1%;
  --foreground: 60 9.1% 97.8%;

  --muted: 12 6.5% 15.1%;
  --muted-foreground: 24 5.4% 63.9%;

  --popover: 20 14.3% 4.1%;
  --popover-foreground: 60 9.1% 97.8%;

  --card: 20 14.3% 4.1%;
  --card-foreground: 60 9.1% 97.8%;

  --border: 12 6.5% 15.1%;
  --input: 12 6.5% 15.1%;

  --primary: 20.5 90.2% 48.2%;
  --primary-foreground: 60 9.1% 97.8%;

  --secondary: 12 6.5% 15.1%;
  --secondary-foreground: 60 9.1% 97.8%;

  --accent: 12 6.5% 15.1%;
  --accent-foreground: 60 9.1% 97.8%;

  --destructive: 0 72.2% 50.6%;
  --destructive-foreground: 60 9.1% 97.8%;

  --ring: 20.5 90.2% 48.2%;
}

.theme-green {
  --background: 0 0% 100%;
  --foreground: 240 10% 3.9%;

  --muted: 240 4.8% 95.9%;
  --muted-foreground: 240 3.8% 46.1%;

  --popover: 0 0% 100%;
  --popover-foreground: 240 10% 3.9%;

  --card: 0 0% 100%;
  --card-foreground: 240 10% 3.9%;

  --border: 240 5.9% 90%;
  --input: 240 5.9% 90%;

  --primary: 142.1 76.2% 36.3%;
  --primary-foreground: 355.7 100% 97.3%;

  --secondary: 240 4.8% 95.9%;
  --secondary-foreground: 240 5.9% 10%;

  --accent: 240 4.8% 95.9%;
  --accent-foreground: 240 5.9% 10%;

  --destructive: 0 84.2% 60.2%;
  --destructive-foreground: 0 0% 98%;

  --ring: 142.1 76.2% 36.3%;

  --radius: ;
}

.dark .theme-green {
  --background: 20 14.3% 4.1%;
  --foreground: 0 0% 95%;

  --muted: 0 0% 15%;
  --muted-foreground: 240 5% 64.9%;

  --popover: 0 0% 9%;
  --popover-foreground: 0 0% 95%;

  --card: 24 9.8% 10%;
  --card-foreground: 0 0% 95%;

  --border: 240 3.7% 15.9%;
  --input: 240 3.7% 15.9%;

  --primary: 142.1 70.6% 45.3%;
  --primary-foreground: 144.9 80.4% 10%;

  --secondary: 240 3.7% 15.9%;
  --secondary-foreground: 0 0% 98%;

  --accent: 12 6.5% 15.1%;
  --accent-foreground: 0 0% 98%;

  --destructive: 0 62.8% 30.6%;
  --destructive-foreground: 0 85.7% 97.3%;

  --ring: 142.4 71.8% 29.2%;
}

.theme-blue {
  --background: 0 0% 100%;
  --foreground: 222.2 84% 4.9%;

  --muted: 210 40% 96.1%;
  --muted-foreground: 215.4 16.3% 46.9%;

  --popover: 0 0% 100%;
  --popover-foreground: 222.2 84% 4.9%;

  --card: 0 0% 100%;
  --card-foreground: 222.2 84% 4.9%;

  --border: 214.3 31.8% 91.4%;
  --input: 214.3 31.8% 91.4%;

  --primary: 221.2 83.2% 53.3%;
  --primary-foreground: 210 40% 98%;

  --secondary: 210 40% 96.1%;
  --secondary-foreground: 222.2 47.4% 11.2%;

  --accent: 210 40% 96.1%;
  --accent-foreground: 222.2 47.4% 11.2%;

  --destructive: 0 84.2% 60.2%;
  --destructive-foreground: 210 40% 98%;

  --ring: 221.2 83.2% 53.3%;

  --radius: ;
}

.dark .theme-blue {
  --background: 222.2 84% 4.9%;
  --foreground: 210 40% 98%;

  --muted: 217.2 32.6% 17.5%;
  --muted-foreground: 215 20.2% 65.1%;

  --popover: 222.2 84% 4.9%;
  --popover-foreground: 210 40% 98%;

  --card: 222.2 84% 4.9%;
  --card-foreground: 210 40% 98%;

  --border: 217.2 32.6% 17.5%;
  --input: 217.2 32.6% 17.5%;

  --primary: 217.2 91.2% 59.8%;
  --primary-foreground: 222.2 47.4% 11.2%;

  --secondary: 217.2 32.6% 17.5%;
  --secondary-foreground: 210 40% 98%;

  --accent: 217.2 32.6% 17.5%;
  --accent-foreground: 210 40% 98%;

  --destructive: 0 62.8% 30.6%;
  --destructive-foreground: 210 40% 98%;

  --ring: 224.3 76.3% 48%;
}

.theme-yellow {
  --background: 0 0% 100%;
  --foreground: 20 14.3% 4.1%;

  --muted: 60 4.8% 95.9%;
  --muted-foreground: 25 5.3% 44.7%;

  --popover: 0 0% 100%;
  --popover-foreground: 20 14.3% 4.1%;

  --card: 0 0% 100%;
  --card-foreground: 20 14.3% 4.1%;

  --border: 20 5.9% 90%;
  --input: 20 5.9% 90%;

  --primary: 47.9 95.8% 53.1%;
  --primary-foreground: 26 83.3% 14.1%;

  --secondary: 60 4.8% 95.9%;
  --secondary-foreground: 24 9.8% 10%;

  --accent: 60 4.8% 95.9%;
  --accent-foreground: 24 9.8% 10%;

  --destructive: 0 84.2% 60.2%;
  --destructive-foreground: 60 9.1% 97.8%;

  --ring: 20 14.3% 4.1%;

  --radius: 0.95rem;
}

.dark .theme-yellow {
  --background: 20 14.3% 4.1%;
  --foreground: 60 9.1% 97.8%;

  --muted: 12 6.5% 15.1%;
  --muted-foreground: 24 5.4% 63.9%;

  --popover: 20 14.3% 4.1%;
  --popover-foreground: 60 9.1% 97.8%;

  --card: 20 14.3% 4.1%;
  --card-foreground: 60 9.1% 97.8%;

  --border: 12 6.5% 15.1%;
  --input: 12 6.5% 15.1%;

  --primary: 47.9 95.8% 53.1%;
  --primary-foreground: 26 83.3% 14.1%;

  --secondary: 12 6.5% 15.1%;
  --secondary-foreground: 60 9.1% 97.8%;

  --accent: 12 6.5% 15.1%;
  --accent-foreground: 60 9.1% 97.8%;

  --destructive: 0 62.8% 30.6%;
  --destructive-foreground: 60 9.1% 97.8%;

  --ring: 35.5 91.7% 32.9%;
}

.theme-violet {
  --background: 0 0% 100%;
  --foreground: 224 71.4% 4.1%;

  --muted: 220 14.3% 95.9%;
  --muted-foreground: 220 8.9% 46.1%;

  --popover: 0 0% 100%;
  --popover-foreground: 224 71.4% 4.1%;

  --card: 0 0% 100%;
  --card-foreground: 224 71.4% 4.1%;

  --border: 220 13% 91%;
  --input: 220 13% 91%;

  --primary: 262.1 83.3% 57.8%;
  --primary-foreground: 210 20% 98%;

  --secondary: 220 14.3% 95.9%;
  --secondary-foreground: 220.9 39.3% 11%;

  --accent: 220 14.3% 95.9%;
  --accent-foreground: 220.9 39.3% 11%;

  --destructive: 0 84.2% 60.2%;
  --destructive-foreground: 210 20% 98%;

  --ring: 262.1 83.3% 57.8%;

  --radius: ;
}

.dark .theme-violet {
  --background: 224 71.4% 4.1%;
  --foreground: 210 20% 98%;

  --muted: 215 27.9% 16.9%;
  --muted-foreground: 217.9 10.6% 64.9%;

  --popover: 224 71.4% 4.1%;
  --popover-foreground: 210 20% 98%;

  --card: 224 71.4% 4.1%;
  --card-foreground: 210 20% 98%;

  --border: 215 27.9% 16.9%;
  --input: 215 27.9% 16.9%;

  --primary: 263.4 70% 50.4%;
  --primary-foreground: 210 20% 98%;

  --secondary: 215 27.9% 16.9%;
  --secondary-foreground: 210 20% 98%;

  --accent: 215 27.9% 16.9%;
  --accent-foreground: 210 20% 98%;

  --destructive: 0 62.8% 30.6%;
  --destructive-foreground: 210 20% 98%;

  --ring: 263.4 70% 50.4%;
}
</file>

<file path="public/schema/registry-item.json">
{
  "$schema": "https://json-schema.org/draft-07/schema#",
  "type": "object",
  "properties": {
    "name": {
      "type": "string"
    },
    "type": {
      "type": "string",
      "enum": ["registry:lib", "registry:block", "registry:component", "registry:ui", "registry:hook", "registry:theme", "registry:page", "registry:file"]
    },
    "description": {
      "type": "string"
    },
    "title": {
      "type": "string"
    },
    "author": {
      "type": "string"
    },
    "dependencies": {
      "type": "array",
      "items": {
        "type": "string"
      }
    },
    "devDependencies": {
      "type": "array",
      "items": {
        "type": "string"
      }
    },
    "registryDependencies": {
      "type": "array",
      "items": {
        "type": "string"
      }
    },
    "files": {
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "path": {
            "type": "string"
          },
          "content": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": ["registry:lib", "registry:block", "registry:component", "registry:ui", "registry:hook", "registry:theme", "registry:page", "registry:file"]
          },
          "target": {
            "type": "string"
          }
        },
        "if": {
          "properties": {
            "type": {
              "enum": ["registry:file", "registry:page"]
            }
          }
        },
        "then": {
          "required": ["path", "type", "target"]
        },
        "else": {
          "required": ["path", "type"]
        }
      }
    },
    "tailwind": {
      "type": "object",
      "properties": {
        "config": {
          "type": "object",
          "properties": {
            "content": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "theme": {
              "type": "object",
              "additionalProperties": true
            },
            "plugins": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        }
      }
    },
    "cssVars": {
      "type": "object",
      "properties": {
        "light": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "dark": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "meta": {
      "type": "object",
      "additionalProperties": true
    },
    "docs": {
      "type": "string"
    },
    "categories": {
      "type": "array",
      "items": {
        "type": "string"
      }
    }
  },
  "required": ["name", "type"]
}
</file>

<file path="public/registry.json">
{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "type": "object",
  "properties": {
    "name": {
      "type": "string"
    },
    "type": {
      "type": "string",
      "enum": ["registry:lib", "registry:block", "registry:component", "registry:ui", "registry:hook", "registry:theme", "registry:page", "registry:file"]
    },
    "description": {
      "type": "string"
    },
    "title": {
      "type": "string"
    },
    "author": {
      "type": "string"
    },
    "dependencies": {
      "type": "array",
      "items": {
        "type": "string"
      }
    },
    "devDependencies": {
      "type": "array",
      "items": {
        "type": "string"
      }
    },
    "registryDependencies": {
      "type": "array",
      "items": {
        "type": "string"
      }
    },
    "files": {
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "path": {
            "type": "string"
          },
          "content": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": ["registry:lib", "registry:block", "registry:component", "registry:ui", "registry:hook", "registry:theme", "registry:page"]
          },
          "target": {
            "type": "string"
          }
        },
        "required": ["path", "type"]
      }
    },
    "tailwind": {
      "type": "object",
      "properties": {
        "config": {
          "type": "object",
          "properties": {
            "content": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "theme": {
              "type": "object",
              "additionalProperties": true
            },
            "plugins": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        }
      }
    },
    "cssVars": {
      "type": "object",
      "properties": {
        "light": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "dark": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "meta": {
      "type": "object",
      "additionalProperties": true
    },
    "docs": {
      "type": "string"
    },
    "categories": {
      "type": "array",
      "items": {
        "type": "string"
      }
    }
  },
  "required": ["name", "type"]
}
</file>

<file path="registry/default/blocks/bento-01/components/animated-emoji.tsx">
"use client";

import Image from "next/image";

const AnimatedEmoji = () => {
  return (
    <div className="flex h-full  w-full  items-center justify-center">
      <Image
        alt="Animated Emoji"
        height={150}
        src="https://raw.githubusercontent.com/Tarikul-Islam-Anik/Animated-Fluent-Emojis/master/Emojis/Smilies/Smiling%20Cat%20with%20Heart-Eyes.png"
        width={150}
      />
    </div>
  );
};

export default AnimatedEmoji;
</file>

<file path="registry/default/blocks/bento-01/components/logo.tsx">
import * as React from "react";
const Logo = ({ className, ...props }: any) => (
  <svg
    xmlns="http://www.w3.org/2000/svg"
    width={101}
    height={23}
    fill="none"
    className={className}
    viewBox="0 0 414 90"
    {...props}
  >
    <path
      fill="url(#a)"
      d="M402.614 90c-3.338 0-6.082-.964-8.232-2.893-2.077-2.002-3.115-4.45-3.115-7.342 0-2.967 1.038-5.451 3.115-7.454 2.15-2.002 4.894-3.003 8.232-3.003 3.263 0 5.933 1 8.01 3.003 2.151 2.003 3.226 4.487 3.226 7.454 0 2.892-1.075 5.34-3.226 7.342-2.077 1.929-4.747 2.893-8.01 2.893Z"
    />
    <path
      className="fill-black dark:fill-white"
      fillRule="evenodd"
      d="M314.426 57.96c0-6.378 1.187-11.977 3.56-16.798 2.448-4.82 5.748-8.529 9.901-11.125 4.154-2.596 8.789-3.893 13.906-3.893 4.376 0 8.196.89 11.459 2.67 3.337 1.78 5.896 4.116 7.676 7.008v-8.789h19.023V89.11h-19.023v-8.789c-1.854 2.893-4.45 5.23-7.787 7.009-3.264 1.78-7.083 2.67-11.459 2.67-5.043 0-9.641-1.298-13.795-3.894-4.153-2.67-7.453-6.415-9.901-11.236-2.373-4.895-3.56-10.531-3.56-16.91Zm46.502.112c0-4.747-1.335-8.492-4.005-11.236-2.596-2.744-5.785-4.117-9.567-4.117-3.783 0-7.009 1.373-9.679 4.117-2.596 2.67-3.894 6.378-3.894 11.125 0 4.746 1.298 8.529 3.894 11.347 2.67 2.744 5.896 4.116 9.679 4.116 3.782 0 6.971-1.372 9.567-4.116 2.67-2.744 4.005-6.49 4.005-11.236ZM304.423 6.785V89.11h-19.024V6.785h19.024ZM262.157 20.58c-3.338 0-6.082-.963-8.232-2.891-2.077-2.003-3.115-4.45-3.115-7.343 0-2.967 1.038-5.414 3.115-7.342C256.075 1 258.819 0 262.157 0c3.263 0 5.933 1.001 8.01 3.004 2.151 1.928 3.226 4.375 3.226 7.342 0 2.893-1.075 5.34-3.226 7.343-2.077 1.928-4.747 2.892-8.01 2.892Zm9.456 6.453V89.11H252.59V27.033h19.023ZM215.452 26.365c7.268 0 13.053 2.373 17.355 7.12 4.375 4.672 6.563 11.125 6.563 19.357V89.11h-18.912V55.401c0-4.153-1.075-7.38-3.226-9.679-2.151-2.299-5.043-3.448-8.678-3.448-3.634 0-6.526 1.15-8.677 3.448-2.151 2.3-3.226 5.526-3.226 9.679v33.708h-19.024V27.033h19.024v8.232c1.928-2.744 4.524-4.895 7.787-6.452 3.264-1.632 6.935-2.448 11.014-2.448ZM98.34 57.96c0-6.378 1.186-11.977 3.56-16.798 2.447-4.82 5.748-8.529 9.901-11.125s8.788-3.893 13.906-3.893c4.376 0 8.195.89 11.458 2.67 3.338 1.78 5.897 4.116 7.677 7.008v-8.789h19.023V89.11h-19.023v-8.789c-1.855 2.893-4.45 5.23-7.788 7.009-3.263 1.78-7.083 2.67-11.458 2.67-5.044 0-9.642-1.298-13.795-3.894-4.153-2.67-7.454-6.415-9.901-11.236-2.374-4.895-3.56-10.531-3.56-16.91Zm46.502.112c0-4.747-1.335-8.492-4.005-11.236-2.596-2.744-5.785-4.117-9.568-4.117-3.782 0-7.008 1.373-9.678 4.117-2.596 2.67-3.894 6.378-3.894 11.125 0 4.746 1.298 8.529 3.894 11.347 2.67 2.744 5.896 4.116 9.678 4.116 3.783 0 6.972-1.372 9.568-4.116 2.67-2.744 4.005-6.49 4.005-11.236ZM88.442 11.012v78.096H69.42V42.272L51.953 89.108H36.6L19.023 42.16v46.947H0V11.012h22.472l21.916 54.066 21.693-54.066h22.361Z"
    />
    <defs>
      <linearGradient
        id="a"
        x1={383.781}
        x2={415.001}
        y1={73.954}
        y2={77.277}
        gradientUnits="userSpaceOnUse"
      >
        <stop stopColor="#6557FF" />
        <stop offset={0.453} stopColor="#AA3FFF" />
        <stop offset={1} stopColor="#F8522E" />
      </linearGradient>
    </defs>
  </svg>
);
export default Logo;
</file>

<file path="registry/default/blocks/bento-01/hooks/useAnimation.tsx">
// animations.js

"use client";
import { motion, useInView } from "framer-motion";
import { useRef } from "react";

// Fungsi untuk mengekspor semua animasi hooks
function useCardIdentityAnimation() {
  const ref = useRef(null);
  const isInView = useInView(ref, { once: true, amount: 0.3 });

  return {
    ref,
    variants: {
      hidden: { opacity: 0, x: -100 },
      visible: {
        opacity: [0, 0.2, 0.8, 1],
        x: 0,
        transition: { duration: 0.5, delay: 0.1 },
      },
    },
    initial: "hidden",
    animate: isInView ? "visible" : "hidden",
  };
}

function useVerticalCardAnimation() {
  const ref = useRef(null);
  const isInView = useInView(ref, { once: true, amount: 0.3 });

  return {
    ref,
    variants: {
      hidden: { opacity: 0, y: -100 },
      visible: {
        opacity: [0, 0.2, 0.8, 1],
        y: 0,
        transition: { duration: 0.5, delay: 0.2 },
      },
    },
    initial: "hidden",
    animate: isInView ? "visible" : "hidden",
  };
}

function useQuoteCardAnimation() {
  const ref = useRef(null);
  const isInView = useInView(ref, { once: true, amount: 0.3 });

  return {
    ref,
    variants: {
      hidden: { opacity: 0, x: 100 },
      visible: {
        opacity: [0, 0.2, 0.8, 1],
        x: 0,
        transition: { duration: 0.5, delay: 0.3 },
      },
    },
    initial: "hidden",
    animate: isInView ? "visible" : "hidden",
  };
}

function useCardSloganAnimation() {
  const ref = useRef(null);
  const isInView = useInView(ref, { once: true, amount: 0.3 });

  return {
    ref,
    variants: {
      hidden: { opacity: 0, x: -100 },
      visible: {
        opacity: [0, 0.2, 0.8, 1],
        x: 0,
        transition: { duration: 0.5, delay: 0.5 },
      },
    },
    initial: "hidden",
    animate: isInView ? "visible" : "hidden",
  };
}

function useCardProductAnimation() {
  const ref = useRef(null);
  const isInView = useInView(ref, { once: true, amount: 0.3 });

  return {
    ref,
    variants: {
      hidden: { opacity: 0, x: 100 },
      visible: {
        opacity: [0, 0.2, 0.8, 1],
        x: 0,
        transition: { duration: 0.5, delay: 0.5 },
      },
    },
    initial: "hidden",
    animate: isInView ? "visible" : "hidden",
  };
}

export const useMobileAnimation = () => {
  const ref = useRef(null);
  const isInView = useInView(ref, { once: true, amount: 0.3 });

  return {
    ref,
    variants: {
      hidden: { opacity: 0 },
      visible: {
        opacity: 1,
        transition: { duration: 0.5, delay: 0.2 },
      },
    },
    initial: "hidden",
    animate: isInView ? "visible" : "hidden",
  };
};

export const useAnimations = () => ({
  cardIdentity: useCardIdentityAnimation(),
  cardSlogan: useCardSloganAnimation(),
  cardProduct: useCardProductAnimation(),
  verticalCard: useVerticalCardAnimation(),
  quoteCard: useQuoteCardAnimation(),
});
</file>

<file path="registry/default/blocks/card-02/components/pricing-card.tsx">
"use client";

import * as React from "react";
import { BadgeCheck, ArrowRight } from "lucide-react";
import { cn } from "@/lib/utils";
import { Badge } from "@/components/ui/badge";
import { Card } from "@/components/ui/card";
import { TextureButton } from "@/components/ui/texture-button";

export interface PricingTier {
  name: string;
  price: number;
  description: string;
  features: string[];
  cta: string;
  linear?: boolean;
  default?: boolean;
}

interface PricingCardProps {
  tier: PricingTier;
  paymentFrequency: string;
}

export function PricingCard({ tier }: PricingCardProps) {
  const isLinear = tier.linear;
  const isDefault = tier.default;

  return (
    <Card
      className={cn(
        "relative w-96 overflow-hidden border border-white/60 dark:border-stone-950/60",
        "bg-gradient-to-b from-neutral-100 to-white/70 dark:from-neutral-800 dark:to-neutral-900",
        isLinear ? "text-primary" : "text-primary",
        isDefault && "ring-2 ring-primary",
        "bg-background/5",
        "bg-gradient-to-br from-black/5 to-black/[0.02] dark:from-white/5 dark:to-white/[0.02]",
        "backdrop-blur-xl backdrop-saturate-[180%]",
        "border border-black/10 dark:border-white/10",
        "shadow-[0_8px_16px_rgb(0_0_0_/_0.15)] dark:shadow-[0_8px_16px_rgb(0_0_0_/_0.25)]",
        "translate-z-0 will-change-transform",
      )}
    >
      {isLinear && <LinearBackground />}
      {isDefault && <DefaultBackground />}

      <div
        className={cn(
          "relative flex w-full flex-col gap-8 rounded-xl p-6",
          "bg-gradient-to-br from-black/[0.05] to-transparent dark:from-white/[0.08] dark:to-transparent",
          "backdrop-blur-md backdrop-saturate-150",
          "border border-black/[0.05] dark:border-white/[0.08]",

          "shadow-sm",
          "translate-z-0 will-change-transform",
          "before:pointer-events-none before:absolute before:inset-0 before:bg-gradient-to-br before:from-black/[0.02] before:to-black/[0.01] before:opacity-0 before:transition-opacity dark:before:from-white/[0.03] dark:before:to-white/[0.01]",
          "hover:before:opacity-100",
        )}
      >
        <h2 className="flex w-full items-center justify-between gap-3 text-xl font-medium capitalize">
          {tier.name}
          {isDefault && (
            <Badge variant="accent" className="z-10 p-1">
              30 days free trial
            </Badge>
          )}
        </h2>

        <div className="relative h-12">
          <>
            <span className="text-4xl font-medium">${tier.price}</span>
            <p className="-mt-2 text-xs text-muted-foreground">
              Per month/user
            </p>
          </>
        </div>
        <TextureButton variant="accent" className="w-full ">
          {tier.cta}
          <ArrowRight className="ml-2 h-4 w-4" />
        </TextureButton>

        <div className="flex-1 space-y-2 border-t border-primary/40 pt-6">
          <h3 className="text-sm font-medium">{tier.description}</h3>
          <ul className="space-y-2 text-primary">
            {tier.features.map((feature, index) => (
              <li
                key={index}
                className={cn(
                  "flex items-center gap-2 text-sm font-medium",
                  isLinear ? "text-primary" : "text-primary",
                )}
              >
                <BadgeCheck className="h-4 w-4" />
                {feature}
              </li>
            ))}
          </ul>
        </div>
      </div>
    </Card>
  );
}

const LinearBackground = () => (
  <div className="absolute inset-0 bg-[linear-gradient(to_right,#4f4f4f2e_1px,transparent_1px),linear-gradient(to_bottom,#4f4f4f2e_1px,transparent_1px)] bg-[size:45px_45px] [mask-image:radial-gradient(ellipse_80%_50%_at_50%_0%,#000_70%,transparent_110%)]" />
);

const DefaultBackground = () => (
  <div className="absolute inset-0 bg-[radial-gradient(ellipse_80%_80%_at_50%_-20%,rgba(120,119,198,0.1),rgba(255,255,255,0))]" />
);
</file>

<file path="registry/default/blocks/card-02/page.tsx">
import { PricingCard } from "./components/pricing-card";

const TIERS = [
  {
    name: "Teams",
    price: 12,
    description:
      "Highly recommended for small teams who seek to upgrade their time & perform",
    features: [
      "1 team",
      "Schedule meeting as team",
      "Collective events",
      "Team workflow",
    ],
    cta: "Get Started",
    linear: true,
    default: true,
  },
];

export default function Page() {
  return (
    <>
      <div className=" z-50  flex flex-1 justify-center gap-6 bg-background p-6 ">
        {TIERS.map((tier) => (
          <PricingCard key={tier.name} tier={tier} paymentFrequency="monthly" />
        ))}
      </div>
    </>
  );
}
</file>

<file path="registry/default/blocks/next-int/components/drawer.tsx">
"use client";

import * as React from "react";
import { Drawer as DrawerPrimitive } from "vaul";

import { cn } from "@/lib/utils";

const Drawer = ({
  shouldScaleBackground = true,
  ...props
}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (
  <DrawerPrimitive.Root
    shouldScaleBackground={shouldScaleBackground}
    {...props}
  />
);
Drawer.displayName = "Drawer";

const DrawerTrigger = DrawerPrimitive.Trigger;

const DrawerPortal = DrawerPrimitive.Portal;

const DrawerClose = DrawerPrimitive.Close;

const DrawerOverlay = React.forwardRef<
  React.ElementRef<typeof DrawerPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <DrawerPrimitive.Overlay
    ref={ref}
    className={cn("fixed inset-0 z-50 bg-black/80", className)}
    {...props}
  />
));
DrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName;

const DrawerContent = React.forwardRef<
  React.ElementRef<typeof DrawerPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <DrawerPortal>
    <DrawerOverlay />
    <DrawerPrimitive.Content
      ref={ref}
      className={cn(
        "fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background",
        className,
      )}
      {...props}
    >
      <div className="mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted" />
      {children}
    </DrawerPrimitive.Content>
  </DrawerPortal>
));
DrawerContent.displayName = "DrawerContent";

const DrawerHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn("grid gap-1.5 p-4 text-center sm:text-left", className)}
    {...props}
  />
);
DrawerHeader.displayName = "DrawerHeader";

const DrawerFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn("mt-auto flex flex-col gap-2 p-4", className)}
    {...props}
  />
);
DrawerFooter.displayName = "DrawerFooter";

const DrawerTitle = React.forwardRef<
  React.ElementRef<typeof DrawerPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>
>(({ className, ...props }, ref) => (
  <DrawerPrimitive.Title
    ref={ref}
    className={cn(
      "text-lg font-semibold leading-none tracking-tight",
      className,
    )}
    {...props}
  />
));
DrawerTitle.displayName = DrawerPrimitive.Title.displayName;

const DrawerDescription = React.forwardRef<
  React.ElementRef<typeof DrawerPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>
>(({ className, ...props }, ref) => (
  <DrawerPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
));
DrawerDescription.displayName = DrawerPrimitive.Description.displayName;

export {
  Drawer,
  DrawerPortal,
  DrawerOverlay,
  DrawerTrigger,
  DrawerClose,
  DrawerContent,
  DrawerHeader,
  DrawerFooter,
  DrawerTitle,
  DrawerDescription,
};
</file>

<file path="registry/default/blocks/next-int/components/marquee.tsx">
import { cn } from "@/lib/utils";

interface MarqueeProps {
  className?: string;
  reverse?: boolean;
  pauseOnHover?: boolean;
  children?: React.ReactNode;
  vertical?: boolean;
  repeat?: number;
  [key: string]: any;
}

export function Marquee({
  className,
  reverse,
  pauseOnHover = false,
  children,
  vertical = false,
  repeat = 4,
  ...props
}: MarqueeProps) {
  return (
    <div
      {...props}
      className={cn(
        "group flex overflow-hidden p-2 [--duration:40s] [--gap:1rem] [gap:var(--gap)]",
        {
          "flex-row": !vertical,
          "flex-col": vertical,
        },
        className,
      )}
    >
      {Array(repeat)
        .fill(0)
        .map((_, i) => (
          <div
            key={i}
            className={cn("flex shrink-0 justify-around [gap:var(--gap)]", {
              "animate-marquee flex-row": !vertical,
              "animate-marquee-vertical flex-col": vertical,
              "group-hover:[animation-play-state:paused]": pauseOnHover,
              "[animation-direction:reverse]": reverse,
            })}
          >
            {children}
          </div>
        ))}
    </div>
  );
}
</file>

<file path="registry/default/blocks/next-int/components/navbar.tsx">
import React from "react";
import { motion, useMotionTemplate, useMotionValue } from "framer-motion";
import Link from "next/link";
import { usePathname } from "next/navigation";
import { cn } from "@/lib/utils";

function NavItem({
  href,
  children,
}: {
  href: string;
  children: React.ReactNode;
}) {
  const pathname = usePathname();
  const isActive = pathname === href;

  return (
    <li>
      <Link
        href="/"
        className={`relative block whitespace-nowrap px-3 py-2 transition ${isActive ? "text-lime-600 dark:text-lime-400" : "hover:text-lime-600 dark:hover:text-lime-400"}`}
      >
        {children}
        {isActive && (
          <motion.span
            className="absolute inset-x-1 -bottom-px h-px bg-gradient-to-r from-lime-700/0 via-lime-700/70 to-lime-700/0 dark:from-lime-400/0 dark:via-lime-400/40 dark:to-lime-400/0"
            layoutId="active-nav-item"
          />
        )}
      </Link>
    </li>
  );
}

function Desktop({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) {
  const mouseX = useMotionValue(0);
  const mouseY = useMotionValue(0);
  const radius = useMotionValue(0);
  const handleMouseMove = React.useCallback(
    ({ clientX, clientY, currentTarget }: React.MouseEvent) => {
      const bounds = currentTarget.getBoundingClientRect();
      mouseX.set(clientX - bounds.left);
      mouseY.set(clientY - bounds.top);
      radius.set(Math.sqrt(bounds.width ** 2 + bounds.height ** 2) / 2.5);
    },
    [mouseX, mouseY, radius],
  );
  const background = useMotionTemplate`radial-gradient(${radius}px circle at ${mouseX}px ${mouseY}px, var(--spotlight-color) 0%, transparent 65%)`;

  return (
    <nav
      onMouseMove={handleMouseMove}
      className={cn(
        "group relative",
        "rounded-full bg-background",
        "shadow-lg shadow-zinc-800/5 ring-1 ring-zinc-900/5 backdrop-blur-md",
        // "dark:from-zinc-900/70 dark:to-zinc-800/90 dark:ring-zinc-100/10",
        "[--spotlight-color:rgb(236_252_203_/_0.6)] ",
        className,
      )}
      {...props}
    >
      {/* Spotlight overlay */}
      <motion.div
        className="pointer-events-none absolute -inset-px rounded-full opacity-0 transition-opacity duration-500 group-hover:opacity-100"
        style={{ background }}
        aria-hidden="true"
      />

      <ul className="flex bg-transparent px-3 text-sm font-medium text-primary ">
        {navigationItems.map(({ href, text }) => (
          <NavItem key={href} href={href}>
            {text}
          </NavItem>
        ))}
      </ul>
    </nav>
  );
}
// keknya bagian mobiele kita buat bentuk Tirana aja, dengan catatan ada animasi x close
// namun saat dipanggil tetap kaya cali.so

export const navigationItems = [
  { href: "/", text: "About" },
  { href: "/", text: "Service" },
  { href: "/", text: "Testimonial" },
  { href: "/", text: "Projects" },
];

export const NavigationBar = {
  Desktop,
} as const;
</file>

<file path="registry/default/blocks/portofolio-02/components/highlight.tsx">
import {
  LinkIcon,
  MapPinIcon,
  MailIcon,
  BriefcaseBusinessIcon,
  CodeXmlIcon,
  LightbulbIcon,
  PhoneIcon,
} from "lucide-react";

import { USER } from "../data/USER";
import { Panel, PanelContent } from "./panel";
import { IntroItem } from "./intro-item";

export function Highlight() {
  return (
    <Panel>
      <h2 className="sr-only">Overview</h2>

      <PanelContent className="space-y-2">
        {USER.jobs.map((job, index) => {
          return (
            <JobItem
              key={index}
              title={job.title}
              company={job.company}
              website={job.website}
            />
          );
        })}

        <IntroItem icon={<MapPinIcon />} content={USER.address} />

        <PhoneItem phoneNumber={USER.phoneNumber} />

        <EmailItem email={USER.email} />

        <IntroItem
          icon={<LinkIcon />}
          content={USER.website}
          href={USER.website}
        />
      </PanelContent>
    </Panel>
  );
}

function EmailItem({ email }: { email: string }) {
  return <IntroItem icon={<MailIcon />} content={email} href="#" />;
}

function getJobIcon(title: string) {
  if (/(developer|engineer)/i.test(title)) {
    return <CodeXmlIcon />;
  }

  if (/(founder|co-founder)/i.test(title)) {
    return <LightbulbIcon />;
  }

  return <BriefcaseBusinessIcon />;
}

export function JobItem({
  title,
  company,
  website,
}: {
  title: string;
  company: string;
  website: string;
}) {
  return (
    <IntroItem
      icon={getJobIcon(title)}
      content={
        <>
          {title} @
          <a
            className="ml-0.5"
            href={website}
            target="_blank"
            rel="noopener noreferrer"
          >
            {company}
          </a>
        </>
      }
    />
  );
}

export function PhoneItem({ phoneNumber }: { phoneNumber: string }) {
  return <IntroItem icon={<PhoneIcon />} content={phoneNumber} href="/" />;
}
</file>

<file path="registry/default/blocks/portofolio-02/components/intro-item.tsx">
import { JSX } from "react";

export function IntroItem({
  icon,
  content,
  href,
}: {
  icon: JSX.Element;
  content: React.ReactNode;
  href?: string;
}) {
  const isLink = !!href;

  return (
    <div className="flex items-center gap-4 font-mono text-sm [&_svg:not([class*='size-'])]:size-4 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg]:text-muted-foreground">
      {icon}

      <p className="text-balance">
        {isLink ? (
          <a
            className="underline-offset-4 hover:underline"
            href={href}
            target="_blank"
            rel="noopener noreferrer"
          >
            {content}
          </a>
        ) : (
          content
        )}
      </p>
    </div>
  );
}
</file>

<file path="registry/default/blocks/portofolio-02/components/panel.tsx">
import { Slot } from "@radix-ui/react-slot";
import React from "react";

import { cn } from "@/lib/utils";

type ProseProps = React.ComponentPropsWithoutRef<"div"> & {
  asChild?: boolean;
};

function Panel({ className, ...props }: React.ComponentProps<"section">) {
  return (
    <section
      data-slot="panel"
      className={cn(" screen-line-after border-grid border-x", className)}
      {...props}
    />
  );
}

function PanelHeader({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="panel-header"
      className={cn("r px-4", className)}
      {...props}
    />
  );
}

function PanelTitle({ className, asChild = false, ...props }: ProseProps) {
  const Comp = asChild ? Slot : "h2";

  return (
    <Comp
      data-slot="panel-title"
      className={cn("font-heading text-3xl font-medium", className)}
      {...props}
    />
  );
}

function PanelContent({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div data-slot="panel-body" className={cn("p-4", className)} {...props} />
  );
}

export { Panel, PanelContent, PanelHeader, PanelTitle };
</file>

<file path="registry/default/blocks/portofolio-02/components/tag.tsx">
import React from "react";

import { cn } from "@/lib/utils";

function Tag({ className, ...props }: React.ComponentProps<"span">) {
  return (
    <span
      className={cn(
        "inline-flex items-center rounded-lg border px-1.5 py-0.5 font-mono text-xs text-muted-foreground",
        className,
      )}
      {...props}
    />
  );
}

export { Tag };
</file>

<file path="registry/default/blocks/portofolio-02/components/typhography.tsx">
import { Slot } from "@radix-ui/react-slot";
import React from "react";

import { cn } from "@/lib/utils";

type ProseProps = React.ComponentPropsWithoutRef<"div"> & {
  asChild?: boolean;
};

function Prose({ className, asChild = false, ...props }: ProseProps) {
  const Comp = asChild ? Slot : "div";
  return (
    <Comp
      data-slot="prose"
      className={cn(
        "prose prose-sm prose-zinc dark:prose-invert max-w-none font-mono text-foreground",
        "prose-headings:font-heading prose-headings:font-medium prose-headings:text-balance",
        "prose-h2:border-b prose-h2:pb-2",
        "prose-lead:text-base",
        "prose-a:font-medium prose-a:break-words prose-a:text-foreground prose-a:underline prose-a:underline-offset-4",
        "prose-code:rounded prose-code:bg-muted prose-code:px-[0.3rem] prose-code:py-[0.2rem] prose-code:text-sm prose-code:font-normal prose-code:before:content-none prose-code:after:content-none",
        "prose-hr:border-grid",
        className,
      )}
      {...props}
    />
  );
}

function Code({ className, ...props }: React.ComponentProps<"code">) {
  const isCodeBlock = "data-language" in props;

  return (
    <code
      data-slot={isCodeBlock ? "code-block" : "code-inline"}
      className={cn(
        !isCodeBlock &&
          "rounded-md bg-muted px-[0.3rem] py-[0.2rem] font-mono text-sm",
        className,
      )}
      {...props}
    />
  );
}

export { Code, Prose };
</file>

<file path="registry/default/blocks/portofolio-02/type/career-path.ts">
export type CareerPathPositionIcon =
  | "code"
  | "design"
  | "education"
  | "business"
  | "school"
  | "idea";

export type CareerPathPosition = {
  id: string;
  title: string;
  year: string;
  employmentType?: string;
  description?: string;
  icon?: CareerPathPositionIcon;
  skills?: string[];
  expanded?: boolean;
};

export type CareerPath = {
  company: string;
  companyLogo?: string;
  positions: CareerPathPosition[];
  current?: boolean;
};
</file>

<file path="registry/default/blocks/portofolio-02/PENJELASAN.md">
ref design : 
- demo: https://chanhdai.com/
- main code : https://github.com/ncdai/chanhdai.com/blob/main/src/app/page.tsx
- kita ga pake animasi, bottom header
- yg pake cmn profile, link, about, experiecn dh itu aj
</file>

<file path="registry/default/blocks/portofolio-03/components/expandable-tab.tsx">
"use client";

import * as React from "react";
import { AnimatePresence, motion } from "framer-motion";
import { cn } from "@/lib/utils";

interface Badge {
  children: React.ReactNode;
  company: string;
  role: string;
}

type BadgeItem = Badge;

interface ExpandableTabProps {
  badges: BadgeItem[];
  bgColor?: string;
  className?: string;
  activeColor?: string;
}

const buttonVariants = {
  initial: {
    gap: 0,
    paddingLeft: ".5rem",
    paddingRight: ".5rem",
  },
  animate: (isSelected: boolean) => ({
    gap: isSelected ? ".5rem" : 0,
    paddingLeft: isSelected ? "1rem" : ".5rem",
    paddingRight: isSelected ? "1rem" : ".5rem",
  }),
  hover: {
    gap: ".5rem",
    paddingLeft: "1rem",
    paddingRight: "1rem",
  },
};

const transition = { type: "spring", bounce: 0, duration: 0.5 };

export function ExpandableTab({
  badges,
  className,
  activeColor = "text-primary",
  bgColor,
}: ExpandableTabProps) {
  const outsideClickRef = React.useRef(null);
  const [hovered, setHovered] = React.useState<number | null>(null);

  return (
    <div
      ref={outsideClickRef}
      className={cn(
        "flex flex-wrap items-center gap-2 rounded-2xl border bg-background p-1 shadow-sm",
        className,
      )}
    >
      {badges.map((badge, index) => {
        return (
          <motion.button
            key={index}
            variants={buttonVariants}
            initial="initial"
            animate={hovered === index ? "hover" : "initial"}
            onMouseEnter={() => setHovered(index)}
            onMouseLeave={() => setHovered(null)}
            transition={transition}
            className={cn(
              "group relative flex items-center rounded-xl px-4 py-2 text-sm font-medium transition-colors duration-300",
              bgColor,
              hovered === index
                ? cn("bg-background", activeColor)
                : "text-muted-foreground hover:bg-muted hover:text-foreground",
            )}
          >
            {badge.children}
            <p className="ml-2">{badge.company}</p>

            <AnimatePresence initial={false}>
              {hovered === index && (
                <motion.span
                  initial={{ opacity: 0, scaleX: 0 }}
                  animate={
                    hovered === index
                      ? { opacity: 1, scaleX: 1 }
                      : { opacity: 0, scaleX: 0 }
                  }
                  transition={transition}
                  className="  whitespace-nowrap   "
                >
                  {badge.role}
                </motion.span>
              )}
            </AnimatePresence>

            {/* <AnimatePresence initial={false}>
              {selected === index && (
                <motion.span variants={spanVariants} initial="initial" animate="animate" exit="exit" transition={transition} className="overflow-hidden">
                  {badge.role}
                </motion.span>
              )}
            </AnimatePresence> */}
          </motion.button>
        );
      })}
    </div>
  );
}
</file>

<file path="registry/default/blocks/portofolio-03/components/logos.tsx">
export type IconProps = React.HTMLAttributes<SVGElement>;

export const Logos = {
  whatsapp: (props: IconProps) => (
    <svg
      role="img"
      viewBox="0 0 24 24"
      xmlns="http://www.w3.org/2000/svg"
      {...props}
    >
      <title>WhatsApp</title>
      <path d="M17.472 14.382c-.297-.149-1.758-.867-2.03-.967-.273-.099-.471-.148-.67.15-.197.297-.767.966-.94 1.164-.173.199-.347.223-.644.075-.297-.15-1.255-.463-2.39-1.475-.883-.788-1.48-1.761-1.653-2.059-.173-.297-.018-.458.13-.606.134-.133.298-.347.446-.52.149-.174.198-.298.298-.497.099-.198.05-.371-.025-.52-.075-.149-.669-1.612-.916-2.207-.242-.579-.487-.5-.669-.51-.173-.008-.371-.01-.57-.01-.198 0-.52.074-.792.372-.272.297-1.04 1.016-1.04 2.479 0 1.462 1.065 2.875 1.213 3.074.149.198 2.096 3.2 5.077 4.487.709.306 1.262.489 1.694.625.712.227 1.36.195 1.871.118.571-.085 1.758-.719 2.006-1.413.248-.694.248-1.289.173-1.413-.074-.124-.272-.198-.57-.347m-5.421 7.403h-.004a9.87 9.87 0 01-5.031-1.378l-.361-.214-3.741.982.998-3.648-.235-.374a9.86 9.86 0 01-1.51-5.26c.001-5.45 4.436-9.884 9.888-9.884 2.64 0 5.122 1.03 6.988 2.898a9.825 9.825 0 012.893 6.994c-.003 5.45-4.437 9.884-9.885 9.884m8.413-18.297A11.815 11.815 0 0012.05 0C5.495 0 .16 5.335.157 11.892c0 2.096.547 4.142 1.588 5.945L.057 24l6.305-1.654a11.882 11.882 0 005.683 1.448h.005c6.554 0 11.89-5.335 11.893-11.893a11.821 11.821 0 00-3.48-8.413Z" />
    </svg>
  ),
  tiktok: (props: IconProps) => (
    <svg
      role="img"
      viewBox="0 0 24 24"
      xmlns="http://www.w3.org/2000/svg"
      {...props}
    >
      <title>TikTok</title>
      <path d="M12.525.02c1.31-.02 2.61-.01 3.91-.02.08 1.53.63 3.09 1.75 4.17 1.12 1.11 2.7 1.62 4.24 1.79v4.03c-1.44-.05-2.89-.35-4.2-.97-.57-.26-1.1-.59-1.62-.93-.01 2.92.01 5.84-.02 8.75-.08 1.4-.54 2.79-1.35 3.94-1.31 1.92-3.58 3.17-5.91 3.21-1.43.08-2.86-.31-4.08-1.03-2.02-1.19-3.44-3.37-3.65-5.71-.02-.5-.03-1-.01-1.49.18-1.9 1.12-3.72 2.58-4.96 1.66-1.44 3.98-2.13 6.15-1.72.02 1.48-.04 2.96-.04 4.44-.99-.32-2.15-.23-3.02.37-.63.41-1.11 1.04-1.36 1.75-.21.51-.15 1.07-.14 1.61.24 1.64 1.82 3.02 3.5 2.87 1.12-.01 2.19-.66 2.77-1.61.19-.33.4-.67.41-1.06.1-1.79.06-3.57.07-5.36.01-4.03-.01-8.05.02-12.07z" />
    </svg>
  ),
  shopee: (props: IconProps) => (
    <svg
      role="img"
      viewBox="0 0 24 24"
      xmlns="http://www.w3.org/2000/svg"
      {...props}
    >
      <title>Shopee</title>
      <path d="M15.9414 17.9633c.229-1.879-.981-3.077-4.1758-4.0969-1.548-.528-2.277-1.22-2.26-2.1719.065-1.056 1.048-1.825 2.352-1.85a5.2898 5.2898 0 0 1 2.8838.89c.116.072.197.06.263-.039.09-.145.315-.494.39-.62.051-.081.061-.187-.068-.281-.185-.1369-.704-.4149-.983-.5319a6.4697 6.4697 0 0 0-2.5118-.514c-1.909.008-3.4129 1.215-3.5389 2.826-.082 1.1629.494 2.1078 1.73 2.8278.262.152 1.6799.716 2.2438.892 1.774.552 2.695 1.5419 2.478 2.6969-.197 1.047-1.299 1.7239-2.818 1.7439-1.2039-.046-2.2878-.537-3.1278-1.19l-.141-.11c-.104-.08-.218-.075-.287.03-.05.077-.376.547-.458.67-.077.108-.035.168.045.234.35.293.817.613 1.134.775a6.7097 6.7097 0 0 0 2.8289.727 4.9048 4.9048 0 0 0 2.0759-.354c1.095-.465 1.8029-1.394 1.9449-2.554zM11.9986 1.4009c-2.068 0-3.7539 1.95-3.8329 4.3899h7.6657c-.08-2.44-1.765-4.3899-3.8328-4.3899zm7.8516 22.5981-.08.001-15.7843-.002c-1.074-.04-1.863-.91-1.971-1.991l-.01-.195L1.298 6.2858a.459.459 0 0 1 .45-.494h4.9748C6.8448 2.568 9.1607 0 11.9996 0c2.8388 0 5.1537 2.5689 5.2757 5.7898h4.9678a.459.459 0 0 1 .458.483l-.773 15.5883-.007.131c-.094 1.094-.979 1.9769-2.0709 2.0059z" />
    </svg>
  ),
  google: (props: IconProps) => (
    <svg
      role="img"
      viewBox="0 0 24 24"
      xmlns="http://www.w3.org/2000/svg"
      {...props}
    >
      <title>Google</title>
      <path d="M12.48 10.92v3.28h7.84c-.24 1.84-.853 3.187-1.787 4.133-1.147 1.147-2.933 2.4-6.053 2.4-4.827 0-8.6-3.893-8.6-8.72s3.773-8.72 8.6-8.72c2.6 0 4.507 1.027 5.907 2.347l2.307-2.307C18.747 1.44 16.133 0 12.48 0 5.867 0 .307 5.387.307 12s5.56 12 12.173 12c3.573 0 6.267-1.173 8.373-3.36 2.16-2.16 2.84-5.213 2.84-7.667 0-.76-.053-1.467-.173-2.053H12.48z" />
    </svg>
  ),
};
</file>

<file path="registry/default/blocks/portofolio-03/components/work-experiences.tsx">
import React from "react";
import { Logos } from "./logos";
import { ExpandableTab } from "./expandable-tab";

interface Badge {
  children: React.ReactNode;
  company: string;
  role: string;
}

type BadgeItem = Badge;
interface WorkExperienceItem {
  period: string;
  work: string;
  preposition: string;
  badges: BadgeItem[];
  bgColor: string;
}

const workExperienceData: WorkExperienceItem[] = [
  {
    period: "2024 - Present",
    work: "CEO",
    preposition: "at",
    badges: [
      {
        children: <Logos.whatsapp className="h-4 w-4" />,
        company: "Whatsapp",
        role: "group chat",
      },
    ],
    bgColor: "bg-green-200",
  },
  {
    period: "2022 - 2024",
    work: "Researcher",
    preposition: "at",
    badges: [
      {
        children: <Logos.google className="h-4 w-4" />,
        company: "Google",
        role: " chrome browser",
      },
    ],
    bgColor: "bg-blue-50",
  },
  {
    period: "2020 - 2022",
    work: "Product Manager",
    preposition: "at",
    badges: [
      {
        children: <Logos.tiktok className="h-4 w-4" />,
        company: "Tiktok",
        role: "comments",
      },
    ],
    bgColor: "bg-red-200",
  },
  {
    period: "2019 - 2020",
    work: "Investor",
    preposition: "at",
    badges: [
      {
        children: <Logos.shopee className="h-4 w-4" />,
        company: "Shopee",
        role: "whislist",
      },
    ],
    bgColor: "bg-orange-50",
  },
];

export function WorkExperience() {
  return (
    <div className="mx-auto w-full max-w-4xl ">
      <h2 className="mb-12 text-4xl font-bold">Work Experience</h2>
      <div>
        <div className="w-full space-y-6">
          {workExperienceData.map((item, index) => (
            <div
              key={index}
              className="flex w-full flex-col gap-6 md:flex-row md:items-center  md:gap-20"
            >
              <div className="w-full text-gray-500 md:w-1/6">{item.period}</div>
              <div className=" flex items-center justify-start gap-2">
                <div>
                  {item.work} {item.preposition}
                </div>
                <ExpandableTab badges={item.badges} bgColor={item.bgColor} />
              </div>
            </div>
          ))}
        </div>
      </div>
    </div>
  );
}
</file>

<file path="registry/default/blocks/portofolio-03/page.tsx">
import { WorkExperience } from "./components/work-experiences";

const Index = () => {
  return (
    <div className="max-w-screen bg-backgroud z-50 flex min-h-screen items-center justify-center p-4">
      <WorkExperience />
    </div>
  );
};

export default Index;
</file>

<file path="registry/default/blocks/tool-01/components/colorful-button.tsx">
// This component is sourced from 21st.dev, originally created by Coconut UI.

import { Button } from "@/components/ui/button";
import { cn } from "@/lib/utils";
import { ArrowUpRight } from "lucide-react";

interface ButtonColorfulProps
  extends React.ButtonHTMLAttributes<HTMLButtonElement> {
  label?: string;
}

export function ButtonColorful({
  className,
  label = "Explore Components",
  ...props
}: ButtonColorfulProps) {
  return (
    <Button
      className={cn(
        "relative h-10 overflow-hidden px-4",
        "bg-zinc-900 dark:bg-zinc-100",
        "transition-all duration-200",
        "group",
        className,
      )}
      {...props}
    >
      {/* Gradient background effect */}
      <div
        className={cn(
          "absolute inset-0",
          "bg-gradient-to-r from-indigo-500 via-purple-500 to-pink-500",
          "opacity-40 group-hover:opacity-80",
          "blur transition-opacity duration-500",
        )}
      />

      {/* Content */}
      <div className="relative flex items-center justify-center gap-2">
        <span className="text-white dark:text-zinc-900">{label}</span>
        <ArrowUpRight className="h-3.5 w-3.5 text-white/90 dark:text-zinc-900/90" />
      </div>
    </Button>
  );
}
</file>

<file path="registry/default/blocks/tool-01/style/style.css">
.bg-dashed {
  background-image: linear-gradient(45deg, #e5e5e5 12.5%, transparent 12.5%, transparent 50%, #e5e5e5 50%, #e5e5e5 62.5%, transparent 62.5%, transparent 100%);
  background-size: 0.25rem 0.25rem;
}
</file>

<file path="registry/default/blocks/tool-01/main.tsx">
import { Header } from "./components/header";
import { Banner } from "./components/banner";
import { Review } from "./components/review";
import { OpenSource } from "./components/open-source";

export default function HomeLayout() {
  return (
    <div className="flex flex-col ">
      <div className="container mx-auto border-x">
        <Header />
        <div className="divide-y">
          <Banner />
          <div className="grid divide-y sm:grid-cols-3 sm:divide-x sm:divide-y-0">
            <div className="sm:col-span-2">
              <Review />
            </div>
            <div className="sm:col-span-1">
              <OpenSource />
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}
</file>

<file path="registry/default/blocks/tool-02/components/compare.tsx">
"use client";
import React, { useState, useEffect, useRef, useCallback } from "react";
import { AnimatePresence, motion } from "framer-motion";
import { cn } from "@/lib/utils";
import { EllipsisVertical } from "lucide-react";

interface CompareProps {
  firstImage?: string;
  secondImage?: string;
  className?: string;
  firstImageClassName?: string;
  secondImageClassname?: string;
  initialSliderPercentage?: number;
  slideMode?: "hover" | "drag";
  showHandlebar?: boolean;
  autoplay?: boolean;
  autoplayDuration?: number;
}
export const Compare = ({
  firstImage = "",
  secondImage = "",
  className,
  firstImageClassName,
  secondImageClassname,
  initialSliderPercentage = 50,
  slideMode = "hover",
  showHandlebar = true,
  autoplay = false,
  autoplayDuration = 5000,
}: CompareProps) => {
  const [sliderXPercent, setSliderXPercent] = useState(initialSliderPercentage);
  const [isDragging, setIsDragging] = useState(false);

  const sliderRef = useRef<HTMLDivElement>(null);

  const [isMouseOver, setIsMouseOver] = useState(false);

  const autoplayRef = useRef<NodeJS.Timeout | null>(null);

  const startAutoplay = useCallback(() => {
    if (!autoplay) return;

    const startTime = Date.now();
    const animate = () => {
      const elapsedTime = Date.now() - startTime;
      const progress =
        (elapsedTime % (autoplayDuration * 2)) / autoplayDuration;
      const percentage = progress <= 1 ? progress * 100 : (2 - progress) * 100;

      setSliderXPercent(percentage);
      autoplayRef.current = setTimeout(animate, 16); // ~60fps
    };

    animate();
  }, [autoplay, autoplayDuration]);

  const stopAutoplay = useCallback(() => {
    if (autoplayRef.current) {
      clearTimeout(autoplayRef.current);
      autoplayRef.current = null;
    }
  }, []);

  useEffect(() => {
    startAutoplay();
    return () => stopAutoplay();
  }, [startAutoplay, stopAutoplay]);

  function mouseEnterHandler() {
    setIsMouseOver(true);
    stopAutoplay();
  }

  function mouseLeaveHandler() {
    setIsMouseOver(false);
    if (slideMode === "hover") {
      setSliderXPercent(initialSliderPercentage);
    }
    if (slideMode === "drag") {
      setIsDragging(false);
    }
    startAutoplay();
  }

  const handleStart = useCallback(
    (clientX: number) => {
      if (slideMode === "drag") {
        setIsDragging(true);
      }
    },
    [slideMode],
  );

  const handleEnd = useCallback(() => {
    if (slideMode === "drag") {
      setIsDragging(false);
    }
  }, [slideMode]);

  const handleMove = useCallback(
    (clientX: number) => {
      if (!sliderRef.current) return;
      if (slideMode === "hover" || (slideMode === "drag" && isDragging)) {
        const rect = sliderRef.current.getBoundingClientRect();
        const x = clientX - rect.left;
        const percent = (x / rect.width) * 100;
        requestAnimationFrame(() => {
          setSliderXPercent(Math.max(0, Math.min(100, percent)));
        });
      }
    },
    [slideMode, isDragging],
  );

  const handleMouseDown = useCallback(
    (e: React.MouseEvent) => handleStart(e.clientX),
    [handleStart],
  );
  const handleMouseUp = useCallback(() => handleEnd(), [handleEnd]);
  const handleMouseMove = useCallback(
    (e: React.MouseEvent) => handleMove(e.clientX),
    [handleMove],
  );

  const handleTouchStart = useCallback(
    (e: React.TouchEvent) => {
      if (!autoplay) {
        handleStart(e.touches[0].clientX);
      }
    },
    [handleStart, autoplay],
  );

  const handleTouchEnd = useCallback(() => {
    if (!autoplay) {
      handleEnd();
    }
  }, [handleEnd, autoplay]);

  const handleTouchMove = useCallback(
    (e: React.TouchEvent) => {
      if (!autoplay) {
        handleMove(e.touches[0].clientX);
      }
    },
    [handleMove, autoplay],
  );

  return (
    <div
      ref={sliderRef}
      className={cn("h-[400px] w-[400px] overflow-hidden", className)}
      style={{
        position: "relative",
        cursor: slideMode === "drag" ? "grab" : "col-resize",
      }}
      onMouseMove={handleMouseMove}
      onMouseLeave={mouseLeaveHandler}
      onMouseEnter={mouseEnterHandler}
      onMouseDown={handleMouseDown}
      onMouseUp={handleMouseUp}
      onTouchStart={handleTouchStart}
      onTouchEnd={handleTouchEnd}
      onTouchMove={handleTouchMove}
    >
      <AnimatePresence initial={false}>
        <motion.div
          className="absolute top-0 z-30 m-auto h-full w-px bg-gradient-to-b from-transparent from-[5%] via-indigo-500 to-transparent to-[95%]"
          style={{
            left: `${sliderXPercent}%`,
            top: "0",
            zIndex: 40,
          }}
          transition={{ duration: 0 }}
        >
          <div className="absolute left-0 top-1/2 z-20 h-full w-36 -translate-y-1/2 bg-gradient-to-r from-indigo-400 via-transparent to-transparent opacity-50 [mask-image:radial-gradient(100px_at_left,white,transparent)]" />
          <div className="absolute left-0 top-1/2 z-10 h-1/2 w-10 -translate-y-1/2 bg-gradient-to-r from-cyan-400 via-transparent to-transparent opacity-100 [mask-image:radial-gradient(50px_at_left,white,transparent)]" />
          <div className="absolute -right-10 top-1/2 h-3/4 w-10 -translate-y-1/2 [mask-image:radial-gradient(100px_at_left,white,transparent)]">
            {/* <MemoizedSparklesCore background="transparent" minSize={0.4} maxSize={1} particleDensity={1200} className="h-full w-full" particleColor="#FFFFFF" /> */}
          </div>
          {showHandlebar && (
            <div className="absolute -right-2.5 top-1/2 z-30 flex h-5 w-5 -translate-y-1/2 items-center   justify-center rounded-md bg-white shadow-[0px_-1px_0px_0px_#FFFFFF40]">
              <EllipsisVertical className="h-4 w-4 text-black" />
            </div>
          )}
        </motion.div>
      </AnimatePresence>
      <div className="pointer-events-none relative z-20 h-full w-full overflow-hidden">
        <AnimatePresence initial={false}>
          {firstImage ? (
            <motion.div
              className={cn(
                "absolute inset-0 z-20 h-full w-full shrink-0 select-none overflow-hidden rounded-2xl",
                firstImageClassName,
              )}
              style={{
                clipPath: `inset(0 ${100 - sliderXPercent}% 0 0)`,
              }}
              transition={{ duration: 0 }}
            >
              <img
                alt="first image"
                src={firstImage}
                className={cn(
                  "absolute inset-0  z-20 h-full w-full shrink-0 select-none rounded-2xl",
                  firstImageClassName,
                )}
                draggable={false}
              />
            </motion.div>
          ) : null}
        </AnimatePresence>
      </div>

      <AnimatePresence initial={false}>
        {secondImage ? (
          <motion.img
            className={cn(
              "absolute left-0 top-0 z-[19]  h-full w-full select-none rounded-2xl",
              secondImageClassname,
            )}
            alt="second image"
            src={secondImage}
            draggable={false}
          />
        ) : null}
      </AnimatePresence>
    </div>
  );
};

// const MemoizedSparklesCore = React.memo(SparklesCore);
</file>

<file path="registry/default/blocks/tool-02/components/image-compare.tsx">
"use client";

import { cn } from "@/lib/utils";
import { useState, createContext, useContext, useEffect } from "react";
import { motion, MotionValue, SpringOptions, useMotionValue, useSpring, useTransform } from "framer-motion";

// Existing ImageComparison components
const ImageComparisonContext = createContext<
  | {
      sliderPosition: number;
      setSliderPosition: (pos: number) => void;
      motionSliderPosition: MotionValue<number>;
    }
  | undefined
>(undefined);

type ImageComparisonProps = {
  children: React.ReactNode;
  className?: string;
  enableHover?: boolean;
  springOptions?: SpringOptions;
};

const DEFAULT_SPRING_OPTIONS = {
  bounce: 0,
  duration: 0,
};

function ImageComparison({ children, className, enableHover, springOptions }: ImageComparisonProps) {
  const [isDragging, setIsDragging] = useState(false);
  const motionValue = useMotionValue(50);
  const motionSliderPosition = useSpring(motionValue, springOptions ?? DEFAULT_SPRING_OPTIONS);
  const [sliderPosition, setSliderPosition] = useState(50);

  const handleDrag = (event: React.MouseEvent | React.TouchEvent) => {
    if (!isDragging && !enableHover) return;

    const containerRect = (event.currentTarget as HTMLElement).getBoundingClientRect();
    const x = "touches" in event ? event.touches[0].clientX - containerRect.left : (event as React.MouseEvent).clientX - containerRect.left;

    const percentage = Math.min(Math.max((x / containerRect.width) * 100, 0), 100);
    motionValue.set(percentage);
    setSliderPosition(percentage);
  };

  return (
    <ImageComparisonContext.Provider value={{ sliderPosition, setSliderPosition, motionSliderPosition }}>
      <div
        className={cn("relative select-none overflow-hidden", enableHover && "cursor-ew-resize", className)}
        onMouseMove={handleDrag}
        onMouseDown={() => !enableHover && setIsDragging(true)}
        onMouseUp={() => !enableHover && setIsDragging(false)}
        onMouseLeave={() => !enableHover && setIsDragging(false)}
        onTouchMove={handleDrag}
        onTouchStart={() => !enableHover && setIsDragging(true)}
        onTouchEnd={() => !enableHover && setIsDragging(false)}
      >
        {children}
      </div>
    </ImageComparisonContext.Provider>
  );
}

const ImageComparisonImage = ({ className, alt, src, position }: { className?: string; alt: string; src: string; position: "left" | "right" }) => {
  const { motionSliderPosition } = useContext(ImageComparisonContext)!;
  const leftClipPath = useTransform(motionSliderPosition, (value) => `inset(0 0 0 ${value}%)`);
  const rightClipPath = useTransform(motionSliderPosition, (value) => `inset(0 ${100 - value}% 0 0)`);

  return (
    <motion.img
      src={src}
      alt={alt}
      className={cn("absolute inset-0 h-full w-full object-cover", className)}
      style={{
        clipPath: position === "left" ? leftClipPath : rightClipPath,
      }}
    />
  );
};

const ImageComparisonSlider = ({ className, children }: { className?: string; children?: React.ReactNode }) => {
  const { motionSliderPosition } = useContext(ImageComparisonContext)!;
  const left = useTransform(motionSliderPosition, (value) => `${value}%`);

  return (
    <motion.div
      className={cn("absolute inset-y-0 w-1 cursor-ew-resize", className)}
      style={{
        left,
      }}
    >
      {children}
    </motion.div>
  );
};

// Marquee Component
interface MarqueeProps extends React.ComponentPropsWithoutRef<"div"> {
  className?: string;
  reverse?: boolean;
  pauseOnHover?: boolean;
  children: React.ReactNode;
  vertical?: boolean;
  repeat?: number;
}

function Marquee({ className, reverse = false, pauseOnHover = false, children, vertical = false, repeat = 4, ...props }: MarqueeProps) {
  return (
    <div
      {...props}
      className={cn(
        "group flex overflow-hidden p-2 [--duration:40s] [--gap:1rem] [gap:var(--gap)]",
        {
          "flex-row": !vertical,
          "flex-col": vertical,
        },
        className
      )}
    >
      {Array(repeat)
        .fill(0)
        .map((_, i) => (
          <div
            key={i}
            className={cn("flex shrink-0 justify-around [gap:var(--gap)]", {
              "animate-marquee flex-row": !vertical,
              "animate-marquee-vertical flex-col": vertical,
              "group-hover:[animation-play-state:paused]": pauseOnHover,
              "[animation-direction:reverse]": reverse,
            })}
          >
            {children}
          </div>
        ))}
    </div>
  );
}

// New AutoTransitionImageComparison Component
type AutoTransitionImageComparisonProps = {
  leftSrc: string;
  rightSrc: string;
  alt: string;
  className?: string;
  transitionDuration?: number;
};

function AutoTransitionImageComparison({ leftSrc, rightSrc, alt, className, transitionDuration = 3000 }: AutoTransitionImageComparisonProps) {
  const [isLeftVisible, setIsLeftVisible] = useState(true);

  useEffect(() => {
    const interval = setInterval(() => {
      setIsLeftVisible((prev) => !prev);
    }, transitionDuration);

    return () => clearInterval(interval);
  }, [transitionDuration]);

  return (
    <div className={cn(" relative aspect-video w-full", className)}>
      <ImageComparison enableHover={false}>
        <ImageComparisonImage position={isLeftVisible ? "left" : "right"} src={leftSrc} alt={`${alt} - first image`} />
        <ImageComparisonImage position={isLeftVisible ? "right" : "left"} src={rightSrc} alt={`${alt} - second image`} />
        <ImageComparisonSlider className="bg-white" />
      </ImageComparison>
    </div>
  );
}

// Image Comparison Marquee Component
type ImageComparisonMarqueeProps = {
  comparisons: Array<{
    leftSrc: string;
    rightSrc: string;
    alt: string;
  }>;
  className?: string;
  itemClassName?: string;
  pauseOnHover?: boolean;
  reverse?: boolean;
  transitionDuration?: number;
};

function ImageComparisonMarquee({ comparisons, className, itemClassName, pauseOnHover = false, reverse = false, transitionDuration }: ImageComparisonMarqueeProps) {
  return (
    <Marquee className={className} pauseOnHover={pauseOnHover} reverse={reverse}>
      {comparisons.map((item, index) => (
        <AutoTransitionImageComparison key={index} leftSrc={item.leftSrc} rightSrc={item.rightSrc} alt={item.alt} className={itemClassName} transitionDuration={transitionDuration} />
      ))}
    </Marquee>
  );
}

export { ImageComparison, ImageComparisonImage, ImageComparisonSlider, Marquee, AutoTransitionImageComparison, ImageComparisonMarquee };
</file>

<file path="registry/default/blocks/tool-02/page.tsx">
import React from "react";
import { Compare } from "./components/compare";
import { ImageComparison, ImageComparisonImage, ImageComparisonSlider, ImageComparisonMarquee } from "./components/image-compare";

const Index = () => {
  return (
    <>
      <div className="n bg-backgroud z-50 flex min-h-screen items-center justify-center p-4">
        {/* <ImageComparison className="aspect-[16/10] w-full rounded-lg border border-zinc-200 dark:border-zinc-800">
          <ImageComparisonImage src="https://motion-primitives.com/mp_dark.png" alt="Motion Primitives Dark" position="left" />
          <ImageComparisonImage src="https://motion-primitives.com/mp_light.png" alt="Motion Primitives Light" position="right" />
          <ImageComparisonSlider className="w-2 bg-white/50 backdrop-blur-sm transition-colors hover:bg-white/80">
            <div className="absolute left-1/2 top-1/2 h-8 w-6 -translate-x-1/2 -translate-y-1/2 rounded-[4px] bg-white" />
          </ImageComparisonSlider>
        </ImageComparison> */}
        <ImageComparisonMarquee
          comparisons={[
            { leftSrc: "https://motion-primitives.com/mp_dark.png", rightSrc: "https://motion-primitives.com/mp_light.png", alt: "Perbandingan 1" },
            { leftSrc: "https://motion-primitives.com/mp_dark.png", rightSrc: "https://motion-primitives.com/mp_light.png", alt: "Perbandingan 2" },
            { leftSrc: "https://motion-primitives.com/mp_dark.png", rightSrc: "https://motion-primitives.com/mp_light.png", alt: "Perbandingan 3" },
            { leftSrc: "https://motion-primitives.com/mp_dark.png", rightSrc: "https://motion-primitives.com/mp_light.png", alt: "Perbandingan 4" },
            { leftSrc: "https://motion-primitives.com/mp_dark.png", rightSrc: "https://motion-primitives.com/mp_light.png", alt: "Perbandingan 5" },
            { leftSrc: "https://motion-primitives.com/mp_dark.png", rightSrc: "https://motion-primitives.com/mp_light.png", alt: "Perbandingan 6" },
          ]}
          transitionDuration={3000} // Waktu transisi dalam milidetik
          pauseOnHover={true}
          reverse={false}
        />
        {/* <div className="rounded-3xl border border-neutral-200 bg-neutral-100 p-4  dark:border-neutral-800 dark:bg-neutral-900">
          <Compare
            firstImage="https://assets.aceternity.com/code-problem.png"
            secondImage="https://assets.aceternity.com/code-solution.png"
            firstImageClassName="object-cover object-left-top"
            secondImageClassname="object-cover object-left-top"
            className="h-[250px] w-[200px] md:h-[500px] md:w-[500px]"
            slideMode="hover"
            autoplay={true}
          />
        </div> */}
      </div>
    </>
  );
};

export default Index;
</file>

<file path="registry/default/hooks/use-mobile.ts">
import * as React from "react";

const MOBILE_BREAKPOINT = 768;

export function useIsMobile() {
  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(
    undefined,
  );

  React.useEffect(() => {
    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`);
    const onChange = () => {
      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT);
    };
    mql.addEventListener("change", onChange);
    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT);
    return () => mql.removeEventListener("change", onChange);
  }, []);

  return !!isMobile;
}
</file>

<file path="registry/default/hooks/use-toast.ts">
"use client";

// Inspired by react-hot-toast library
import * as React from "react";

import type {
  ToastActionElement,
  ToastProps,
} from "@/registry/default/ui/toast";

const TOAST_LIMIT = 1;
const TOAST_REMOVE_DELAY = 1000000;

type ToasterToast = ToastProps & {
  id: string;
  title?: React.ReactNode;
  description?: React.ReactNode;
  action?: ToastActionElement;
};

const actionTypes = {
  ADD_TOAST: "ADD_TOAST",
  UPDATE_TOAST: "UPDATE_TOAST",
  DISMISS_TOAST: "DISMISS_TOAST",
  REMOVE_TOAST: "REMOVE_TOAST",
} as const;

let count = 0;

function genId() {
  count = (count + 1) % Number.MAX_SAFE_INTEGER;
  return count.toString();
}

type ActionType = typeof actionTypes;

type Action =
  | {
      type: ActionType["ADD_TOAST"];
      toast: ToasterToast;
    }
  | {
      type: ActionType["UPDATE_TOAST"];
      toast: Partial<ToasterToast>;
    }
  | {
      type: ActionType["DISMISS_TOAST"];
      toastId?: ToasterToast["id"];
    }
  | {
      type: ActionType["REMOVE_TOAST"];
      toastId?: ToasterToast["id"];
    };

interface State {
  toasts: ToasterToast[];
}

const toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>();

const addToRemoveQueue = (toastId: string) => {
  if (toastTimeouts.has(toastId)) {
    return;
  }

  const timeout = setTimeout(() => {
    toastTimeouts.delete(toastId);
    dispatch({
      type: "REMOVE_TOAST",
      toastId: toastId,
    });
  }, TOAST_REMOVE_DELAY);

  toastTimeouts.set(toastId, timeout);
};

export const reducer = (state: State, action: Action): State => {
  switch (action.type) {
    case "ADD_TOAST":
      return {
        ...state,
        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),
      };

    case "UPDATE_TOAST":
      return {
        ...state,
        toasts: state.toasts.map((t) =>
          t.id === action.toast.id ? { ...t, ...action.toast } : t,
        ),
      };

    case "DISMISS_TOAST": {
      const { toastId } = action;

      // ! Side effects ! - This could be extracted into a dismissToast() action,
      // but I'll keep it here for simplicity
      if (toastId) {
        addToRemoveQueue(toastId);
      } else {
        state.toasts.forEach((toast) => {
          addToRemoveQueue(toast.id);
        });
      }

      return {
        ...state,
        toasts: state.toasts.map((t) =>
          t.id === toastId || toastId === undefined
            ? {
                ...t,
                open: false,
              }
            : t,
        ),
      };
    }
    case "REMOVE_TOAST":
      if (action.toastId === undefined) {
        return {
          ...state,
          toasts: [],
        };
      }
      return {
        ...state,
        toasts: state.toasts.filter((t) => t.id !== action.toastId),
      };
  }
};

const listeners: Array<(state: State) => void> = [];

let memoryState: State = { toasts: [] };

function dispatch(action: Action) {
  memoryState = reducer(memoryState, action);
  listeners.forEach((listener) => {
    listener(memoryState);
  });
}

type Toast = Omit<ToasterToast, "id">;

function toast({ ...props }: Toast) {
  const id = genId();

  const update = (props: ToasterToast) =>
    dispatch({
      type: "UPDATE_TOAST",
      toast: { ...props, id },
    });
  const dismiss = () => dispatch({ type: "DISMISS_TOAST", toastId: id });

  dispatch({
    type: "ADD_TOAST",
    toast: {
      ...props,
      id,
      open: true,
      onOpenChange: (open) => {
        if (!open) dismiss();
      },
    },
  });

  return {
    id: id,
    dismiss,
    update,
  };
}

function useToast() {
  const [state, setState] = React.useState<State>(memoryState);

  React.useEffect(() => {
    listeners.push(setState);
    return () => {
      const index = listeners.indexOf(setState);
      if (index > -1) {
        listeners.splice(index, 1);
      }
    };
  }, [state]);

  return {
    ...state,
    toast,
    dismiss: (toastId?: string) => dispatch({ type: "DISMISS_TOAST", toastId }),
  };
}

export { useToast, toast };
</file>

<file path="registry/default/ui/accordion.tsx">
"use client";

import * as React from "react";
import * as AccordionPrimitive from "@radix-ui/react-accordion";
import { ChevronDownIcon } from "@radix-ui/react-icons";

import { cn } from "@/lib/utils";

const Accordion = AccordionPrimitive.Root;

const AccordionItem = React.forwardRef<
  React.ElementRef<typeof AccordionPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>
>(({ className, ...props }, ref) => (
  <AccordionPrimitive.Item
    ref={ref}
    className={cn("border-b", className)}
    {...props}
  />
));
AccordionItem.displayName = "AccordionItem";

const AccordionTrigger = React.forwardRef<
  React.ElementRef<typeof AccordionPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>
>(({ className, children, ...props }, ref) => (
  <AccordionPrimitive.Header className="flex">
    <AccordionPrimitive.Trigger
      ref={ref}
      className={cn(
        "flex flex-1 items-center justify-between py-4 text-sm font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180",
        className,
      )}
      {...props}
    >
      {children}
      <ChevronDownIcon className="size-4 shrink-0 text-muted-foreground transition-transform duration-200" />
    </AccordionPrimitive.Trigger>
  </AccordionPrimitive.Header>
));
AccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName;

const AccordionContent = React.forwardRef<
  React.ElementRef<typeof AccordionPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <AccordionPrimitive.Content
    ref={ref}
    className="overflow-hidden text-sm data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down"
    {...props}
  >
    <div className={cn("pb-4 pt-0", className)}>{children}</div>
  </AccordionPrimitive.Content>
));
AccordionContent.displayName = AccordionPrimitive.Content.displayName;

export { Accordion, AccordionContent, AccordionItem, AccordionTrigger };
</file>

<file path="registry/default/ui/alert.tsx">
import * as React from "react";
import { cva, type VariantProps } from "class-variance-authority";

import { cn } from "@/lib/utils";

const alertVariants = cva(
  "relative w-full rounded-lg border px-4 py-3 text-sm [&:has(svg)]:pl-11 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground",
  {
    variants: {
      variant: {
        default: "bg-background text-foreground",
        destructive:
          "border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  },
);

const Alert = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>
>(({ className, variant, ...props }, ref) => (
  <div
    ref={ref}
    role="alert"
    className={cn(alertVariants({ variant }), className)}
    {...props}
  />
));
Alert.displayName = "Alert";

const AlertTitle = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLHeadingElement>
>(({ className, ...props }, ref) => (
  <h5
    ref={ref}
    className={cn("mb-1 font-medium leading-none tracking-tight", className)}
    {...props}
  />
));
AlertTitle.displayName = "AlertTitle";

const AlertDescription = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("text-sm [&_p]:leading-relaxed", className)}
    {...props}
  />
));
AlertDescription.displayName = "AlertDescription";

export { Alert, AlertTitle, AlertDescription };
</file>

<file path="registry/default/ui/avatar.tsx">
"use client";

import * as React from "react";
import * as AvatarPrimitive from "@radix-ui/react-avatar";

import { cn } from "@/lib/utils";

const Avatar = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Root
    ref={ref}
    className={cn(
      "relative flex size-10 shrink-0 overflow-hidden rounded-full",
      className,
    )}
    {...props}
  />
));
Avatar.displayName = AvatarPrimitive.Root.displayName;

const AvatarImage = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Image>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Image
    ref={ref}
    className={cn("aspect-square size-full", className)}
    {...props}
  />
));
AvatarImage.displayName = AvatarPrimitive.Image.displayName;

const AvatarFallback = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Fallback>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Fallback
    ref={ref}
    className={cn(
      "flex size-full items-center justify-center rounded-full bg-muted",
      className,
    )}
    {...props}
  />
));
AvatarFallback.displayName = AvatarPrimitive.Fallback.displayName;

export { Avatar, AvatarImage, AvatarFallback };
</file>

<file path="registry/default/ui/badge.tsx">
import * as React from "react";
import { cva, type VariantProps } from "class-variance-authority";

import { cn } from "@/lib/utils";

const badgeVariants = cva(
  "inline-flex items-center rounded-md border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2",
  {
    variants: {
      variant: {
        default:
          "border-transparent bg-primary text-primary-foreground shadow hover:bg-primary/80",
        secondary:
          "border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80",
        destructive:
          "border-transparent bg-destructive text-destructive-foreground shadow hover:bg-destructive/80",
        outline: "text-foreground",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  },
);

export interface BadgeProps
  extends React.HTMLAttributes<HTMLDivElement>,
    VariantProps<typeof badgeVariants> {}

function Badge({ className, variant, ...props }: BadgeProps) {
  return (
    <div className={cn(badgeVariants({ variant }), className)} {...props} />
  );
}

export { Badge, badgeVariants };
</file>

<file path="registry/default/ui/border-beam.tsx">
import { cn } from "@/lib/utils";

interface BorderBeamProps {
  className?: string;
  size?: number;
  duration?: number;
  borderWidth?: number;
  anchor?: number;
  colorFrom?: string;
  colorTo?: string;
  delay?: number;
}

export const BorderBeam = ({
  className,
  size = 200,
  duration = 15,
  anchor = 90,
  borderWidth = 1.5,
  colorFrom = "#ffaa40",
  colorTo = "#9c40ff",
  delay = 0,
}: BorderBeamProps) => {
  return (
    <div
      style={
        {
          "--size": size,
          "--duration": duration,
          "--anchor": anchor,
          "--border-width": borderWidth,
          "--color-from": colorFrom,
          "--color-to": colorTo,
          "--delay": `-${delay}s`,
        } as React.CSSProperties
      }
      className={cn(
        "pointer-events-none absolute inset-0 rounded-[inherit] [border:calc(var(--border-width)*1px)_solid_transparent]",

        // mask styles
        "![mask-clip:padding-box,border-box] ![mask-composite:intersect] [mask:linear-gradient(transparent,transparent),linear-gradient(white,white)]",

        // pseudo styles
        "after:absolute after:aspect-square after:w-[calc(var(--size)*1px)] after:animate-border-beam after:[animation-delay:var(--delay)] after:[background:linear-gradient(to_left,var(--color-from),var(--color-to),transparent)] after:[offset-anchor:calc(var(--anchor)*1%)_50%] after:[offset-path:rect(0_auto_auto_0_round_calc(var(--size)*1px))]",
        className,
      )}
    />
  );
};
</file>

<file path="registry/default/ui/button.tsx">
import * as React from "react";
import { Slot } from "@radix-ui/react-slot";
import { cva, type VariantProps } from "class-variance-authority";

import { cn } from "@/lib/utils";

const buttonVariants = cva(
  "inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
  {
    variants: {
      variant: {
        default:
          "bg-primary text-primary-foreground shadow hover:bg-primary/90",
        destructive:
          "bg-destructive text-destructive-foreground shadow-sm hover:bg-destructive/90",
        outline:
          "border border-input bg-background shadow-sm hover:bg-accent hover:text-accent-foreground",
        secondary:
          "bg-secondary text-secondary-foreground shadow-sm hover:bg-secondary/80",
        ghost: "hover:bg-accent hover:text-accent-foreground",
        link: "text-primary underline-offset-4 hover:underline",
      },
      size: {
        default: "h-9 px-4 py-2",
        sm: "h-8 rounded-md px-3 text-xs",
        lg: "h-10 rounded-md px-8",
        icon: "h-9 w-9",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  },
);

export interface ButtonProps
  extends React.ButtonHTMLAttributes<HTMLButtonElement>,
    VariantProps<typeof buttonVariants> {
  asChild?: boolean;
}

const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(
  ({ className, variant, size, asChild = false, ...props }, ref) => {
    const Comp = asChild ? Slot : "button";
    return (
      <Comp
        className={cn(buttonVariants({ variant, size, className }))}
        ref={ref}
        {...props}
      />
    );
  },
);
Button.displayName = "Button";

export { Button, buttonVariants };
</file>

<file path="registry/default/ui/calendar.tsx">
"use client";

import * as React from "react";
import { DayPicker } from "react-day-picker";

import { cn } from "@/lib/utils";
import { buttonVariants } from "@/components/ui/button";
import { ChevronLeftIcon, ChevronRightIcon } from "@radix-ui/react-icons";
export type CalendarProps = React.ComponentProps<typeof DayPicker>;

function Calendar({
  className,
  classNames,
  showOutsideDays = true,
  ...props
}: CalendarProps) {
  return (
    <DayPicker
      showOutsideDays={showOutsideDays}
      className={cn("p-3", className)}
      classNames={{
        months: "flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0",
        month: "space-y-4",
        caption: "flex justify-center pt-1 relative items-center",
        caption_label: "text-sm font-medium",
        nav: "space-x-1 flex items-center",
        nav_button: cn(
          buttonVariants({ variant: "outline" }),
          "h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100",
        ),
        nav_button_previous: "absolute left-1",
        nav_button_next: "absolute right-1",
        table: "w-full border-collapse space-y-1",
        head_row: "flex",
        head_cell:
          "text-muted-foreground rounded-md w-8 font-normal text-[0.8rem]",
        row: "flex w-full mt-2",
        cell: cn(
          "relative p-0 text-center text-sm focus-within:relative focus-within:z-20 [&:has([aria-selected])]:bg-accent [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected].day-range-end)]:rounded-r-md",
          props.mode === "range"
            ? "[&:has(>.day-range-end)]:rounded-r-md [&:has(>.day-range-start)]:rounded-l-md first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md"
            : "[&:has([aria-selected])]:rounded-md",
        ),
        day: cn(
          buttonVariants({ variant: "ghost" }),
          "h-8 w-8 p-0 font-normal aria-selected:opacity-100",
        ),
        day_range_start: "day-range-start",
        day_range_end: "day-range-end",
        day_selected:
          "bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground",
        day_today: "bg-accent text-accent-foreground",
        day_outside:
          "day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground",
        day_disabled: "text-muted-foreground opacity-50",
        day_range_middle:
          "aria-selected:bg-accent aria-selected:text-accent-foreground",
        day_hidden: "invisible",
        ...classNames,
      }}
      components={{
        IconLeft: ({ className, ...props }) => (
          <ChevronLeftIcon className={cn("h-4 w-4")} />
        ),
        IconRight: ({ className, ...props }) => (
          <ChevronRightIcon className={cn("h-4 w-4", className)} />
        ),
      }}
      {...props}
    />
  );
}
Calendar.displayName = "Calendar";

export { Calendar };
</file>

<file path="registry/default/ui/card.tsx">
import * as React from "react";

import { cn } from "@/lib/utils";

const Card = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn(
      "rounded-xl border bg-card text-card-foreground shadow",
      className,
    )}
    {...props}
  />
));
Card.displayName = "Card";

const CardHeader = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex flex-col space-y-1.5 p-6", className)}
    {...props}
  />
));
CardHeader.displayName = "CardHeader";

const CardTitle = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLHeadingElement>
>(({ className, ...props }, ref) => (
  <h3
    ref={ref}
    className={cn("font-semibold leading-none tracking-tight", className)}
    {...props}
  />
));
CardTitle.displayName = "CardTitle";

const CardDescription = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, ...props }, ref) => (
  <p
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
));
CardDescription.displayName = "CardDescription";

const CardContent = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div ref={ref} className={cn("p-6 pt-0", className)} {...props} />
));
CardContent.displayName = "CardContent";

const CardFooter = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn(" flex items-center p-6 pt-0", className)}
    {...props}
  />
));
CardFooter.displayName = "CardFooter";

export {
  Card,
  CardHeader,
  CardFooter,
  CardTitle,
  CardDescription,
  CardContent,
};
</file>

<file path="registry/default/ui/chart.tsx">
"use client";

import * as React from "react";
import * as RechartsPrimitive from "recharts";

import { cn } from "@/lib/utils";

// Format: { THEME_NAME: CSS_SELECTOR }
const THEMES = { light: "", dark: ".dark" } as const;

export type ChartConfig = {
  [k in string]: {
    label?: React.ReactNode;
    icon?: React.ComponentType;
  } & (
    | { color?: string; theme?: never }
    | { color?: never; theme: Record<keyof typeof THEMES, string> }
  );
};

type ChartContextProps = {
  config: ChartConfig;
};

const ChartContext = React.createContext<ChartContextProps | null>(null);

function useChart() {
  const context = React.useContext(ChartContext);

  if (!context) {
    throw new Error("useChart must be used within a <ChartContainer />");
  }

  return context;
}

const ChartContainer = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & {
    config: ChartConfig;
    children: React.ComponentProps<
      typeof RechartsPrimitive.ResponsiveContainer
    >["children"];
  }
>(({ id, className, children, config, ...props }, ref) => {
  const uniqueId = React.useId();
  const chartId = `chart-${id || uniqueId.replace(/:/g, "")}`;

  return (
    <ChartContext.Provider value={{ config }}>
      <div
        data-chart={chartId}
        ref={ref}
        className={cn(
          "flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none",
          className,
        )}
        {...props}
      >
        <ChartStyle id={chartId} config={config} />
        <RechartsPrimitive.ResponsiveContainer>
          {children}
        </RechartsPrimitive.ResponsiveContainer>
      </div>
    </ChartContext.Provider>
  );
});
ChartContainer.displayName = "Chart";

const ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {
  const colorConfig = Object.entries(config).filter(
    ([, config]) => config.theme || config.color,
  );

  if (!colorConfig.length) {
    return null;
  }

  return (
    <style
      dangerouslySetInnerHTML={{
        __html: Object.entries(THEMES)
          .map(
            ([theme, prefix]) => `
${prefix} [data-chart=${id}] {
${colorConfig
  .map(([key, itemConfig]) => {
    const color =
      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||
      itemConfig.color;
    return color ? `  --color-${key}: ${color};` : null;
  })
  .join("\n")}
}
`,
          )
          .join("\n"),
      }}
    />
  );
};

const ChartTooltip = RechartsPrimitive.Tooltip;

const ChartTooltipContent = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &
    React.ComponentProps<"div"> & {
      hideLabel?: boolean;
      hideIndicator?: boolean;
      indicator?: "line" | "dot" | "dashed";
      nameKey?: string;
      labelKey?: string;
    }
>(
  (
    {
      active,
      payload,
      className,
      indicator = "dot",
      hideLabel = false,
      hideIndicator = false,
      label,
      labelFormatter,
      labelClassName,
      formatter,
      color,
      nameKey,
      labelKey,
    },
    ref,
  ) => {
    const { config } = useChart();

    const tooltipLabel = React.useMemo(() => {
      if (hideLabel || !payload?.length) {
        return null;
      }

      const [item] = payload;
      const key = `${labelKey || item.dataKey || item.name || "value"}`;
      const itemConfig = getPayloadConfigFromPayload(config, item, key);
      const value =
        !labelKey && typeof label === "string"
          ? config[label as keyof typeof config]?.label || label
          : itemConfig?.label;

      if (labelFormatter) {
        return (
          <div className={cn("font-medium", labelClassName)}>
            {labelFormatter(value, payload)}
          </div>
        );
      }

      if (!value) {
        return null;
      }

      return <div className={cn("font-medium", labelClassName)}>{value}</div>;
    }, [
      label,
      labelFormatter,
      payload,
      hideLabel,
      labelClassName,
      config,
      labelKey,
    ]);

    if (!active || !payload?.length) {
      return null;
    }

    const nestLabel = payload.length === 1 && indicator !== "dot";

    return (
      <div
        ref={ref}
        className={cn(
          "grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl",
          className,
        )}
      >
        {!nestLabel ? tooltipLabel : null}
        <div className="grid gap-1.5">
          {payload.map((item, index) => {
            const key = `${nameKey || item.name || item.dataKey || "value"}`;
            const itemConfig = getPayloadConfigFromPayload(config, item, key);
            const indicatorColor = color || item.payload.fill || item.color;

            return (
              <div
                key={item.dataKey}
                className={cn(
                  "flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground",
                  indicator === "dot" && "items-center",
                )}
              >
                {formatter && item?.value !== undefined && item.name ? (
                  formatter(item.value, item.name, item, index, item.payload)
                ) : (
                  <>
                    {itemConfig?.icon ? (
                      <itemConfig.icon />
                    ) : (
                      !hideIndicator && (
                        <div
                          className={cn(
                            "shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]",
                            {
                              "h-2.5 w-2.5": indicator === "dot",
                              "w-1": indicator === "line",
                              "w-0 border-[1.5px] border-dashed bg-transparent":
                                indicator === "dashed",
                              "my-0.5": nestLabel && indicator === "dashed",
                            },
                          )}
                          style={
                            {
                              "--color-bg": indicatorColor,
                              "--color-border": indicatorColor,
                            } as React.CSSProperties
                          }
                        />
                      )
                    )}
                    <div
                      className={cn(
                        "flex flex-1 justify-between leading-none",
                        nestLabel ? "items-end" : "items-center",
                      )}
                    >
                      <div className="grid gap-1.5">
                        {nestLabel ? tooltipLabel : null}
                        <span className="text-muted-foreground">
                          {itemConfig?.label || item.name}
                        </span>
                      </div>
                      {item.value && (
                        <span className="font-mono font-medium tabular-nums text-foreground">
                          {item.value.toLocaleString()}
                        </span>
                      )}
                    </div>
                  </>
                )}
              </div>
            );
          })}
        </div>
      </div>
    );
  },
);
ChartTooltipContent.displayName = "ChartTooltip";

const ChartLegend = RechartsPrimitive.Legend;

const ChartLegendContent = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> &
    Pick<RechartsPrimitive.LegendProps, "payload" | "verticalAlign"> & {
      hideIcon?: boolean;
      nameKey?: string;
    }
>(
  (
    { className, hideIcon = false, payload, verticalAlign = "bottom", nameKey },
    ref,
  ) => {
    const { config } = useChart();

    if (!payload?.length) {
      return null;
    }

    return (
      <div
        ref={ref}
        className={cn(
          "flex items-center justify-center gap-4",
          verticalAlign === "top" ? "pb-3" : "pt-3",
          className,
        )}
      >
        {payload.map((item) => {
          const key = `${nameKey || item.dataKey || "value"}`;
          const itemConfig = getPayloadConfigFromPayload(config, item, key);

          return (
            <div
              key={item.value}
              className={cn(
                "flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground",
              )}
            >
              {itemConfig?.icon && !hideIcon ? (
                <itemConfig.icon />
              ) : (
                <div
                  className="h-2 w-2 shrink-0 rounded-[2px]"
                  style={{
                    backgroundColor: item.color,
                  }}
                />
              )}
              {itemConfig?.label}
            </div>
          );
        })}
      </div>
    );
  },
);
ChartLegendContent.displayName = "ChartLegend";

// Helper to extract item config from a payload.
function getPayloadConfigFromPayload(
  config: ChartConfig,
  payload: unknown,
  key: string,
) {
  if (typeof payload !== "object" || payload === null) {
    return undefined;
  }

  const payloadPayload =
    "payload" in payload &&
    typeof payload.payload === "object" &&
    payload.payload !== null
      ? payload.payload
      : undefined;

  let configLabelKey: string = key;

  if (
    key in payload &&
    typeof payload[key as keyof typeof payload] === "string"
  ) {
    configLabelKey = payload[key as keyof typeof payload] as string;
  } else if (
    payloadPayload &&
    key in payloadPayload &&
    typeof payloadPayload[key as keyof typeof payloadPayload] === "string"
  ) {
    configLabelKey = payloadPayload[
      key as keyof typeof payloadPayload
    ] as string;
  }

  return configLabelKey in config
    ? config[configLabelKey]
    : config[key as keyof typeof config];
}

export {
  ChartContainer,
  ChartTooltip,
  ChartTooltipContent,
  ChartLegend,
  ChartLegendContent,
  ChartStyle,
};
</file>

<file path="registry/default/ui/collapsible.tsx">
"use client";

import * as CollapsiblePrimitive from "@radix-ui/react-collapsible";

const Collapsible = CollapsiblePrimitive.Root;

const CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger;

const CollapsibleContent = CollapsiblePrimitive.CollapsibleContent;

export { Collapsible, CollapsibleTrigger, CollapsibleContent };
</file>

<file path="registry/default/ui/command.tsx">
"use client";

import * as React from "react";
import { type DialogProps } from "@radix-ui/react-dialog";
import { MagnifyingGlassIcon } from "@radix-ui/react-icons";
import { Command as CommandPrimitive } from "cmdk";

import { cn } from "@/lib/utils";
import { Dialog, DialogContent } from "@/components/ui/dialog";

const Command = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive>
>(({ className, ...props }, ref) => (
  <CommandPrimitive
    ref={ref}
    className={cn(
      "flex size-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground",
      className,
    )}
    {...props}
  />
));
Command.displayName = CommandPrimitive.displayName;

interface CommandDialogProps extends DialogProps {}

const CommandDialog = ({ children, ...props }: CommandDialogProps) => {
  return (
    <Dialog {...props}>
      <DialogContent className="overflow-hidden p-0">
        <Command className="[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:size-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:size-5">
          {children}
        </Command>
      </DialogContent>
    </Dialog>
  );
};

const CommandInput = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Input>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>
>(({ className, ...props }, ref) => (
  <div className="flex items-center border-b px-3" cmdk-input-wrapper="">
    <MagnifyingGlassIcon className="mr-2 size-4 shrink-0 opacity-50" />
    <CommandPrimitive.Input
      ref={ref}
      className={cn(
        "flex h-10 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50",
        className,
      )}
      {...props}
    />
  </div>
));

CommandInput.displayName = CommandPrimitive.Input.displayName;

const CommandList = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.List>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>
>(({ className, ...props }, ref) => (
  <CommandPrimitive.List
    ref={ref}
    className={cn("max-h-[300px] overflow-y-auto overflow-x-hidden", className)}
    {...props}
  />
));

CommandList.displayName = CommandPrimitive.List.displayName;

const CommandEmpty = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Empty>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>
>((props, ref) => (
  <CommandPrimitive.Empty
    ref={ref}
    className="py-6 text-center text-sm"
    {...props}
  />
));

CommandEmpty.displayName = CommandPrimitive.Empty.displayName;

const CommandGroup = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Group>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>
>(({ className, ...props }, ref) => (
  <CommandPrimitive.Group
    ref={ref}
    className={cn(
      "overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground",
      className,
    )}
    {...props}
  />
));

CommandGroup.displayName = CommandPrimitive.Group.displayName;

const CommandSeparator = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <CommandPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 h-px bg-border", className)}
    {...props}
  />
));
CommandSeparator.displayName = CommandPrimitive.Separator.displayName;

const CommandItem = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>
>(({ className, ...props }, ref) => (
  <CommandPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected=true]:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50",
      className,
    )}
    {...props}
  />
));

CommandItem.displayName = CommandPrimitive.Item.displayName;

const CommandShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn(
        "ml-auto text-xs tracking-widest text-muted-foreground",
        className,
      )}
      {...props}
    />
  );
};
CommandShortcut.displayName = "CommandShortcut";

export {
  Command,
  CommandDialog,
  CommandEmpty,
  CommandGroup,
  CommandInput,
  CommandItem,
  CommandList,
  CommandSeparator,
  CommandShortcut,
};
</file>

<file path="registry/default/ui/dialog.tsx">
"use client";

import * as DialogPrimitive from "@radix-ui/react-dialog";
import { Cross2Icon } from "@radix-ui/react-icons";
import * as React from "react";

import { cn } from "@/lib/utils";

const Dialog = DialogPrimitive.Root;

const DialogTrigger = DialogPrimitive.Trigger;

const DialogPortal = DialogPrimitive.Portal;

const DialogClose = DialogPrimitive.Close;

const DialogOverlay = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Overlay
    ref={ref}
    className={cn(
      "fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className,
    )}
    {...props}
  />
));
DialogOverlay.displayName = DialogPrimitive.Overlay.displayName;

const DialogContent = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <DialogPortal>
    <DialogOverlay />
    <DialogPrimitive.Content
      ref={ref}
      className={cn(
        "fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg",
        className,
      )}
      {...props}
    >
      {children}
      <DialogPrimitive.Close className="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground">
        <Cross2Icon className="size-4" />
        <span className="sr-only">Close</span>
      </DialogPrimitive.Close>
    </DialogPrimitive.Content>
  </DialogPortal>
));
DialogContent.displayName = DialogPrimitive.Content.displayName;

const DialogHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col space-y-1.5 text-center sm:text-left",
      className,
    )}
    {...props}
  />
);
DialogHeader.displayName = "DialogHeader";

const DialogFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className,
    )}
    {...props}
  />
);
DialogFooter.displayName = "DialogFooter";

const DialogTitle = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Title
    ref={ref}
    className={cn(
      "text-lg font-semibold leading-none tracking-tight",
      className,
    )}
    {...props}
  />
));
DialogTitle.displayName = DialogPrimitive.Title.displayName;

const DialogDescription = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
));
DialogDescription.displayName = DialogPrimitive.Description.displayName;

export {
  Dialog,
  DialogClose,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogOverlay,
  DialogPortal,
  DialogTitle,
  DialogTrigger,
};
</file>

<file path="registry/default/ui/drawer.tsx">
"use client";

import * as React from "react";
import { Drawer as DrawerPrimitive } from "vaul";

import { cn } from "@/lib/utils";

const Drawer = ({
  shouldScaleBackground = true,
  ...props
}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (
  <DrawerPrimitive.Root
    shouldScaleBackground={shouldScaleBackground}
    {...props}
  />
);
Drawer.displayName = "Drawer";

const DrawerTrigger = DrawerPrimitive.Trigger;

const DrawerPortal = DrawerPrimitive.Portal;

const DrawerClose = DrawerPrimitive.Close;

const DrawerOverlay = React.forwardRef<
  React.ElementRef<typeof DrawerPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <DrawerPrimitive.Overlay
    ref={ref}
    className={cn("fixed inset-0 z-50 bg-black/80", className)}
    {...props}
  />
));
DrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName;

const DrawerContent = React.forwardRef<
  React.ElementRef<typeof DrawerPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <DrawerPortal>
    <DrawerOverlay />
    <DrawerPrimitive.Content
      ref={ref}
      className={cn(
        "fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background",
        className,
      )}
      {...props}
    >
      <div className="mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted" />
      {children}
    </DrawerPrimitive.Content>
  </DrawerPortal>
));
DrawerContent.displayName = "DrawerContent";

const DrawerHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn("grid gap-1.5 p-4 text-center sm:text-left", className)}
    {...props}
  />
);
DrawerHeader.displayName = "DrawerHeader";

const DrawerFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn("mt-auto flex flex-col gap-2 p-4", className)}
    {...props}
  />
);
DrawerFooter.displayName = "DrawerFooter";

const DrawerTitle = React.forwardRef<
  React.ElementRef<typeof DrawerPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>
>(({ className, ...props }, ref) => (
  <DrawerPrimitive.Title
    ref={ref}
    className={cn(
      "text-lg font-semibold leading-none tracking-tight",
      className,
    )}
    {...props}
  />
));
DrawerTitle.displayName = DrawerPrimitive.Title.displayName;

const DrawerDescription = React.forwardRef<
  React.ElementRef<typeof DrawerPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>
>(({ className, ...props }, ref) => (
  <DrawerPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
));
DrawerDescription.displayName = DrawerPrimitive.Description.displayName;

export {
  Drawer,
  DrawerPortal,
  DrawerOverlay,
  DrawerTrigger,
  DrawerClose,
  DrawerContent,
  DrawerHeader,
  DrawerFooter,
  DrawerTitle,
  DrawerDescription,
};
</file>

<file path="registry/default/ui/dropdown-menu.tsx">
"use client";

import * as React from "react";
import * as DropdownMenuPrimitive from "@radix-ui/react-dropdown-menu";
import {
  CheckIcon,
  ChevronRightIcon,
  DotFilledIcon,
} from "@radix-ui/react-icons";

import { cn } from "@/lib/utils";

const DropdownMenu = DropdownMenuPrimitive.Root;

const DropdownMenuTrigger = DropdownMenuPrimitive.Trigger;

const DropdownMenuGroup = DropdownMenuPrimitive.Group;

const DropdownMenuPortal = DropdownMenuPrimitive.Portal;

const DropdownMenuSub = DropdownMenuPrimitive.Sub;

const DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup;

const DropdownMenuSubTrigger = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {
    inset?: boolean;
  }
>(({ className, inset, children, ...props }, ref) => (
  <DropdownMenuPrimitive.SubTrigger
    ref={ref}
    className={cn(
      "flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent",
      inset && "pl-8",
      className,
    )}
    {...props}
  >
    {children}
    <ChevronRightIcon className="ml-auto size-4" />
  </DropdownMenuPrimitive.SubTrigger>
));
DropdownMenuSubTrigger.displayName =
  DropdownMenuPrimitive.SubTrigger.displayName;

const DropdownMenuSubContent = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>
>(({ className, ...props }, ref) => (
  <DropdownMenuPrimitive.SubContent
    ref={ref}
    className={cn(
      "z-50 min-w-32 overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className,
    )}
    {...props}
  />
));
DropdownMenuSubContent.displayName =
  DropdownMenuPrimitive.SubContent.displayName;

const DropdownMenuContent = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>
>(({ className, sideOffset = 4, ...props }, ref) => (
  <DropdownMenuPrimitive.Portal>
    <DropdownMenuPrimitive.Content
      ref={ref}
      sideOffset={sideOffset}
      className={cn(
        "z-50 min-w-32 overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md",
        "data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        className,
      )}
      {...props}
    />
  </DropdownMenuPrimitive.Portal>
));
DropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName;

const DropdownMenuItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {
    inset?: boolean;
  }
>(({ className, inset, ...props }, ref) => (
  <DropdownMenuPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      inset && "pl-8",
      className,
    )}
    {...props}
  />
));
DropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName;

const DropdownMenuCheckboxItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>
>(({ className, children, checked, ...props }, ref) => (
  <DropdownMenuPrimitive.CheckboxItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className,
    )}
    checked={checked}
    {...props}
  >
    <span className="absolute left-2 flex size-3.5 items-center justify-center">
      <DropdownMenuPrimitive.ItemIndicator>
        <CheckIcon className="size-4" />
      </DropdownMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </DropdownMenuPrimitive.CheckboxItem>
));
DropdownMenuCheckboxItem.displayName =
  DropdownMenuPrimitive.CheckboxItem.displayName;

const DropdownMenuRadioItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>
>(({ className, children, ...props }, ref) => (
  <DropdownMenuPrimitive.RadioItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className,
    )}
    {...props}
  >
    <span className="absolute left-2 flex size-3.5 items-center justify-center">
      <DropdownMenuPrimitive.ItemIndicator>
        <DotFilledIcon className="size-4 fill-current" />
      </DropdownMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </DropdownMenuPrimitive.RadioItem>
));
DropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName;

const DropdownMenuLabel = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {
    inset?: boolean;
  }
>(({ className, inset, ...props }, ref) => (
  <DropdownMenuPrimitive.Label
    ref={ref}
    className={cn(
      "px-2 py-1.5 text-sm font-semibold",
      inset && "pl-8",
      className,
    )}
    {...props}
  />
));
DropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName;

const DropdownMenuSeparator = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <DropdownMenuPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-muted", className)}
    {...props}
  />
));
DropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName;

const DropdownMenuShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn("ml-auto text-xs tracking-widest opacity-60", className)}
      {...props}
    />
  );
};
DropdownMenuShortcut.displayName = "DropdownMenuShortcut";

export {
  DropdownMenu,
  DropdownMenuTrigger,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuCheckboxItem,
  DropdownMenuRadioItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuShortcut,
  DropdownMenuGroup,
  DropdownMenuPortal,
  DropdownMenuSub,
  DropdownMenuSubContent,
  DropdownMenuSubTrigger,
  DropdownMenuRadioGroup,
};
</file>

<file path="registry/default/ui/form.tsx">
import * as React from "react";
import * as LabelPrimitive from "@radix-ui/react-label";
import { Slot } from "@radix-ui/react-slot";
import {
  Controller,
  ControllerProps,
  FieldPath,
  FieldValues,
  FormProvider,
  useFormContext,
} from "react-hook-form";

import { cn } from "@/lib/utils";
import { Label } from "@/components/ui/label";

const Form = FormProvider;

type FormFieldContextValue<
  TFieldValues extends FieldValues = FieldValues,
  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,
> = {
  name: TName;
};

const FormFieldContext = React.createContext<FormFieldContextValue>(
  {} as FormFieldContextValue,
);

const FormField = <
  TFieldValues extends FieldValues = FieldValues,
  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,
>({
  ...props
}: ControllerProps<TFieldValues, TName>) => {
  return (
    <FormFieldContext.Provider value={{ name: props.name }}>
      <Controller {...props} />
    </FormFieldContext.Provider>
  );
};

const useFormField = () => {
  const fieldContext = React.useContext(FormFieldContext);
  const itemContext = React.useContext(FormItemContext);
  const { getFieldState, formState } = useFormContext();

  const fieldState = getFieldState(fieldContext.name, formState);

  if (!fieldContext) {
    throw new Error("useFormField should be used within <FormField>");
  }

  const { id } = itemContext;

  return {
    id,
    name: fieldContext.name,
    formItemId: `${id}-form-item`,
    formDescriptionId: `${id}-form-item-description`,
    formMessageId: `${id}-form-item-message`,
    ...fieldState,
  };
};

type FormItemContextValue = {
  id: string;
};

const FormItemContext = React.createContext<FormItemContextValue>(
  {} as FormItemContextValue,
);

const FormItem = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => {
  const id = React.useId();

  return (
    <FormItemContext.Provider value={{ id }}>
      <div ref={ref} className={cn("space-y-2", className)} {...props} />
    </FormItemContext.Provider>
  );
});
FormItem.displayName = "FormItem";

const FormLabel = React.forwardRef<
  React.ElementRef<typeof LabelPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>
>(({ className, ...props }, ref) => {
  const { error, formItemId } = useFormField();

  return (
    <Label
      ref={ref}
      className={cn(error && "text-destructive", className)}
      htmlFor={formItemId}
      {...props}
    />
  );
});
FormLabel.displayName = "FormLabel";

const FormControl = React.forwardRef<
  React.ElementRef<typeof Slot>,
  React.ComponentPropsWithoutRef<typeof Slot>
>(({ ...props }, ref) => {
  const { error, formItemId, formDescriptionId, formMessageId } =
    useFormField();

  return (
    <Slot
      ref={ref}
      id={formItemId}
      aria-describedby={
        !error
          ? `${formDescriptionId}`
          : `${formDescriptionId} ${formMessageId}`
      }
      aria-invalid={!!error}
      {...props}
    />
  );
});
FormControl.displayName = "FormControl";

const FormDescription = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, ...props }, ref) => {
  const { formDescriptionId } = useFormField();

  return (
    <p
      ref={ref}
      id={formDescriptionId}
      className={cn("text-[0.8rem] text-muted-foreground", className)}
      {...props}
    />
  );
});
FormDescription.displayName = "FormDescription";

const FormMessage = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, children, ...props }, ref) => {
  const { error, formMessageId } = useFormField();
  const body = error ? String(error?.message) : children;

  if (!body) {
    return null;
  }

  return (
    <p
      ref={ref}
      id={formMessageId}
      className={cn("text-[0.8rem] font-medium text-destructive", className)}
      {...props}
    >
      {body}
    </p>
  );
});
FormMessage.displayName = "FormMessage";

export {
  useFormField,
  Form,
  FormItem,
  FormLabel,
  FormControl,
  FormDescription,
  FormMessage,
  FormField,
};
</file>

<file path="registry/default/ui/hover-card.tsx">
"use client";

import * as React from "react";
import * as HoverCardPrimitive from "@radix-ui/react-hover-card";

import { cn } from "@/lib/utils";

const HoverCard = HoverCardPrimitive.Root;

const HoverCardTrigger = HoverCardPrimitive.Trigger;

const HoverCardContent = React.forwardRef<
  React.ElementRef<typeof HoverCardPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>
>(({ className, align = "center", sideOffset = 4, ...props }, ref) => (
  <HoverCardPrimitive.Content
    ref={ref}
    align={align}
    sideOffset={sideOffset}
    className={cn(
      "z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className,
    )}
    {...props}
  />
));
HoverCardContent.displayName = HoverCardPrimitive.Content.displayName;

export { HoverCard, HoverCardTrigger, HoverCardContent };
</file>

<file path="registry/default/ui/icon-button.tsx">
import React, { memo } from "react";
import { cn } from "@/lib/utils";

type IconSize = "sm" | "md" | "lg" | "xl" | "xxl";

interface BaseIconButtonProps {
  size?: IconSize;
  className?: string;
  iconClassName?: string;
  disabledClassName?: string;
  title?: string;
  disabled?: boolean;
  onClick?: (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void;
}

type IconButtonWithoutChildrenProps = {
  icon: string;
  children?: undefined;
} & BaseIconButtonProps;

type IconButtonWithChildrenProps = {
  icon?: undefined;
  children: string | JSX.Element | JSX.Element[];
} & BaseIconButtonProps;

type IconButtonProps =
  | IconButtonWithoutChildrenProps
  | IconButtonWithChildrenProps;

const IconButton = memo(
  ({
    icon,
    size = "xl",
    className,
    iconClassName,
    disabledClassName,
    disabled = false,
    title,
    onClick,
    children,
  }: IconButtonProps) => {
    return (
      <button
        className={cn(
          "text-bolt-elements-item-contentDefault enabled:hover:text-bolt-elements-item-contentActive enabled:hover:bg-bolt-elements-item-backgroundActive flex items-center rounded-md bg-transparent p-1 disabled:cursor-not-allowed",
          { [cn("opacity-30", disabledClassName)]: disabled },
          className,
        )}
        title={title}
        disabled={disabled}
        onClick={(event) => {
          if (disabled) {
            return;
          }
          onClick?.(event);
        }}
      >
        {children ? (
          children
        ) : (
          <div className={cn(icon, getIconSize(size), iconClassName)}></div>
        )}
      </button>
    );
  },
);

IconButton.displayName = "IconButton";

export default IconButton;

function getIconSize(size: IconSize) {
  if (size === "sm") {
    return "text-sm";
  } else if (size === "md") {
    return "text-md";
  } else if (size === "lg") {
    return "text-lg";
  } else if (size === "xl") {
    return "text-xl";
  } else {
    return "text-2xl";
  }
}
</file>

<file path="registry/default/ui/input.tsx">
import * as React from "react";

import { cn } from "@/lib/utils";

export interface InputProps
  extends React.InputHTMLAttributes<HTMLInputElement> {}

const Input = React.forwardRef<HTMLInputElement, InputProps>(
  ({ className, type, ...props }, ref) => {
    return (
      <input
        type={type}
        className={cn(
          "flex h-9 w-full rounded-md border border-input bg-background px-3 py-1 text-sm shadow-sm transition-colors file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50",
          className,
        )}
        ref={ref}
        {...props}
      />
    );
  },
);
Input.displayName = "Input";

export { Input };
</file>

<file path="registry/default/ui/label.tsx">
"use client";

import * as React from "react";
import * as LabelPrimitive from "@radix-ui/react-label";
import { cva, type VariantProps } from "class-variance-authority";

import { cn } from "@/lib/utils";

const labelVariants = cva(
  "text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70",
);

const Label = React.forwardRef<
  React.ElementRef<typeof LabelPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &
    VariantProps<typeof labelVariants>
>(({ className, ...props }, ref) => (
  <LabelPrimitive.Root
    ref={ref}
    className={cn(labelVariants(), className)}
    {...props}
  />
));
Label.displayName = LabelPrimitive.Root.displayName;

export { Label };
</file>

<file path="registry/default/ui/loading-button.tsx">
import * as React from "react";
import { Slot } from "@radix-ui/react-slot";
import { cva, type VariantProps } from "class-variance-authority";
import { cn } from "@/lib/utils";
import { Loader2 } from "lucide-react";

const buttonVariants = cva(
  "inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50",
  {
    variants: {
      variant: {
        default: "bg-primary text-primary-foreground hover:bg-primary/90",
        destructive:
          "bg-destructive text-destructive-foreground hover:bg-destructive/90",
        outline:
          "border border-input bg-background hover:bg-accent hover:text-accent-foreground",
        secondary:
          "bg-secondary text-secondary-foreground hover:bg-secondary/80",
        ghost: "hover:bg-accent hover:text-accent-foreground",
        link: "text-primary underline-offset-4 hover:underline",
      },
      size: {
        default: "h-10 px-4 py-2",
        sm: "h-9 rounded-md px-3",
        lg: "h-11 rounded-md px-8",
        icon: "h-10 w-10",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  },
);

export interface ButtonProps
  extends React.ButtonHTMLAttributes<HTMLButtonElement>,
    VariantProps<typeof buttonVariants> {
  asChild?: boolean;
  loading?: boolean;
}

const LoadingButton = React.forwardRef<HTMLButtonElement, ButtonProps>(
  (
    { className, variant, size, asChild = false, loading, children, ...props },
    ref,
  ) => {
    if (asChild) {
      return (
        <Slot ref={ref} {...props}>
          <>
            {React.Children.map(
              children as React.ReactElement,
              (child: React.ReactElement) => {
                return React.cloneElement(child, {
                  className: cn(buttonVariants({ variant, size }), className),
                  children: (
                    <>
                      {loading && (
                        <Loader2
                          className={cn(
                            "h-4 w-4 animate-spin",
                            children && "mr-2",
                          )}
                        />
                      )}
                      {child.props.children}
                    </>
                  ),
                });
              },
            )}
          </>
        </Slot>
      );
    }

    return (
      <button
        className={cn(buttonVariants({ variant, size, className }))}
        disabled={loading}
        ref={ref}
        {...props}
      >
        <>
          {loading && (
            <Loader2
              className={cn("h-4 w-4 animate-spin", children && "mr-2")}
            />
          )}
          {children}
        </>
      </button>
    );
  },
);
LoadingButton.displayName = "LoadingButton";

export { LoadingButton, buttonVariants };
</file>

<file path="registry/default/ui/navigation-menu.tsx">
import * as React from "react";
import { ChevronDownIcon } from "@radix-ui/react-icons";
import * as NavigationMenuPrimitive from "@radix-ui/react-navigation-menu";
import { cva } from "class-variance-authority";

import { cn } from "@/lib/utils";

const NavigationMenu = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>
>(({ className, children, ...props }, ref) => (
  <NavigationMenuPrimitive.Root
    ref={ref}
    className={cn(
      "relative z-10 flex max-w-max flex-1 items-center justify-center",
      className,
    )}
    {...props}
  >
    {children}
    <NavigationMenuViewport />
  </NavigationMenuPrimitive.Root>
));
NavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName;

const NavigationMenuList = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.List>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>
>(({ className, ...props }, ref) => (
  <NavigationMenuPrimitive.List
    ref={ref}
    className={cn(
      "group flex flex-1 list-none items-center justify-center space-x-1",
      className,
    )}
    {...props}
  />
));
NavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName;

const NavigationMenuItem = NavigationMenuPrimitive.Item;

const navigationMenuTriggerStyle = cva(
  "group inline-flex h-9 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[active]:bg-accent/50 data-[state=open]:bg-accent/50",
);

const NavigationMenuTrigger = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>
>(({ className, children, ...props }, ref) => (
  <NavigationMenuPrimitive.Trigger
    ref={ref}
    className={cn(navigationMenuTriggerStyle(), "group", className)}
    {...props}
  >
    {children}{" "}
    <ChevronDownIcon
      className="relative top-[1px] ml-1 h-3 w-3 transition duration-300 group-data-[state=open]:rotate-180"
      aria-hidden="true"
    />
  </NavigationMenuPrimitive.Trigger>
));
NavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName;

const NavigationMenuContent = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>
>(({ className, ...props }, ref) => (
  <NavigationMenuPrimitive.Content
    ref={ref}
    className={cn(
      "left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto ",
      className,
    )}
    {...props}
  />
));
NavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName;

const NavigationMenuLink = NavigationMenuPrimitive.Link;

const NavigationMenuViewport = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>
>(({ className, ...props }, ref) => (
  <div className={cn("absolute left-0 top-full flex justify-center")}>
    <NavigationMenuPrimitive.Viewport
      className={cn(
        "origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]",
        className,
      )}
      ref={ref}
      {...props}
    />
  </div>
));
NavigationMenuViewport.displayName =
  NavigationMenuPrimitive.Viewport.displayName;

const NavigationMenuIndicator = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>
>(({ className, ...props }, ref) => (
  <NavigationMenuPrimitive.Indicator
    ref={ref}
    className={cn(
      "top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in",
      className,
    )}
    {...props}
  >
    <div className="relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md" />
  </NavigationMenuPrimitive.Indicator>
));
NavigationMenuIndicator.displayName =
  NavigationMenuPrimitive.Indicator.displayName;

export {
  navigationMenuTriggerStyle,
  NavigationMenu,
  NavigationMenuList,
  NavigationMenuItem,
  NavigationMenuContent,
  NavigationMenuTrigger,
  NavigationMenuLink,
  NavigationMenuIndicator,
  NavigationMenuViewport,
};
</file>

<file path="registry/default/ui/popover.tsx">
"use client";

import * as React from "react";
import * as PopoverPrimitive from "@radix-ui/react-popover";

import { cn } from "@/lib/utils";

const Popover = PopoverPrimitive.Root;

const PopoverTrigger = PopoverPrimitive.Trigger;

const PopoverAnchor = PopoverPrimitive.Anchor;

const PopoverContent = React.forwardRef<
  React.ElementRef<typeof PopoverPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>
>(({ className, align = "center", sideOffset = 4, ...props }, ref) => (
  <PopoverPrimitive.Portal>
    <PopoverPrimitive.Content
      ref={ref}
      align={align}
      sideOffset={sideOffset}
      className={cn(
        "z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        className,
      )}
      {...props}
    />
  </PopoverPrimitive.Portal>
));
PopoverContent.displayName = PopoverPrimitive.Content.displayName;

export { Popover, PopoverTrigger, PopoverContent, PopoverAnchor };
</file>

<file path="registry/default/ui/resizable.tsx">
"use client";
import * as ResizablePrimitive from "react-resizable-panels";

import { cn } from "@/lib/utils";
import { DragHandleDots2Icon } from "@radix-ui/react-icons";

const ResizablePanelGroup = ({
  className,
  ...props
}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (
  <ResizablePrimitive.PanelGroup
    className={cn(
      "flex h-full w-full data-[panel-group-direction=vertical]:flex-col",
      className,
    )}
    {...props}
  />
);

const ResizablePanel = ResizablePrimitive.Panel;

const ResizableHandle = ({
  withHandle,
  className,
  ...props
}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {
  withHandle?: boolean;
}) => (
  <ResizablePrimitive.PanelResizeHandle
    className={cn(
      "relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90",
      className,
    )}
    {...props}
  >
    {withHandle && (
      <div className="z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border">
        <DragHandleDots2Icon className="h-2.5 w-2.5" />
      </div>
    )}
  </ResizablePrimitive.PanelResizeHandle>
);

export { ResizablePanelGroup, ResizablePanel, ResizableHandle };
</file>

<file path="registry/default/ui/scroll-area.tsx">
"use client";

import * as React from "react";
import * as ScrollAreaPrimitive from "@radix-ui/react-scroll-area";

import { cn } from "@/lib/utils";

const ScrollArea = React.forwardRef<
  React.ElementRef<typeof ScrollAreaPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>
>(({ className, children, ...props }, ref) => (
  <ScrollAreaPrimitive.Root
    ref={ref}
    className={cn("relative overflow-hidden", className)}
    {...props}
  >
    <ScrollAreaPrimitive.Viewport className="size-full rounded-[inherit]">
      {children}
    </ScrollAreaPrimitive.Viewport>
    <ScrollBar />
    <ScrollAreaPrimitive.Corner />
  </ScrollAreaPrimitive.Root>
));
ScrollArea.displayName = ScrollAreaPrimitive.Root.displayName;

const ScrollBar = React.forwardRef<
  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,
  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>
>(({ className, orientation = "vertical", ...props }, ref) => (
  <ScrollAreaPrimitive.ScrollAreaScrollbar
    ref={ref}
    orientation={orientation}
    className={cn(
      "flex touch-none select-none transition-colors",
      orientation === "vertical" &&
        "h-full w-2.5 border-l border-l-transparent p-px",
      orientation === "horizontal" &&
        "h-2.5 border-t border-t-transparent p-px",
      className,
    )}
    {...props}
  >
    <ScrollAreaPrimitive.ScrollAreaThumb className="relative flex-1 rounded-full bg-border" />
  </ScrollAreaPrimitive.ScrollAreaScrollbar>
));
ScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName;

export { ScrollArea, ScrollBar };
</file>

<file path="registry/default/ui/select.tsx">
"use client";

import * as React from "react";
import * as SelectPrimitive from "@radix-ui/react-select";
import { cn } from "@/lib/utils";
import {
  CheckIcon,
  ChevronDownIcon,
  ChevronUpIcon,
} from "@radix-ui/react-icons";

const Select = SelectPrimitive.Root;

const SelectGroup = SelectPrimitive.Group;

const SelectValue = SelectPrimitive.Value;

const SelectTrigger = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>
>(({ className, children, ...props }, ref) => (
  <SelectPrimitive.Trigger
    ref={ref}
    className={cn(
      "flex h-9 w-full items-center justify-between whitespace-nowrap rounded-md border border-input bg-transparent px-3 py-2 text-sm shadow-sm ring-offset-background placeholder:text-muted-foreground focus:outline-none focus:ring-1 focus:ring-ring disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1",
      className,
    )}
    {...props}
  >
    {children}
    <SelectPrimitive.Icon asChild>
      <ChevronDownIcon className="h-4 w-4 opacity-50" />
    </SelectPrimitive.Icon>
  </SelectPrimitive.Trigger>
));
SelectTrigger.displayName = SelectPrimitive.Trigger.displayName;

const SelectScrollUpButton = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.ScrollUpButton
    ref={ref}
    className={cn(
      "flex cursor-default items-center justify-center py-1",
      className,
    )}
    {...props}
  >
    <ChevronUpIcon className="h-4 w-4" />
  </SelectPrimitive.ScrollUpButton>
));
SelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName;

const SelectScrollDownButton = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.ScrollDownButton
    ref={ref}
    className={cn(
      "flex cursor-default items-center justify-center py-1",
      className,
    )}
    {...props}
  >
    <ChevronDownIcon className="h-4 w-4" />
  </SelectPrimitive.ScrollDownButton>
));
SelectScrollDownButton.displayName =
  SelectPrimitive.ScrollDownButton.displayName;

const SelectContent = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>
>(({ className, children, position = "popper", ...props }, ref) => (
  <SelectPrimitive.Portal>
    <SelectPrimitive.Content
      ref={ref}
      className={cn(
        "relative z-50 max-h-96 min-w-[8rem] overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        position === "popper" &&
          "data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1",
        className,
      )}
      position={position}
      {...props}
    >
      <SelectScrollUpButton />
      <SelectPrimitive.Viewport
        className={cn(
          "p-1",
          position === "popper" &&
            "h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]",
        )}
      >
        {children}
      </SelectPrimitive.Viewport>
      <SelectScrollDownButton />
    </SelectPrimitive.Content>
  </SelectPrimitive.Portal>
));
SelectContent.displayName = SelectPrimitive.Content.displayName;

const SelectLabel = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.Label
    ref={ref}
    className={cn("px-2 py-1.5 text-sm font-semibold", className)}
    {...props}
  />
));
SelectLabel.displayName = SelectPrimitive.Label.displayName;

const SelectItem = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>
>(({ className, children, ...props }, ref) => (
  <SelectPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-2 pr-8 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className,
    )}
    {...props}
  >
    <span className="absolute right-2 flex h-3.5 w-3.5 items-center justify-center">
      <SelectPrimitive.ItemIndicator>
        <CheckIcon className="h-4 w-4" />
      </SelectPrimitive.ItemIndicator>
    </span>
    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>
  </SelectPrimitive.Item>
));
SelectItem.displayName = SelectPrimitive.Item.displayName;

const SelectSeparator = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-muted", className)}
    {...props}
  />
));
SelectSeparator.displayName = SelectPrimitive.Separator.displayName;

export {
  Select,
  SelectGroup,
  SelectValue,
  SelectTrigger,
  SelectContent,
  SelectLabel,
  SelectItem,
  SelectSeparator,
  SelectScrollUpButton,
  SelectScrollDownButton,
};
</file>

<file path="registry/default/ui/separator.tsx">
"use client";

import * as React from "react";
import * as SeparatorPrimitive from "@radix-ui/react-separator";

import { cn } from "@/lib/utils";

const Separator = React.forwardRef<
  React.ElementRef<typeof SeparatorPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>
>(
  (
    { className, orientation = "horizontal", decorative = true, ...props },
    ref,
  ) => (
    <SeparatorPrimitive.Root
      ref={ref}
      decorative={decorative}
      orientation={orientation}
      className={cn(
        "shrink-0 bg-border",
        orientation === "horizontal" ? "h-px w-full" : "h-full w-px",
        className,
      )}
      {...props}
    />
  ),
);
Separator.displayName = SeparatorPrimitive.Root.displayName;

export { Separator };
</file>

<file path="registry/default/ui/sheet.tsx">
"use client";

import * as React from "react";
import * as SheetPrimitive from "@radix-ui/react-dialog";
import { Cross2Icon } from "@radix-ui/react-icons";
import { cva, type VariantProps } from "class-variance-authority";

import { cn } from "@/lib/utils";

const Sheet = SheetPrimitive.Root;

const SheetTrigger = SheetPrimitive.Trigger;

const SheetClose = SheetPrimitive.Close;

const SheetPortal = SheetPrimitive.Portal;

const SheetOverlay = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <SheetPrimitive.Overlay
    className={cn(
      "fixed inset-0 z-50 bg-background/80 backdrop-blur-sm data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className,
    )}
    {...props}
    ref={ref}
  />
));
SheetOverlay.displayName = SheetPrimitive.Overlay.displayName;

const sheetVariants = cva(
  "fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=closed]:duration-300 data-[state=open]:duration-500 data-[state=open]:animate-in data-[state=closed]:animate-out",
  {
    variants: {
      side: {
        top: "inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top",
        bottom:
          "inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom",
        left: "inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm",
        right:
          "inset-y-0 right-0 h-full w-3/4 border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm",
      },
    },
    defaultVariants: {
      side: "right",
    },
  },
);

interface SheetContentProps
  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,
    VariantProps<typeof sheetVariants> {}

const SheetContent = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Content>,
  SheetContentProps
>(({ side = "right", className, children, ...props }, ref) => (
  <SheetPortal>
    <SheetOverlay />
    <SheetPrimitive.Content
      ref={ref}
      className={cn(sheetVariants({ side }), className)}
      {...props}
    >
      {children}
      <SheetPrimitive.Close className="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary">
        <Cross2Icon className="size-4" />
        <span className="sr-only">Close</span>
      </SheetPrimitive.Close>
    </SheetPrimitive.Content>
  </SheetPortal>
));
SheetContent.displayName = SheetPrimitive.Content.displayName;

const SheetHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col space-y-2 text-center sm:text-left",
      className,
    )}
    {...props}
  />
);
SheetHeader.displayName = "SheetHeader";

const SheetFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className,
    )}
    {...props}
  />
);
SheetFooter.displayName = "SheetFooter";

const SheetTitle = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>
>(({ className, ...props }, ref) => (
  <SheetPrimitive.Title
    ref={ref}
    className={cn("text-lg font-semibold text-foreground", className)}
    {...props}
  />
));
SheetTitle.displayName = SheetPrimitive.Title.displayName;

const SheetDescription = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>
>(({ className, ...props }, ref) => (
  <SheetPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
));
SheetDescription.displayName = SheetPrimitive.Description.displayName;

export {
  Sheet,
  SheetPortal,
  SheetOverlay,
  SheetTrigger,
  SheetClose,
  SheetContent,
  SheetHeader,
  SheetFooter,
  SheetTitle,
  SheetDescription,
};
</file>

<file path="registry/default/ui/sidebar.tsx">
"use client";

import * as React from "react";
import { Slot } from "@radix-ui/react-slot";
import { VariantProps, cva } from "class-variance-authority";
import { useIsMobile } from "@/hooks/use-mobile";
import { cn } from "@/lib/utils";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Separator } from "@/components/ui/separator";
import {
  Sheet,
  SheetContent,
  SheetDescription,
  SheetHeader,
  SheetTitle,
} from "@/components/ui/sheet";
import { Skeleton } from "@/components/ui/skeleton";
import {
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
} from "@/components/ui/tooltip";
import { ViewVerticalIcon } from "@radix-ui/react-icons";

const SIDEBAR_COOKIE_NAME = "sidebar_state";
const SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7;
const SIDEBAR_WIDTH = "16rem";
const SIDEBAR_WIDTH_MOBILE = "18rem";
const SIDEBAR_WIDTH_ICON = "3rem";
const SIDEBAR_KEYBOARD_SHORTCUT = "b";

type SidebarContext = {
  state: "expanded" | "collapsed";
  open: boolean;
  setOpen: (open: boolean) => void;
  openMobile: boolean;
  setOpenMobile: (open: boolean) => void;
  isMobile: boolean;
  toggleSidebar: () => void;
};

const SidebarContext = React.createContext<SidebarContext | null>(null);

function useSidebar() {
  const context = React.useContext(SidebarContext);
  if (!context) {
    throw new Error("useSidebar must be used within a SidebarProvider.");
  }

  return context;
}

const SidebarProvider = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & {
    defaultOpen?: boolean;
    open?: boolean;
    onOpenChange?: (open: boolean) => void;
  }
>(
  (
    {
      defaultOpen = true,
      open: openProp,
      onOpenChange: setOpenProp,
      className,
      style,
      children,
      ...props
    },
    ref,
  ) => {
    const isMobile = useIsMobile();
    const [openMobile, setOpenMobile] = React.useState(false);

    // This is the internal state of the sidebar.
    // We use openProp and setOpenProp for control from outside the component.
    const [_open, _setOpen] = React.useState(defaultOpen);
    const open = openProp ?? _open;
    const setOpen = React.useCallback(
      (value: boolean | ((value: boolean) => boolean)) => {
        const openState = typeof value === "function" ? value(open) : value;
        if (setOpenProp) {
          setOpenProp(openState);
        } else {
          _setOpen(openState);
        }

        // This sets the cookie to keep the sidebar state.
        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`;
      },
      [setOpenProp, open],
    );

    // Helper to toggle the sidebar.
    const toggleSidebar = React.useCallback(() => {
      return isMobile
        ? setOpenMobile((open) => !open)
        : setOpen((open) => !open);
    }, [isMobile, setOpen, setOpenMobile]);

    // Adds a keyboard shortcut to toggle the sidebar.
    React.useEffect(() => {
      const handleKeyDown = (event: KeyboardEvent) => {
        if (
          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&
          (event.metaKey || event.ctrlKey)
        ) {
          event.preventDefault();
          toggleSidebar();
        }
      };

      window.addEventListener("keydown", handleKeyDown);
      return () => window.removeEventListener("keydown", handleKeyDown);
    }, [toggleSidebar]);

    // We add a state so that we can do data-state="expanded" or "collapsed".
    // This makes it easier to style the sidebar with Tailwind classes.
    const state = open ? "expanded" : "collapsed";

    const contextValue = React.useMemo<SidebarContext>(
      () => ({
        state,
        open,
        setOpen,
        isMobile,
        openMobile,
        setOpenMobile,
        toggleSidebar,
      }),
      [
        state,
        open,
        setOpen,
        isMobile,
        openMobile,
        setOpenMobile,
        toggleSidebar,
      ],
    );

    return (
      <SidebarContext.Provider value={contextValue}>
        <TooltipProvider delayDuration={0}>
          <div
            style={
              {
                "--sidebar-width": SIDEBAR_WIDTH,
                "--sidebar-width-icon": SIDEBAR_WIDTH_ICON,
                ...style,
              } as React.CSSProperties
            }
            className={cn(
              "group/sidebar-wrapper has-[[data-variant=inset]]:bg-sidebar flex min-h-svh w-full",
              className,
            )}
            ref={ref}
            {...props}
          >
            {children}
          </div>
        </TooltipProvider>
      </SidebarContext.Provider>
    );
  },
);
SidebarProvider.displayName = "SidebarProvider";

const Sidebar = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & {
    side?: "left" | "right";
    variant?: "sidebar" | "floating" | "inset";
    collapsible?: "offcanvas" | "icon" | "none";
  }
>(
  (
    {
      side = "left",
      variant = "sidebar",
      collapsible = "offcanvas",
      className,
      children,
      ...props
    },
    ref,
  ) => {
    const { isMobile, state, openMobile, setOpenMobile } = useSidebar();

    if (collapsible === "none") {
      return (
        <div
          className={cn(
            "bg-sidebar text-sidebar-foreground flex h-full w-[--sidebar-width] flex-col",
            className,
          )}
          ref={ref}
          {...props}
        >
          {children}
        </div>
      );
    }

    if (isMobile) {
      return (
        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>
          <SheetContent
            data-sidebar="sidebar"
            data-mobile="true"
            className="bg-sidebar text-sidebar-foreground w-[--sidebar-width] p-0 [&>button]:hidden"
            style={
              {
                "--sidebar-width": SIDEBAR_WIDTH_MOBILE,
              } as React.CSSProperties
            }
            side={side}
          >
            <SheetHeader className="sr-only">
              <SheetTitle>Sidebar</SheetTitle>
              <SheetDescription>Displays the mobile sidebar.</SheetDescription>
            </SheetHeader>
            <div className="flex h-full w-full flex-col">{children}</div>
          </SheetContent>
        </Sheet>
      );
    }

    return (
      <div
        ref={ref}
        className="text-sidebar-foreground group peer hidden md:block"
        data-state={state}
        data-collapsible={state === "collapsed" ? collapsible : ""}
        data-variant={variant}
        data-side={side}
      >
        {/* This is what handles the sidebar gap on desktop */}
        <div
          className={cn(
            "relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear",
            "group-data-[collapsible=offcanvas]:w-0",
            "group-data-[side=right]:rotate-180",
            variant === "floating" || variant === "inset"
              ? "group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]"
              : "group-data-[collapsible=icon]:w-[--sidebar-width-icon]",
          )}
        />
        <div
          className={cn(
            "fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex",
            side === "left"
              ? "left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]"
              : "right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]",
            // Adjust the padding for floating and inset variants.
            variant === "floating" || variant === "inset"
              ? "p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]"
              : "group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l",
            className,
          )}
          {...props}
        >
          <div
            data-sidebar="sidebar"
            className="bg-sidebar group-data-[variant=floating]:border-sidebar-border flex h-full w-full flex-col group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:shadow"
          >
            {children}
          </div>
        </div>
      </div>
    );
  },
);
Sidebar.displayName = "Sidebar";

const SidebarTrigger = React.forwardRef<
  React.ElementRef<typeof Button>,
  React.ComponentProps<typeof Button>
>(({ className, onClick, ...props }, ref) => {
  const { toggleSidebar } = useSidebar();

  return (
    <Button
      ref={ref}
      data-sidebar="trigger"
      variant="ghost"
      size="icon"
      className={cn("h-7 w-7", className)}
      onClick={(event) => {
        onClick?.(event);
        toggleSidebar();
      }}
      {...props}
    >
      <ViewVerticalIcon />
      <span className="sr-only">Toggle Sidebar</span>
    </Button>
  );
});
SidebarTrigger.displayName = "SidebarTrigger";

const SidebarRail = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<"button">
>(({ className, ...props }, ref) => {
  const { toggleSidebar } = useSidebar();

  return (
    <button
      ref={ref}
      data-sidebar="rail"
      aria-label="Toggle Sidebar"
      tabIndex={-1}
      onClick={toggleSidebar}
      title="Toggle Sidebar"
      className={cn(
        "hover:after:bg-sidebar-border absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex",
        "[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize",
        "[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize",
        "group-data-[collapsible=offcanvas]:hover:bg-sidebar group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full",
        "[[data-side=left][data-collapsible=offcanvas]_&]:-right-2",
        "[[data-side=right][data-collapsible=offcanvas]_&]:-left-2",
        className,
      )}
      {...props}
    />
  );
});
SidebarRail.displayName = "SidebarRail";

const SidebarInset = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"main">
>(({ className, ...props }, ref) => {
  return (
    <main
      ref={ref}
      className={cn(
        "relative flex w-full flex-1 flex-col bg-background",
        "md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow",
        className,
      )}
      {...props}
    />
  );
});
SidebarInset.displayName = "SidebarInset";

const SidebarInput = React.forwardRef<
  React.ElementRef<typeof Input>,
  React.ComponentProps<typeof Input>
>(({ className, ...props }, ref) => {
  return (
    <Input
      ref={ref}
      data-sidebar="input"
      className={cn(
        "focus-visible:ring-sidebar-ring h-8 w-full bg-background shadow-none focus-visible:ring-2",
        className,
      )}
      {...props}
    />
  );
});
SidebarInput.displayName = "SidebarInput";

const SidebarHeader = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => {
  return (
    <div
      ref={ref}
      data-sidebar="header"
      className={cn("flex flex-col gap-2 p-2", className)}
      {...props}
    />
  );
});
SidebarHeader.displayName = "SidebarHeader";

const SidebarFooter = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => {
  return (
    <div
      ref={ref}
      data-sidebar="footer"
      className={cn("flex flex-col gap-2 p-2", className)}
      {...props}
    />
  );
});
SidebarFooter.displayName = "SidebarFooter";

const SidebarSeparator = React.forwardRef<
  React.ElementRef<typeof Separator>,
  React.ComponentProps<typeof Separator>
>(({ className, ...props }, ref) => {
  return (
    <Separator
      ref={ref}
      data-sidebar="separator"
      className={cn("bg-sidebar-border mx-2 w-auto", className)}
      {...props}
    />
  );
});
SidebarSeparator.displayName = "SidebarSeparator";

const SidebarContent = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => {
  return (
    <div
      ref={ref}
      data-sidebar="content"
      className={cn(
        "flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden",
        className,
      )}
      {...props}
    />
  );
});
SidebarContent.displayName = "SidebarContent";

const SidebarGroup = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => {
  return (
    <div
      ref={ref}
      data-sidebar="group"
      className={cn("relative flex w-full min-w-0 flex-col p-2", className)}
      {...props}
    />
  );
});
SidebarGroup.displayName = "SidebarGroup";

const SidebarGroupLabel = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & { asChild?: boolean }
>(({ className, asChild = false, ...props }, ref) => {
  const Comp = asChild ? Slot : "div";

  return (
    <Comp
      ref={ref as any}
      data-sidebar="group-label"
      className={cn(
        "text-sidebar-foreground/70 ring-sidebar-ring flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium outline-none transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0",
        "group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0",
        className,
      )}
      {...props}
    />
  );
});
SidebarGroupLabel.displayName = "SidebarGroupLabel";

const SidebarGroupAction = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<"button"> & { asChild?: boolean }
>(({ className, asChild = false, ...props }, ref) => {
  const Comp = asChild ? Slot : "button";

  return (
    <Comp
      ref={ref as any}
      data-sidebar="group-action"
      className={cn(
        "text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-none transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0",
        // Increases the hit area of the button on mobile.
        "after:absolute after:-inset-2 after:md:hidden",
        "group-data-[collapsible=icon]:hidden",
        className,
      )}
      {...props}
    />
  );
});
SidebarGroupAction.displayName = "SidebarGroupAction";

const SidebarGroupContent = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    data-sidebar="group-content"
    className={cn("w-full text-sm", className)}
    {...props}
  />
));
SidebarGroupContent.displayName = "SidebarGroupContent";

const SidebarMenu = React.forwardRef<
  HTMLUListElement,
  React.ComponentProps<"ul">
>(({ className, ...props }, ref) => (
  <ul
    ref={ref}
    data-sidebar="menu"
    className={cn("flex w-full min-w-0 flex-col gap-1", className)}
    {...props}
  />
));
SidebarMenu.displayName = "SidebarMenu";

const SidebarMenuItem = React.forwardRef<
  HTMLLIElement,
  React.ComponentProps<"li">
>(({ className, ...props }, ref) => (
  <li
    ref={ref}
    data-sidebar="menu-item"
    className={cn("group/menu-item relative", className)}
    {...props}
  />
));
SidebarMenuItem.displayName = "SidebarMenuItem";

const sidebarMenuButtonVariants = cva(
  "peer/menu-button ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground active:bg-sidebar-accent active:text-sidebar-accent-foreground data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none transition-[width,height,padding] focus-visible:ring-2 disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:font-medium group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0",
  {
    variants: {
      variant: {
        default: "hover:bg-sidebar-accent hover:text-sidebar-accent-foreground",
        outline:
          "hover:bg-sidebar-accent hover:text-sidebar-accent-foreground bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]",
      },
      size: {
        default: "h-8 text-sm",
        sm: "h-7 text-xs",
        lg: "h-12 text-sm group-data-[collapsible=icon]:!p-0",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  },
);

const SidebarMenuButton = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<"button"> & {
    asChild?: boolean;
    isActive?: boolean;
    tooltip?: string | React.ComponentProps<typeof TooltipContent>;
  } & VariantProps<typeof sidebarMenuButtonVariants>
>(
  (
    {
      asChild = false,
      isActive = false,
      variant = "default",
      size = "default",
      tooltip,
      className,
      ...props
    },
    ref,
  ) => {
    const Comp = asChild ? Slot : "button";
    const { isMobile, state } = useSidebar();

    const button = (
      <Comp
        ref={ref as any}
        data-sidebar="menu-button"
        data-size={size}
        data-active={isActive}
        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}
        {...props}
      />
    );

    if (!tooltip) {
      return button;
    }

    if (typeof tooltip === "string") {
      tooltip = {
        children: tooltip,
      };
    }

    return (
      <Tooltip>
        <TooltipTrigger asChild>{button}</TooltipTrigger>
        <TooltipContent
          side="right"
          align="center"
          hidden={state !== "collapsed" || isMobile}
          {...tooltip}
        />
      </Tooltip>
    );
  },
);
SidebarMenuButton.displayName = "SidebarMenuButton";

const SidebarMenuAction = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<"button"> & {
    asChild?: boolean;
    showOnHover?: boolean;
  }
>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {
  const Comp = asChild ? Slot : "button";

  return (
    <Comp
      ref={ref as any}
      data-sidebar="menu-action"
      className={cn(
        "text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground peer-hover/menu-button:text-sidebar-accent-foreground absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-none transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0",
        // Increases the hit area of the button on mobile.
        "after:absolute after:-inset-2 after:md:hidden",
        "peer-data-[size=sm]/menu-button:top-1",
        "peer-data-[size=default]/menu-button:top-1.5",
        "peer-data-[size=lg]/menu-button:top-2.5",
        "group-data-[collapsible=icon]:hidden",
        showOnHover &&
          "peer-data-[active=true]/menu-button:text-sidebar-accent-foreground group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 md:opacity-0",
        className,
      )}
      {...props}
    />
  );
});
SidebarMenuAction.displayName = "SidebarMenuAction";

const SidebarMenuBadge = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    data-sidebar="menu-badge"
    className={cn(
      "text-sidebar-foreground pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums",
      "peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground",
      "peer-data-[size=sm]/menu-button:top-1",
      "peer-data-[size=default]/menu-button:top-1.5",
      "peer-data-[size=lg]/menu-button:top-2.5",
      "group-data-[collapsible=icon]:hidden",
      className,
    )}
    {...props}
  />
));
SidebarMenuBadge.displayName = "SidebarMenuBadge";

const SidebarMenuSkeleton = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & {
    showIcon?: boolean;
  }
>(({ className, showIcon = false, ...props }, ref) => {
  // Random width between 50 to 90%.
  const width = React.useMemo(() => {
    return `${Math.floor(Math.random() * 40) + 50}%`;
  }, []);

  return (
    <div
      ref={ref}
      data-sidebar="menu-skeleton"
      className={cn("flex h-8 items-center gap-2 rounded-md px-2", className)}
      {...props}
    >
      {showIcon && (
        <Skeleton
          className="size-4 rounded-md"
          data-sidebar="menu-skeleton-icon"
        />
      )}
      <Skeleton
        className="h-4 max-w-[--skeleton-width] flex-1"
        data-sidebar="menu-skeleton-text"
        style={
          {
            "--skeleton-width": width,
          } as React.CSSProperties
        }
      />
    </div>
  );
});
SidebarMenuSkeleton.displayName = "SidebarMenuSkeleton";

const SidebarMenuSub = React.forwardRef<
  HTMLUListElement,
  React.ComponentProps<"ul">
>(({ className, ...props }, ref) => (
  <ul
    ref={ref}
    data-sidebar="menu-sub"
    className={cn(
      "border-sidebar-border mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l px-2.5 py-0.5",
      "group-data-[collapsible=icon]:hidden",
      className,
    )}
    {...props}
  />
));
SidebarMenuSub.displayName = "SidebarMenuSub";

const SidebarMenuSubItem = React.forwardRef<
  HTMLLIElement,
  React.ComponentProps<"li">
>(({ ...props }, ref) => <li ref={ref} {...props} />);
SidebarMenuSubItem.displayName = "SidebarMenuSubItem";

const SidebarMenuSubButton = React.forwardRef<
  HTMLAnchorElement,
  React.ComponentProps<"a"> & {
    asChild?: boolean;
    size?: "sm" | "md";
    isActive?: boolean;
  }
>(({ asChild = false, size = "md", isActive, className, ...props }, ref) => {
  const Comp = asChild ? Slot : "a";

  return (
    <Comp
      ref={ref as any}
      data-sidebar="menu-sub-button"
      data-size={size}
      data-active={isActive}
      className={cn(
        "text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground active:bg-sidebar-accent active:text-sidebar-accent-foreground [&>svg]:text-sidebar-accent-foreground flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 outline-none focus-visible:ring-2 disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0",
        "data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground",
        size === "sm" && "text-xs",
        size === "md" && "text-sm",
        "group-data-[collapsible=icon]:hidden",
        className,
      )}
      {...props}
    />
  );
});
SidebarMenuSubButton.displayName = "SidebarMenuSubButton";

export {
  Sidebar,
  SidebarContent,
  SidebarFooter,
  SidebarGroup,
  SidebarGroupAction,
  SidebarGroupContent,
  SidebarGroupLabel,
  SidebarHeader,
  SidebarInput,
  SidebarInset,
  SidebarMenu,
  SidebarMenuAction,
  SidebarMenuBadge,
  SidebarMenuButton,
  SidebarMenuItem,
  SidebarMenuSkeleton,
  SidebarMenuSub,
  SidebarMenuSubButton,
  SidebarMenuSubItem,
  SidebarProvider,
  SidebarRail,
  SidebarSeparator,
  SidebarTrigger,
  useSidebar,
};
</file>

<file path="registry/default/ui/skeleton.tsx">
import { cn } from "@/lib/utils";

function Skeleton({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) {
  return (
    <div
      className={cn("animate-pulse rounded-md bg-primary/10", className)}
      {...props}
    />
  );
}

export { Skeleton };
</file>

<file path="registry/default/ui/sonner.tsx">
"use client";

import * as React from "react";
import * as ToastPrimitives from "@radix-ui/react-toast";
import { cva, type VariantProps } from "class-variance-authority";
import { X } from "lucide-react";

import { cn } from "@/lib/utils";

const ToastProvider = ToastPrimitives.Provider;

const ToastViewport = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Viewport>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Viewport
    ref={ref}
    className={cn(
      "fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]",
      className,
    )}
    {...props}
  />
));
ToastViewport.displayName = ToastPrimitives.Viewport.displayName;

const toastVariants = cva(
  "group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full",
  {
    variants: {
      variant: {
        default: "border bg-background text-foreground",
        destructive:
          "destructive group border-destructive bg-destructive text-destructive-foreground",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  },
);

const Toast = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Root>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &
    VariantProps<typeof toastVariants>
>(({ className, variant, ...props }, ref) => {
  return (
    <ToastPrimitives.Root
      ref={ref}
      className={cn(toastVariants({ variant }), className)}
      {...props}
    />
  );
});
Toast.displayName = ToastPrimitives.Root.displayName;

const ToastAction = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Action>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Action
    ref={ref}
    className={cn(
      "inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive",
      className,
    )}
    {...props}
  />
));
ToastAction.displayName = ToastPrimitives.Action.displayName;

const ToastClose = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Close>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Close
    ref={ref}
    className={cn(
      "absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600",
      className,
    )}
    toast-close=""
    {...props}
  >
    <X className="h-4 w-4" />
  </ToastPrimitives.Close>
));
ToastClose.displayName = ToastPrimitives.Close.displayName;

const ToastTitle = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Title>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Title
    ref={ref}
    className={cn("text-sm font-semibold", className)}
    {...props}
  />
));
ToastTitle.displayName = ToastPrimitives.Title.displayName;

const ToastDescription = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Description>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Description
    ref={ref}
    className={cn("text-sm opacity-90", className)}
    {...props}
  />
));
ToastDescription.displayName = ToastPrimitives.Description.displayName;

type ToastProps = React.ComponentPropsWithoutRef<typeof Toast>;

type ToastActionElement = React.ReactElement<typeof ToastAction>;

export {
  type ToastProps,
  type ToastActionElement,
  ToastProvider,
  ToastViewport,
  Toast,
  ToastTitle,
  ToastDescription,
  ToastClose,
  ToastAction,
};
</file>

<file path="registry/default/ui/switch.tsx">
"use client";

import * as React from "react";
import * as SwitchPrimitives from "@radix-ui/react-switch";

import { cn } from "@/lib/utils";

const Switch = React.forwardRef<
  React.ElementRef<typeof SwitchPrimitives.Root>,
  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>
>(({ className, ...props }, ref) => (
  <SwitchPrimitives.Root
    className={cn(
      "peer inline-flex h-5 w-9 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent shadow-sm transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input",
      className,
    )}
    {...props}
    ref={ref}
  >
    <SwitchPrimitives.Thumb
      className={cn(
        "pointer-events-none block size-4 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-4 data-[state=unchecked]:translate-x-0",
      )}
    />
  </SwitchPrimitives.Root>
));
Switch.displayName = SwitchPrimitives.Root.displayName;

export { Switch };
</file>

<file path="registry/default/ui/table.tsx">
import * as React from "react";

import { cn } from "@/lib/utils";

const Table = React.forwardRef<
  HTMLTableElement,
  React.HTMLAttributes<HTMLTableElement>
>(({ className, ...props }, ref) => (
  <div className="w-full overflow-auto">
    <table
      ref={ref}
      className={cn("w-full caption-bottom text-sm", className)}
      {...props}
    />
  </div>
));
Table.displayName = "Table";

const TableHeader = React.forwardRef<
  HTMLTableSectionElement,
  React.HTMLAttributes<HTMLTableSectionElement>
>(({ className, ...props }, ref) => (
  <thead ref={ref} className={cn("[&_tr]:border-b", className)} {...props} />
));
TableHeader.displayName = "TableHeader";

const TableBody = React.forwardRef<
  HTMLTableSectionElement,
  React.HTMLAttributes<HTMLTableSectionElement>
>(({ className, ...props }, ref) => (
  <tbody
    ref={ref}
    className={cn("[&_tr:last-child]:border-0", className)}
    {...props}
  />
));
TableBody.displayName = "TableBody";

const TableFooter = React.forwardRef<
  HTMLTableSectionElement,
  React.HTMLAttributes<HTMLTableSectionElement>
>(({ className, ...props }, ref) => (
  <tfoot
    ref={ref}
    className={cn("bg-primary font-medium text-primary-foreground", className)}
    {...props}
  />
));
TableFooter.displayName = "TableFooter";

const TableRow = React.forwardRef<
  HTMLTableRowElement,
  React.HTMLAttributes<HTMLTableRowElement>
>(({ className, ...props }, ref) => (
  <tr
    ref={ref}
    className={cn(
      "border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted",
      className,
    )}
    {...props}
  />
));
TableRow.displayName = "TableRow";

const TableHead = React.forwardRef<
  HTMLTableCellElement,
  React.ThHTMLAttributes<HTMLTableCellElement>
>(({ className, ...props }, ref) => (
  <th
    ref={ref}
    className={cn(
      "h-10 px-2 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0 [&>[role=checkbox]]:translate-y-[2px]",
      className,
    )}
    {...props}
  />
));
TableHead.displayName = "TableHead";

const TableCell = React.forwardRef<
  HTMLTableCellElement,
  React.TdHTMLAttributes<HTMLTableCellElement>
>(({ className, ...props }, ref) => (
  <td
    ref={ref}
    className={cn(
      "p-2 align-middle [&:has([role=checkbox])]:pr-0 [&>[role=checkbox]]:translate-y-[2px]",
      className,
    )}
    {...props}
  />
));
TableCell.displayName = "TableCell";

const TableCaption = React.forwardRef<
  HTMLTableCaptionElement,
  React.HTMLAttributes<HTMLTableCaptionElement>
>(({ className, ...props }, ref) => (
  <caption
    ref={ref}
    className={cn("mt-4 text-sm text-muted-foreground", className)}
    {...props}
  />
));
TableCaption.displayName = "TableCaption";

export {
  Table,
  TableHeader,
  TableBody,
  TableFooter,
  TableHead,
  TableRow,
  TableCell,
  TableCaption,
};
</file>

<file path="registry/default/ui/tabs.tsx">
"use client";

import * as React from "react";
import * as TabsPrimitive from "@radix-ui/react-tabs";

import { cn } from "@/lib/utils";

const Tabs = TabsPrimitive.Root;

const TabsList = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.List>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.List
    ref={ref}
    className={cn(
      "inline-flex h-9 items-center justify-center rounded-lg bg-muted p-1 text-muted-foreground",
      className,
    )}
    {...props}
  />
));
TabsList.displayName = TabsPrimitive.List.displayName;

const TabsTrigger = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.Trigger
    ref={ref}
    className={cn(
      "inline-flex items-center justify-center whitespace-nowrap rounded-md px-3 py-1 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow",
      className,
    )}
    {...props}
  />
));
TabsTrigger.displayName = TabsPrimitive.Trigger.displayName;

const TabsContent = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.Content
    ref={ref}
    className={cn(
      "mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2",
      className,
    )}
    {...props}
  />
));
TabsContent.displayName = TabsPrimitive.Content.displayName;

export { Tabs, TabsList, TabsTrigger, TabsContent };
</file>

<file path="registry/default/ui/texture-button.tsx">
"use client";

import * as React from "react";
import { Slot } from "@radix-ui/react-slot";
import { cva } from "class-variance-authority";

import { cn } from "@/lib/utils";

const buttonVariantsOuter = cva("", {
  variants: {
    variant: {
      primary:
        "w-full border border-[1px] border-black/10 bg-gradient-to-b from-black/70 to-black p-[1px] transition duration-300 ease-in-out dark:border-[2px] dark:border-black dark:from-white dark:to-white/80 ",
      accent:
        "w-full border-[1px] border-black/10 bg-gradient-to-b from-indigo-300/90 to-indigo-500 p-[1px] transition duration-300 ease-in-out dark:border-[2px] dark:border-neutral-950 dark:from-indigo-200/70 dark:to-indigo-500 ",
      destructive:
        "w-full border-[1px] border-black/10 bg-gradient-to-b from-red-300/90 to-red-500 p-[1px] transition duration-300 ease-in-out dark:border-[2px] dark:border-neutral-950 dark:from-red-300/90 dark:to-red-500 ",
      secondary:
        "w-full border-[1px] border-black/20 bg-white/50 p-[1px] transition duration-300 ease-in-out dark:border-[2px] dark:border-neutral-950 dark:bg-neutral-600/50 ",
      minimal:
        "group  w-full border-[1px] border-black/20 bg-white/50 to-white p-[1px] hover:bg-gradient-to-t hover:from-neutral-100  active:bg-neutral-200 dark:border-[2px] dark:border-neutral-950 dark:bg-neutral-600/80 dark:hover:from-neutral-600/50 dark:hover:to-neutral-600/70 dark:active:bg-neutral-800",
      icon: "group rounded-full border border-black/10 bg-white/50 to-white p-[1px] hover:bg-gradient-to-t hover:from-neutral-100 active:bg-neutral-200 dark:border-neutral-950 dark:bg-neutral-600/50 dark:hover:from-neutral-700 dark:hover:to-neutral-600 dark:active:bg-neutral-800",
    },
    size: {
      sm: "rounded-[6px]",
      default: "rounded-[12px]",
      lg: "rounded-[12px]",
      icon: "rounded-full",
    },
  },
  defaultVariants: {
    variant: "primary",
    size: "default",
  },
});

const innerDivVariants = cva(
  "flex h-full w-full items-center justify-center text-muted-foreground",
  {
    variants: {
      variant: {
        primary:
          "gap-2 bg-gradient-to-b from-neutral-800 to-black  text-sm text-white/90 transition duration-300 ease-in-out hover:from-stone-800 hover:to-neutral-800/70 active:bg-gradient-to-b  active:from-black active:to-black dark:from-neutral-200 dark:to-neutral-50 dark:text-black/80 dark:hover:from-stone-200 dark:hover:to-neutral-200 dark:active:from-stone-300 dark:active:to-neutral-300 ",
        accent:
          "gap-2 bg-gradient-to-b from-indigo-400 to-indigo-600 text-sm text-white/90 transition duration-300 ease-in-out hover:bg-gradient-to-b hover:from-indigo-400/70 hover:to-indigo-600/70 active:bg-gradient-to-b active:from-indigo-400/80 active:to-indigo-600/80 dark:hover:from-indigo-400/70 dark:hover:to-indigo-600/70 dark:active:from-indigo-400 dark:active:to-indigo-600",
        destructive:
          "gap-2 bg-gradient-to-b from-red-400/60 to-red-500/60 text-sm text-white/90 transition duration-300 ease-in-out hover:bg-gradient-to-b hover:from-red-400/70 hover:to-red-600/70 active:bg-gradient-to-b active:from-red-400/80 active:to-red-600/80 dark:hover:from-red-400/70 dark:hover:to-red-500/80 dark:active:from-red-400 dark:active:to-red-500",
        secondary:
          "bg-gradient-to-b from-neutral-100/80 to-neutral-200/50 text-sm transition duration-300 ease-in-out hover:bg-gradient-to-b hover:from-neutral-200/40 hover:to-neutral-300/60 active:bg-gradient-to-b active:from-neutral-200/60 active:to-neutral-300/70 dark:from-neutral-800 dark:to-neutral-700/50 dark:hover:from-neutral-700 dark:hover:to-neutral-700/60 dark:active:from-neutral-800 dark:active:to-neutral-700",
        minimal:
          "bg-gradient-to-b from-white to-neutral-50/50 text-sm transition duration-300 ease-in-out group-hover:bg-gradient-to-b group-hover:from-neutral-50/50 group-hover:to-neutral-100/60 group-active:bg-gradient-to-b group-active:from-neutral-100/60 group-active:to-neutral-100/90 dark:from-neutral-800 dark:to-neutral-700/50 dark:group-hover:from-neutral-700 dark:group-hover:to-neutral-700/60 dark:group-active:from-neutral-800 dark:group-active:to-neutral-700",
        icon: "rounded-full bg-gradient-to-b from-white to-neutral-50/50 group-active:bg-neutral-200 dark:from-neutral-800 dark:to-neutral-700/50 dark:group-active:bg-neutral-800",
      },
      size: {
        sm: "rounded-[4px] px-4 py-1 text-xs",
        default: "rounded-[10px] px-4 py-2 text-sm",
        lg: "rounded-[10px] px-4 py-2 text-base",
        icon: " rounded-full p-1",
      },
    },
    defaultVariants: {
      variant: "primary",
      size: "default",
    },
  },
);

export interface UnifiedButtonProps
  extends React.ButtonHTMLAttributes<HTMLButtonElement> {
  variant?:
    | "primary"
    | "secondary"
    | "accent"
    | "destructive"
    | "minimal"
    | "icon";
  size?: "default" | "sm" | "lg" | "icon";
  asChild?: boolean;
}

const TextureButton = React.forwardRef<HTMLButtonElement, UnifiedButtonProps>(
  (
    {
      children,
      variant = "primary",
      size = "default",
      asChild = false,
      className,
      ...props
    },
    ref,
  ) => {
    const Comp = asChild ? Slot : "button";

    return (
      <Comp
        className={cn(buttonVariantsOuter({ variant, size }), className)}
        ref={ref}
        {...props}
      >
        <div className={cn(innerDivVariants({ variant, size }))}>
          {children}
        </div>
      </Comp>
    );
  },
);

TextureButton.displayName = "TextureButton";

export { TextureButton };
</file>

<file path="registry/default/ui/toast.tsx">
"use client";

import * as React from "react";
import * as ToastPrimitives from "@radix-ui/react-toast";
import { cva, type VariantProps } from "class-variance-authority";
import { cn } from "@/lib/utils";
import { Cross2Icon } from "@radix-ui/react-icons";

const ToastProvider = ToastPrimitives.Provider;

const ToastViewport = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Viewport>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Viewport
    ref={ref}
    className={cn(
      "fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]",
      className,
    )}
    {...props}
  />
));
ToastViewport.displayName = ToastPrimitives.Viewport.displayName;

const toastVariants = cva(
  "group pointer-events-auto relative flex w-full items-center justify-between space-x-2 overflow-hidden rounded-md border p-4 pr-6 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full",
  {
    variants: {
      variant: {
        default: "border bg-background text-foreground",
        destructive:
          "destructive group border-destructive bg-destructive text-destructive-foreground",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  },
);

const Toast = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Root>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &
    VariantProps<typeof toastVariants>
>(({ className, variant, ...props }, ref) => {
  return (
    <ToastPrimitives.Root
      ref={ref}
      className={cn(toastVariants({ variant }), className)}
      {...props}
    />
  );
});
Toast.displayName = ToastPrimitives.Root.displayName;

const ToastAction = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Action>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Action
    ref={ref}
    className={cn(
      "inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium transition-colors hover:bg-secondary focus:outline-none focus:ring-1 focus:ring-ring disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive",
      className,
    )}
    {...props}
  />
));
ToastAction.displayName = ToastPrimitives.Action.displayName;

const ToastClose = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Close>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Close
    ref={ref}
    className={cn(
      "absolute right-1 top-1 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-1 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600",
      className,
    )}
    toast-close=""
    {...props}
  >
    <Cross2Icon className="h-4 w-4" />
  </ToastPrimitives.Close>
));
ToastClose.displayName = ToastPrimitives.Close.displayName;

const ToastTitle = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Title>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Title
    ref={ref}
    className={cn("text-sm font-semibold [&+div]:text-xs", className)}
    {...props}
  />
));
ToastTitle.displayName = ToastPrimitives.Title.displayName;

const ToastDescription = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Description>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Description
    ref={ref}
    className={cn("text-sm opacity-90", className)}
    {...props}
  />
));
ToastDescription.displayName = ToastPrimitives.Description.displayName;

type ToastProps = React.ComponentPropsWithoutRef<typeof Toast>;

type ToastActionElement = React.ReactElement<typeof ToastAction>;

export {
  type ToastProps,
  type ToastActionElement,
  ToastProvider,
  ToastViewport,
  Toast,
  ToastTitle,
  ToastDescription,
  ToastClose,
  ToastAction,
};
</file>

<file path="registry/default/ui/toaster.tsx">
"use client";

import { useToast } from "@/hooks/use-toast";
import {
  Toast,
  ToastClose,
  ToastDescription,
  ToastProvider,
  ToastTitle,
  ToastViewport,
} from "@/components/ui/toast";

export function Toaster() {
  const { toasts } = useToast();

  return (
    <ToastProvider>
      {toasts.map(function ({ id, title, description, action, ...props }) {
        return (
          <Toast key={id} {...props}>
            <div className="grid gap-1">
              {title && <ToastTitle>{title}</ToastTitle>}
              {description && (
                <ToastDescription>{description}</ToastDescription>
              )}
            </div>
            {action}
            <ToastClose />
          </Toast>
        );
      })}
      <ToastViewport />
    </ToastProvider>
  );
}
</file>

<file path="registry/default/ui/toggle-group.tsx">
"use client";

import * as React from "react";
import * as ToggleGroupPrimitive from "@radix-ui/react-toggle-group";
import { type VariantProps } from "class-variance-authority";

import { cn } from "@/lib/utils";
import { toggleVariants } from "@/components/ui/toggle";

const ToggleGroupContext = React.createContext<
  VariantProps<typeof toggleVariants>
>({
  size: "default",
  variant: "default",
});

const ToggleGroup = React.forwardRef<
  React.ElementRef<typeof ToggleGroupPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &
    VariantProps<typeof toggleVariants>
>(({ className, variant, size, children, ...props }, ref) => (
  <ToggleGroupPrimitive.Root
    ref={ref}
    className={cn("flex items-center justify-center gap-1", className)}
    {...props}
  >
    <ToggleGroupContext.Provider value={{ variant, size }}>
      {children}
    </ToggleGroupContext.Provider>
  </ToggleGroupPrimitive.Root>
));

ToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName;

const ToggleGroupItem = React.forwardRef<
  React.ElementRef<typeof ToggleGroupPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &
    VariantProps<typeof toggleVariants>
>(({ className, children, variant, size, ...props }, ref) => {
  const context = React.useContext(ToggleGroupContext);

  return (
    <ToggleGroupPrimitive.Item
      ref={ref}
      className={cn(
        toggleVariants({
          variant: context.variant || variant,
          size: context.size || size,
        }),
        className,
      )}
      {...props}
    >
      {children}
    </ToggleGroupPrimitive.Item>
  );
});

ToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName;

export { ToggleGroup, ToggleGroupItem };
</file>

<file path="registry/default/ui/toggle.tsx">
"use client";

import * as React from "react";
import * as TogglePrimitive from "@radix-ui/react-toggle";
import { cva, type VariantProps } from "class-variance-authority";

import { cn } from "@/lib/utils";

const toggleVariants = cva(
  "inline-flex items-center justify-center gap-2 rounded-md text-sm font-medium transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
  {
    variants: {
      variant: {
        default: "bg-transparent",
        outline:
          "border border-input bg-transparent shadow-sm hover:bg-accent hover:text-accent-foreground",
      },
      size: {
        default: "h-9 min-w-9 px-2",
        sm: "h-8 min-w-8 px-1.5",
        lg: "h-10 min-w-10 px-2.5",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  },
);

const Toggle = React.forwardRef<
  React.ElementRef<typeof TogglePrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &
    VariantProps<typeof toggleVariants>
>(({ className, variant, size, ...props }, ref) => (
  <TogglePrimitive.Root
    ref={ref}
    className={cn(toggleVariants({ variant, size, className }))}
    {...props}
  />
));

Toggle.displayName = TogglePrimitive.Root.displayName;

export { Toggle, toggleVariants };
</file>

<file path="registry/default/ui/tooltip.tsx">
"use client";

import * as React from "react";
import * as TooltipPrimitive from "@radix-ui/react-tooltip";

import { cn } from "@/lib/utils";

const TooltipProvider = TooltipPrimitive.Provider;

const Tooltip = TooltipPrimitive.Root;

const TooltipTrigger = TooltipPrimitive.Trigger;

const TooltipContent = React.forwardRef<
  React.ElementRef<typeof TooltipPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>
>(({ className, sideOffset = 4, ...props }, ref) => (
  <TooltipPrimitive.Content
    ref={ref}
    sideOffset={sideOffset}
    className={cn(
      "z-50 overflow-hidden rounded-md bg-primary px-3 py-1.5 text-xs text-primary-foreground animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className,
    )}
    {...props}
  />
));
TooltipContent.displayName = TooltipPrimitive.Content.displayName;

export { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider };
</file>

<file path="registry/.eslintrc.json">
{
  "$schema": "https://json.schemastore.org/eslintrc",
  "rules": {
    "react/no-unescaped-entities": "off"
  }
}
</file>

<file path="registry/registry-base-colors.ts">
export const baseColors = [
  {
    name: "zinc",
    label: "Zinc",
    activeColor: {
      light: "240 5.9% 10%",
      dark: "240 5.2% 33.9%",
    },
    cssVars: {
      light: {
        background: "0 0% 100%",
        foreground: "240 10% 3.9%",
        card: "0 0% 100%",
        "card-foreground": "240 10% 3.9%",
        popover: "0 0% 100%",
        "popover-foreground": "240 10% 3.9%",
        primary: "240 5.9% 10%",
        "primary-foreground": "0 0% 98%",
        secondary: "240 4.8% 95.9%",
        "secondary-foreground": "240 5.9% 10%",
        muted: "240 4.8% 95.9%",
        "muted-foreground": "240 3.8% 46.1%",
        accent: "240 4.8% 95.9%",
        "accent-foreground": "240 5.9% 10%",
        destructive: "0 84.2% 60.2%",
        "destructive-foreground": "0 0% 98%",
        border: "240 5.9% 90%",
        input: "240 5.9% 90%",
        ring: "240 5.9% 10%",
        radius: "0.5rem",
        "chart-1": "12 76% 61%",
        "chart-2": "173 58% 39%",
        "chart-3": "197 37% 24%",
        "chart-4": "43 74% 66%",
        "chart-5": "27 87% 67%",
      },
      dark: {
        background: "240 10% 3.9%",
        foreground: "0 0% 98%",
        card: "240 10% 3.9%",
        "card-foreground": "0 0% 98%",
        popover: "240 10% 3.9%",
        "popover-foreground": "0 0% 98%",
        primary: "0 0% 98%",
        "primary-foreground": "240 5.9% 10%",
        secondary: "240 3.7% 15.9%",
        "secondary-foreground": "0 0% 98%",
        muted: "240 3.7% 15.9%",
        "muted-foreground": "240 5% 64.9%",
        accent: "240 3.7% 15.9%",
        "accent-foreground": "0 0% 98%",
        destructive: "0 62.8% 30.6%",
        "destructive-foreground": "0 0% 98%",
        border: "240 3.7% 15.9%",
        input: "240 3.7% 15.9%",
        ring: "240 4.9% 83.9%",
        "chart-1": "220 70% 50%",
        "chart-2": "160 60% 45%",
        "chart-3": "30 80% 55%",
        "chart-4": "280 65% 60%",
        "chart-5": "340 75% 55%",
      },
    },
  },
  {
    name: "slate",
    label: "Slate",
    activeColor: {
      light: "215.4 16.3% 46.9%",
      dark: "215.3 19.3% 34.5%",
    },
    cssVars: {
      light: {
        background: "0 0% 100%",
        foreground: "222.2 84% 4.9%",
        card: "0 0% 100%",
        "card-foreground": "222.2 84% 4.9%",
        popover: "0 0% 100%",
        "popover-foreground": "222.2 84% 4.9%",
        primary: "222.2 47.4% 11.2%",
        "primary-foreground": "210 40% 98%",
        secondary: "210 40% 96.1%",
        "secondary-foreground": "222.2 47.4% 11.2%",
        muted: "210 40% 96.1%",
        "muted-foreground": "215.4 16.3% 46.9%",
        accent: "210 40% 96.1%",
        "accent-foreground": "222.2 47.4% 11.2%",
        destructive: "0 84.2% 60.2%",
        "destructive-foreground": "210 40% 98%",
        border: "214.3 31.8% 91.4%",
        input: "214.3 31.8% 91.4%",
        ring: "222.2 84% 4.9%",
        radius: "0.5rem",
        "chart-1": "12 76% 61%",
        "chart-2": "173 58% 39%",
        "chart-3": "197 37% 24%",
        "chart-4": "43 74% 66%",
        "chart-5": "27 87% 67%",
      },
      dark: {
        background: "222.2 84% 4.9%",
        foreground: "210 40% 98%",
        card: "222.2 84% 4.9%",
        "card-foreground": "210 40% 98%",
        popover: "222.2 84% 4.9%",
        "popover-foreground": "210 40% 98%",
        primary: "210 40% 98%",
        "primary-foreground": "222.2 47.4% 11.2%",
        secondary: "217.2 32.6% 17.5%",
        "secondary-foreground": "210 40% 98%",
        muted: "217.2 32.6% 17.5%",
        "muted-foreground": "215 20.2% 65.1%",
        accent: "217.2 32.6% 17.5%",
        "accent-foreground": "210 40% 98%",
        destructive: "0 62.8% 30.6%",
        "destructive-foreground": "210 40% 98%",
        border: "217.2 32.6% 17.5%",
        input: "217.2 32.6% 17.5%",
        ring: "212.7 26.8% 83.9",
        "chart-1": "220 70% 50%",
        "chart-2": "160 60% 45%",
        "chart-3": "30 80% 55%",
        "chart-4": "280 65% 60%",
        "chart-5": "340 75% 55%",
      },
    },
  },
  {
    name: "stone",
    label: "Stone",
    activeColor: {
      light: "25 5.3% 44.7%",
      dark: "33.3 5.5% 32.4%",
    },
    cssVars: {
      light: {
        background: "0 0% 100%",
        foreground: "20 14.3% 4.1%",
        card: "0 0% 100%",
        "card-foreground": "20 14.3% 4.1%",
        popover: "0 0% 100%",
        "popover-foreground": "20 14.3% 4.1%",
        primary: "24 9.8% 10%",
        "primary-foreground": "60 9.1% 97.8%",
        secondary: "60 4.8% 95.9%",
        "secondary-foreground": "24 9.8% 10%",
        muted: "60 4.8% 95.9%",
        "muted-foreground": "25 5.3% 44.7%",
        accent: "60 4.8% 95.9%",
        "accent-foreground": "24 9.8% 10%",
        destructive: "0 84.2% 60.2%",
        "destructive-foreground": "60 9.1% 97.8%",
        border: "20 5.9% 90%",
        input: "20 5.9% 90%",
        ring: "20 14.3% 4.1%",
        radius: "0.95rem",
        "chart-1": "12 76% 61%",
        "chart-2": "173 58% 39%",
        "chart-3": "197 37% 24%",
        "chart-4": "43 74% 66%",
        "chart-5": "27 87% 67%",
      },
      dark: {
        background: "20 14.3% 4.1%",
        foreground: "60 9.1% 97.8%",
        card: "20 14.3% 4.1%",
        "card-foreground": "60 9.1% 97.8%",
        popover: "20 14.3% 4.1%",
        "popover-foreground": "60 9.1% 97.8%",
        primary: "60 9.1% 97.8%",
        "primary-foreground": "24 9.8% 10%",
        secondary: "12 6.5% 15.1%",
        "secondary-foreground": "60 9.1% 97.8%",
        muted: "12 6.5% 15.1%",
        "muted-foreground": "24 5.4% 63.9%",
        accent: "12 6.5% 15.1%",
        "accent-foreground": "60 9.1% 97.8%",
        destructive: "0 62.8% 30.6%",
        "destructive-foreground": "60 9.1% 97.8%",
        border: "12 6.5% 15.1%",
        input: "12 6.5% 15.1%",
        ring: "24 5.7% 82.9%",
        "chart-1": "220 70% 50%",
        "chart-2": "160 60% 45%",
        "chart-3": "30 80% 55%",
        "chart-4": "280 65% 60%",
        "chart-5": "340 75% 55%",
      },
    },
  },
  {
    name: "gray",
    label: "Gray",
    activeColor: {
      light: "220 8.9% 46.1%",
      dark: "215 13.8% 34.1%",
    },
    cssVars: {
      light: {
        background: "0 0% 100%",
        foreground: "224 71.4% 4.1%",
        card: "0 0% 100%",
        "card-foreground": "224 71.4% 4.1%",
        popover: "0 0% 100%",
        "popover-foreground": "224 71.4% 4.1%",
        primary: "220.9 39.3% 11%",
        "primary-foreground": "210 20% 98%",
        secondary: "220 14.3% 95.9%",
        "secondary-foreground": "220.9 39.3% 11%",
        muted: "220 14.3% 95.9%",
        "muted-foreground": "220 8.9% 46.1%",
        accent: "220 14.3% 95.9%",
        "accent-foreground": "220.9 39.3% 11%",
        destructive: "0 84.2% 60.2%",
        "destructive-foreground": "210 20% 98%",
        border: "220 13% 91%",
        input: "220 13% 91%",
        ring: "224 71.4% 4.1%",
        radius: "0.35rem",
        "chart-1": "12 76% 61%",
        "chart-2": "173 58% 39%",
        "chart-3": "197 37% 24%",
        "chart-4": "43 74% 66%",
        "chart-5": "27 87% 67%",
      },
      dark: {
        background: "224 71.4% 4.1%",
        foreground: "210 20% 98%",
        card: "224 71.4% 4.1%",
        "card-foreground": "210 20% 98%",
        popover: "224 71.4% 4.1%",
        "popover-foreground": "210 20% 98%",
        primary: "210 20% 98%",
        "primary-foreground": "220.9 39.3% 11%",
        secondary: "215 27.9% 16.9%",
        "secondary-foreground": "210 20% 98%",
        muted: "215 27.9% 16.9%",
        "muted-foreground": "217.9 10.6% 64.9%",
        accent: "215 27.9% 16.9%",
        "accent-foreground": "210 20% 98%",
        destructive: "0 62.8% 30.6%",
        "destructive-foreground": "210 20% 98%",
        border: "215 27.9% 16.9%",
        input: "215 27.9% 16.9%",
        ring: "216 12.2% 83.9%",
        "chart-1": "220 70% 50%",
        "chart-2": "160 60% 45%",
        "chart-3": "30 80% 55%",
        "chart-4": "280 65% 60%",
        "chart-5": "340 75% 55%",
      },
    },
  },
  {
    name: "neutral",
    label: "Neutral",
    activeColor: {
      light: "0 0% 45.1%",
      dark: "0 0% 32.2%",
    },
    cssVars: {
      light: {
        background: "0 0% 100%",
        foreground: "0 0% 3.9%",
        card: "0 0% 100%",
        "card-foreground": "0 0% 3.9%",
        popover: "0 0% 100%",
        "popover-foreground": "0 0% 3.9%",
        primary: "0 0% 9%",
        "primary-foreground": "0 0% 98%",
        secondary: "0 0% 96.1%",
        "secondary-foreground": "0 0% 9%",
        muted: "0 0% 96.1%",
        "muted-foreground": "0 0% 45.1%",
        accent: "0 0% 96.1%",
        "accent-foreground": "0 0% 9%",
        destructive: "0 84.2% 60.2%",
        "destructive-foreground": "0 0% 98%",
        border: "0 0% 89.8%",
        input: "0 0% 89.8%",
        ring: "0 0% 3.9%",
        "chart-1": "12 76% 61%",
        "chart-2": "173 58% 39%",
        "chart-3": "197 37% 24%",
        "chart-4": "43 74% 66%",
        "chart-5": "27 87% 67%",
      },
      dark: {
        background: "0 0% 3.9%",
        foreground: "0 0% 98%",
        card: "0 0% 3.9%",
        "card-foreground": "0 0% 98%",
        popover: "0 0% 3.9%",
        "popover-foreground": "0 0% 98%",
        primary: "0 0% 98%",
        "primary-foreground": "0 0% 9%",
        secondary: "0 0% 14.9%",
        "secondary-foreground": "0 0% 98%",
        muted: "0 0% 14.9%",
        "muted-foreground": "0 0% 63.9%",
        accent: "0 0% 14.9%",
        "accent-foreground": "0 0% 98%",
        destructive: "0 62.8% 30.6%",
        "destructive-foreground": "0 0% 98%",
        border: "0 0% 14.9%",
        input: "0 0% 14.9%",
        ring: "0 0% 83.1%",
        "chart-1": "220 70% 50%",
        "chart-2": "160 60% 45%",
        "chart-3": "30 80% 55%",
        "chart-4": "280 65% 60%",
        "chart-5": "340 75% 55%",
      },
    },
  },
  {
    name: "red",
    label: "Red",
    activeColor: {
      light: "0 72.2% 50.6%",
      dark: "0 72.2% 50.6%",
    },
    cssVars: {
      light: {
        background: "0 0% 100%",
        foreground: "0 0% 3.9%",
        card: "0 0% 100%",
        "card-foreground": "0 0% 3.9%",
        popover: "0 0% 100%",
        "popover-foreground": "0 0% 3.9%",
        primary: "0 72.2% 50.6%",
        "primary-foreground": "0 85.7% 97.3%",
        secondary: "0 0% 96.1%",
        "secondary-foreground": "0 0% 9%",
        muted: "0 0% 96.1%",
        "muted-foreground": "0 0% 45.1%",
        accent: "0 0% 96.1%",
        "accent-foreground": "0 0% 9%",
        destructive: "0 84.2% 60.2%",
        "destructive-foreground": "0 0% 98%",
        border: "0 0% 89.8%",
        input: "0 0% 89.8%",
        ring: "0 72.2% 50.6%",
        radius: "0.4rem",
        "chart-1": "12 76% 61%",
        "chart-2": "173 58% 39%",
        "chart-3": "197 37% 24%",
        "chart-4": "43 74% 66%",
        "chart-5": "27 87% 67%",
      },
      dark: {
        background: "0 0% 3.9%",
        foreground: "0 0% 98%",
        card: "0 0% 3.9%",
        "card-foreground": "0 0% 98%",
        popover: "0 0% 3.9%",
        "popover-foreground": "0 0% 98%",
        primary: "0 72.2% 50.6%",
        "primary-foreground": "0 85.7% 97.3%",
        secondary: "0 0% 14.9%",
        "secondary-foreground": "0 0% 98%",
        muted: "0 0% 14.9%",
        "muted-foreground": "0 0% 63.9%",
        accent: "0 0% 14.9%",
        "accent-foreground": "0 0% 98%",
        destructive: "0 62.8% 30.6%",
        "destructive-foreground": "0 0% 98%",
        border: "0 0% 14.9%",
        input: "0 0% 14.9%",
        ring: "0 72.2% 50.6%",
        "chart-1": "220 70% 50%",
        "chart-2": "160 60% 45%",
        "chart-3": "30 80% 55%",
        "chart-4": "280 65% 60%",
        "chart-5": "340 75% 55%",
      },
    },
  },
  {
    name: "rose",
    label: "Rose",
    activeColor: {
      light: "346.8 77.2% 49.8%",
      dark: "346.8 77.2% 49.8%",
    },
    cssVars: {
      light: {
        background: "0 0% 100%",
        foreground: "240 10% 3.9%",
        card: "0 0% 100%",
        "card-foreground": "240 10% 3.9%",
        popover: "0 0% 100%",
        "popover-foreground": "240 10% 3.9%",
        primary: "346.8 77.2% 49.8%",
        "primary-foreground": "355.7 100% 97.3%",
        secondary: "240 4.8% 95.9%",
        "secondary-foreground": "240 5.9% 10%",
        muted: "240 4.8% 95.9%",
        "muted-foreground": "240 3.8% 46.1%",
        accent: "240 4.8% 95.9%",
        "accent-foreground": "240 5.9% 10%",
        destructive: "0 84.2% 60.2%",
        "destructive-foreground": "0 0% 98%",
        border: "240 5.9% 90%",
        input: "240 5.9% 90%",
        ring: "346.8 77.2% 49.8%",
        radius: "0.5rem",
        "chart-1": "12 76% 61%",
        "chart-2": "173 58% 39%",
        "chart-3": "197 37% 24%",
        "chart-4": "43 74% 66%",
        "chart-5": "27 87% 67%",
      },
      dark: {
        background: "20 14.3% 4.1%",
        foreground: "0 0% 95%",
        popover: "0 0% 9%",
        "popover-foreground": "0 0% 95%",
        card: "24 9.8% 10%",
        "card-foreground": "0 0% 95%",
        primary: "346.8 77.2% 49.8%",
        "primary-foreground": "355.7 100% 97.3%",
        secondary: "240 3.7% 15.9%",
        "secondary-foreground": "0 0% 98%",
        muted: "0 0% 15%",
        "muted-foreground": "240 5% 64.9%",
        accent: "12 6.5% 15.1%",
        "accent-foreground": "0 0% 98%",
        destructive: "0 62.8% 30.6%",
        "destructive-foreground": "0 85.7% 97.3%",
        border: "240 3.7% 15.9%",
        input: "240 3.7% 15.9%",
        ring: "346.8 77.2% 49.8%",
        "chart-1": "220 70% 50%",
        "chart-2": "160 60% 45%",
        "chart-3": "30 80% 55%",
        "chart-4": "280 65% 60%",
        "chart-5": "340 75% 55%",
      },
    },
  },
  {
    name: "orange",
    label: "Orange",
    activeColor: {
      light: "24.6 95% 53.1%",
      dark: "20.5 90.2% 48.2%",
    },
    cssVars: {
      light: {
        background: "0 0% 100%",
        foreground: "20 14.3% 4.1%",
        card: "0 0% 100%",
        "card-foreground": "20 14.3% 4.1%",
        popover: "0 0% 100%",
        "popover-foreground": "20 14.3% 4.1%",
        primary: "24.6 95% 53.1%",
        "primary-foreground": "60 9.1% 97.8%",
        secondary: "60 4.8% 95.9%",
        "secondary-foreground": "24 9.8% 10%",
        muted: "60 4.8% 95.9%",
        "muted-foreground": "25 5.3% 44.7%",
        accent: "60 4.8% 95.9%",
        "accent-foreground": "24 9.8% 10%",
        destructive: "0 84.2% 60.2%",
        "destructive-foreground": "60 9.1% 97.8%",
        border: "20 5.9% 90%",
        input: "20 5.9% 90%",
        ring: "24.6 95% 53.1%",
        radius: "0.95rem",
        "chart-1": "12 76% 61%",
        "chart-2": "173 58% 39%",
        "chart-3": "197 37% 24%",
        "chart-4": "43 74% 66%",
        "chart-5": "27 87% 67%",
      },
      dark: {
        background: "20 14.3% 4.1%",
        foreground: "60 9.1% 97.8%",
        card: "20 14.3% 4.1%",
        "card-foreground": "60 9.1% 97.8%",
        popover: "20 14.3% 4.1%",
        "popover-foreground": "60 9.1% 97.8%",
        primary: "20.5 90.2% 48.2%",
        "primary-foreground": "60 9.1% 97.8%",
        secondary: "12 6.5% 15.1%",
        "secondary-foreground": "60 9.1% 97.8%",
        muted: "12 6.5% 15.1%",
        "muted-foreground": "24 5.4% 63.9%",
        accent: "12 6.5% 15.1%",
        "accent-foreground": "60 9.1% 97.8%",
        destructive: "0 72.2% 50.6%",
        "destructive-foreground": "60 9.1% 97.8%",
        border: "12 6.5% 15.1%",
        input: "12 6.5% 15.1%",
        ring: "20.5 90.2% 48.2%",
        "chart-1": "220 70% 50%",
        "chart-2": "160 60% 45%",
        "chart-3": "30 80% 55%",
        "chart-4": "280 65% 60%",
        "chart-5": "340 75% 55%",
      },
    },
  },
  {
    name: "green",
    label: "Green",
    activeColor: {
      light: "142.1 76.2% 36.3%",
      dark: "142.1 70.6% 45.3%",
    },
    cssVars: {
      light: {
        background: "0 0% 100%",
        foreground: "240 10% 3.9%",
        card: "0 0% 100%",
        "card-foreground": "240 10% 3.9%",
        popover: "0 0% 100%",
        "popover-foreground": "240 10% 3.9%",
        primary: "142.1 76.2% 36.3%",
        "primary-foreground": "355.7 100% 97.3%",
        secondary: "240 4.8% 95.9%",
        "secondary-foreground": "240 5.9% 10%",
        muted: "240 4.8% 95.9%",
        "muted-foreground": "240 3.8% 46.1%",
        accent: "240 4.8% 95.9%",
        "accent-foreground": "240 5.9% 10%",
        destructive: "0 84.2% 60.2%",
        "destructive-foreground": "0 0% 98%",
        border: "240 5.9% 90%",
        input: "240 5.9% 90%",
        ring: "142.1 76.2% 36.3%",
        "chart-1": "12 76% 61%",
        "chart-2": "173 58% 39%",
        "chart-3": "197 37% 24%",
        "chart-4": "43 74% 66%",
        "chart-5": "27 87% 67%",
      },
      dark: {
        background: "20 14.3% 4.1%",
        foreground: "0 0% 95%",
        popover: "0 0% 9%",
        "popover-foreground": "0 0% 95%",
        card: "24 9.8% 10%",
        "card-foreground": "0 0% 95%",
        primary: "142.1 70.6% 45.3%",
        "primary-foreground": "144.9 80.4% 10%",
        secondary: "240 3.7% 15.9%",
        "secondary-foreground": "0 0% 98%",
        muted: "0 0% 15%",
        "muted-foreground": "240 5% 64.9%",
        accent: "12 6.5% 15.1%",
        "accent-foreground": "0 0% 98%",
        destructive: "0 62.8% 30.6%",
        "destructive-foreground": "0 85.7% 97.3%",
        border: "240 3.7% 15.9%",
        input: "240 3.7% 15.9%",
        ring: "142.4 71.8% 29.2%",
        "chart-1": "220 70% 50%",
        "chart-2": "160 60% 45%",
        "chart-3": "30 80% 55%",
        "chart-4": "280 65% 60%",
        "chart-5": "340 75% 55%",
      },
    },
  },
  {
    name: "blue",
    label: "Blue",
    activeColor: {
      light: "221.2 83.2% 53.3%",
      dark: "217.2 91.2% 59.8%",
    },
    cssVars: {
      light: {
        background: "0 0% 100%",
        foreground: "222.2 84% 4.9%",
        card: "0 0% 100%",
        "card-foreground": "222.2 84% 4.9%",
        popover: "0 0% 100%",
        "popover-foreground": "222.2 84% 4.9%",
        primary: "221.2 83.2% 53.3%",
        "primary-foreground": "210 40% 98%",
        secondary: "210 40% 96.1%",
        "secondary-foreground": "222.2 47.4% 11.2%",
        muted: "210 40% 96.1%",
        "muted-foreground": "215.4 16.3% 46.9%",
        accent: "210 40% 96.1%",
        "accent-foreground": "222.2 47.4% 11.2%",
        destructive: "0 84.2% 60.2%",
        "destructive-foreground": "210 40% 98%",
        border: "214.3 31.8% 91.4%",
        input: "214.3 31.8% 91.4%",
        ring: "221.2 83.2% 53.3%",
        "chart-1": "12 76% 61%",
        "chart-2": "173 58% 39%",
        "chart-3": "197 37% 24%",
        "chart-4": "43 74% 66%",
        "chart-5": "27 87% 67%",
      },
      dark: {
        background: "222.2 84% 4.9%",
        foreground: "210 40% 98%",
        card: "222.2 84% 4.9%",
        "card-foreground": "210 40% 98%",
        popover: "222.2 84% 4.9%",
        "popover-foreground": "210 40% 98%",
        primary: "217.2 91.2% 59.8%",
        "primary-foreground": "222.2 47.4% 11.2%",
        secondary: "217.2 32.6% 17.5%",
        "secondary-foreground": "210 40% 98%",
        muted: "217.2 32.6% 17.5%",
        "muted-foreground": "215 20.2% 65.1%",
        accent: "217.2 32.6% 17.5%",
        "accent-foreground": "210 40% 98%",
        destructive: "0 62.8% 30.6%",
        "destructive-foreground": "210 40% 98%",
        border: "217.2 32.6% 17.5%",
        input: "217.2 32.6% 17.5%",
        ring: "224.3 76.3% 48%",
        "chart-1": "220 70% 50%",
        "chart-2": "160 60% 45%",
        "chart-3": "30 80% 55%",
        "chart-4": "280 65% 60%",
        "chart-5": "340 75% 55%",
      },
    },
  },
  {
    name: "yellow",
    label: "Yellow",
    activeColor: {
      light: "47.9 95.8% 53.1%",
      dark: "47.9 95.8% 53.1%",
    },
    cssVars: {
      light: {
        background: "0 0% 100%",
        foreground: "20 14.3% 4.1%",
        card: "0 0% 100%",
        "card-foreground": "20 14.3% 4.1%",
        popover: "0 0% 100%",
        "popover-foreground": "20 14.3% 4.1%",
        primary: "47.9 95.8% 53.1%",
        "primary-foreground": "26 83.3% 14.1%",
        secondary: "60 4.8% 95.9%",
        "secondary-foreground": "24 9.8% 10%",
        muted: "60 4.8% 95.9%",
        "muted-foreground": "25 5.3% 44.7%",
        accent: "60 4.8% 95.9%",
        "accent-foreground": "24 9.8% 10%",
        destructive: "0 84.2% 60.2%",
        "destructive-foreground": "60 9.1% 97.8%",
        border: "20 5.9% 90%",
        input: "20 5.9% 90%",
        ring: "20 14.3% 4.1%",
        radius: "0.95rem",
        "chart-1": "12 76% 61%",
        "chart-2": "173 58% 39%",
        "chart-3": "197 37% 24%",
        "chart-4": "43 74% 66%",
        "chart-5": "27 87% 67%",
      },
      dark: {
        background: "20 14.3% 4.1%",
        foreground: "60 9.1% 97.8%",
        card: "20 14.3% 4.1%",
        "card-foreground": "60 9.1% 97.8%",
        popover: "20 14.3% 4.1%",
        "popover-foreground": "60 9.1% 97.8%",
        primary: "47.9 95.8% 53.1%",
        "primary-foreground": "26 83.3% 14.1%",
        secondary: "12 6.5% 15.1%",
        "secondary-foreground": "60 9.1% 97.8%",
        muted: "12 6.5% 15.1%",
        "muted-foreground": "24 5.4% 63.9%",
        accent: "12 6.5% 15.1%",
        "accent-foreground": "60 9.1% 97.8%",
        destructive: "0 62.8% 30.6%",
        "destructive-foreground": "60 9.1% 97.8%",
        border: "12 6.5% 15.1%",
        input: "12 6.5% 15.1%",
        ring: "35.5 91.7% 32.9%",
        "chart-1": "220 70% 50%",
        "chart-2": "160 60% 45%",
        "chart-3": "30 80% 55%",
        "chart-4": "280 65% 60%",
        "chart-5": "340 75% 55%",
      },
    },
  },
  {
    name: "violet",
    label: "Violet",
    activeColor: {
      light: "262.1 83.3% 57.8%",
      dark: "263.4 70% 50.4%",
    },
    cssVars: {
      light: {
        background: "0 0% 100%",
        foreground: "224 71.4% 4.1%",
        card: "0 0% 100%",
        "card-foreground": "224 71.4% 4.1%",
        popover: "0 0% 100%",
        "popover-foreground": "224 71.4% 4.1%",
        primary: "262.1 83.3% 57.8%",
        "primary-foreground": "210 20% 98%",
        secondary: "220 14.3% 95.9%",
        "secondary-foreground": "220.9 39.3% 11%",
        muted: "220 14.3% 95.9%",
        "muted-foreground": "220 8.9% 46.1%",
        accent: "220 14.3% 95.9%",
        "accent-foreground": "220.9 39.3% 11%",
        destructive: "0 84.2% 60.2%",
        "destructive-foreground": "210 20% 98%",
        border: "220 13% 91%",
        input: "220 13% 91%",
        ring: "262.1 83.3% 57.8%",
        "chart-1": "12 76% 61%",
        "chart-2": "173 58% 39%",
        "chart-3": "197 37% 24%",
        "chart-4": "43 74% 66%",
        "chart-5": "27 87% 67%",
      },
      dark: {
        background: "224 71.4% 4.1%",
        foreground: "210 20% 98%",
        card: "224 71.4% 4.1%",
        "card-foreground": "210 20% 98%",
        popover: "224 71.4% 4.1%",
        "popover-foreground": "210 20% 98%",
        primary: "263.4 70% 50.4%",
        "primary-foreground": "210 20% 98%",
        secondary: "215 27.9% 16.9%",
        "secondary-foreground": "210 20% 98%",
        muted: "215 27.9% 16.9%",
        "muted-foreground": "217.9 10.6% 64.9%",
        accent: "215 27.9% 16.9%",
        "accent-foreground": "210 20% 98%",
        destructive: "0 62.8% 30.6%",
        "destructive-foreground": "210 20% 98%",
        border: "215 27.9% 16.9%",
        input: "215 27.9% 16.9%",
        ring: "263.4 70% 50.4%",
        "chart-1": "220 70% 50%",
        "chart-2": "160 60% 45%",
        "chart-3": "30 80% 55%",
        "chart-4": "280 65% 60%",
        "chart-5": "340 75% 55%",
      },
    },
  },
] as const;

export type BaseColor = (typeof baseColors)[number];

export const baseColorsV4 = {
  stone: {
    light: {
      background: "oklch(1 0 0)", // --color-white
      foreground: "oklch(0.147 0.004 49.25)", // --color-stone-950
      card: "oklch(1 0 0)", // --color-white
      "card-foreground": "oklch(0.147 0.004 49.25)", // --color-stone-950
      popover: "oklch(1 0 0)", // --color-white
      "popover-foreground": "oklch(0.147 0.004 49.25)", // --color-stone-950
      primary: "oklch(0.216 0.006 56.043)", // --color-stone-900
      "primary-foreground": "oklch(0.985 0.001 106.423)", // --color-stone-50
      secondary: "oklch(0.97 0.001 106.424)", // --color-stone-100
      "secondary-foreground": "oklch(0.216 0.006 56.043)", // --color-stone-900
      muted: "oklch(0.97 0.001 106.424)", // --color-stone-100
      "muted-foreground": "oklch(0.553 0.013 58.071)", // --color-stone-500
      accent: "oklch(0.97 0.001 106.424)", // --color-stone-100
      "accent-foreground": "oklch(0.216 0.006 56.043)", // --color-stone-900
      destructive: "oklch(0.577 0.245 27.325)", // --color-red-600
      "destructive-foreground": "oklch(0.577 0.245 27.325)", // --color-red-600
      border: "oklch(0.923 0.003 48.717)", // --color-stone-200
      input: "oklch(0.923 0.003 48.717)", // --color-stone-200
      ring: "oklch(0.709 0.01 56.259)", // --color-stone-400
      "chart-1": "oklch(0.646 0.222 41.116)", // --color-orange-600
      "chart-2": "oklch(0.6 0.118 184.704)", // --color-teal-600
      "chart-3": "oklch(0.398 0.07 227.392)", // --color-cyan-900
      "chart-4": "oklch(0.828 0.189 84.429)", // --color-amber-400
      "chart-5": "oklch(0.769 0.188 70.08)", // --color-amber-500
      radius: "0.625rem", // Not a color
      sidebar: "oklch(0.985 0.001 106.423)", // --color-stone-50
      "sidebar-foreground": "oklch(0.147 0.004 49.25)", // --color-stone-950
      "sidebar-primary": "oklch(0.216 0.006 56.043)", // --color-stone-900
      "sidebar-primary-foreground": "oklch(0.985 0.001 106.423)", // --color-stone-50
      "sidebar-accent": "oklch(0.97 0.001 106.424)", // --color-stone-100
      "sidebar-accent-foreground": "oklch(0.216 0.006 56.043)", // --color-stone-900
      "sidebar-border": "oklch(0.923 0.003 48.717)", // --color-stone-200
      "sidebar-ring": "oklch(0.709 0.01 56.259)", // --color-stone-400
    },
    dark: {
      background: "oklch(0.147 0.004 49.25)", // --color-stone-950
      foreground: "oklch(0.985 0.001 106.423)", // --color-stone-50
      card: "oklch(0.147 0.004 49.25)", // --color-stone-950
      "card-foreground": "oklch(0.985 0.001 106.423)", // --color-stone-50
      popover: "oklch(0.147 0.004 49.25)", // --color-stone-950
      "popover-foreground": "oklch(0.985 0.001 106.423)", // --color-stone-50
      primary: "oklch(0.985 0.001 106.423)", // --color-stone-50
      "primary-foreground": "oklch(0.216 0.006 56.043)", // --color-stone-900
      secondary: "oklch(0.268 0.007 34.298)", // --color-stone-800
      "secondary-foreground": "oklch(0.985 0.001 106.423)", // --color-stone-50
      muted: "oklch(0.268 0.007 34.298)", // --color-stone-800
      "muted-foreground": "oklch(0.709 0.01 56.259)", // --color-stone-400
      accent: "oklch(0.268 0.007 34.298)", // --color-stone-800
      "accent-foreground": "oklch(0.985 0.001 106.423)", // --color-stone-50
      destructive: "oklch(0.396 0.141 25.723)", // --color-red-900
      "destructive-foreground": "oklch(0.637 0.237 25.331)", // --color-red-500
      border: "oklch(0.268 0.007 34.298)", // --color-stone-800
      input: "oklch(0.268 0.007 34.298)", // --color-stone-800
      ring: "oklch(0.553 0.013 58.071)", // --color-stone-500
      "chart-1": "oklch(0.488 0.243 264.376)", // --color-blue-700
      "chart-2": "oklch(0.696 0.17 162.48)", // --color-emerald-500
      "chart-3": "oklch(0.769 0.188 70.08)", // --color-amber-500
      "chart-4": "oklch(0.627 0.265 303.9)", // --color-purple-500
      "chart-5": "oklch(0.645 0.246 16.439)", // --color-rose-500
      sidebar: "oklch(0.216 0.006 56.043)", // --color-stone-900
      "sidebar-foreground": "oklch(0.985 0.001 106.423)", // --color-stone-50
      "sidebar-primary": "oklch(0.488 0.243 264.376)", // --color-blue-700
      "sidebar-primary-foreground": "oklch(0.985 0.001 106.423)", // --color-stone-50
      "sidebar-accent": "oklch(0.268 0.007 34.298)", // --color-stone-800
      "sidebar-accent-foreground": "oklch(0.985 0.001 106.423)", // --color-stone-50
      "sidebar-border": "oklch(0.268 0.007 34.298)", // --color-stone-800
      "sidebar-ring": "oklch(0.553 0.013 58.071)", // --color-stone-600
    },
  },
  zinc: {
    light: {
      background: "oklch(1 0 0)", // --color-zinc-50
      foreground: "oklch(0.141 0.005 285.823)", // --color-zinc-950
      card: "oklch(1 0 0)", // --color-zinc-50
      "card-foreground": "oklch(0.141 0.005 285.823)", // --color-zinc-950
      popover: "oklch(1 0 0)", // --color-zinc-50
      "popover-foreground": "oklch(0.141 0.005 285.823)", // --color-zinc-950
      primary: "oklch(0.21 0.006 285.885)", // --color-zinc-900
      "primary-foreground": "oklch(0.985 0 0)", // --color-zinc-50
      secondary: "oklch(0.967 0.001 286.375)", // --color-zinc-100
      "secondary-foreground": "oklch(0.21 0.006 285.885)", // --color-zinc-900
      muted: "oklch(0.967 0.001 286.375)", // --color-zinc-100
      "muted-foreground": "oklch(0.552 0.016 285.938)", // --color-zinc-500
      accent: "oklch(0.967 0.001 286.375)", // --color-zinc-100
      "accent-foreground": "oklch(0.21 0.006 285.885)", // --color-zinc-900
      destructive: "oklch(0.577 0.245 27.325)", // --color-red-600
      "destructive-foreground": "oklch(0.577 0.245 27.325)", // --color-red-600
      border: "oklch(0.92 0.004 286.32)", // --color-zinc-200
      input: "oklch(0.92 0.004 286.32)", // --color-zinc-200
      ring: "oklch(0.705 0.015 286.067)", // --color-zinc-400
      "chart-1": "oklch(0.646 0.222 41.116)", // --color-orange-600
      "chart-2": "oklch(0.6 0.118 184.704)", // --color-teal-600
      "chart-3": "oklch(0.398 0.07 227.392)", // --color-cyan-900
      "chart-4": "oklch(0.828 0.189 84.429)", // --color-amber-400
      "chart-5": "oklch(0.769 0.188 70.08)", // --color-amber-500
      radius: "0.625rem", // Not a color
      sidebar: "oklch(0.985 0 0)", // --color-zinc-50
      "sidebar-foreground": "oklch(0.141 0.005 285.823)", // --color-zinc-950
      "sidebar-primary": "oklch(0.21 0.006 285.885)", // --color-zinc-900
      "sidebar-primary-foreground": "oklch(0.985 0 0)", // --color-zinc-50
      "sidebar-accent": "oklch(0.967 0.001 286.375)", // --color-zinc-100
      "sidebar-accent-foreground": "oklch(0.21 0.006 285.885)", // --color-zinc-900
      "sidebar-border": "oklch(0.92 0.004 286.32)", // --color-zinc-200
      "sidebar-ring": "oklch(0.705 0.015 286.067)", // --color-zinc-400
    },
    dark: {
      background: "oklch(0.141 0.005 285.823)", // --color-zinc-950
      foreground: "oklch(0.985 0 0)", // --color-zinc-50
      card: "oklch(0.141 0.005 285.823)", // --color-zinc-950
      "card-foreground": "oklch(0.985 0 0)", // --color-zinc-50
      popover: "oklch(0.141 0.005 285.823)", // --color-zinc-950
      "popover-foreground": "oklch(0.985 0 0)", // --color-zinc-50
      primary: "oklch(0.985 0 0)", // --color-zinc-50
      "primary-foreground": "oklch(0.21 0.006 285.885)", // --color-zinc-900
      secondary: "oklch(0.274 0.006 286.033)", // --color-zinc-800
      "secondary-foreground": "oklch(0.985 0 0)", // --color-zinc-50
      muted: "oklch(0.274 0.006 286.033)", // --color-zinc-800
      "muted-foreground": "oklch(0.705 0.015 286.067)", // --color-zinc-400
      accent: "oklch(0.274 0.006 286.033)", // --color-zinc-800
      "accent-foreground": "oklch(0.985 0 0)", // --color-zinc-50
      destructive: "oklch(0.396 0.141 25.723)", // --color-red-900
      "destructive-foreground": "oklch(0.637 0.237 25.331)", // --color-red-500
      border: "oklch(0.274 0.006 286.033)", // --color-zinc-800
      input: "oklch(0.274 0.006 286.033)", // --color-zinc-800
      ring: "oklch(0.442 0.017 285.786)", // --color-zinc-600
      "chart-1": "oklch(0.488 0.243 264.376)", // --color-blue-700
      "chart-2": "oklch(0.696 0.17 162.48)", // --color-emerald-500
      "chart-3": "oklch(0.769 0.188 70.08)", // --color-amber-500
      "chart-4": "oklch(0.627 0.265 303.9)", // --color-purple-500
      "chart-5": "oklch(0.645 0.246 16.439)", // --color-rose-500
      sidebar: "oklch(0.21 0.006 285.885)", // --color-zinc-900
      "sidebar-foreground": "oklch(0.985 0 0)", // --color-zinc-50
      "sidebar-primary": "oklch(0.488 0.243 264.376)", // --color-blue-700
      "sidebar-primary-foreground": "oklch(0.985 0 0)", // --color-zinc-50
      "sidebar-accent": "oklch(0.274 0.006 286.033)", // --color-zinc-800
      "sidebar-accent-foreground": "oklch(0.985 0 0)", // --color-zinc-50
      "sidebar-border": "oklch(0.274 0.006 286.033)", // --color-zinc-800
      "sidebar-ring": "oklch(0.442 0.017 285.786)", // --color-zinc-600
    },
  },
  neutral: {
    light: {
      background: "oklch(1 0 0)", // --color-neutral-50
      foreground: "oklch(0.145 0 0)", // --color-neutral-950
      card: "oklch(1 0 0)", // --color-neutral-50
      "card-foreground": "oklch(0.145 0 0)", // --color-neutral-950
      popover: "oklch(1 0 0)", // --color-neutral-50
      "popover-foreground": "oklch(0.145 0 0)", // --color-neutral-950
      primary: "oklch(0.205 0 0)", // --color-neutral-900
      "primary-foreground": "oklch(0.985 0 0)", // --color-neutral-50
      secondary: "oklch(0.97 0 0)", // --color-neutral-100
      "secondary-foreground": "oklch(0.205 0 0)", // --color-neutral-900
      muted: "oklch(0.97 0 0)", // --color-neutral-100
      "muted-foreground": "oklch(0.556 0 0)", // --color-neutral-500
      accent: "oklch(0.97 0 0)", // --color-neutral-100
      "accent-foreground": "oklch(0.205 0 0)", // --color-neutral-900
      destructive: "oklch(0.577 0.245 27.325)", // --color-red-600
      "destructive-foreground": "oklch(0.577 0.245 27.325)", // --color-red-600
      border: "oklch(0.922 0 0)", // --color-neutral-200
      input: "oklch(0.922 0 0)", // --color-neutral-200
      ring: "oklch(0.708 0 0)", // --color-neutral-400
      "chart-1": "oklch(0.646 0.222 41.116)", // --color-orange-600
      "chart-2": "oklch(0.6 0.118 184.704)", // --color-teal-600
      "chart-3": "oklch(0.398 0.07 227.392)", // --color-cyan-900
      "chart-4": "oklch(0.828 0.189 84.429)", // --color-amber-400
      "chart-5": "oklch(0.769 0.188 70.08)", // --color-amber-500
      radius: "0.625rem", // Not a color
      sidebar: "oklch(0.985 0 0)", // --color-neutral-50
      "sidebar-foreground": "oklch(0.145 0 0)", // --color-neutral-950
      "sidebar-primary": "oklch(0.205 0 0)", // --color-neutral-900
      "sidebar-primary-foreground": "oklch(0.985 0 0)", // --color-neutral-50
      "sidebar-accent": "oklch(0.97 0 0)", // --color-neutral-100
      "sidebar-accent-foreground": "oklch(0.205 0 0)", // --color-neutral-900
      "sidebar-border": "oklch(0.922 0 0)", // --color-neutral-200
      "sidebar-ring": "oklch(0.708 0 0)", // --color-neutral-400
    },
    dark: {
      background: "oklch(0.145 0 0)", // --color-neutral-950
      foreground: "oklch(0.985 0 0)", // --color-neutral-50
      card: "oklch(0.145 0 0)", // --color-neutral-950
      "card-foreground": "oklch(0.985 0 0)", // --color-neutral-50
      popover: "oklch(0.145 0 0)", // --color-neutral-950
      "popover-foreground": "oklch(0.985 0 0)", // --color-neutral-50
      primary: "oklch(0.985 0 0)", // --color-neutral-50
      "primary-foreground": "oklch(0.205 0 0)", // --color-neutral-900
      secondary: "oklch(0.269 0 0)", // --color-neutral-800
      "secondary-foreground": "oklch(0.985 0 0)", // --color-neutral-50
      muted: "oklch(0.269 0 0)", // --color-neutral-800
      "muted-foreground": "oklch(0.708 0 0)", // --color-neutral-400
      accent: "oklch(0.269 0 0)", // --color-neutral-800
      "accent-foreground": "oklch(0.985 0 0)", // --color-neutral-50
      destructive: "oklch(0.396 0.141 25.723)", // --color-red-900
      "destructive-foreground": "oklch(0.637 0.237 25.331)", // --color-red-500
      border: "oklch(0.269 0 0)", // --color-neutral-800
      input: "oklch(0.269 0 0)", // --color-neutral-800
      ring: "oklch(0.439 0 0)", // --color-neutral-600
      "chart-1": "oklch(0.488 0.243 264.376)", // --color-blue-700
      "chart-2": "oklch(0.696 0.17 162.48)", // --color-emerald-500
      "chart-3": "oklch(0.769 0.188 70.08)", // --color-amber-500
      "chart-4": "oklch(0.627 0.265 303.9)", // --color-purple-500
      "chart-5": "oklch(0.645 0.246 16.439)", // --color-rose-500
      sidebar: "oklch(0.205 0 0)", // --color-neutral-900
      "sidebar-foreground": "oklch(0.985 0 0)", // --color-neutral-50
      "sidebar-primary": "oklch(0.488 0.243 264.376)", // --color-blue-700
      "sidebar-primary-foreground": "oklch(0.985 0 0)", // --color-neutral-50
      "sidebar-accent": "oklch(0.269 0 0)", // --color-neutral-800
      "sidebar-accent-foreground": "oklch(0.985 0 0)", // --color-neutral-50
      "sidebar-border": "oklch(0.269 0 0)", // --color-neutral-800
      "sidebar-ring": "oklch(0.439 0 0)", // --color-neutral-600
    },
  },
  gray: {
    light: {
      background: "oklch(1 0 0)", // --color-white (closest to gray-50)
      foreground: "oklch(0.13 0.028 261.692)", // --color-gray-950
      card: "oklch(1 0 0)", // --color-white (closest to gray-50)
      "card-foreground": "oklch(0.13 0.028 261.692)", // --color-gray-950
      popover: "oklch(1 0 0)", // --color-white (closest to gray-50)
      "popover-foreground": "oklch(0.13 0.028 261.692)", // --color-gray-950
      primary: "oklch(0.21 0.034 264.665)", // --color-gray-900
      "primary-foreground": "oklch(0.985 0.002 247.839)", // --color-gray-50
      secondary: "oklch(0.967 0.003 264.542)", // --color-gray-100
      "secondary-foreground": "oklch(0.21 0.034 264.665)", // --color-gray-900
      muted: "oklch(0.967 0.003 264.542)", // --color-gray-100
      "muted-foreground": "oklch(0.551 0.027 264.364)", // --color-gray-500
      accent: "oklch(0.967 0.003 264.542)", // --color-gray-100
      "accent-foreground": "oklch(0.21 0.034 264.665)", // --color-gray-900
      destructive: "oklch(0.577 0.245 27.325)", // --color-red-600
      "destructive-foreground": "oklch(0.577 0.245 27.325)", // --color-red-600
      border: "oklch(0.928 0.006 264.531)", // --color-gray-200
      input: "oklch(0.928 0.006 264.531)", // --color-gray-200
      ring: "oklch(0.707 0.022 261.325)", // --color-gray-400
      "chart-1": "oklch(0.646 0.222 41.116)", // --color-orange-600
      "chart-2": "oklch(0.6 0.118 184.704)", // --color-teal-600
      "chart-3": "oklch(0.398 0.07 227.392)", // --color-cyan-900
      "chart-4": "oklch(0.828 0.189 84.429)", // --color-amber-400
      "chart-5": "oklch(0.769 0.188 70.08)", // --color-amber-500
      radius: "0.625rem", // Not a color
      sidebar: "oklch(0.985 0.002 247.839)", // --color-gray-50
      "sidebar-foreground": "oklch(0.13 0.028 261.692)", // --color-gray-950
      "sidebar-primary": "oklch(0.21 0.034 264.665)", // --color-gray-900
      "sidebar-primary-foreground": "oklch(0.985 0.002 247.839)", // --color-gray-50
      "sidebar-accent": "oklch(0.967 0.003 264.542)", // --color-gray-100
      "sidebar-accent-foreground": "oklch(0.21 0.034 264.665)", // --color-gray-900
      "sidebar-border": "oklch(0.928 0.006 264.531)", // --color-gray-200
      "sidebar-ring": "oklch(0.707 0.022 261.325)", // --color-gray-400
    },
    dark: {
      background: "oklch(0.13 0.028 261.692)", // --color-gray-950
      foreground: "oklch(0.985 0.002 247.839)", // --color-gray-50
      card: "oklch(0.13 0.028 261.692)", // --color-gray-950
      "card-foreground": "oklch(0.985 0.002 247.839)", // --color-gray-50
      popover: "oklch(0.13 0.028 261.692)", // --color-gray-950
      "popover-foreground": "oklch(0.985 0.002 247.839)", // --color-gray-50
      primary: "oklch(0.985 0.002 247.839)", // --color-gray-50
      "primary-foreground": "oklch(0.21 0.034 264.665)", // --color-gray-900
      secondary: "oklch(0.278 0.033 256.848)", // --color-gray-800
      "secondary-foreground": "oklch(0.985 0.002 247.839)", // --color-gray-50
      muted: "oklch(0.278 0.033 256.848)", // --color-gray-800
      "muted-foreground": "oklch(0.707 0.022 261.325)", // --color-gray-400
      accent: "oklch(0.278 0.033 256.848)", // --color-gray-800
      "accent-foreground": "oklch(0.985 0.002 247.839)", // --color-gray-50
      destructive: "oklch(0.396 0.141 25.723)", // --color-red-900
      "destructive-foreground": "oklch(0.637 0.237 25.331)", // --color-red-500
      border: "oklch(0.278 0.033 256.848)", // --color-gray-800
      input: "oklch(0.278 0.033 256.848)", // --color-gray-800
      ring: "oklch(0.446 0.03 256.802)", // --color-gray-600
      "chart-1": "oklch(0.488 0.243 264.376)", // --color-blue-700
      "chart-2": "oklch(0.696 0.17 162.48)", // --color-emerald-500
      "chart-3": "oklch(0.769 0.188 70.08)", // --color-amber-500
      "chart-4": "oklch(0.627 0.265 303.9)", // --color-purple-500
      "chart-5": "oklch(0.645 0.246 16.439)", // --color-rose-500
      sidebar: "oklch(0.21 0.034 264.665)", // --color-gray-900
      "sidebar-foreground": "oklch(0.985 0.002 247.839)", // --color-gray-50
      "sidebar-primary": "oklch(0.488 0.243 264.376)", // --color-blue-700
      "sidebar-primary-foreground": "oklch(0.985 0.002 247.839)", // --color-gray-50
      "sidebar-accent": "oklch(0.278 0.033 256.848)", // --color-gray-800
      "sidebar-accent-foreground": "oklch(0.985 0.002 247.839)", // --color-gray-50
      "sidebar-border": "oklch(0.278 0.033 256.848)", // --color-gray-800
      "sidebar-ring": "oklch(0.446 0.03 256.802)", // --color-gray-600
    },
  },
  slate: {
    light: {
      background: "oklch(1 0 0)", // --color-white (closest to slate-50)
      foreground: "oklch(0.129 0.042 264.695)", // --color-slate-950
      card: "oklch(1 0 0)", // --color-white (closest to slate-50)
      "card-foreground": "oklch(0.129 0.042 264.695)", // --color-slate-950
      popover: "oklch(1 0 0)", // --color-white (closest to slate-50)
      "popover-foreground": "oklch(0.129 0.042 264.695)", // --color-slate-950
      primary: "oklch(0.208 0.042 265.755)", // --color-slate-900
      "primary-foreground": "oklch(0.984 0.003 247.858)", // --color-slate-50
      secondary: "oklch(0.968 0.007 247.896)", // --color-slate-100
      "secondary-foreground": "oklch(0.208 0.042 265.755)", // --color-slate-900
      muted: "oklch(0.968 0.007 247.896)", // --color-slate-100
      "muted-foreground": "oklch(0.554 0.046 257.417)", // --color-slate-500
      accent: "oklch(0.968 0.007 247.896)", // --color-slate-100
      "accent-foreground": "oklch(0.208 0.042 265.755)", // --color-slate-900
      destructive: "oklch(0.577 0.245 27.325)", // --color-red-600
      "destructive-foreground": "oklch(0.577 0.245 27.325)", // --color-red-600
      border: "oklch(0.929 0.013 255.508)", // --color-slate-200
      input: "oklch(0.929 0.013 255.508)", // --color-slate-200
      ring: "oklch(0.704 0.04 256.788)", // --color-slate-400
      "chart-1": "oklch(0.646 0.222 41.116)", // --color-orange-600
      "chart-2": "oklch(0.6 0.118 184.704)", // --color-teal-600
      "chart-3": "oklch(0.398 0.07 227.392)", // --color-cyan-900
      "chart-4": "oklch(0.828 0.189 84.429)", // --color-amber-400
      "chart-5": "oklch(0.769 0.188 70.08)", // --color-amber-500
      radius: "0.625rem", // Not a color
      sidebar: "oklch(0.984 0.003 247.858)", // --color-slate-50
      "sidebar-foreground": "oklch(0.129 0.042 264.695)", // --color-slate-950
      "sidebar-primary": "oklch(0.208 0.042 265.755)", // --color-slate-900
      "sidebar-primary-foreground": "oklch(0.984 0.003 247.858)", // --color-slate-50
      "sidebar-accent": "oklch(0.968 0.007 247.896)", // --color-slate-100
      "sidebar-accent-foreground": "oklch(0.208 0.042 265.755)", // --color-slate-900
      "sidebar-border": "oklch(0.929 0.013 255.508)", // --color-slate-200
      "sidebar-ring": "oklch(0.704 0.04 256.788)", // --color-slate-400
    },
    dark: {
      background: "oklch(0.129 0.042 264.695)", // --color-slate-950
      foreground: "oklch(0.984 0.003 247.858)", // --color-slate-50
      card: "oklch(0.129 0.042 264.695)", // --color-slate-950
      "card-foreground": "oklch(0.984 0.003 247.858)", // --color-slate-50
      popover: "oklch(0.129 0.042 264.695)", // --color-slate-950
      "popover-foreground": "oklch(0.984 0.003 247.858)", // --color-slate-50
      primary: "oklch(0.984 0.003 247.858)", // --color-slate-50
      "primary-foreground": "oklch(0.208 0.042 265.755)", // --color-slate-900
      secondary: "oklch(0.279 0.041 260.031)", // --color-slate-800
      "secondary-foreground": "oklch(0.984 0.003 247.858)", // --color-slate-50
      muted: "oklch(0.279 0.041 260.031)", // --color-slate-800
      "muted-foreground": "oklch(0.704 0.04 256.788)", // --color-slate-400
      accent: "oklch(0.279 0.041 260.031)", // --color-slate-800
      "accent-foreground": "oklch(0.984 0.003 247.858)", // --color-slate-50
      destructive: "oklch(0.396 0.141 25.723)", // --color-red-900
      "destructive-foreground": "oklch(0.637 0.237 25.331)", // --color-red-500
      border: "oklch(0.279 0.041 260.031)", // --color-slate-800
      input: "oklch(0.279 0.041 260.031)", // --color-slate-800
      ring: "oklch(0.446 0.043 257.281)", // --color-slate-600
      "chart-1": "oklch(0.488 0.243 264.376)", // --color-blue-700
      "chart-2": "oklch(0.696 0.17 162.48)", // --color-emerald-500
      "chart-3": "oklch(0.769 0.188 70.08)", // --color-amber-500
      "chart-4": "oklch(0.627 0.265 303.9)", // --color-purple-500
      "chart-5": "oklch(0.645 0.246 16.439)", // --color-rose-500
      sidebar: "oklch(0.208 0.042 265.755)", // --color-slate-900
      "sidebar-foreground": "oklch(0.984 0.003 247.858)", // --color-slate-50
      "sidebar-primary": "oklch(0.488 0.243 264.376)", // --color-blue-700
      "sidebar-primary-foreground": "oklch(0.984 0.003 247.858)", // --color-slate-50
      "sidebar-accent": "oklch(0.279 0.041 260.031)", // --color-slate-800
      "sidebar-accent-foreground": "oklch(0.984 0.003 247.858)", // --color-slate-50
      "sidebar-border": "oklch(0.279 0.041 260.031)", // --color-slate-800
      "sidebar-ring": "oklch(0.446 0.043 257.281)", // --color-slate-600
    },
  },
} as const;
</file>

<file path="registry/registry-icons.ts">
export const iconLibraries = {
  lucide: {
    name: "lucide-react",
    package: "lucide-react",
    import: "lucide-react",
  },
  radix: {
    name: "@radix-ui/react-icons",
    package: "@radix-ui/react-icons",
    import: "@radix-ui/react-icons",
  },
} as const;

export const icons: Record<
  string,
  Record<keyof typeof iconLibraries, string>
> = {
  AlertCircle: {
    lucide: "AlertCircle",
    radix: "ExclamationTriangleIcon",
  },
  ArrowLeft: {
    lucide: "ArrowLeft",
    radix: "ArrowLeftIcon",
  },
  ArrowRight: {
    lucide: "ArrowRight",
    radix: "ArrowRightIcon",
  },
  ArrowUpDown: {
    lucide: "ArrowUpDown",
    radix: "CaretSortIcon",
  },
  BellRing: {
    lucide: "BellRing",
    radix: "BellIcon",
  },
  Bold: {
    lucide: "Bold",
    radix: "FontBoldIcon",
  },
  Calculator: {
    lucide: "Calculator",
    radix: "ComponentPlaceholderIcon",
  },
  Calendar: {
    lucide: "Calendar",
    radix: "CalendarIcon",
  },
  Check: {
    lucide: "Check",
    radix: "CheckIcon",
  },
  ChevronDown: {
    lucide: "ChevronDown",
    radix: "ChevronDownIcon",
  },
  ChevronLeft: {
    lucide: "ChevronLeft",
    radix: "ChevronLeftIcon",
  },
  ChevronRight: {
    lucide: "ChevronRight",
    radix: "ChevronRightIcon",
  },
  ChevronUp: {
    lucide: "ChevronUp",
    radix: "ChevronUpIcon",
  },
  ChevronsUpDown: {
    lucide: "ChevronsUpDown",
    radix: "CaretSortIcon",
  },
  Circle: {
    lucide: "Circle",
    radix: "DotFilledIcon",
  },
  Copy: {
    lucide: "Copy",
    radix: "CopyIcon",
  },
  CreditCard: {
    lucide: "CreditCard",
    radix: "ComponentPlaceholderIcon",
  },
  GripVertical: {
    lucide: "GripVertical",
    radix: "DragHandleDots2Icon",
  },
  Italic: {
    lucide: "Italic",
    radix: "FontItalicIcon",
  },
  Loader2: {
    lucide: "Loader2",
    radix: "ReloadIcon",
  },
  Mail: {
    lucide: "Mail",
    radix: "EnvelopeClosedIcon",
  },
  MailOpen: {
    lucide: "MailOpen",
    radix: "EnvelopeOpenIcon",
  },
  Minus: {
    lucide: "Minus",
    radix: "MinusIcon",
  },
  Moon: {
    lucide: "Moon",
    radix: "MoonIcon",
  },
  MoreHorizontal: {
    lucide: "MoreHorizontal",
    radix: "DotsHorizontalIcon",
  },
  PanelLeft: {
    lucide: "PanelLeft",
    radix: "ViewVerticalIcon",
  },
  Plus: {
    lucide: "Plus",
    radix: "PlusIcon",
  },
  Search: {
    lucide: "Search",
    radix: "MagnifyingGlassIcon",
  },
  Send: {
    lucide: "Send",
    radix: "PaperPlaneIcon",
  },
  Settings: {
    lucide: "Settings",
    radix: "GearIcon",
  },
  Slash: {
    lucide: "Slash",
    radix: "SlashIcon",
  },
  Smile: {
    lucide: "Smile",
    radix: "FaceIcon",
  },
  Sun: {
    lucide: "Sun",
    radix: "SunIcon",
  },
  Terminal: {
    lucide: "Terminal",
    radix: "RocketIcon",
  },
  Underline: {
    lucide: "Underline",
    radix: "UnderlineIcon",
  },
  User: {
    lucide: "User",
    radix: "PersonIcon",
  },
  X: {
    lucide: "X",
    radix: "Cross2Icon",
  },
} as const;
</file>

<file path="scripts/capture-registry.mts">
import { existsSync, promises as fs } from "fs";
import path from "path";
import puppeteer from "puppeteer";

import { getAllBlockIds } from "../lib/block";

const REGISTRY_PATH = path.join(process.cwd(), "public/r");

// ----------------------------------------------------------------------------
// Capture screenshots.
// ----------------------------------------------------------------------------
async function captureScreenshots() {
  const blockIds = await getAllBlockIds();
  const blocks = blockIds.filter((block) => {
    // Check if screenshots already exist
    const lightPath = path.join(REGISTRY_PATH, `styles/default/${block}-light.png`);
    const darkPath = path.join(REGISTRY_PATH, `styles/default/${block}-dark.png`);
    return !existsSync(lightPath) || !existsSync(darkPath);
  });

  if (blocks.length === 0) {
    console.log("✨ All screenshots exist, nothing to capture");
    return;
  }

  const browser = await puppeteer.launch({
    defaultViewport: {
      width: 1440,
      height: 900,
      deviceScaleFactor: 2,
    },
  });

  for (const block of blocks) {
    const pageUrl = `http://localhost:3000/view/styles/default/${block}`;

    const page = await browser.newPage();
    await page.goto(pageUrl, {
      waitUntil: "networkidle2",
    });

    console.log(`- Capturing ${block}...`);

    for (const theme of ["light", "dark"]) {
      const screenshotPath = path.join(REGISTRY_PATH, `styles/default/${block}${theme === "dark" ? "-dark" : "-light"}.png`);

      if (existsSync(screenshotPath)) {
        continue;
      }

      // Set theme and reload page
      await page.evaluate((currentTheme) => {
        localStorage.setItem("theme", currentTheme);
      }, theme);

      await page.reload({ waitUntil: "networkidle2" });

      // Wait for animations to complete
      if (block.startsWith("chart") || block.startsWith("dashboard")) {
        await new Promise((resolve) => setTimeout(resolve, 1000));
      }

      // Hide Tailwind indicator
      await page.evaluate(() => {
        const indicator = document.querySelector("[data-tailwind-indicator]");
        if (indicator) {
          indicator.remove();
        }
      });

      await page.screenshot({
        path: screenshotPath,
      });
    }

    await page.close();
  }

  await browser.close();
}

try {
  console.log("🔍 Capturing screenshots...");

  await captureScreenshots();

  console.log("✅ Done!");
} catch (error) {
  console.error(error);
  process.exit(1);
}
</file>

<file path="scripts/fix-import.mts">
export function fixImport(content: string) {
  const regex = /@\/(.+?)\/((?:.*?\/)?(?:components|ui|hooks|lib))\/([\w-]+)/g;

  const replacement = (match: string, path: string, type: string, component: string) => {
    if (type.endsWith("components")) {
      return `@/components/${component}`;
    } else if (type.endsWith("ui")) {
      return `@/components/ui/${component}`;
    } else if (type.endsWith("hooks")) {
      return `@/hooks/${component}`;
    } else if (type.endsWith("lib")) {
      return `@/lib/${component}`;
    }

    return match;
  };

  return content.replace(regex, replacement);
}
</file>

<file path="scripts/generate-registry-tweakcn.ts">
import fs from "fs";
import path from "path";
import { defaultPresets } from "../lib/theme-preset-tweakcn";
import { generateThemeRegistryFromPreset } from "../utils/registry/themes-tweakcn";

interface ThemeRegistry {
  $schema: string;
  name: string;
  homepage: string;
  items: unknown[];
}

function generateRegistry() {
  const registry: ThemeRegistry = {
    $schema: "https://ui.shadcn.com/schema/registry.json",
    name: "behindui-theme-registry",
    homepage: "https://behindui.com",
    items: [],
  };

  // Convert defaultPresets to registry items
  for (const [name, preset] of Object.entries(defaultPresets)) {
    const registryItem = generateThemeRegistryFromPreset(name);
    const item = {
      name,
      type: "registry:style",
      title: preset.label || name,
      description: `A theme based on the ${preset.label || name} color palette.`,
      css: registryItem.css,
      cssVars: registryItem.cssVars,
    };
    registry.items.push(item);
  }

  // Create public/r directory if it doesn't exist
  const publicDir = path.join(process.cwd(), "public", "r", "themes");
  if (!fs.existsSync(publicDir)) {
    fs.mkdirSync(publicDir, { recursive: true });
  }

  // Write the registry file
  const registryPath = path.join(publicDir, "registry.json");
  fs.writeFileSync(registryPath, JSON.stringify(registry, null, 2));
  console.log(`Registry file generated at ${registryPath}`);
}

generateRegistry();
</file>

<file path="scripts/generate-theme-registry-tweakcn.ts">
import fs from "fs";
import path from "path";
import { defaultPresets } from "../lib/theme-preset-tweakcn";
import { generateThemeRegistryFromPreset } from "../utils/registry/themes-tweakcn";

const THEMES_DIR = path.join(process.cwd(), "public", "r", "themes");

// Ensure the themes directory exists
if (!fs.existsSync(THEMES_DIR)) {
  fs.mkdirSync(THEMES_DIR, { recursive: true });
}

// Generate registry files for all presets
Object.keys(defaultPresets).forEach((name) => {
  const registryItem = generateThemeRegistryFromPreset(name);
  const filePath = path.join(THEMES_DIR, `${name}.json`);
  fs.writeFileSync(filePath, JSON.stringify(registryItem, null, 2));
  console.log(`Generated registry file for theme: ${name}`);
});
</file>

<file path="store/editor-store.tsx">
import { create } from "zustand";
import { persist } from "zustand/middleware";
import { ThemeEditorState } from "@/types/editor";
import { defaultThemeState } from "@/config/theme-tweakcn";
import { getPresetThemeStyles } from "@/utils/theme-preset-helper-tweakcn";
import { isDeepEqual } from "@/lib/utils";

interface EditorStore {
  themeState: ThemeEditorState;
  themeCheckpoint: ThemeEditorState | null;
  setThemeState: (state: ThemeEditorState) => void;
  applyThemePreset: (preset: string) => void;
  saveThemeCheckpoint: () => void;
  restoreThemeCheckpoint: () => void;
  resetToCurrentPreset: () => void;
  hasThemeChangedFromCheckpoint: () => boolean;
  hasUnsavedChanges: () => boolean;
}


//menyimpan dan mengelola state tema (themeState) secara global, termasuk fungsi applyThemePreset untuk mengganti preset dan menyimpan style-nya
export const useEditorStore = create<EditorStore>()(
  persist(
    (set, get) => ({
      themeState: defaultThemeState,
      themeCheckpoint: null,
      setThemeState: (state: ThemeEditorState) => {
        set({ themeState: state });
      },
      applyThemePreset: (preset: string) => {
        const themeState = get().themeState;
        const newStyles = getPresetThemeStyles(preset);
        const newThemeState: ThemeEditorState = {
          ...themeState,
          preset,
          styles: newStyles,
          hslAdjustments: defaultThemeState.hslAdjustments,
        };
        const updates: Partial<EditorStore> & { themeState: ThemeEditorState } = {
          themeState: newThemeState,
          themeCheckpoint: newThemeState,
        };
        set(updates);
      },
      saveThemeCheckpoint: () => {
        set({ themeCheckpoint: get().themeState });
      },
      restoreThemeCheckpoint: () => {
        const checkpoint = get().themeCheckpoint;
        if (checkpoint) {
          set({
            themeState: {
              ...checkpoint,
              currentMode: get().themeState.currentMode,
            },
          });
        } else {
          console.warn("No theme checkpoint available to restore to.");
        }
      },
      hasThemeChangedFromCheckpoint: () => {
        const checkpoint = get().themeCheckpoint;
        return !isDeepEqual(get().themeState, checkpoint);
      },
      hasUnsavedChanges: () => {
        const themeState = get().themeState;
        const presetThemeStyles = getPresetThemeStyles(themeState.preset ?? "default");
        const stylesChanged = !isDeepEqual(themeState.styles, presetThemeStyles);
        const hslChanged = !isDeepEqual(themeState.hslAdjustments, defaultThemeState.hslAdjustments);
        return stylesChanged || hslChanged;
      },
      resetToCurrentPreset: () => {
        const themeState = get().themeState;
        const presetThemeStyles = getPresetThemeStyles(themeState.preset ?? "default");
        const newThemeState: ThemeEditorState = {
          ...themeState,
          styles: presetThemeStyles,
          preset: themeState.preset,
          hslAdjustments: defaultThemeState.hslAdjustments,
        };
        set({
          themeState: newThemeState,
          themeCheckpoint: newThemeState,
        });
      },
    }),
    {
      name: "editor-storage",
    }
  )
);
</file>

<file path="store/theme-preset-store.tsx">
import { create } from "zustand";
import { ThemePreset } from "@/types/theme-tweakcn";
import { defaultPresets } from "@/lib/theme-preset-tweakcn";

interface ThemePresetStore {
  presets: Record<string, ThemePreset>;
  registerPreset: (name: string, preset: ThemePreset) => void;
  unregisterPreset: (name: string) => void;
  updatePreset: (name: string, preset: ThemePreset) => void;
  getPreset: (name: string) => ThemePreset | undefined;
  getAllPresets: () => Record<string, ThemePreset>;
}

export const useThemePresetStore = create<ThemePresetStore>()((set, get) => ({
  presets: defaultPresets,
  registerPreset: (name: string, preset: ThemePreset) => {
    set((state) => ({
      presets: {
        ...state.presets,
        [name]: preset,
      },
    }));
  },
  unregisterPreset: (name: string) => {
    set((state) => {
      const { [name]: _, ...remainingPresets } = state.presets;
      return {
        presets: remainingPresets,
      };
    });
  },

  updatePreset: (name: string, preset: ThemePreset) => {
    set((state) => ({
      presets: {
        ...state.presets,
        [name]: preset,
      },
    }));
  },
  getPreset: (name: string) => {
    return get().presets[name];
  },
  getAllPresets: () => {
    return get().presets;
  },
}));
</file>

<file path="types/editor.ts">
import { ThemeStyles } from "./theme-tweakcn";

// Base interface for any editor's state
export interface BaseEditorState {
  styles: ThemeStyles;
}

// Interface for editor-specific controls
export interface EditorControls {
  // Controls can be added per editor type as needed
}

// Interface for editor-specific preview props
export interface EditorPreviewProps {
  styles: ThemeStyles;
}

export interface ThemeEditorState extends BaseEditorState {
  preset?: string;
  styles: ThemeStyles;
  currentMode: "light" | "dark";
  hslAdjustments?: {
    hueShift: number;
    saturationScale: number;
    lightnessScale: number;
  };
}

// Type for available editors
export type EditorType = "button" | "input" | "card" | "dialog" | "theme";

// Interface for editor configuration
export interface EditorConfig {
  type: EditorType;
  name: string;
  description: string;
  defaultState: BaseEditorState;
  controls: React.ComponentType<any>;
  preview: React.ComponentType<any>;
}
</file>

<file path="types/index.d.ts">
import { Icons } from "@/components/icons";

export interface NavItem {
  title: string;
  href?: string;
  disabled?: boolean;
  external?: boolean;
  icon?: keyof typeof Icons;
  label?: string;
  paid?: boolean;
  event?: string;
}

export interface NavItemWithChildren extends NavItem {
  items?: NavItemWithChildren[];
}

export interface MainNavItem extends NavItem {}

export interface SidebarNavItem extends NavItemWithChildren {}

export type DashboardConfig = {
  mainNav: MainNavItem[];
  sidebarNav: SidebarNavItem[];
};

export type ColorPickerProps = {
  color: string;
  onChange: (color: string) => void;
  label: string;
};

export type ColorFormat = "hex" | "rgb" | "hsl" | "oklch";
</file>

<file path="types/theme-tweakcn.ts">
import { z } from "zod";

export const themeStylePropsSchema = z.object({
  background: z.string(),
  foreground: z.string(),
  card: z.string(),
  "card-foreground": z.string(),
  popover: z.string(),
  "popover-foreground": z.string(),
  primary: z.string(),
  "primary-foreground": z.string(),
  secondary: z.string(),
  "secondary-foreground": z.string(),
  muted: z.string(),
  "muted-foreground": z.string(),
  accent: z.string(),
  "accent-foreground": z.string(),
  destructive: z.string(),
  "destructive-foreground": z.string(),
  border: z.string(),
  input: z.string(),
  ring: z.string(),
  "chart-1": z.string(),
  "chart-2": z.string(),
  "chart-3": z.string(),
  "chart-4": z.string(),
  "chart-5": z.string(),
  sidebar: z.string(),
  "sidebar-foreground": z.string(),
  "sidebar-primary": z.string(),
  "sidebar-primary-foreground": z.string(),
  "sidebar-accent": z.string(),
  "sidebar-accent-foreground": z.string(),
  "sidebar-border": z.string(),
  "sidebar-ring": z.string(),
  "font-sans": z.string(),
  "font-serif": z.string(),
  "font-mono": z.string(),
  radius: z.string(),
  "shadow-color": z.string(),
  "shadow-opacity": z.string(),
  "shadow-blur": z.string(),
  "shadow-spread": z.string(),
  "shadow-offset-x": z.string(),
  "shadow-offset-y": z.string(),
  "letter-spacing": z.string(),
  spacing: z.string(),
});

export const themeStylesSchema = z.object({
  light: themeStylePropsSchema,
  dark: themeStylePropsSchema,
});

export type ThemeStyleProps = z.infer<typeof themeStylePropsSchema>;
export type ThemeStyles = z.infer<typeof themeStylesSchema>;

export interface ThemeEditorPreviewProps {
  styles: ThemeStyles;
  currentMode: "light" | "dark";
}

export type ThemePreset = {
  source?: "SAVED" | "BUILT_IN";
  createdAt?: string;
  label?: string;
  styles: {
    light: Partial<ThemeStyleProps>;
    dark: Partial<ThemeStyleProps>;
  };
};
</file>

<file path="utils/apply-style-to-elements.ts">
export function applyStyleToElement(element: HTMLElement, key: string, value: string) {
  element.setAttribute(`style`, `${element.getAttribute("style") || ""}--${key}: ${value};`);
}
</file>

<file path="utils/apply-theme.ts">
import { ThemeEditorState } from "@/types/editor";
import { ThemeStyleProps, ThemeStyles } from "@/types/theme-tweakcn";
import { colorFormatter } from "./color-converter";
import { setShadowVariables } from "./shadow";
import { applyStyleToElement } from "./apply-style-to-elements";
import { COMMON_STYLES } from "@/config/theme-tweakcn";

type Theme = "dark" | "light";

const COMMON_NON_COLOR_KEYS = COMMON_STYLES;

// Helper functions (not exported, used internally by applyThemeToElement)
const updateThemeClass = (root: HTMLElement, mode: Theme) => {
  if (mode === "light") {
    root.classList.remove("dark");
  } else {
    root.classList.add("dark");
  }
};

const applyCommonStyles = (root: HTMLElement, themeStyles: ThemeStyleProps) => {
  Object.entries(themeStyles)
    .filter(([key]) => COMMON_NON_COLOR_KEYS.includes(key as (typeof COMMON_NON_COLOR_KEYS)[number]))
    .forEach(([key, value]) => {
      if (typeof value === "string") {
        applyStyleToElement(root, key, value);
      }
    });
};

const applyThemeColors = (root: HTMLElement, themeStyles: ThemeStyles, mode: Theme) => {
  Object.entries(themeStyles[mode]).forEach(([key, value]) => {
    if (typeof value === "string" && !COMMON_NON_COLOR_KEYS.includes(key as (typeof COMMON_NON_COLOR_KEYS)[number])) {
      const hslValue = colorFormatter(value, "hsl", "4");
      applyStyleToElement(root, key, hslValue);
    }
  });
};

// Exported function to apply theme styles to an element
export const applyThemeToElement = (themeState: ThemeEditorState, rootElement: HTMLElement) => {
  const { currentMode: mode, styles: themeStyles } = themeState;

  if (!rootElement) return;

  updateThemeClass(rootElement, mode);
  // Apply common styles (like border-radius) based on the 'light' mode definition
  applyCommonStyles(rootElement, themeStyles.light);
  // Apply mode-specific colors
  applyThemeColors(rootElement, themeStyles, mode);
  // Apply shadow variables
  setShadowVariables(themeState);
};
</file>

<file path="utils/color-converter.ts">
import * as culori from "culori";
import { ColorFormat } from "../types";
import { Hsl } from "culori";

export const formatNumber = (num?: number) => {
  if (!num) return "0";
  return num % 1 === 0 ? num : num.toFixed(2);
};

export const formatHsl = (hsl: Hsl) => {
  return `hsl(${formatNumber(hsl.h)} ${formatNumber(hsl.s * 100)}% ${formatNumber(hsl.l * 100)}%)`;
};

export const colorFormatter = (colorValue: string, format: ColorFormat = "hsl", tailwindVersion: "3" | "4" = "3"): string => {
  try {
    const color = culori.parse(colorValue);
    if (!color) throw new Error("Invalid color input");

    switch (format) {
      case "hsl": {
        const hsl = culori.converter("hsl")(color);
        if (tailwindVersion === "4") {
          return formatHsl(hsl);
        }
        return `${formatNumber(hsl.h)} ${formatNumber(hsl.s * 100)}% ${formatNumber(hsl.l * 100)}%`;
      }
      case "rgb":
        return culori.formatRgb(color); // e.g., "rgb(64, 128, 192)"
      case "oklch": {
        const oklch = culori.converter("oklch")(color);
        return `oklch(${formatNumber(oklch.l)} ${formatNumber(oklch.c)} ${formatNumber(oklch.h)})`;
      }
      case "hex":
        return culori.formatHex(color); // e.g., "#4080c0"
      default:
        return colorValue;
    }
  } catch (error) {
    console.error(`Failed to convert color: ${colorValue}`, error);
    return colorValue;
  }
};

export const convertToHSL = (colorValue: string): string => colorFormatter(colorValue, "hsl");
</file>

<file path="utils/shadow.ts">
import { colorFormatter } from "./color-converter";
import { ThemeEditorState } from "../types/editor";
import { defaultThemeState } from "@/config/theme-tweakcn";
import { applyStyleToElement } from "./apply-style-to-elements";

export const getShadowMap = (themeEditorState: ThemeEditorState) => {
  const mode = themeEditorState.currentMode;
  const styles = {
    ...defaultThemeState.styles[mode],
    ...themeEditorState.styles[mode],
  };

  const shadowColor = styles["shadow-color"];
  const hsl = colorFormatter(shadowColor, "hsl", "3");
  const offsetX = styles["shadow-offset-x"];
  const offsetY = styles["shadow-offset-y"];
  const blur = styles["shadow-blur"];
  const spread = styles["shadow-spread"];
  const opacity = parseFloat(styles["shadow-opacity"]);
  const color = (opacityMultiplier: number) => `hsl(${hsl} / ${(opacity * opacityMultiplier).toFixed(2)})`;

  const secondLayer = (fixedOffsetY: string, fixedBlur: string): string => {
    // Use the same offsetX as the first layer
    const offsetX2 = offsetX;
    // Use the fixed offsetY specific to the shadow size
    const offsetY2 = fixedOffsetY;
    // Use the fixed blur specific to the shadow size
    const blur2 = fixedBlur;
    // Calculate spread relative to the first layer's spread variable
    const spread2 = (parseFloat(spread?.replace("px", "") ?? "0") - 1).toString() + "px";
    // Use the same color function (opacity can still be overridden by --shadow-opacity)
    const color2 = color(1.0); // Default opacity for second layer is 0.1 in examples

    return `${offsetX2} ${offsetY2} ${blur2} ${spread2} ${color2}`;
  };

  // Map shadow names to their CSS variable string structures
  const shadowMap: { [key: string]: string } = {
    // Single layer shadows - use base variables directly
    "shadow-2xs": `${offsetX} ${offsetY} ${blur} ${spread} ${color(0.5)}`, // Assumes vars set appropriately (e.g., y=1, blur=0, spread=0)
    "shadow-xs": `${offsetX} ${offsetY} ${blur} ${spread} ${color(0.5)}`, // Assumes vars set appropriately (e.g., y=1, blur=2, spread=0)
    "shadow-2xl": `${offsetX} ${offsetY} ${blur} ${spread} ${color(2.5)}`, // Assumes vars set appropriately (e.g., y=25, blur=50, spread=-12)

    // Two layer shadows - use base vars for layer 1, mix fixed/calculated for layer 2
    "shadow-sm": `${offsetX} ${offsetY} ${blur} ${spread} ${color(1.0)}, ${secondLayer("1px", "2px")}`,
    shadow: `${offsetX} ${offsetY} ${blur} ${spread} ${color(1.0)}, ${secondLayer("1px", "2px")}`, // Alias for the 'shadow:' example line

    "shadow-md": `${offsetX} ${offsetY} ${blur} ${spread} ${color(1.0)}, ${secondLayer("2px", "4px")}`,

    "shadow-lg": `${offsetX} ${offsetY} ${blur} ${spread} ${color(1.0)}, ${secondLayer("4px", "6px")}`,

    "shadow-xl": `${offsetX} ${offsetY} ${blur} ${spread} ${color(1.0)}, ${secondLayer("8px", "10px")}`,
  };

  return shadowMap;
};

// Function to set shadow CSS variables
export function setShadowVariables(themeEditorState: ThemeEditorState) {
  const root = document.documentElement;

  const shadows = getShadowMap(themeEditorState);
  Object.entries(shadows).forEach(([name, value]) => {
    applyStyleToElement(root, name, value);
  });
}
</file>

<file path="utils/theme-preset-helper-tweakcn.ts">
// utils/theme-preset-helper.ts

import { defaultPresets } from "@/lib/theme-preset-tweakcn";
import { ThemeStyles } from "@/types/theme-tweakcn";
import { defaultThemeState } from "@/config/theme-tweakcn";


//mengambil dan menggabungkan style dari preset tertentu dengan default style, lalu mengembalikan objek ThemeStyles (light dan dark).
export function getPresetThemeStyles(name: string): ThemeStyles {
  const defaultTheme = defaultThemeState.styles;
  if (name === "default") {
    return defaultTheme;
  }
  const preset = defaultPresets[name];
  if (!preset) {
    throw new Error(`Preset not found for theme: ${name}`);
  }
  return {
    light: {
      ...defaultTheme.light,
      ...(preset.styles.light || {}),
    },
    dark: {
      ...defaultTheme.dark,
      ...(preset.styles.dark || {}), // ✅ Ini yang benar
    },
  };
}
</file>

<file path="tsconfig.scripts.json">
{
  "$schema": "https://json.schemastore.org/tsconfig",
  "extends": "./tsconfig.json",
  "compilerOptions": {
    "target": "ES2017",
    "module": "ESNext",
    "moduleResolution": "node",
    "esModuleInterop": true,
    "isolatedModules": false,
    "allowImportingTsExtensions": true
  },
  "include": ["scripts/**/*.{ts,mts}"],
  "exclude": ["node_modules"]
}
</file>

<file path="__registry__/default/blocks/card-02/page.tsx">
import { PricingCard } from "./components/pricing-card";

const TIERS = [
  {
    name: "Teams",
    price: 12,
    description:
      "Highly recommended for small teams who seek to upgrade their time & perform",
    features: [
      "1 team",
      "Schedule meeting as team",
      "Collective events",
      "Team workflow",
    ],
    cta: "Get Started",
    linear: true,
    default: true,
  },
];

export default function Page() {
  return (
    <>
      <div className=" z-50  flex flex-1 justify-center gap-6 bg-background p-6 ">
        {TIERS.map((tier) => (
          <PricingCard key={tier.name} tier={tier} paymentFrequency="monthly" />
        ))}
      </div>
    </>
  );
}
</file>

<file path="__registry__/default/blocks/next-int/main.tsx">
"use client";

import React from "react";
import { motion } from "framer-motion";
import { Icons } from "@/components/icons";
import { NavigationBar } from "./components/navbar";
import { Photos } from "./components/photos";
import LangSwitch from "./components/lang-switch";
const projects = [
  {
    id: 1,
    media:
      "https://images.unsplash.com/photo-1571781418606-70265b9cce90?q=80&w=3087&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D",
  },
  {
    id: 2,
    media:
      "https://images.unsplash.com/photo-1505576391880-b3f9d713dc4f?q=80&w=1870&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D",
  },
  {
    id: 3,
    media:
      "https://images.unsplash.com/photo-1557804483-ef3ae78eca57?q=80&w=2688&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D",
  },
  {
    id: 4,
    media:
      "https://plus.unsplash.com/premium_photo-1684445035564-c98efbe1fb7d?q=80&w=3087&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D",
  },
  {
    id: 5,
    media:
      "https://images.unsplash.com/photo-1493857671505-72967e2e2760?q=80&w=2940&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D",
  },
  {
    id: 7,
    media:
      "https://images.unsplash.com/photo-1551038247-3d9af20df552?q=80&w=3087&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D",
  },
];

const NextInt = () => {
  const photos = projects.map((project) => project.media);
  return (
    <>
      <div className="bg-backgroud z-50 flex h-full flex-col items-center justify-between overflow-hidden px-4 md:h-screen ">
        <div className="flex w-full items-center justify-between p-6 px-10">
          <div className="flex flex-1 text-lg font-medium text-primary md:text-2xl">
            NexInt
          </div>
          <div className="hidden w-full flex-1 justify-end md:flex md:justify-center">
            <NavigationBar.Desktop />
          </div>
          <div className="flex justify-end gap-3 md:flex-1">
            <LangSwitch />
          </div>
        </div>

        <div className=" flex-1  md:mt-10">
          <div className="container flex-col items-center md:flex md:h-full md:justify-between">
            <div className="md:translate-y-32">
              <div className="mb-2 flex w-full items-center justify-center gap-2 text-primary">
                <Icons.nextint />
                Broadway St., 123, New York, NY 10007 USA
              </div>
              <h1 className="font-heading xs:text-2xl text-pretty text-center text-xl tracking-tighter text-primary  sm:text-3xl  md:max-w-6xl md:text-7xl">
                Building visions & creating reality <br />
                with NextInt
              </h1>
            </div>
            <Photos photos={photos} />
          </div>
        </div>
      </div>
    </>
  );
};

export default NextInt;
</file>

<file path="components/editor/theme-select.tsx">
"use client";
import React, { useCallback, useMemo, useState } from "react";
import { Popover, PopoverContent, PopoverTrigger } from "@/components/ui/popover";
import { getPresetThemeStyles } from "@/utils/theme-preset-helper-tweakcn";
import { ThemePreset } from "@/types/theme-tweakcn";
import { Button } from "../ui/button";
import { ArrowLeft, ArrowRight, Check, ChevronDown, Moon, Search, Shuffle, Sun, Heart } from "lucide-react";
import { Separator } from "../ui/separator";
import { ScrollArea } from "../ui/scroll-area";
import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from "../ui/tooltip";
import { Command, CommandEmpty, CommandGroup, CommandItem } from "../ui/command";
import { Input } from "../ui/input";
import { Badge } from "../ui/badge";
import { cn } from "@/lib/utils";
import { useTheme } from "../theme-provider-tweakcn";
import { useEditorStore } from "@/store/editor-store";

//bagian tampilan utama theme

interface ThemePresetSelectProps {
  presets: Record<string, ThemePreset>;
  currentPreset: string | null;
  onPresetChange: (preset: string) => void;
}
interface ColorBoxProps {
  color: string;
}

const ColorBox: React.FC<ColorBoxProps> = ({ color }) => <div className="h-3 w-3 rounded-sm border border-muted" style={{ backgroundColor: color }} />;

interface ThemeColorsProps {
  presetName: string;
  mode: "light" | "dark";
}

const ThemeColors: React.FC<ThemeColorsProps> = ({ presetName, mode }) => {
  const styles = getPresetThemeStyles(presetName)[mode];
  return (
    <div className="flex gap-0.5">
      <ColorBox color={styles.primary} />
      <ColorBox color={styles.accent} />
      <ColorBox color={styles.secondary} />
      <ColorBox color={styles.border} />
    </div>
  );
};

const isThemeNew = (preset: ThemePreset) => {
  if (!preset.createdAt) return false;
  const createdAt = new Date(preset.createdAt);
  const timePeriod = new Date();
  timePeriod.setDate(timePeriod.getDate() - 5);
  return createdAt > timePeriod;
};

interface ThemeControlsProps {
  onRandomize: () => void;
  onThemeToggle: (event: React.MouseEvent<HTMLButtonElement>) => void;
  theme: string;
}

//batton ganto dark/light mode dan shuffle theme
const ThemeControls: React.FC<ThemeControlsProps> = ({ onRandomize, onThemeToggle, theme }) => (
  <div className="flex gap-1">
    <Tooltip>
      <TooltipTrigger asChild>
        <Button variant="ghost" size="sm" className="h-7 w-7 p-0" onClick={onThemeToggle}>
          {theme === "light" ? <Sun className="h-3.5 w-3.5" /> : <Moon className="h-3.5 w-3.5" />}
        </Button>
      </TooltipTrigger>
      <TooltipContent side="bottom">
        <p className="text-xs">Toggle theme</p>
      </TooltipContent>
    </Tooltip>

    <Tooltip>
      <TooltipTrigger asChild>
        <Button variant="ghost" size="sm" className="h-7 w-7 p-0" onClick={onRandomize}>
          <Shuffle className="h-3.5 w-3.5" />
        </Button>
      </TooltipTrigger>
      <TooltipContent side="bottom">
        <p className="text-xs">Random theme</p>
      </TooltipContent>
    </Tooltip>
  </div>
);

interface ThemeCycleButtonProps {
  direction: "prev" | "next";
  onClick: () => void;
}

// bagain atas, arrow untuk ganti theme (next/prev)
const ThemeCycleButton: React.FC<ThemeCycleButtonProps> = ({ direction, onClick }) => (
  <>
    <Separator orientation="vertical" className="h-8" />
    <Tooltip>
      <TooltipTrigger asChild>
        <Button variant="ghost" size="icon" className="size-14 shrink-0 rounded-none bg-muted/10" onClick={onClick}>
          {direction === "prev" ? <ArrowLeft className="h-4 w-4" /> : <ArrowRight className="h-4 w-4" />}
        </Button>
      </TooltipTrigger>
      <TooltipContent>{direction === "prev" ? "Previous theme" : "Next theme"}</TooltipContent>
    </Tooltip>
  </>
);

const ThemePresetSelect: React.FC<ThemePresetSelectProps> = ({ presets, currentPreset, onPresetChange }) => {
  const { themeState, hasUnsavedChanges } = useEditorStore();
  const { theme, toggleTheme } = useTheme();
  const mode = themeState.currentMode;
  const [search, setSearch] = useState("");


  const presetNames = useMemo(() => ["default", ...Object.keys(presets)], [presets]);
  const value = presetNames?.find((name) => name === currentPreset);

  const filteredPresets = useMemo(() => {
    const filteredList =
      search.trim() === ""
        ? presetNames
        : Object.entries(presets)
            .filter(([_, preset]) => preset.label?.toLowerCase().includes(search.toLowerCase()))
            .map(([name]) => name);

    return filteredList.sort((a, b) => {
      const labelA = presets[a]?.label || a;
      const labelB = presets[b]?.label || b;
      return labelA.localeCompare(labelB);
    });
  }, [presetNames, search, presets]);

  const currentIndex = useMemo(() => filteredPresets.indexOf(value || "default"), [filteredPresets, value]) ?? 0;

  const randomize = useCallback(() => {
    const random = Math.floor(Math.random() * filteredPresets.length);
    onPresetChange(filteredPresets[random]);
  }, [onPresetChange, filteredPresets]);

  const cycleTheme = useCallback(
    (direction: "prev" | "next") => {
      const newIndex = direction === "next" ? (currentIndex + 1) % filteredPresets.length : (currentIndex - 1 + filteredPresets.length) % filteredPresets.length;
      onPresetChange(filteredPresets[newIndex]);
    },
    [currentIndex, filteredPresets, onPresetChange]
  );

  const handleThemeToggle = (event: React.MouseEvent<HTMLButtonElement>) => {
    const { clientX: x, clientY: y } = event;
    toggleTheme({ x, y });
  };

  const filteredDefaultThemes = filteredPresets;

  return (
    <>
      <div className="flex items-center">
        <TooltipProvider>
          <Popover>
            <PopoverTrigger className="bg-muted/10" asChild>
              <Button variant="ghost" className={cn("group relative min-h-14 w-full justify-between rounded-none md:min-w-56")}>
                <div className="flex items-center gap-3">
                  <div className="flex gap-0.5">
                    {/* ini ubah  */}
                    <ColorBox color={themeState.styles[mode].primary} />
                    <ColorBox color={themeState.styles[mode].accent} />
                    <ColorBox color={themeState.styles[mode].secondary} />
                    <ColorBox color={themeState.styles[mode].border} />
                  </div>
                </div>
                <ChevronDown className="size-4 shrink-0" />
              </Button>
            </PopoverTrigger>
            <PopoverContent className="ml-4 w-[300px] p-0" align="center">
              <Command className="w-full rounded-lg border shadow-md">
                <div className="flex w-full items-center">
                  <div className="flex w-full items-center border-b px-3 py-1">
                    <Search className="size-4 shrink-0 opacity-50" />
                    <Input placeholder="Search themes..." className="border-0 shadow-none focus-visible:ring-0 focus-visible:ring-offset-0" value={search} onChange={(e) => setSearch(e.target.value)} />
                  </div>
                </div>
                <div className="flex items-center justify-between px-4 py-2">
                  <ThemeControls onRandomize={randomize} onThemeToggle={handleThemeToggle} theme={theme} />
                </div>
                <Separator />
                <ScrollArea className="h-[500px] max-h-[70vh]">
                  <CommandEmpty>No themes found.</CommandEmpty>

                  {/* Default Theme Group */}
                  {filteredDefaultThemes.length > 0 && (
                    <CommandGroup heading="Built-in Themes">
                      {filteredDefaultThemes.map((presetName, index) => (
                        <CommandItem
                          key={`${presetName}-${index}`}
                          value={`${presetName}-${index}`}
                          onSelect={() => {
                            onPresetChange(presetName);
                            setSearch("");
                          }}
                          className="flex items-center gap-2 py-2 data-[highlighted]:bg-secondary/50"
                        >
                          <ThemeColors presetName={presetName} mode={mode} />
                          <div className="flex flex-1 items-center gap-2">
                            <span className="text-sm font-medium capitalize">{presets[presetName]?.label || presetName}</span>
                            {presets[presetName] && isThemeNew(presets[presetName]) && (
                              <Badge variant="secondary" className="rounded-full text-xs">
                                New
                              </Badge>
                            )}
                          </div>
                          {presetName === value && <Check className="h-4 w-4 shrink-0 opacity-70" />}
                        </CommandItem>
                      ))}
                    </CommandGroup>
                  )}
                </ScrollArea>
              </Command>
            </PopoverContent>
          </Popover>
        </TooltipProvider>
        <ThemeCycleButton direction="prev" onClick={() => cycleTheme("prev")} />
        <ThemeCycleButton direction="next" onClick={() => cycleTheme("next")} />
      </div>
    </>
  );
};

export default ThemePresetSelect;
</file>

<file path="components/registry/component-display.tsx">
import * as React from "react";
import { registryItemFileSchema } from "@/registry/schema";
import { z } from "zod";

import { highlightCode } from "@/lib/highlight-code";
import { getRegistryItem, createFileTreeForRegistryItemFiles } from "@/lib/registry-utils";
import { BlockViewer } from "./component-viewer";

export async function BlockDisplay({ name }: { name: string }) {
  const item = await getCachedRegistryItem(name);

  if (!item?.files) {
    return null;
  }

  const [tree, highlightedFiles] = await Promise.all([getCachedFileTree(item.files), getCachedHighlightedFiles(item.files)]);

  return <BlockViewer item={item} tree={tree} highlightedFiles={highlightedFiles} />;
}

const getCachedRegistryItem = React.cache(async (name: string) => {
  return await getRegistryItem(name);
});

const getCachedFileTree = React.cache(async (files: Array<{ path: string; target?: string }>) => {
  if (!files) {
    return null;
  }

  return await createFileTreeForRegistryItemFiles(files);
});

const getCachedHighlightedFiles = React.cache(async (files: z.infer<typeof registryItemFileSchema>[]) => {
  return await Promise.all(
    files.map(async (file) => ({
      ...file,
      highlightedContent: await highlightCode(file.content ?? ""),
    }))
  );
});
</file>

<file path="components/registry/component-nav.tsx">
"use client";

import Link from "next/link";
import { usePathname } from "next/navigation";

import { ScrollArea, ScrollBar } from "../ui/scroll-area";
import { registryCategories } from "@/registry/registry-categories";

export function BlocksNav() {
  const pathname = usePathname();

  return (
    <div className="relative overflow-hidden">
      <ScrollArea className="max-w-none">
        <div className="flex items-center">
          <BlocksNavLink category={{ name: "Featured", slug: "", hidden: false }} isActive={pathname === "/"} />
          {registryCategories.map((category) => (
            <BlocksNavLink key={category.slug} category={category} isActive={pathname === `/${category.slug}`} />
          ))}
        </div>
        <ScrollBar orientation="horizontal" className="invisible" />
      </ScrollArea>
    </div>
  );
}

function BlocksNavLink({ category, isActive }: { category: (typeof registryCategories)[number]; isActive: boolean }) {
  if (category.hidden) {
    return null;
  }

  return (
    <Link
      href={`/${category.slug}`}
      key={category.slug}
      className="flex h-7 shrink-0 items-center justify-center whitespace-nowrap rounded-full px-4 text-center text-sm font-medium text-muted-foreground transition-colors hover:text-foreground data-[active=true]:bg-muted data-[active=true]:text-foreground"
      data-active={isActive}
    >
      {category.name}
    </Link>
  );
}
</file>

<file path="components/ui/resizable.tsx">
"use client";
import * as ResizablePrimitive from "react-resizable-panels";

import { cn } from "@/lib/utils";
import { DragHandleDots2Icon } from "@radix-ui/react-icons";

const ResizablePanelGroup = ({ className, ...props }: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (
  <ResizablePrimitive.PanelGroup className={cn("flex h-full w-full data-[panel-group-direction=vertical]:flex-col", className)} {...props} />
);

const ResizablePanel = ResizablePrimitive.Panel;

const ResizableHandle = ({
  withHandle,
  className,
  ...props
}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {
  withHandle?: boolean;
}) => (
  <ResizablePrimitive.PanelResizeHandle
    className={cn(
      "relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90",
      className
    )}
    {...props}
  >
    {withHandle && (
      <div className="z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border">
        <DragHandleDots2Icon className="h-2.5 w-2.5" />
      </div>
    )}
  </ResizablePrimitive.PanelResizeHandle>
);

export { ResizablePanelGroup, ResizablePanel, ResizableHandle };
</file>

<file path="components/ui/toggle.tsx">
"use client";

import * as React from "react";
import * as TogglePrimitive from "@radix-ui/react-toggle";
import { cva, type VariantProps } from "class-variance-authority";

import { cn } from "@/lib/utils";

const toggleVariants = cva(
  "inline-flex items-center justify-center gap-2 rounded-md text-sm font-medium transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
  {
    variants: {
      variant: {
        default: "bg-transparent",
        outline: "border border-input bg-transparent shadow-sm hover:bg-accent hover:text-accent-foreground",
      },
      size: {
        default: "h-9 min-w-9 px-2",
        sm: "h-8 min-w-8 px-1.5",
        lg: "h-10 min-w-10 px-2.5",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
);

const Toggle = React.forwardRef<React.ElementRef<typeof TogglePrimitive.Root>, React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> & VariantProps<typeof toggleVariants>>(({ className, variant, size, ...props }, ref) => (
  <TogglePrimitive.Root ref={ref} className={cn(toggleVariants({ variant, size, className }))} {...props} />
));

Toggle.displayName = TogglePrimitive.Root.displayName;

export { Toggle, toggleVariants };
</file>

<file path="components/site-header.tsx">
import Link from "next/link";

import { Icons } from "@/components/icons";
import { MobileNav } from "@/components/mobile-nav";
import { buttonVariants } from "@/components/ui/button";
import { siteConfig } from "@/config/site";
import { cn } from "@/lib/utils";
import { MainNav } from "./main-nav";

export function SiteHeader() {
  return (
    <header className={cn("supports-backdrop-blur:bg-background/90 sticky top-0 z-[999] w-full bg-background/40 backdrop-blur-lg")}>
      <div className="container flex h-16 items-center justify-between md:justify-center">
        <MainNav />
        {/* <MobileNav /> */}
        <div className="flex items-center justify-between gap-2 md:flex-1 md:justify-end">
          <nav className="flex items-center gap-1">
            <Link href={siteConfig.links.threads} target="_blank" rel="noreferrer">
              <div
                className={cn(
                  buttonVariants({
                    variant: "ghost",
                  }),
                  "w-9 px-0"
                )}
              >
                <Icons.thread className="size-4" />
                <span className="sr-only">Threads</span>
              </div>
            </Link>
            <Link href={siteConfig.links.github} target="_blank" rel="noreferrer">
              <div
                className={cn(
                  buttonVariants({
                    variant: "ghost",
                  }),
                  "w-9 px-0"
                )}
              >
                <Icons.gitHub className="size-4" />
                <span className="sr-only">Github</span>
              </div>
            </Link>

            <Link href={siteConfig.links.twitter} target="_blank" rel="noreferrer">
              <div
                className={cn(
                  buttonVariants({
                    variant: "ghost",
                  }),
                  "w-9 px-0"
                )}
              >
                <Icons.twitter className="size-4 fill-current" />
                <span className="sr-only">X</span>
              </div>
            </Link>
          </nav>
        </div>
      </div>
      <hr className="m-0 h-px w-full border-none bg-gradient-to-r from-neutral-200/0 via-neutral-200/30 to-neutral-200/0" />
    </header>
  );
}
</file>

<file path="lib/block.ts">
"use server";

import { registryEntrySchema } from "@/registry/schema";
import { z } from "zod";

import { Style } from "@/registry/registry-styles";

export async function getAllBlockIds(types: z.infer<typeof registryEntrySchema>["type"][] = ["registry:block", "registry:internal"], categories: string[] = [], style: Style["name"] = "default"): Promise<string[]> {
  const { Index } = await import("@/__registry__");

  if (!Index[style] || typeof Index[style] !== "object" || Array.isArray(Index[style])) {
    return []; // Return empty array instead of throwing error
  }

  try {
    // Change this line - parse each entry individually instead of the whole object
    const entries = Object.entries(Index[style]);
    const validEntries = [];

    for (const [key, value] of entries) {
      try {
        const validatedEntry = registryEntrySchema.parse(value);
        validEntries.push({ key, ...validatedEntry });
      } catch (error) {
        console.warn(`Entry "${key}" failed validation:`, error);
        // Continue with next entry instead of failing completely
      }
    }

    console.log(`Successfully validated ${validEntries.length} out of ${entries.length} entries`);

    return validEntries.filter((block) => types.includes(block.type) && (categories.length === 0 || block.categories?.some((category) => categories.includes(category))) && !block.name.startsWith("chart-")).map((block) => block.name);
  } catch (error) {
    console.error("Function error:", error);
    return []; // Return empty array instead of throwing error
  }
}
</file>

<file path="lib/use-config.ts">
import { useAtom } from "jotai";
import { atomWithStorage } from "jotai/utils";

import { BaseColor } from "@/registry/registry-base-colors";
import { Style } from "@/registry/registry-styles";

type Config = {
  style: Style["name"];
  theme: BaseColor["name"];
  radius: number;
  font: "sans" | "serif" | "mono" | "roboto";
};

const configAtom = atomWithStorage<Config>("config", {
  style: "default",
  theme: "zinc",
  radius: 0.5,
  font: "sans",
});

export function useConfig() {
  return useAtom(configAtom);
}
</file>

<file path="public/r/styles/default/bento-01.json">
{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "bento-01",
  "type": "registry:block",
  "author": "shadcn (https://ui.shadcn.com)",
  "description": "Ideal for product designers.",
  "registryDependencies": [
    "nav",
    "lang-switch",
    "photos"
  ],
  "files": [
    {
      "path": "blocks/bento-01/page.tsx",
      "content": "\"use client\";\n\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { useAnimations } from \"./hooks/useAnimation\";\nimport { motion } from \"framer-motion\";\nimport { MoveUpRight } from \"lucide-react\";\nimport Image from \"next/image\";\nimport AnimatedEmoji from \"./components/animated-emoji\";\nimport Logo from \"./components/logo\";\n\nexport default function MainLayout() {\n  const { cardIdentity, cardSlogan, cardProduct, verticalCard, quoteCard } =\n    useAnimations();\n\n  return (\n    <>\n      <div className=\"max-w-screen  bg-backgroud z-50 h-screen p-4  2xl:overflow-visible\">\n        <div className=\"grid grid-cols-4 grid-rows-8 gap-5 text-primary lg:grid-cols-3\">\n          <div className=\" col-span-full h-full w-full lg:col-span-1 lg:col-start-2 lg:row-span-2 lg:row-start-2\">\n            <Card className=\" h-full w-full\">\n              <CardContent className=\"flex h-full  w-full items-center justify-center gap-2\">\n                <Logo className=\"h-auto w-48\" />\n              </CardContent>\n            </Card>\n          </div>\n          <motion.div\n            className=\" group relative col-span-full p-0  lg:col-span-2 lg:row-span-1 lg:row-start-1\"\n            {...cardIdentity}\n          >\n            <Card className=\" h-full w-full text-primary\">\n              <CardContent className=\"flex h-full items-end justify-start gap-2 px-8\">\n                <div className=\"w-80 text-xl \">\n                  Discover our new eco-friendly skincare collection designs to\n                  nourish your skin\n                </div>\n                <button className=\"dark:border-knight absolute  right-2 top-2 h-10 w-10 rounded-full border-2 border-transparent bg-primary p-2 transition-all duration-500 ease-in-out group-hover:w-40 group-hover:bg-primary md:h-[2.75rem] md:w-[2.75rem]\">\n                  <div className=\"flex items-center justify-center\">\n                    <span className=\"md:text-medium animate-fade invisible mr-1 hidden text-nowrap text-sm text-black  group-hover:visible group-hover:block \">\n                      Order Now\n                    </span>\n                    <MoveUpRight className=\"text-black\" />\n                  </div>\n                </button>\n              </CardContent>\n            </Card>\n          </motion.div>\n          <motion.div\n            className=\" col-span-full row-start-2 row-end-3 rounded-full  p-0 lg:col-span-1 lg:col-start-1 lg:row-start-2\"\n            {...cardSlogan}\n          >\n            <Card className=\" h-full w-full bg-blue-300 text-primary\">\n              <CardContent className=\"flex h-full items-center justify-center p-0\">\n                <h2 className=\"text-center text-2xl font-bold  lg:text-3xl\">\n                  Beauty & Care\n                </h2>\n              </CardContent>\n            </Card>\n          </motion.div>\n          <motion.div\n            className=\"col-span-2 hidden justify-center rounded-full  p-0 lg:col-span-1 lg:col-start-3 lg:row-span-1 lg:row-start-3 lg:flex\"\n            {...cardProduct}\n          >\n            <Card className=\"flex h-full w-full items-center justify-center bg-blue-300 text-primary\">\n              <CardContent className=\" flex items-center justify-center p-0 \">\n                <div className=\"text-center text-3xl font-bold\">\n                  Serum & Treatment\n                </div>\n              </CardContent>\n            </Card>\n          </motion.div>\n\n          <motion.div\n            className=\"col-span-full p-0 lg:col-span-1 lg:col-start-1 lg:row-span-2 lg:row-start-3\"\n            {...verticalCard}\n          >\n            <Card className=\"h-full w-full\">\n              <CardContent className=\"flex h-full items-center justify-center p-0\">\n                <AnimatedEmoji />\n              </CardContent>\n            </Card>\n          </motion.div>\n\n          <motion.div\n            className=\"relative hidden rounded-xl  lg:col-start-3 lg:row-span-2 lg:row-start-1 lg:block lg:h-[350px]\"\n            {...verticalCard}\n          >\n            <Image\n              src=\"https://images.unsplash.com/photo-1724084120131-3f2e0d11a288?q=80&w=2940&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D\"\n              priority={true}\n              alt=\"profile image\"\n              fill\n              style={{\n                width: \"100%\",\n                height: \"100%\",\n                objectFit: \"cover\",\n                borderRadius: \"15px\",\n              }}\n            />\n          </motion.div>\n          <motion.div\n            className=\"relative col-span-full  lg:col-span-2 lg:col-start-2 lg:row-span-1 lg:row-start-4\"\n            {...quoteCard}\n          >\n            <Card className=\"h-full w-full\">\n              <div className=\"absolute inset-0\">\n                <Image\n                  src=\"https://images.unsplash.com/photo-1584949514123-474cfa705dfe?q=80&w=2787&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D\"\n                  priority={true}\n                  alt=\"profile image\"\n                  fill\n                  style={{\n                    width: \"100%\",\n                    height: \"100%\",\n                    objectFit: \"cover\",\n                    borderRadius: \"15px\",\n                  }}\n                />\n              </div>\n              <div className=\"absolute inset-0 rounded-[15px] bg-black/30\"></div>\n\n              {/* Text Container with Center Alignment */}\n              <div className=\"relative z-10 flex h-full  w-full items-center justify-center gap-1 px-4 text-center text-primary \">\n                <p className=\"text-xl font-light\">your secret</p>\n\n                {/* Horizontal Line */}\n                <div className=\"my-3 h-px bg-primary md:w-40\"></div>\n\n                <p className=\"text-xl font-light\">beauty</p>\n              </div>\n            </Card>\n          </motion.div>\n        </div>\n      </div>\n    </>\n  );\n}\n",
      "type": "registry:page",
      "target": "app/page.tsx"
    },
    {
      "path": "blocks/bento-01/components/animated-emoji.tsx",
      "content": "\"use client\";\n\nimport Image from \"next/image\";\n\nconst AnimatedEmoji = () => {\n  return (\n    <div className=\"flex h-full  w-full  items-center justify-center\">\n      <Image\n        alt=\"Animated Emoji\"\n        height={150}\n        src=\"https://raw.githubusercontent.com/Tarikul-Islam-Anik/Animated-Fluent-Emojis/master/Emojis/Smilies/Smiling%20Cat%20with%20Heart-Eyes.png\"\n        width={150}\n      />\n    </div>\n  );\n};\n\nexport default AnimatedEmoji;\n",
      "type": "registry:component",
      "target": ""
    },
    {
      "path": "blocks/bento-01/components/logo.tsx",
      "content": "import * as React from \"react\";\nconst Logo = ({ className, ...props }: any) => (\n  <svg\n    xmlns=\"http://www.w3.org/2000/svg\"\n    width={101}\n    height={23}\n    fill=\"none\"\n    className={className}\n    viewBox=\"0 0 414 90\"\n    {...props}\n  >\n    <path\n      fill=\"url(#a)\"\n      d=\"M402.614 90c-3.338 0-6.082-.964-8.232-2.893-2.077-2.002-3.115-4.45-3.115-7.342 0-2.967 1.038-5.451 3.115-7.454 2.15-2.002 4.894-3.003 8.232-3.003 3.263 0 5.933 1 8.01 3.003 2.151 2.003 3.226 4.487 3.226 7.454 0 2.892-1.075 5.34-3.226 7.342-2.077 1.929-4.747 2.893-8.01 2.893Z\"\n    />\n    <path\n      className=\"fill-black dark:fill-white\"\n      fillRule=\"evenodd\"\n      d=\"M314.426 57.96c0-6.378 1.187-11.977 3.56-16.798 2.448-4.82 5.748-8.529 9.901-11.125 4.154-2.596 8.789-3.893 13.906-3.893 4.376 0 8.196.89 11.459 2.67 3.337 1.78 5.896 4.116 7.676 7.008v-8.789h19.023V89.11h-19.023v-8.789c-1.854 2.893-4.45 5.23-7.787 7.009-3.264 1.78-7.083 2.67-11.459 2.67-5.043 0-9.641-1.298-13.795-3.894-4.153-2.67-7.453-6.415-9.901-11.236-2.373-4.895-3.56-10.531-3.56-16.91Zm46.502.112c0-4.747-1.335-8.492-4.005-11.236-2.596-2.744-5.785-4.117-9.567-4.117-3.783 0-7.009 1.373-9.679 4.117-2.596 2.67-3.894 6.378-3.894 11.125 0 4.746 1.298 8.529 3.894 11.347 2.67 2.744 5.896 4.116 9.679 4.116 3.782 0 6.971-1.372 9.567-4.116 2.67-2.744 4.005-6.49 4.005-11.236ZM304.423 6.785V89.11h-19.024V6.785h19.024ZM262.157 20.58c-3.338 0-6.082-.963-8.232-2.891-2.077-2.003-3.115-4.45-3.115-7.343 0-2.967 1.038-5.414 3.115-7.342C256.075 1 258.819 0 262.157 0c3.263 0 5.933 1.001 8.01 3.004 2.151 1.928 3.226 4.375 3.226 7.342 0 2.893-1.075 5.34-3.226 7.343-2.077 1.928-4.747 2.892-8.01 2.892Zm9.456 6.453V89.11H252.59V27.033h19.023ZM215.452 26.365c7.268 0 13.053 2.373 17.355 7.12 4.375 4.672 6.563 11.125 6.563 19.357V89.11h-18.912V55.401c0-4.153-1.075-7.38-3.226-9.679-2.151-2.299-5.043-3.448-8.678-3.448-3.634 0-6.526 1.15-8.677 3.448-2.151 2.3-3.226 5.526-3.226 9.679v33.708h-19.024V27.033h19.024v8.232c1.928-2.744 4.524-4.895 7.787-6.452 3.264-1.632 6.935-2.448 11.014-2.448ZM98.34 57.96c0-6.378 1.186-11.977 3.56-16.798 2.447-4.82 5.748-8.529 9.901-11.125s8.788-3.893 13.906-3.893c4.376 0 8.195.89 11.458 2.67 3.338 1.78 5.897 4.116 7.677 7.008v-8.789h19.023V89.11h-19.023v-8.789c-1.855 2.893-4.45 5.23-7.788 7.009-3.263 1.78-7.083 2.67-11.458 2.67-5.044 0-9.642-1.298-13.795-3.894-4.153-2.67-7.454-6.415-9.901-11.236-2.374-4.895-3.56-10.531-3.56-16.91Zm46.502.112c0-4.747-1.335-8.492-4.005-11.236-2.596-2.744-5.785-4.117-9.568-4.117-3.782 0-7.008 1.373-9.678 4.117-2.596 2.67-3.894 6.378-3.894 11.125 0 4.746 1.298 8.529 3.894 11.347 2.67 2.744 5.896 4.116 9.678 4.116 3.783 0 6.972-1.372 9.568-4.116 2.67-2.744 4.005-6.49 4.005-11.236ZM88.442 11.012v78.096H69.42V42.272L51.953 89.108H36.6L19.023 42.16v46.947H0V11.012h22.472l21.916 54.066 21.693-54.066h22.361Z\"\n    />\n    <defs>\n      <linearGradient\n        id=\"a\"\n        x1={383.781}\n        x2={415.001}\n        y1={73.954}\n        y2={77.277}\n        gradientUnits=\"userSpaceOnUse\"\n      >\n        <stop stopColor=\"#6557FF\" />\n        <stop offset={0.453} stopColor=\"#AA3FFF\" />\n        <stop offset={1} stopColor=\"#F8522E\" />\n      </linearGradient>\n    </defs>\n  </svg>\n);\nexport default Logo;\n",
      "type": "registry:component",
      "target": ""
    },
    {
      "path": "ui/card.tsx",
      "content": "import * as React from \"react\";\n\nimport { cn } from \"@/lib/utils\";\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-xl border bg-card text-card-foreground shadow\",\n      className,\n    )}\n    {...props}\n  />\n));\nCard.displayName = \"Card\";\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n));\nCardHeader.displayName = \"CardHeader\";\n\nconst CardTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h3\n    ref={ref}\n    className={cn(\"font-semibold leading-none tracking-tight\", className)}\n    {...props}\n  />\n));\nCardTitle.displayName = \"CardTitle\";\n\nconst CardDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <p\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n));\nCardDescription.displayName = \"CardDescription\";\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n));\nCardContent.displayName = \"CardContent\";\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\" flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n));\nCardFooter.displayName = \"CardFooter\";\n\nexport {\n  Card,\n  CardHeader,\n  CardFooter,\n  CardTitle,\n  CardDescription,\n  CardContent,\n};\n",
      "type": "registry:ui",
      "target": "components/ui/card.tsx"
    },
    {
      "path": "blocks/bento-01/hooks/useAnimation.tsx",
      "content": "\"use client\";\nimport { motion, useInView } from \"framer-motion\";\nimport { useRef } from \"react\";\n\n// Fungsi untuk mengekspor semua animasi hooks\nfunction useCardIdentityAnimation() {\n  const ref = useRef(null);\n  const isInView = useInView(ref, { once: true, amount: 0.3 });\n\n  return {\n    ref,\n    variants: {\n      hidden: { opacity: 0, x: -100 },\n      visible: {\n        opacity: [0, 0.2, 0.8, 1],\n        x: 0,\n        transition: { duration: 0.5, delay: 0.1 },\n      },\n    },\n    initial: \"hidden\",\n    animate: isInView ? \"visible\" : \"hidden\",\n  };\n}\n\nfunction useVerticalCardAnimation() {\n  const ref = useRef(null);\n  const isInView = useInView(ref, { once: true, amount: 0.3 });\n\n  return {\n    ref,\n    variants: {\n      hidden: { opacity: 0, y: -100 },\n      visible: {\n        opacity: [0, 0.2, 0.8, 1],\n        y: 0,\n        transition: { duration: 0.5, delay: 0.2 },\n      },\n    },\n    initial: \"hidden\",\n    animate: isInView ? \"visible\" : \"hidden\",\n  };\n}\n\nfunction useQuoteCardAnimation() {\n  const ref = useRef(null);\n  const isInView = useInView(ref, { once: true, amount: 0.3 });\n\n  return {\n    ref,\n    variants: {\n      hidden: { opacity: 0, x: 100 },\n      visible: {\n        opacity: [0, 0.2, 0.8, 1],\n        x: 0,\n        transition: { duration: 0.5, delay: 0.3 },\n      },\n    },\n    initial: \"hidden\",\n    animate: isInView ? \"visible\" : \"hidden\",\n  };\n}\n\nfunction useCardSloganAnimation() {\n  const ref = useRef(null);\n  const isInView = useInView(ref, { once: true, amount: 0.3 });\n\n  return {\n    ref,\n    variants: {\n      hidden: { opacity: 0, x: -100 },\n      visible: {\n        opacity: [0, 0.2, 0.8, 1],\n        x: 0,\n        transition: { duration: 0.5, delay: 0.5 },\n      },\n    },\n    initial: \"hidden\",\n    animate: isInView ? \"visible\" : \"hidden\",\n  };\n}\n\nfunction useCardProductAnimation() {\n  const ref = useRef(null);\n  const isInView = useInView(ref, { once: true, amount: 0.3 });\n\n  return {\n    ref,\n    variants: {\n      hidden: { opacity: 0, x: 100 },\n      visible: {\n        opacity: [0, 0.2, 0.8, 1],\n        x: 0,\n        transition: { duration: 0.5, delay: 0.5 },\n      },\n    },\n    initial: \"hidden\",\n    animate: isInView ? \"visible\" : \"hidden\",\n  };\n}\n\nexport const useMobileAnimation = () => {\n  const ref = useRef(null);\n  const isInView = useInView(ref, { once: true, amount: 0.3 });\n\n  return {\n    ref,\n    variants: {\n      hidden: { opacity: 0 },\n      visible: {\n        opacity: 1,\n        transition: { duration: 0.5, delay: 0.2 },\n      },\n    },\n    initial: \"hidden\",\n    animate: isInView ? \"visible\" : \"hidden\",\n  };\n};\n\nexport const useAnimations = () => ({\n  cardIdentity: useCardIdentityAnimation(),\n  cardSlogan: useCardSloganAnimation(),\n  cardProduct: useCardProductAnimation(),\n  verticalCard: useVerticalCardAnimation(),\n  quoteCard: useQuoteCardAnimation(),\n});\n",
      "type": "registry:file",
      "target": "hooks/use-animation.ts"
    }
  ],
  "categories": [
    "bento"
  ]
}
</file>

<file path="public/r/styles/default/biophilic-01.json">
{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "biophilic-01",
  "type": "registry:example",
  "author": "shadcn (https://ui.shadcn.com)",
  "description": "A simple camping hero section.",
  "registryDependencies": [
    "hero"
  ],
  "files": [
    {
      "path": "example/biophilic-01/page.tsx",
      "content": "import { Hero } from \"./components/hero\";\n\nexport default function Page() {\n  return (\n    <>\n      <Hero />\n    </>\n  );\n}\n",
      "type": "registry:page",
      "target": "app/page.tsx"
    },
    {
      "path": "example/biophilic-01/components/hero.tsx",
      "content": "import Image from \"next/image\";\nimport Link from \"next/link\";\nimport { ChevronRight } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\n\nexport function Hero() {\n  return (\n    <div className=\"relative h-screen w-full overflow-hidden\">\n      {/* Background Image */}\n      <div className=\"absolute inset-0 z-0\">\n        <Image\n          src=\"https://images.unsplash.com/photo-1524357157238-7d55300162dc?q=80&w=2570&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D\"\n          alt=\"Adventure background with people on a yellow off-road vehicle\"\n          fill\n          priority\n          className=\"object-cover\"\n        />\n      </div>\n\n      {/* Overlay for better text readability */}\n      <div className=\"absolute inset-0 z-10 bg-black/20\"></div>\n\n      {/* Content Container */}\n      <div className=\"relative z-20 h-full w-full\">\n        {/* Header/Navigation */}\n        <header className=\"flex items-center justify-between p-4 md:px-8 lg:px-16\">\n          <div className=\"flex items-center\">\n            <Image\n              src=\"/placeholder.svg?height=50&width=120\"\n              alt=\"Eiger Logo\"\n              width={120}\n              height={50}\n              className=\"h-10 w-auto md:h-12\"\n            />\n          </div>\n\n          <nav className=\"hidden items-center gap-8 md:flex\">\n            <div className=\"flex items-center rounded-full bg-white/90 px-6 py-2\">\n              <Link href=\"/\" className=\"px-3 py-1 font-medium text-gray-800\">\n                Home\n              </Link>\n              <Link\n                href=\"/collections\"\n                className=\"px-3 py-1 font-medium text-gray-800\"\n              >\n                Our Collections\n              </Link>\n              <Link\n                href=\"/about\"\n                className=\"px-3 py-1 font-medium text-gray-800\"\n              >\n                About\n              </Link>\n            </div>\n            <Link\n              href=\"/pre-order\"\n              className=\"rounded-full bg-black px-6 py-2 font-medium text-white\"\n            >\n              Pre-Order Now\n            </Link>\n          </nav>\n\n          <button className=\"text-white md:hidden\">\n            <svg\n              xmlns=\"http://www.w3.org/2000/svg\"\n              fill=\"none\"\n              viewBox=\"0 0 24 24\"\n              stroke=\"currentColor\"\n              className=\"h-6 w-6\"\n            >\n              <path\n                strokeLinecap=\"round\"\n                strokeLinejoin=\"round\"\n                strokeWidth={2}\n                d=\"M4 6h16M4 12h16M4 18h16\"\n              />\n            </svg>\n          </button>\n        </header>\n\n        {/* Main Hero Content */}\n        <div className=\"flex h-[calc(100%-80px)] flex-col px-4 md:flex-row md:px-8 lg:px-16\">\n          {/* Left Side - Main Heading */}\n          <div className=\"flex flex-1 items-center\">\n            <h1 className=\"text-5xl font-bold leading-tight text-[#f5b47b] md:text-6xl lg:text-7xl xl:text-8xl\">\n              You Are\n              <br />\n              Meant To\n              <br />\n              Travel\n            </h1>\n          </div>\n\n          {/* Right Side - Collection Card & CTA */}\n          <div className=\"flex flex-1 flex-col items-end justify-center gap-8 pb-12 md:pb-0\">\n            {/* Collection Card */}\n            <div className=\"w-full max-w-xs rounded-lg bg-gray-100/90 p-4\">\n              <div className=\"flex gap-4\">\n                <div className=\"h-20 w-20 overflow-hidden rounded-lg bg-gray-800\">\n                  <Image\n                    src=\"/placeholder.svg?height=80&width=80\"\n                    alt=\"Riding Collection\"\n                    width={80}\n                    height={80}\n                    className=\"h-full w-full object-cover\"\n                  />\n                </div>\n                <div>\n                  <h3 className=\"font-semibold text-gray-900\">\n                    Riding Series Collections\n                  </h3>\n                  <p className=\"text-sm text-gray-600\">new style for you</p>\n                  <Link\n                    href=\"/collections\"\n                    className=\"text-sm text-gray-900 hover:underline\"\n                  >\n                    View Collections\n                  </Link>\n                </div>\n              </div>\n            </div>\n\n            {/* Description Text */}\n            <div className=\"max-w-md text-white\">\n              <p className=\"text-lg\">\n                Adventure awaits. Explore, wander, and embrace the\n                journey—because the world is yours to discover\n              </p>\n            </div>\n\n            {/* CTA Button */}\n            <Button\n              variant=\"ghost\"\n              className=\"flex items-center gap-2  px-6 py-3 font-medium text-white\"\n            >\n              Discover More\n              <ChevronRight size={18} />\n            </Button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n",
      "type": "registry:component",
      "target": ""
    }
  ]
}
</file>

<file path="public/r/styles/default/card-02.json">
{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "card-02",
  "type": "registry:block",
  "author": "shadcn (https://ui.shadcn.com)",
  "description": "Ideal for product designers.",
  "registryDependencies": [
    "pricing",
    "shades",
    "currency"
  ],
  "files": [
    {
      "path": "blocks/card-02/page.tsx",
      "content": "import { PricingCard } from \"./components/pricing-card\";\n\nconst TIERS = [\n  {\n    name: \"Teams\",\n    price: 12,\n    description:\n      \"Highly recommended for small teams who seek to upgrade their time & perform\",\n    features: [\n      \"1 team\",\n      \"Schedule meeting as team\",\n      \"Collective events\",\n      \"Team workflow\",\n    ],\n    cta: \"Get Started\",\n    linear: true,\n    default: true,\n  },\n];\n\nexport default function Page() {\n  return (\n    <>\n      <div className=\" z-50  flex flex-1 justify-center gap-6 bg-background p-6 \">\n        {TIERS.map((tier) => (\n          <PricingCard key={tier.name} tier={tier} paymentFrequency=\"monthly\" />\n        ))}\n      </div>\n    </>\n  );\n}\n",
      "type": "registry:page",
      "target": "app/page.tsx"
    },
    {
      "path": "blocks/card-02/components/pricing-card.tsx",
      "content": "\"use client\";\n\nimport * as React from \"react\";\nimport { BadgeCheck, ArrowRight } from \"lucide-react\";\nimport { cn } from \"@/lib/utils\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Card } from \"@/components/ui/card\";\nimport { TextureButton } from \"@/components/ui/texture-button\";\n\nexport interface PricingTier {\n  name: string;\n  price: number;\n  description: string;\n  features: string[];\n  cta: string;\n  linear?: boolean;\n  default?: boolean;\n}\n\ninterface PricingCardProps {\n  tier: PricingTier;\n  paymentFrequency: string;\n}\n\nexport function PricingCard({ tier }: PricingCardProps) {\n  const isLinear = tier.linear;\n  const isDefault = tier.default;\n\n  return (\n    <Card\n      className={cn(\n        \"relative w-96 overflow-hidden border border-white/60 dark:border-stone-950/60\",\n        \"bg-gradient-to-b from-neutral-100 to-white/70 dark:from-neutral-800 dark:to-neutral-900\",\n        isLinear ? \"text-primary\" : \"text-primary\",\n        isDefault && \"ring-2 ring-primary\",\n        \"bg-background/5\",\n        \"bg-gradient-to-br from-black/5 to-black/[0.02] dark:from-white/5 dark:to-white/[0.02]\",\n        \"backdrop-blur-xl backdrop-saturate-[180%]\",\n        \"border border-black/10 dark:border-white/10\",\n        \"shadow-[0_8px_16px_rgb(0_0_0_/_0.15)] dark:shadow-[0_8px_16px_rgb(0_0_0_/_0.25)]\",\n        \"translate-z-0 will-change-transform\",\n      )}\n    >\n      {isLinear && <LinearBackground />}\n      {isDefault && <DefaultBackground />}\n\n      <div\n        className={cn(\n          \"relative flex w-full flex-col gap-8 rounded-xl p-6\",\n          \"bg-gradient-to-br from-black/[0.05] to-transparent dark:from-white/[0.08] dark:to-transparent\",\n          \"backdrop-blur-md backdrop-saturate-150\",\n          \"border border-black/[0.05] dark:border-white/[0.08]\",\n\n          \"shadow-sm\",\n          \"translate-z-0 will-change-transform\",\n          \"before:pointer-events-none before:absolute before:inset-0 before:bg-gradient-to-br before:from-black/[0.02] before:to-black/[0.01] before:opacity-0 before:transition-opacity dark:before:from-white/[0.03] dark:before:to-white/[0.01]\",\n          \"hover:before:opacity-100\",\n        )}\n      >\n        <h2 className=\"flex w-full items-center justify-between gap-3 text-xl font-medium capitalize\">\n          {tier.name}\n          {isDefault && (\n            <Badge variant=\"accent\" className=\"z-10 p-1\">\n              30 days free trial\n            </Badge>\n          )}\n        </h2>\n\n        <div className=\"relative h-12\">\n          <>\n            <span className=\"text-4xl font-medium\">${tier.price}</span>\n            <p className=\"-mt-2 text-xs text-muted-foreground\">\n              Per month/user\n            </p>\n          </>\n        </div>\n        <TextureButton variant=\"accent\" className=\"w-full \">\n          {tier.cta}\n          <ArrowRight className=\"ml-2 h-4 w-4\" />\n        </TextureButton>\n\n        <div className=\"flex-1 space-y-2 border-t border-primary/40 pt-6\">\n          <h3 className=\"text-sm font-medium\">{tier.description}</h3>\n          <ul className=\"space-y-2 text-primary\">\n            {tier.features.map((feature, index) => (\n              <li\n                key={index}\n                className={cn(\n                  \"flex items-center gap-2 text-sm font-medium\",\n                  isLinear ? \"text-primary\" : \"text-primary\",\n                )}\n              >\n                <BadgeCheck className=\"h-4 w-4\" />\n                {feature}\n              </li>\n            ))}\n          </ul>\n        </div>\n      </div>\n    </Card>\n  );\n}\n\nconst LinearBackground = () => (\n  <div className=\"absolute inset-0 bg-[linear-gradient(to_right,#4f4f4f2e_1px,transparent_1px),linear-gradient(to_bottom,#4f4f4f2e_1px,transparent_1px)] bg-[size:45px_45px] [mask-image:radial-gradient(ellipse_80%_50%_at_50%_0%,#000_70%,transparent_110%)]\" />\n);\n\nconst DefaultBackground = () => (\n  <div className=\"absolute inset-0 bg-[radial-gradient(ellipse_80%_80%_at_50%_-20%,rgba(120,119,198,0.1),rgba(255,255,255,0))]\" />\n);\n",
      "type": "registry:component",
      "target": ""
    },
    {
      "path": "ui/card.tsx",
      "content": "import * as React from \"react\";\n\nimport { cn } from \"@/lib/utils\";\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-xl border bg-card text-card-foreground shadow\",\n      className,\n    )}\n    {...props}\n  />\n));\nCard.displayName = \"Card\";\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n));\nCardHeader.displayName = \"CardHeader\";\n\nconst CardTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h3\n    ref={ref}\n    className={cn(\"font-semibold leading-none tracking-tight\", className)}\n    {...props}\n  />\n));\nCardTitle.displayName = \"CardTitle\";\n\nconst CardDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <p\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n));\nCardDescription.displayName = \"CardDescription\";\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n));\nCardContent.displayName = \"CardContent\";\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\" flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n));\nCardFooter.displayName = \"CardFooter\";\n\nexport {\n  Card,\n  CardHeader,\n  CardFooter,\n  CardTitle,\n  CardDescription,\n  CardContent,\n};\n",
      "type": "registry:ui",
      "target": "components/ui/card.tsx"
    },
    {
      "path": "ui/badge.tsx",
      "content": "import * as React from \"react\";\nimport { cva, type VariantProps } from \"class-variance-authority\";\n\nimport { cn } from \"@/lib/utils\";\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-md border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground shadow hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground shadow hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  },\n);\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  );\n}\n\nexport { Badge, badgeVariants };\n",
      "type": "registry:ui",
      "target": "components/ui/badge.tsx"
    },
    {
      "path": "ui/texture-button.tsx",
      "content": "\"use client\";\n\nimport * as React from \"react\";\nimport { Slot } from \"@radix-ui/react-slot\";\nimport { cva } from \"class-variance-authority\";\n\nimport { cn } from \"@/lib/utils\";\n\nconst buttonVariantsOuter = cva(\"\", {\n  variants: {\n    variant: {\n      primary:\n        \"w-full border border-[1px] border-black/10 bg-gradient-to-b from-black/70 to-black p-[1px] transition duration-300 ease-in-out dark:border-[2px] dark:border-black dark:from-white dark:to-white/80 \",\n      accent:\n        \"w-full border-[1px] border-black/10 bg-gradient-to-b from-indigo-300/90 to-indigo-500 p-[1px] transition duration-300 ease-in-out dark:border-[2px] dark:border-neutral-950 dark:from-indigo-200/70 dark:to-indigo-500 \",\n      destructive:\n        \"w-full border-[1px] border-black/10 bg-gradient-to-b from-red-300/90 to-red-500 p-[1px] transition duration-300 ease-in-out dark:border-[2px] dark:border-neutral-950 dark:from-red-300/90 dark:to-red-500 \",\n      secondary:\n        \"w-full border-[1px] border-black/20 bg-white/50 p-[1px] transition duration-300 ease-in-out dark:border-[2px] dark:border-neutral-950 dark:bg-neutral-600/50 \",\n      minimal:\n        \"group  w-full border-[1px] border-black/20 bg-white/50 to-white p-[1px] hover:bg-gradient-to-t hover:from-neutral-100  active:bg-neutral-200 dark:border-[2px] dark:border-neutral-950 dark:bg-neutral-600/80 dark:hover:from-neutral-600/50 dark:hover:to-neutral-600/70 dark:active:bg-neutral-800\",\n      icon: \"group rounded-full border border-black/10 bg-white/50 to-white p-[1px] hover:bg-gradient-to-t hover:from-neutral-100 active:bg-neutral-200 dark:border-neutral-950 dark:bg-neutral-600/50 dark:hover:from-neutral-700 dark:hover:to-neutral-600 dark:active:bg-neutral-800\",\n    },\n    size: {\n      sm: \"rounded-[6px]\",\n      default: \"rounded-[12px]\",\n      lg: \"rounded-[12px]\",\n      icon: \"rounded-full\",\n    },\n  },\n  defaultVariants: {\n    variant: \"primary\",\n    size: \"default\",\n  },\n});\n\nconst innerDivVariants = cva(\n  \"flex h-full w-full items-center justify-center text-muted-foreground\",\n  {\n    variants: {\n      variant: {\n        primary:\n          \"gap-2 bg-gradient-to-b from-neutral-800 to-black  text-sm text-white/90 transition duration-300 ease-in-out hover:from-stone-800 hover:to-neutral-800/70 active:bg-gradient-to-b  active:from-black active:to-black dark:from-neutral-200 dark:to-neutral-50 dark:text-black/80 dark:hover:from-stone-200 dark:hover:to-neutral-200 dark:active:from-stone-300 dark:active:to-neutral-300 \",\n        accent:\n          \"gap-2 bg-gradient-to-b from-indigo-400 to-indigo-600 text-sm text-white/90 transition duration-300 ease-in-out hover:bg-gradient-to-b hover:from-indigo-400/70 hover:to-indigo-600/70 active:bg-gradient-to-b active:from-indigo-400/80 active:to-indigo-600/80 dark:hover:from-indigo-400/70 dark:hover:to-indigo-600/70 dark:active:from-indigo-400 dark:active:to-indigo-600\",\n        destructive:\n          \"gap-2 bg-gradient-to-b from-red-400/60 to-red-500/60 text-sm text-white/90 transition duration-300 ease-in-out hover:bg-gradient-to-b hover:from-red-400/70 hover:to-red-600/70 active:bg-gradient-to-b active:from-red-400/80 active:to-red-600/80 dark:hover:from-red-400/70 dark:hover:to-red-500/80 dark:active:from-red-400 dark:active:to-red-500\",\n        secondary:\n          \"bg-gradient-to-b from-neutral-100/80 to-neutral-200/50 text-sm transition duration-300 ease-in-out hover:bg-gradient-to-b hover:from-neutral-200/40 hover:to-neutral-300/60 active:bg-gradient-to-b active:from-neutral-200/60 active:to-neutral-300/70 dark:from-neutral-800 dark:to-neutral-700/50 dark:hover:from-neutral-700 dark:hover:to-neutral-700/60 dark:active:from-neutral-800 dark:active:to-neutral-700\",\n        minimal:\n          \"bg-gradient-to-b from-white to-neutral-50/50 text-sm transition duration-300 ease-in-out group-hover:bg-gradient-to-b group-hover:from-neutral-50/50 group-hover:to-neutral-100/60 group-active:bg-gradient-to-b group-active:from-neutral-100/60 group-active:to-neutral-100/90 dark:from-neutral-800 dark:to-neutral-700/50 dark:group-hover:from-neutral-700 dark:group-hover:to-neutral-700/60 dark:group-active:from-neutral-800 dark:group-active:to-neutral-700\",\n        icon: \"rounded-full bg-gradient-to-b from-white to-neutral-50/50 group-active:bg-neutral-200 dark:from-neutral-800 dark:to-neutral-700/50 dark:group-active:bg-neutral-800\",\n      },\n      size: {\n        sm: \"rounded-[4px] px-4 py-1 text-xs\",\n        default: \"rounded-[10px] px-4 py-2 text-sm\",\n        lg: \"rounded-[10px] px-4 py-2 text-base\",\n        icon: \" rounded-full p-1\",\n      },\n    },\n    defaultVariants: {\n      variant: \"primary\",\n      size: \"default\",\n    },\n  },\n);\n\nexport interface UnifiedButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement> {\n  variant?:\n    | \"primary\"\n    | \"secondary\"\n    | \"accent\"\n    | \"destructive\"\n    | \"minimal\"\n    | \"icon\";\n  size?: \"default\" | \"sm\" | \"lg\" | \"icon\";\n  asChild?: boolean;\n}\n\nconst TextureButton = React.forwardRef<HTMLButtonElement, UnifiedButtonProps>(\n  (\n    {\n      children,\n      variant = \"primary\",\n      size = \"default\",\n      asChild = false,\n      className,\n      ...props\n    },\n    ref,\n  ) => {\n    const Comp = asChild ? Slot : \"button\";\n\n    return (\n      <Comp\n        className={cn(buttonVariantsOuter({ variant, size }), className)}\n        ref={ref}\n        {...props}\n      >\n        <div className={cn(innerDivVariants({ variant, size }))}>\n          {children}\n        </div>\n      </Comp>\n    );\n  },\n);\n\nTextureButton.displayName = \"TextureButton\";\n\nexport { TextureButton };\n",
      "type": "registry:ui",
      "target": "components/ui/texture-button.tsx"
    },
    {
      "path": "lib/utils.ts",
      "content": "import { clsx, type ClassValue } from \"clsx\";\nimport { twMerge } from \"tailwind-merge\";\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs));\n}\n",
      "type": "registry:ui",
      "target": "lib/utils.ts"
    }
  ],
  "categories": [
    "card"
  ]
}
</file>

<file path="public/r/styles/default/cta-01.json">
{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "cta-01",
  "type": "registry:block",
  "author": "shadcn (https://ui.shadcn.com)",
  "description": "Ideal for product designers.",
  "registryDependencies": [
    "nav",
    "lang-switch",
    "photos"
  ],
  "files": [
    {
      "path": "blocks/cta-01/page.tsx",
      "content": "import { cn } from \"@/lib/utils\";\nimport { PostCard } from \"./components/post-card\";\n\nexport default function Page() {\n  return (\n    <>\n      <div className=\"max-w-screen  bg-backgroud z-50 h-screen p-4  2xl:overflow-visible\">\n        <div className=\"3xl:gap-36 4xl:gap-40 xl:gap-18 3xl:py-32 4xl:py-36 isolate mx-auto flex w-full max-w-2xl flex-col gap-20 px-4 py-12 md:gap-24 md:px-6 md:py-16 lg:gap-28 lg:px-8 lg:py-20 xl:py-24 2xl:gap-32 2xl:py-28\">\n          <Section>\n            <SectionHeading className=\"lg:text-center\">\n              Posts are the sweet spots between chat and docs\n            </SectionHeading>\n            <PostCard />\n          </Section>\n        </div>\n      </div>\n    </>\n  );\n}\n\nexport function Section({\n  children,\n  className,\n}: {\n  children: React.ReactNode;\n  className?: string;\n}) {\n  return (\n    <section className={cn(\"flex flex-col gap-4\", className)}>\n      {children}\n    </section>\n  );\n}\n\nexport function SectionHeading({\n  children,\n  className,\n}: {\n  children: React.ReactNode;\n  className?: string;\n}) {\n  return (\n    <h3\n      className={cn(\n        \"scroll-mt-20 text-balance text-[clamp(1.5rem,_3vw,_1.8rem)] font-semibold leading-[1.2] -tracking-[0.5px]\",\n        className,\n      )}\n    >\n      {children}\n    </h3>\n  );\n}\n",
      "type": "registry:page",
      "target": "app/page.tsx"
    },
    {
      "path": "blocks/cta-01/components/post-card.tsx",
      "content": "import Link from \"next/link\";\nimport Image from \"next/image\";\nimport { cn } from \"@/lib/utils\";\n\ninterface Post {\n  author: string;\n  title: string;\n  description: string;\n  channel: string;\n  comments: number;\n}\n\nexport function PostCard() {\n  return (\n    <div className=\"my-4 flex flex-col gap-6 lg:-mx-4 xl:-mx-6 2xl:-mx-8\">\n      <div className=\"group/posts relative flex items-center justify-center\">\n        <PostItem\n          className=\"group-hover/posts:delay-[150ms] absolute  top-3.5 z-[1] max-w-[calc(100%-1rem)] opacity-50 transition-all delay-100 group-hover/posts:-translate-y-4 group-hover/posts:opacity-0\"\n          post={null}\n        />\n        <PostItem\n          className=\"group-hover/posts:delay-[250ms] absolute left-[1rem] top-5 z-[1] max-w-[calc(100%-2rem)] opacity-50 transition-all delay-100 group-hover/posts:-translate-y-4 group-hover/posts:opacity-0\"\n          post={null}\n        />\n\n        <Link href=\"https://www.behindui.xyz/\" target=\"_blank\">\n          <PostItem\n            className=\"z-[3] bg-primary transition-all group-hover/posts:shadow\"\n            post={{\n              author: \"https://github.com/BroKarim.png\",\n              title: \"Inside Our Work · August 2028\",\n              description:\n                \"Hey chat Appreciate you being here and giving us your thoughts\",\n              channel: \"Read More\",\n              comments: 34,\n            }}\n          />\n        </Link>\n      </div>\n      <div className=\"flex justify-center\">\n        <ClickToSee />\n      </div>\n    </div>\n  );\n}\n\nfunction PostItem({\n  post,\n  className,\n}: {\n  post: Post | null;\n  className?: string;\n}) {\n  return (\n    <div\n      className={cn(\n        \"group relative flex min-h-16 w-full select-none scroll-m-1 gap-3 rounded-xl border-[0.5px] bg-primary/20 px-4 py-3 text-white shadow-[1px_1px_1px_rgba(255,255,255,0.6)]\",\n        \"[--shadow-light:theme(colors.orange.300)]\", // Variabel warna shadow light\n        \"[--dark:theme(colors.orange.700)]\",\n        className,\n      )}\n    >\n      {post && (\n        <>\n          <div className=\"mt-0.5 flex items-start self-start\">\n            <Image\n              alt={post.title}\n              src={post.author}\n              width={80}\n              height={80}\n              className=\"h-10 w-10 rounded-full\"\n            />\n          </div>\n\n          <div className=\"flex flex-1 flex-row items-center gap-3\">\n            <div className=\"flex flex-1 items-center\">\n              <div className=\"flex flex-1 flex-col gap-0.5\">\n                <p className=\"break-anywhere mr-2 line-clamp-1 text-[15px]\">\n                  {post.title}\n                </p>\n\n                <div className=\"flex items-center\">\n                  <span className=\"h-4.5 mr-2 mt-px flex items-center justify-center self-start rounded bg-black/[0.04] px-1.5 text-[10px] font-semibold uppercase  dark:bg-white/10\">\n                    {post.comments}\n                  </span>\n\n                  <p className=\"break-anywhere line-clamp-1 flex-1\">\n                    {post.description}\n                  </p>\n                </div>\n              </div>\n            </div>\n\n            <div className=\"self-center\">\n              <ProjectTag channel={post.channel} />\n            </div>\n          </div>\n        </>\n      )}\n    </div>\n  );\n}\n\nfunction ProjectTag({ channel }: { channel: string }) {\n  return (\n    <span className=\"text-quaternary relative flex h-6 items-center gap-1 rounded-full border-[0.5px] px-2\">\n      <p className=\"flex-none\">{channel}</p>\n    </span>\n  );\n}\n\nfunction ClickToSee() {\n  return (\n    <svg\n      className=\"text-quaternary\"\n      width=\"285\"\n      height=\"33\"\n      viewBox=\"0 0 285 33\"\n      fill=\"none\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n    >\n      <path\n        className=\"opacity-50\"\n        d=\"M185.86 6.57894C184.978 6.48893 184.525 7.01378 183.949 7.24244C183.556 7.40204 183.125 7.55315 182.72 7.5574C181.852 7.56508 181.322 6.53102 181.821 5.85164C182.078 5.51503 182.4 5.19924 182.752 4.96346C184.972 3.48659 187.206 2.0159 189.461 0.571366C189.871 0.30257 190.377 0.134598 190.871 0.0281462C191.621 -0.140368 192.328 0.472433 192.315 1.20839C192.312 1.41526 192.278 1.63363 192.24 1.84201C191.846 3.87576 191.475 5.91185 191.042 7.93711C190.941 8.40921 190.742 8.89583 190.467 9.30779C189.941 10.1002 189.07 10.0402 188.582 9.20766C188.447 8.97298 188.376 8.69145 188.214 8.26141C187.863 8.56486 187.609 8.75228 187.387 8.99586C185.969 10.5357 184.562 12.0718 183.158 13.6178C180.026 17.0495 176.089 19.3001 171.828 21.0327C170.496 21.5691 169.057 21.9408 167.637 22.0879C165.413 22.3212 163.169 22.3792 160.943 22.3618C158.436 22.3365 156.369 21.2311 154.652 19.4799C154.367 19.1875 154.103 18.7958 154.014 18.4066C153.953 18.1212 154.092 17.6576 154.312 17.4717C154.533 17.2858 155.026 17.237 155.294 17.3641C155.737 17.5514 156.126 17.907 156.511 18.2189C158.089 19.4746 159.874 20.0807 161.911 19.9979C164.002 19.906 166.103 19.9932 168.16 19.5029C172.697 18.4088 176.636 16.1921 180.015 13.0444C181.855 11.3334 183.479 9.38456 185.198 7.53656C185.437 7.2753 185.598 6.96322 185.86 6.57894Z\"\n        fill=\"currentColor\"\n      />\n      <path\n        d=\"M0.292969 21.3008C0.292969 21.0534 0.390625 20.8385 0.585938 20.6562C0.794271 20.4609 0.950521 20.3307 1.05469 20.2656C1.17188 20.1875 1.25 20.1289 1.28906 20.0898C1.35417 21.2747 2.15495 21.8672 3.69141 21.8672C4.90234 21.8672 6.3151 21.4896 7.92969 20.7344C9.07552 20.2135 9.84375 19.6797 10.2344 19.1328C10.3646 18.9635 10.4297 18.8268 10.4297 18.7227C10.4297 18.6055 10.4102 18.5143 10.3711 18.4492L2.26562 16.6328C2.03125 16.5807 1.80339 16.4701 1.58203 16.3008C1.17839 16.0143 0.976562 15.7539 0.976562 15.5195C0.976562 14.6211 1.61458 13.8073 2.89062 13.0781C4.29688 12.2839 6.17839 11.6849 8.53516 11.2812C9.06901 11.1901 9.46615 11.138 9.72656 11.125C9.80469 11.151 9.92188 11.1771 10.0781 11.2031C10.2474 11.2161 10.4167 11.2422 10.5859 11.2812C10.9896 11.3724 11.1589 11.5417 11.0938 11.7891C11.0938 12.2318 10.2474 12.5833 8.55469 12.8438C6.36719 13.1693 5 13.4427 4.45312 13.6641C3.91927 13.8854 3.52865 14.1133 3.28125 14.3477C3.04688 14.582 2.92318 14.862 2.91016 15.1875C2.91016 15.2526 3.0599 15.3242 3.35938 15.4023C3.65885 15.4805 4.01693 15.5781 4.43359 15.6953C4.85026 15.7995 5.39062 15.9427 6.05469 16.125C7.66927 16.5677 9.64844 17.1276 11.9922 17.8047C12.1224 18.0911 12.1875 18.3581 12.1875 18.6055C12.1875 19.2956 11.7839 19.9596 10.9766 20.5977C10.0651 21.3138 8.80208 21.9193 7.1875 22.4141C5.84635 22.8177 4.77865 23.0195 3.98438 23.0195C3.32031 23.0195 2.6888 22.9023 2.08984 22.668C1.49089 22.4336 1.04167 22.2057 0.742188 21.9844C0.442708 21.763 0.292969 21.5352 0.292969 21.3008Z\"\n        fill=\"currentColor\"\n      />\n      <path\n        d=\"M17.3633 21.6328C18.5091 21.6328 20.2344 21.112 22.5391 20.0703C22.6823 20.0703 22.7995 20.1224 22.8906 20.2266C22.9818 20.3177 23.0273 20.4284 23.0273 20.5586C22.5065 21.444 21.5104 22.1341 20.0391 22.6289C18.5677 23.1237 17.194 23.2083 15.918 22.8828C14.4727 22.5052 13.5938 21.6914 13.2812 20.4414C13.2552 20.194 13.2422 19.862 13.2422 19.4453C13.2422 19.0286 13.3464 18.4818 13.5547 17.8047C13.776 17.1146 14.1471 16.4635 14.668 15.8516C15.1888 15.2396 15.8008 14.7578 16.5039 14.4062C17.207 14.0547 17.9557 13.8789 18.75 13.8789C19.5052 13.8789 20.3516 14.1393 21.2891 14.6602C21.7318 14.9076 22.0833 15.1875 22.3438 15.5C22.6042 15.8125 22.7344 16.1315 22.7344 16.457C22.7344 16.5482 22.7279 16.6393 22.7148 16.7305C22.6888 17.5247 22.3047 18.026 21.5625 18.2344C21.237 18.3255 20.8594 18.3711 20.4297 18.3711L17.6172 18.2539C16.6797 18.2539 15.9635 18.4557 15.4688 18.8594C15.1823 19.0807 14.9805 19.4128 14.8633 19.8555C15.1888 21.0404 16.0221 21.6328 17.3633 21.6328ZM20.8398 15.5977C20.5534 15.3893 20.2539 15.2396 19.9414 15.1484C19.6289 15.0573 19.3685 15.0117 19.1602 15.0117C18.9518 15.0117 18.6133 15.0833 18.1445 15.2266C17.6758 15.3568 17.2591 15.5065 16.8945 15.6758C15.9961 16.0924 15.5469 16.5286 15.5469 16.9844C16.5885 17.0755 17.3698 17.1211 17.8906 17.1211C19.3359 17.1211 20.3125 16.9974 20.8203 16.75C21.1328 16.6198 21.2891 16.457 21.2891 16.2617C21.2891 16.0273 21.1393 15.806 20.8398 15.5977Z\"\n        fill=\"currentColor\"\n      />\n      <path\n        d=\"M28.1836 21.6328C29.3294 21.6328 31.0547 21.112 33.3594 20.0703C33.5026 20.0703 33.6198 20.1224 33.7109 20.2266C33.8021 20.3177 33.8477 20.4284 33.8477 20.5586C33.3268 21.444 32.3307 22.1341 30.8594 22.6289C29.388 23.1237 28.0143 23.2083 26.7383 22.8828C25.293 22.5052 24.4141 21.6914 24.1016 20.4414C24.0755 20.194 24.0625 19.862 24.0625 19.4453C24.0625 19.0286 24.1667 18.4818 24.375 17.8047C24.5964 17.1146 24.9674 16.4635 25.4883 15.8516C26.0091 15.2396 26.6211 14.7578 27.3242 14.4062C28.0273 14.0547 28.776 13.8789 29.5703 13.8789C30.3255 13.8789 31.1719 14.1393 32.1094 14.6602C32.5521 14.9076 32.9036 15.1875 33.1641 15.5C33.4245 15.8125 33.5547 16.1315 33.5547 16.457C33.5547 16.5482 33.5482 16.6393 33.5352 16.7305C33.5091 17.5247 33.125 18.026 32.3828 18.2344C32.0573 18.3255 31.6797 18.3711 31.25 18.3711L28.4375 18.2539C27.5 18.2539 26.7839 18.4557 26.2891 18.8594C26.0026 19.0807 25.8008 19.4128 25.6836 19.8555C26.0091 21.0404 26.8424 21.6328 28.1836 21.6328ZM31.6602 15.5977C31.3737 15.3893 31.0742 15.2396 30.7617 15.1484C30.4492 15.0573 30.1888 15.0117 29.9805 15.0117C29.7721 15.0117 29.4336 15.0833 28.9648 15.2266C28.4961 15.3568 28.0794 15.5065 27.7148 15.6758C26.8164 16.0924 26.3672 16.5286 26.3672 16.9844C27.4089 17.0755 28.1901 17.1211 28.7109 17.1211C30.1562 17.1211 31.1328 16.9974 31.6406 16.75C31.9531 16.6198 32.1094 16.457 32.1094 16.2617C32.1094 16.0273 31.9596 15.806 31.6602 15.5977Z\"\n        fill=\"currentColor\"\n      />\n      <path\n        d=\"M50.7031 19.7578C49.7266 21.2943 48.4245 22.2448 46.7969 22.6094C46.4193 22.6875 46.0742 22.7266 45.7617 22.7266C45.4622 22.7266 45.2083 22.7266 45 22.7266C44.8047 22.7135 44.5833 22.681 44.3359 22.6289C44.0885 22.5768 43.8607 22.4922 43.6523 22.375C43.1706 22.1016 42.9297 21.7174 42.9297 21.2227C42.8776 20.9883 42.8516 20.7279 42.8516 20.4414C42.8516 20.1419 42.9167 19.7513 43.0469 19.2695C43.1771 18.7878 43.4115 18.2669 43.75 17.707C44.1016 17.1471 44.5247 16.6328 45.0195 16.1641C46.0482 15.1745 47.1615 14.5365 48.3594 14.25C48.7109 14.1719 49.0299 14.1328 49.3164 14.1328C49.6159 14.1328 49.8828 14.1523 50.1172 14.1914C50.8724 14.1914 51.3802 14.7057 51.6406 15.7344C51.8099 16.3854 51.9076 17.2969 51.9336 18.4688C51.9727 19.6276 52.0052 20.526 52.0312 21.1641C52.0703 21.7891 52.1549 22.362 52.2852 22.8828H51.1328C51.0807 22.5312 51.0417 22.2188 51.0156 21.9453C50.9896 21.6719 50.9635 21.418 50.9375 21.1836C50.8724 20.6367 50.7943 20.1615 50.7031 19.7578ZM50.625 16.7305C50.625 15.9753 50.2539 15.5977 49.5117 15.5977C49.4206 15.5846 49.3294 15.5781 49.2383 15.5781C48.2878 15.5781 47.2852 16.0339 46.2305 16.9453C45.7357 17.362 45.3125 17.8307 44.9609 18.3516C44.4401 19.0938 44.1797 19.7578 44.1797 20.3438C44.1797 21.112 44.6224 21.5677 45.5078 21.7109C46.6797 21.6849 47.7995 21.151 48.8672 20.1094C49.3229 19.6536 49.7005 19.1589 50 18.625C50.4167 17.9089 50.625 17.2773 50.625 16.7305Z\"\n        fill=\"currentColor\"\n      />\n      <path\n        d=\"M70.8008 15.8711C70.2539 15.4805 69.5508 15.2852 68.6914 15.2852C67.8841 15.2852 67.1354 15.4349 66.4453 15.7344C65.1432 16.2812 64.2513 16.9844 63.7695 17.8438C63.5612 18.2344 63.457 18.651 63.457 19.0938C63.457 19.1719 63.457 19.3932 63.457 19.7578C63.457 20.1094 63.5221 20.5911 63.6523 21.2031C63.7826 21.8021 63.8477 22.4141 63.8477 23.0391C63.5742 23.0521 63.3529 23.0846 63.1836 23.1367C63.0143 23.1888 62.8711 23.2148 62.7539 23.2148C62.6367 23.2148 62.5326 23.1628 62.4414 23.0586C62.3633 22.9544 62.2721 22.7526 62.168 22.4531C62.1549 22.375 62.1289 22.1536 62.0898 21.7891C62.0508 21.4245 61.9987 20.9818 61.9336 20.4609C61.8815 19.9401 61.8164 19.3737 61.7383 18.7617C61.6732 18.1367 61.6081 17.5247 61.543 16.9258C61.3997 15.6237 61.2891 14.6667 61.2109 14.0547C61.2109 13.7422 61.4388 13.5859 61.8945 13.5859C62.168 13.5859 62.3828 13.7031 62.5391 13.9375C62.6953 14.1589 62.819 14.4193 62.9102 14.7188C63.0013 15.0052 63.0599 15.2917 63.0859 15.5781C63.125 15.8646 63.1576 16.0664 63.1836 16.1836C64.9023 14.6471 67.0378 13.8789 69.5898 13.8789C69.8763 13.8789 70.1758 13.8854 70.4883 13.8984C70.5664 13.8854 70.6641 13.8789 70.7812 13.8789C70.8984 13.8789 71.0156 13.957 71.1328 14.1133C71.276 14.2956 71.3477 14.5169 71.3477 14.7773C71.3477 15.4284 71.1654 15.793 70.8008 15.8711Z\"\n        fill=\"currentColor\"\n      />\n      <path\n        d=\"M76.2305 21.6328C77.3763 21.6328 79.1016 21.112 81.4062 20.0703C81.5495 20.0703 81.6667 20.1224 81.7578 20.2266C81.849 20.3177 81.8945 20.4284 81.8945 20.5586C81.3737 21.444 80.3776 22.1341 78.9062 22.6289C77.4349 23.1237 76.0612 23.2083 74.7852 22.8828C73.3398 22.5052 72.4609 21.6914 72.1484 20.4414C72.1224 20.194 72.1094 19.862 72.1094 19.4453C72.1094 19.0286 72.2135 18.4818 72.4219 17.8047C72.6432 17.1146 73.0143 16.4635 73.5352 15.8516C74.056 15.2396 74.668 14.7578 75.3711 14.4062C76.0742 14.0547 76.8229 13.8789 77.6172 13.8789C78.3724 13.8789 79.2188 14.1393 80.1562 14.6602C80.599 14.9076 80.9505 15.1875 81.2109 15.5C81.4714 15.8125 81.6016 16.1315 81.6016 16.457C81.6016 16.5482 81.5951 16.6393 81.582 16.7305C81.556 17.5247 81.1719 18.026 80.4297 18.2344C80.1042 18.3255 79.7266 18.3711 79.2969 18.3711L76.4844 18.2539C75.5469 18.2539 74.8307 18.4557 74.3359 18.8594C74.0495 19.0807 73.8477 19.4128 73.7305 19.8555C74.056 21.0404 74.8893 21.6328 76.2305 21.6328ZM79.707 15.5977C79.4206 15.3893 79.1211 15.2396 78.8086 15.1484C78.4961 15.0573 78.2357 15.0117 78.0273 15.0117C77.819 15.0117 77.4805 15.0833 77.0117 15.2266C76.543 15.3568 76.1263 15.5065 75.7617 15.6758C74.8633 16.0924 74.4141 16.5286 74.4141 16.9844C75.4557 17.0755 76.237 17.1211 76.7578 17.1211C78.2031 17.1211 79.1797 16.9974 79.6875 16.75C80 16.6198 80.1562 16.457 80.1562 16.2617C80.1562 16.0273 80.0065 15.806 79.707 15.5977Z\"\n        fill=\"currentColor\"\n      />\n      <path\n        d=\"M90.7422 19.7578C89.7656 21.2943 88.4635 22.2448 86.8359 22.6094C86.4583 22.6875 86.1133 22.7266 85.8008 22.7266C85.5013 22.7266 85.2474 22.7266 85.0391 22.7266C84.8438 22.7135 84.6224 22.681 84.375 22.6289C84.1276 22.5768 83.8997 22.4922 83.6914 22.375C83.2096 22.1016 82.9688 21.7174 82.9688 21.2227C82.9167 20.9883 82.8906 20.7279 82.8906 20.4414C82.8906 20.1419 82.9557 19.7513 83.0859 19.2695C83.2161 18.7878 83.4505 18.2669 83.7891 17.707C84.1406 17.1471 84.5638 16.6328 85.0586 16.1641C86.0872 15.1745 87.2005 14.5365 88.3984 14.25C88.75 14.1719 89.069 14.1328 89.3555 14.1328C89.6549 14.1328 89.9219 14.1523 90.1562 14.1914C90.9115 14.1914 91.4193 14.7057 91.6797 15.7344C91.849 16.3854 91.9466 17.2969 91.9727 18.4688C92.0117 19.6276 92.0443 20.526 92.0703 21.1641C92.1094 21.7891 92.194 22.362 92.3242 22.8828H91.1719C91.1198 22.5312 91.0807 22.2188 91.0547 21.9453C91.0286 21.6719 91.0026 21.418 90.9766 21.1836C90.9115 20.6367 90.8333 20.1615 90.7422 19.7578ZM90.6641 16.7305C90.6641 15.9753 90.293 15.5977 89.5508 15.5977C89.4596 15.5846 89.3685 15.5781 89.2773 15.5781C88.3268 15.5781 87.3242 16.0339 86.2695 16.9453C85.7747 17.362 85.3516 17.8307 85 18.3516C84.4792 19.0938 84.2188 19.7578 84.2188 20.3438C84.2188 21.112 84.6615 21.5677 85.5469 21.7109C86.7188 21.6849 87.8385 21.151 88.9062 20.1094C89.362 19.6536 89.7396 19.1589 90.0391 18.625C90.4557 17.9089 90.6641 17.2773 90.6641 16.7305Z\"\n        fill=\"currentColor\"\n      />\n      <path\n        d=\"M93.5938 15.4219C93.5677 14.7188 93.5417 14.0938 93.5156 13.5469C93.4896 12.987 93.4701 12.5768 93.457 12.3164C93.457 12.043 93.3529 11.3854 93.1445 10.3438C93.2617 10.1875 93.3724 10.0378 93.4766 9.89453C93.5938 9.7513 93.7565 9.67969 93.9648 9.67969C94.4206 9.67969 94.7721 11.6003 95.0195 15.4414C95.1497 17.668 95.2148 19.8945 95.2148 22.1211C95.2148 22.7201 94.7982 23.0195 93.9648 23.0195L93.8086 23C93.8086 22.3229 93.7891 21.457 93.75 20.4023C93.7109 19.3477 93.6784 18.4297 93.6523 17.6484C93.6393 16.8672 93.6198 16.125 93.5938 15.4219Z\"\n        fill=\"currentColor\"\n      />\n      <path\n        d=\"M106.27 15.168C108.04 14.556 109.57 14.25 110.859 14.25C112.5 14.25 113.594 14.6797 114.141 15.5391C114.388 15.9427 114.512 16.3789 114.512 16.8477C114.512 17.4987 114.303 18.1693 113.887 18.8594C113.483 19.5495 112.943 20.1745 112.266 20.7344C110.69 22.0234 108.776 22.8242 106.523 23.1367C106.523 23.2799 106.523 23.5078 106.523 23.8203C106.536 24.1458 106.543 24.5039 106.543 24.8945C106.556 25.2852 106.562 25.7018 106.562 26.1445C106.576 26.5872 106.589 27.0104 106.602 27.4141C106.641 28.4167 106.667 28.9896 106.68 29.1328C106.706 29.276 106.719 29.3932 106.719 29.4844C106.719 29.8099 106.615 30.0508 106.406 30.207C106.198 30.3763 105.924 30.4609 105.586 30.4609C105.521 30.4609 105.456 30.4609 105.391 30.4609L105.078 14.7578C105.195 14.5885 105.352 14.5104 105.547 14.5234C105.742 14.5365 105.898 14.5885 106.016 14.6797C106.133 14.7708 106.217 14.9336 106.27 15.168ZM111.973 15.8516C111.543 15.6302 111.081 15.5195 110.586 15.5195C110.104 15.5195 109.622 15.5651 109.141 15.6562C108.047 15.8646 107.24 16.3268 106.719 17.043C106.484 17.3815 106.367 17.7982 106.367 18.293C106.367 18.3451 106.367 18.3971 106.367 18.4492V21.8281C109.049 21.2292 110.951 20.3958 112.07 19.3281C112.721 18.7161 113.047 18.0846 113.047 17.4336C113.047 16.7435 112.689 16.2161 111.973 15.8516Z\"\n        fill=\"currentColor\"\n      />\n      <path\n        d=\"M116.016 19.2891C116.016 17.7526 116.68 16.5156 118.008 15.5781C119.062 14.8359 120.332 14.3867 121.816 14.2305C121.895 14.2305 122.077 14.2305 122.363 14.2305C122.65 14.2305 123.034 14.3151 123.516 14.4844C124.583 14.849 125.312 15.4935 125.703 16.418C125.859 16.7826 125.938 17.0951 125.938 17.3555C125.938 17.6029 125.931 17.7786 125.918 17.8828C125.918 19.5104 125.299 20.793 124.062 21.7305C122.917 22.5898 121.484 23.0195 119.766 23.0195C118.529 23.0195 117.591 22.7331 116.953 22.1602C116.328 21.5872 116.016 20.6302 116.016 19.2891ZM117.363 19.7578C117.363 20.5651 117.578 21.112 118.008 21.3984C118.333 21.6068 118.88 21.7109 119.648 21.7109C120.417 21.7109 121.094 21.6523 121.68 21.5352C122.266 21.418 122.786 21.2161 123.242 20.9297C124.219 20.3047 124.707 19.3346 124.707 18.0195C124.707 17.2383 124.499 16.6003 124.082 16.1055C123.626 15.5716 123.027 15.3047 122.285 15.3047C121.777 15.3958 121.263 15.4935 120.742 15.5977C120.234 15.7018 119.753 15.9036 119.297 16.2031C118.307 16.8411 117.663 18.026 117.363 19.7578Z\"\n        fill=\"currentColor\"\n      />\n      <path\n        d=\"M133.457 17.9609C134.889 17.9609 135.605 18.3255 135.605 19.0547C135.605 19.6016 135.208 20.2396 134.414 20.9688C133.229 22.0495 131.634 22.9154 129.629 23.5664C129.538 23.5664 129.434 23.4753 129.316 23.293C129.212 23.1107 129.128 22.974 129.062 22.8828C129.01 22.7786 128.971 22.7135 128.945 22.6875C130.443 22.1927 131.673 21.5938 132.637 20.8906C133.288 20.4219 133.613 20.0378 133.613 19.7383C133.613 19.4388 133.229 19.2891 132.461 19.2891C131.693 19.2891 130.566 19.4714 129.082 19.8359C128.405 19.8099 127.819 19.569 127.324 19.1133C126.895 18.7096 126.68 18.306 126.68 17.9023C126.68 17.4857 126.797 17.1081 127.031 16.7695C127.266 16.418 127.578 16.0924 127.969 15.793C128.359 15.4935 128.815 15.2201 129.336 14.9727C130.612 14.3607 131.934 14.0547 133.301 14.0547C133.704 14.0547 134.095 14.0938 134.473 14.1719C134.785 14.1719 134.967 14.3086 135.02 14.582C135.072 14.8555 135.098 15.3047 135.098 15.9297C134.329 15.5781 133.464 15.4023 132.5 15.4023C131.302 15.4023 130.312 15.6432 129.531 16.125C128.724 16.5938 128.307 17.2057 128.281 17.9609C128.281 18.3255 128.548 18.5078 129.082 18.5078L130.508 18.3516C131.732 18.0911 132.715 17.9609 133.457 17.9609Z\"\n        fill=\"currentColor\"\n      />\n      <path\n        d=\"M139.766 21.125L139.805 18C139.805 17.5052 139.759 17.082 139.668 16.7305H136.641L136.602 15.3828H139.531V10.3438C139.57 10.2266 139.648 10.1094 139.766 9.99219C139.948 9.8099 140.098 9.71875 140.215 9.71875C140.345 9.71875 140.456 9.73177 140.547 9.75781C140.638 9.78385 140.736 9.875 140.84 10.0312C141.048 10.8906 141.152 12.1862 141.152 13.918C141.152 14.3477 141.172 14.7708 141.211 15.1875C141.628 15.1354 142.044 15.1094 142.461 15.1094C142.461 15.1094 142.799 15.1094 143.477 15.1094C143.724 15.1094 143.952 15.0964 144.16 15.0703L144.102 16.4766L141.25 16.3984L141.348 23.1367C141.113 23.2409 140.911 23.293 140.742 23.293C140.091 23.293 139.766 22.5703 139.766 21.125Z\"\n        fill=\"currentColor\"\n      />\n    </svg>\n  );\n}\n",
      "type": "registry:component",
      "target": ""
    }
  ],
  "categories": [
    "cta"
  ]
}
</file>

<file path="public/r/styles/default/portofolio-03.json">
{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "portofolio-03",
  "type": "registry:block",
  "author": "shadcn (https://ui.shadcn.com)",
  "description": "minimal portfolio template design for professionals.",
  "registryDependencies": [
    "footer",
    "list"
  ],
  "files": [
    {
      "path": "blocks/portofolio-03/page.tsx",
      "content": "import { WorkExperience } from \"./components/work-experiences\";\n\nconst Index = () => {\n  return (\n    <div className=\"max-w-screen bg-backgroud z-50 flex min-h-screen items-center justify-center p-4\">\n      <WorkExperience />\n    </div>\n  );\n};\n\nexport default Index;\n",
      "type": "registry:page",
      "target": "app/page.tsx"
    },
    {
      "path": "blocks/portofolio-03/components/work-experiences.tsx",
      "content": "import React from \"react\";\nimport { Logos } from \"./logos\";\nimport { ExpandableTab } from \"./expandable-tab\";\n\ninterface Badge {\n  children: React.ReactNode;\n  company: string;\n  role: string;\n}\n\ntype BadgeItem = Badge;\ninterface WorkExperienceItem {\n  period: string;\n  work: string;\n  preposition: string;\n  badges: BadgeItem[];\n  bgColor: string;\n}\n\nconst workExperienceData: WorkExperienceItem[] = [\n  {\n    period: \"2024 - Present\",\n    work: \"CEO\",\n    preposition: \"at\",\n    badges: [\n      {\n        children: <Logos.whatsapp className=\"h-4 w-4\" />,\n        company: \"Whatsapp\",\n        role: \"group chat\",\n      },\n    ],\n    bgColor: \"bg-green-200\",\n  },\n  {\n    period: \"2022 - 2024\",\n    work: \"Researcher\",\n    preposition: \"at\",\n    badges: [\n      {\n        children: <Logos.google className=\"h-4 w-4\" />,\n        company: \"Google\",\n        role: \" chrome browser\",\n      },\n    ],\n    bgColor: \"bg-blue-50\",\n  },\n  {\n    period: \"2020 - 2022\",\n    work: \"Product Manager\",\n    preposition: \"at\",\n    badges: [\n      {\n        children: <Logos.tiktok className=\"h-4 w-4\" />,\n        company: \"Tiktok\",\n        role: \"comments\",\n      },\n    ],\n    bgColor: \"bg-red-200\",\n  },\n  {\n    period: \"2019 - 2020\",\n    work: \"Investor\",\n    preposition: \"at\",\n    badges: [\n      {\n        children: <Logos.shopee className=\"h-4 w-4\" />,\n        company: \"Shopee\",\n        role: \"whislist\",\n      },\n    ],\n    bgColor: \"bg-orange-50\",\n  },\n];\n\nexport function WorkExperience() {\n  return (\n    <div className=\"mx-auto w-full max-w-4xl \">\n      <h2 className=\"mb-12 text-4xl font-bold\">Work Experience</h2>\n      <div>\n        <div className=\"w-full space-y-6\">\n          {workExperienceData.map((item, index) => (\n            <div\n              key={index}\n              className=\"flex w-full flex-col gap-6 md:flex-row md:items-center  md:gap-20\"\n            >\n              <div className=\"w-full text-gray-500 md:w-1/6\">{item.period}</div>\n              <div className=\" flex items-center justify-start gap-2\">\n                <div>\n                  {item.work} {item.preposition}\n                </div>\n                <ExpandableTab badges={item.badges} bgColor={item.bgColor} />\n              </div>\n            </div>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n}\n",
      "type": "registry:component",
      "target": ""
    },
    {
      "path": "blocks/portofolio-03/components/expandable-tab.tsx",
      "content": "\"use client\";\n\nimport * as React from \"react\";\nimport { AnimatePresence, motion } from \"framer-motion\";\nimport { cn } from \"@/lib/utils\";\n\ninterface Badge {\n  children: React.ReactNode;\n  company: string;\n  role: string;\n}\n\ntype BadgeItem = Badge;\n\ninterface ExpandableTabProps {\n  badges: BadgeItem[];\n  bgColor?: string;\n  className?: string;\n  activeColor?: string;\n}\n\nconst buttonVariants = {\n  initial: {\n    gap: 0,\n    paddingLeft: \".5rem\",\n    paddingRight: \".5rem\",\n  },\n  animate: (isSelected: boolean) => ({\n    gap: isSelected ? \".5rem\" : 0,\n    paddingLeft: isSelected ? \"1rem\" : \".5rem\",\n    paddingRight: isSelected ? \"1rem\" : \".5rem\",\n  }),\n  hover: {\n    gap: \".5rem\",\n    paddingLeft: \"1rem\",\n    paddingRight: \"1rem\",\n  },\n};\n\nconst transition = { type: \"spring\", bounce: 0, duration: 0.5 };\n\nexport function ExpandableTab({\n  badges,\n  className,\n  activeColor = \"text-primary\",\n  bgColor,\n}: ExpandableTabProps) {\n  const outsideClickRef = React.useRef(null);\n  const [hovered, setHovered] = React.useState<number | null>(null);\n\n  return (\n    <div\n      ref={outsideClickRef}\n      className={cn(\n        \"flex flex-wrap items-center gap-2 rounded-2xl border bg-background p-1 shadow-sm\",\n        className,\n      )}\n    >\n      {badges.map((badge, index) => {\n        return (\n          <motion.button\n            key={index}\n            variants={buttonVariants}\n            initial=\"initial\"\n            animate={hovered === index ? \"hover\" : \"initial\"}\n            onMouseEnter={() => setHovered(index)}\n            onMouseLeave={() => setHovered(null)}\n            transition={transition}\n            className={cn(\n              \"group relative flex items-center rounded-xl px-4 py-2 text-sm font-medium transition-colors duration-300\",\n              bgColor,\n              hovered === index\n                ? cn(\"bg-background\", activeColor)\n                : \"text-muted-foreground hover:bg-muted hover:text-foreground\",\n            )}\n          >\n            {badge.children}\n            <p className=\"ml-2\">{badge.company}</p>\n\n            <AnimatePresence initial={false}>\n              {hovered === index && (\n                <motion.span\n                  initial={{ opacity: 0, scaleX: 0 }}\n                  animate={\n                    hovered === index\n                      ? { opacity: 1, scaleX: 1 }\n                      : { opacity: 0, scaleX: 0 }\n                  }\n                  transition={transition}\n                  className=\"  whitespace-nowrap   \"\n                >\n                  {badge.role}\n                </motion.span>\n              )}\n            </AnimatePresence>\n\n            {/* <AnimatePresence initial={false}>\n              {selected === index && (\n                <motion.span variants={spanVariants} initial=\"initial\" animate=\"animate\" exit=\"exit\" transition={transition} className=\"overflow-hidden\">\n                  {badge.role}\n                </motion.span>\n              )}\n            </AnimatePresence> */}\n          </motion.button>\n        );\n      })}\n    </div>\n  );\n}\n",
      "type": "registry:component",
      "target": ""
    },
    {
      "path": "blocks/portofolio-03/components/logos.tsx",
      "content": "export type IconProps = React.HTMLAttributes<SVGElement>;\n\nexport const Logos = {\n  whatsapp: (props: IconProps) => (\n    <svg\n      role=\"img\"\n      viewBox=\"0 0 24 24\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n      {...props}\n    >\n      <title>WhatsApp</title>\n      <path d=\"M17.472 14.382c-.297-.149-1.758-.867-2.03-.967-.273-.099-.471-.148-.67.15-.197.297-.767.966-.94 1.164-.173.199-.347.223-.644.075-.297-.15-1.255-.463-2.39-1.475-.883-.788-1.48-1.761-1.653-2.059-.173-.297-.018-.458.13-.606.134-.133.298-.347.446-.52.149-.174.198-.298.298-.497.099-.198.05-.371-.025-.52-.075-.149-.669-1.612-.916-2.207-.242-.579-.487-.5-.669-.51-.173-.008-.371-.01-.57-.01-.198 0-.52.074-.792.372-.272.297-1.04 1.016-1.04 2.479 0 1.462 1.065 2.875 1.213 3.074.149.198 2.096 3.2 5.077 4.487.709.306 1.262.489 1.694.625.712.227 1.36.195 1.871.118.571-.085 1.758-.719 2.006-1.413.248-.694.248-1.289.173-1.413-.074-.124-.272-.198-.57-.347m-5.421 7.403h-.004a9.87 9.87 0 01-5.031-1.378l-.361-.214-3.741.982.998-3.648-.235-.374a9.86 9.86 0 01-1.51-5.26c.001-5.45 4.436-9.884 9.888-9.884 2.64 0 5.122 1.03 6.988 2.898a9.825 9.825 0 012.893 6.994c-.003 5.45-4.437 9.884-9.885 9.884m8.413-18.297A11.815 11.815 0 0012.05 0C5.495 0 .16 5.335.157 11.892c0 2.096.547 4.142 1.588 5.945L.057 24l6.305-1.654a11.882 11.882 0 005.683 1.448h.005c6.554 0 11.89-5.335 11.893-11.893a11.821 11.821 0 00-3.48-8.413Z\" />\n    </svg>\n  ),\n  tiktok: (props: IconProps) => (\n    <svg\n      role=\"img\"\n      viewBox=\"0 0 24 24\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n      {...props}\n    >\n      <title>TikTok</title>\n      <path d=\"M12.525.02c1.31-.02 2.61-.01 3.91-.02.08 1.53.63 3.09 1.75 4.17 1.12 1.11 2.7 1.62 4.24 1.79v4.03c-1.44-.05-2.89-.35-4.2-.97-.57-.26-1.1-.59-1.62-.93-.01 2.92.01 5.84-.02 8.75-.08 1.4-.54 2.79-1.35 3.94-1.31 1.92-3.58 3.17-5.91 3.21-1.43.08-2.86-.31-4.08-1.03-2.02-1.19-3.44-3.37-3.65-5.71-.02-.5-.03-1-.01-1.49.18-1.9 1.12-3.72 2.58-4.96 1.66-1.44 3.98-2.13 6.15-1.72.02 1.48-.04 2.96-.04 4.44-.99-.32-2.15-.23-3.02.37-.63.41-1.11 1.04-1.36 1.75-.21.51-.15 1.07-.14 1.61.24 1.64 1.82 3.02 3.5 2.87 1.12-.01 2.19-.66 2.77-1.61.19-.33.4-.67.41-1.06.1-1.79.06-3.57.07-5.36.01-4.03-.01-8.05.02-12.07z\" />\n    </svg>\n  ),\n  shopee: (props: IconProps) => (\n    <svg\n      role=\"img\"\n      viewBox=\"0 0 24 24\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n      {...props}\n    >\n      <title>Shopee</title>\n      <path d=\"M15.9414 17.9633c.229-1.879-.981-3.077-4.1758-4.0969-1.548-.528-2.277-1.22-2.26-2.1719.065-1.056 1.048-1.825 2.352-1.85a5.2898 5.2898 0 0 1 2.8838.89c.116.072.197.06.263-.039.09-.145.315-.494.39-.62.051-.081.061-.187-.068-.281-.185-.1369-.704-.4149-.983-.5319a6.4697 6.4697 0 0 0-2.5118-.514c-1.909.008-3.4129 1.215-3.5389 2.826-.082 1.1629.494 2.1078 1.73 2.8278.262.152 1.6799.716 2.2438.892 1.774.552 2.695 1.5419 2.478 2.6969-.197 1.047-1.299 1.7239-2.818 1.7439-1.2039-.046-2.2878-.537-3.1278-1.19l-.141-.11c-.104-.08-.218-.075-.287.03-.05.077-.376.547-.458.67-.077.108-.035.168.045.234.35.293.817.613 1.134.775a6.7097 6.7097 0 0 0 2.8289.727 4.9048 4.9048 0 0 0 2.0759-.354c1.095-.465 1.8029-1.394 1.9449-2.554zM11.9986 1.4009c-2.068 0-3.7539 1.95-3.8329 4.3899h7.6657c-.08-2.44-1.765-4.3899-3.8328-4.3899zm7.8516 22.5981-.08.001-15.7843-.002c-1.074-.04-1.863-.91-1.971-1.991l-.01-.195L1.298 6.2858a.459.459 0 0 1 .45-.494h4.9748C6.8448 2.568 9.1607 0 11.9996 0c2.8388 0 5.1537 2.5689 5.2757 5.7898h4.9678a.459.459 0 0 1 .458.483l-.773 15.5883-.007.131c-.094 1.094-.979 1.9769-2.0709 2.0059z\" />\n    </svg>\n  ),\n  google: (props: IconProps) => (\n    <svg\n      role=\"img\"\n      viewBox=\"0 0 24 24\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n      {...props}\n    >\n      <title>Google</title>\n      <path d=\"M12.48 10.92v3.28h7.84c-.24 1.84-.853 3.187-1.787 4.133-1.147 1.147-2.933 2.4-6.053 2.4-4.827 0-8.6-3.893-8.6-8.72s3.773-8.72 8.6-8.72c2.6 0 4.507 1.027 5.907 2.347l2.307-2.307C18.747 1.44 16.133 0 12.48 0 5.867 0 .307 5.387.307 12s5.56 12 12.173 12c3.573 0 6.267-1.173 8.373-3.36 2.16-2.16 2.84-5.213 2.84-7.667 0-.76-.053-1.467-.173-2.053H12.48z\" />\n    </svg>\n  ),\n};\n",
      "type": "registry:component",
      "target": ""
    }
  ],
  "categories": [
    "portofolio"
  ]
}
</file>

<file path="public/r/styles/default/tool-01.json">
{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "tool-01",
  "type": "registry:block",
  "author": "shadcn (https://ui.shadcn.com)",
  "description": "A simple sidebar with navigation grouped by section.",
  "registryDependencies": [
    "banner",
    "colorfulButton",
    "githubButton",
    "openSource"
  ],
  "files": [
    {
      "path": "blocks/tool-01/main.tsx",
      "content": "import { Header } from \"./components/header\";\nimport { Banner } from \"./components/banner\";\nimport { Review } from \"./components/review\";\nimport { OpenSource } from \"./components/open-source\";\n\nexport default function HomeLayout() {\n  return (\n    <div className=\"flex flex-col \">\n      <div className=\"container mx-auto border-x\">\n        <Header />\n        <div className=\"divide-y\">\n          <Banner />\n          <div className=\"grid divide-y sm:grid-cols-3 sm:divide-x sm:divide-y-0\">\n            <div className=\"sm:col-span-2\">\n              <Review />\n            </div>\n            <div className=\"sm:col-span-1\">\n              <OpenSource />\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n",
      "type": "registry:page",
      "target": "app/main.tsx"
    },
    {
      "path": "blocks/tool-01/style/style.css",
      "content": ".bg-dashed {\n  background-image: linear-gradient(45deg, #e5e5e5 12.5%, transparent 12.5%, transparent 50%, #e5e5e5 50%, #e5e5e5 62.5%, transparent 62.5%, transparent 100%);\n  background-size: 0.25rem 0.25rem;\n}\n",
      "type": "registry:page",
      "target": "app/style.css"
    },
    {
      "path": "blocks/tool-01/components/header.tsx",
      "content": "import Link from \"next/link\";\nimport { GitHubButton } from \"./github-button\";\nimport { ButtonColorful } from \"./colorful-button\";\nimport Logo from \"./logo.svg\";\nimport { Icons } from \"@/components/icons\";\n\nconst links = [\n  {\n    label: \"Home\",\n    href: \"/#\",\n  },\n  {\n    label: \"Apps\",\n    href: \"/#apps\",\n  },\n  {\n    label: \"Features\",\n    href: \"/#features\",\n  },\n  {\n    label: \"Community\",\n    href: \"/#community\",\n  },\n];\n\nexport const Header = () => (\n  <div className=\"sticky top-0 z-50 w-full border-b  backdrop-blur-sm\">\n    <div className=\"container mx-auto flex items-center justify-between px-8 py-2\">\n      <div className=\"flex items-center gap-8\">\n        <Link href=\"/\" className=\"flex py-1 items-center gap-2\">\n          <Icons.logo />\n          <p className=\"hidden text-lg font-semibold tracking-tight sm:block\">\n            next-forge\n          </p>\n        </Link>\n        <div className=\"hidden items-center gap-4 text-sm font-medium text-neutral-500 lg:flex\">\n          {links.map((link) => (\n            <Link key={link.href} href={link.href}>\n              {link.label}\n            </Link>\n          ))}\n        </div>\n      </div>\n      <div className=\"flex items-center gap-4\">\n        <GitHubButton />\n        <ButtonColorful />\n      </div>\n    </div>\n  </div>\n);\n",
      "type": "registry:component",
      "target": ""
    },
    {
      "path": "blocks/tool-01/components/banner.tsx",
      "content": "import { ButtonColorful } from \"./colorful-button\";\nimport { Installer } from \"./installer\";\nimport { Button } from \"@/components/ui/button\";\n\nexport const Banner = () => (\n  <section className=\"bg-dashed flex flex-col items-center justify-center gap-6 px-4 py-16 sm:px-16 sm:py-24\">\n    <h1 className=\"max-w-3xl text-center text-4xl font-bold leading-tight tracking-tighter sm:text-5xl md:max-w-4xl md:text-6xl lg:leading-[1.1]\">\n      Production-grade Turborepo template for Next.js apps\n    </h1>\n    <p className=\"max-w-xl text-center text-neutral-600 dark:text-neutral-400 md:max-w-2xl md:text-lg\">\n      A monorepo template designed to have everything you need to build your new\n      SaaS app as thoroughly as possible. Free and open source, forever.\n    </p>\n    <div className=\"mx-auto flex w-full max-w-xl flex-col items-center gap-4 sm:flex-row\">\n      <Installer />\n      <Button>Get started</Button>\n    </div>\n  </section>\n);\n",
      "type": "registry:component",
      "target": ""
    },
    {
      "path": "blocks/tool-01/components/colorful-button.tsx",
      "content": "import { Button } from \"@/components/ui/button\";\nimport { cn } from \"@/lib/utils\";\nimport { ArrowUpRight } from \"lucide-react\";\n\ninterface ButtonColorfulProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement> {\n  label?: string;\n}\n\nexport function ButtonColorful({\n  className,\n  label = \"Explore Components\",\n  ...props\n}: ButtonColorfulProps) {\n  return (\n    <Button\n      className={cn(\n        \"relative h-10 overflow-hidden px-4\",\n        \"bg-zinc-900 dark:bg-zinc-100\",\n        \"transition-all duration-200\",\n        \"group\",\n        className,\n      )}\n      {...props}\n    >\n      {/* Gradient background effect */}\n      <div\n        className={cn(\n          \"absolute inset-0\",\n          \"bg-gradient-to-r from-indigo-500 via-purple-500 to-pink-500\",\n          \"opacity-40 group-hover:opacity-80\",\n          \"blur transition-opacity duration-500\",\n        )}\n      />\n\n      {/* Content */}\n      <div className=\"relative flex items-center justify-center gap-2\">\n        <span className=\"text-white dark:text-zinc-900\">{label}</span>\n        <ArrowUpRight className=\"h-3.5 w-3.5 text-white/90 dark:text-zinc-900/90\" />\n      </div>\n    </Button>\n  );\n}\n",
      "type": "registry:component",
      "target": ""
    },
    {
      "path": "blocks/tool-01/components/github-button.tsx",
      "content": "import { Button } from \"@/components/ui/button\";\nimport { Star } from \"lucide-react\";\n\nfunction GitHubButton() {\n  return (\n    <Button>\n      <Star\n        className=\"-ms-1 me-2 opacity-60\"\n        size={16}\n        strokeWidth={2}\n        aria-hidden=\"true\"\n      />\n      <span className=\"flex items-baseline gap-2\">\n        Star\n        <span className=\"text-xs text-primary-foreground/60\">729</span>\n      </span>\n    </Button>\n  );\n}\n\nexport { GitHubButton };\n",
      "type": "registry:component",
      "target": ""
    },
    {
      "path": "blocks/tool-01/components/installer.tsx",
      "content": "\"use client\";\n\nimport { CopyIcon } from \"lucide-react\";\nimport { toast } from \"sonner\";\n\nconst command = \"npx next-forge@latest init\";\n\nexport const Installer = () => {\n  const handleCopy = () => {\n    navigator.clipboard.writeText(command);\n    toast.success(\"Copied to clipboard\");\n  };\n\n  return (\n    <div className=\"flex h-10 w-full items-center justify-center gap-2 whitespace-nowrap rounded-md border bg-white px-4 py-2 text-sm text-neutral-950 shadow-sm dark:bg-neutral-950 dark:text-white\">\n      <p className=\"pointer-events-none shrink-0 select-none text-neutral-500 dark:text-neutral-400\">\n        $\n      </p>\n      <div className=\"flex-1 truncate text-left font-mono\">{command}</div>\n      <div className=\"flex shrink-0 items-center gap-2\">\n        <button type=\"button\" aria-label=\"Copy\" onClick={handleCopy}>\n          <CopyIcon\n            size={14}\n            className=\"text-neutral-500 dark:text-neutral-400\"\n          />\n        </button>\n      </div>\n    </div>\n  );\n};\n",
      "type": "registry:component",
      "target": ""
    },
    {
      "path": "blocks/tool-01/components/open-source.tsx",
      "content": "import { StarIcon } from \"lucide-react\";\nimport { Avatar, AvatarImage } from \"@/components/ui/avatar\";\n\nexport const OpenSource = async () => {\n  return (\n    <div className=\"flex h-full flex-col items-start justify-between gap-4 p-8\">\n      <div className=\"flex flex-col gap-4\">\n        <div className=\"flex items-center gap-2 text-neutral-500\">\n          <StarIcon size={14} />\n          <small>Open source</small>\n        </div>\n        <p className=\"text-xl font-semibold tracking-tight\">\n          next-forge currently has <span className=\"text-orange-600\">4000</span>{\" \"}\n          stars, <span className=\"text-orange-600\">1200</span> forks, and{\" \"}\n          <span className=\"text-orange-600\">40</span> open issues and{\" \"}\n          <span className=\"text-orange-600\">20</span> contributors.\n        </p>\n        <div className=\"flex -space-x-3 *:ring *:ring-background\">\n          <Avatar>\n            <AvatarImage src=\"https://mynaui.com/avatars/avatar-01.jpg\" />\n          </Avatar>\n          <Avatar>\n            <AvatarImage src=\"https://mynaui.com//avatars/avatar-02.jpg\" />\n          </Avatar>\n          <Avatar>\n            <AvatarImage src=\"https://mynaui.com//avatars/avatar-03.jpg\" />\n          </Avatar>\n        </div>\n      </div>\n      <a\n        href=\"https://github.com/haydenbleasel/next-forge\"\n        className=\"inline-flex rounded-md border bg-white px-4 py-2 text-sm font-medium shadow-sm\"\n      >\n        Browse the source code\n      </a>\n    </div>\n  );\n};\n",
      "type": "registry:component",
      "target": ""
    },
    {
      "path": "blocks/tool-01/components/review.tsx",
      "content": "import { MessageCircleIcon } from \"lucide-react\";\nimport Image from \"next/image\";\n\nimport { Icons } from \"@/components/icons\";\n\nexport const Review = () => (\n  <section className=\"flex flex-col gap-8 p-8\">\n    <div className=\"flex items-center gap-2 text-neutral-500\">\n      <MessageCircleIcon size={14} />\n      <small>Nice words</small>\n    </div>\n    <p className=\"text-xl font-semibold tracking-tight sm:text-2xl\">\n      &ldquo;A production-grade, monorepo-first, full stack Next.js template.\n      Very thoughtfully engineered and documented. Covers auth, DB & ORM,\n      payments, docs, blog, o11y, analytics, emails, and even feature flags &\n      dark mode.&rdquo;\n    </p>\n    <div className=\"space-between flex items-center justify-between gap-4\">\n      <div className=\"flex items-center gap-2\">\n        <div className=\"flex items-center -space-x-1\">\n          <Image\n            className=\"rounded-full ring-1 ring-background\"\n            src=\"https://github.com/shadcn.png\"\n            width={24}\n            height={24}\n            alt=\"Avatar 01\"\n          />\n        </div>\n        <p className=\"text-sm text-neutral-500\">\n          <span className=\"font-medium\">Max Bosh</span>, CEO of Nothing\n        </p>\n      </div>\n      <a\n        href=\"https://x.com/rauchg/status/1853171412766466119\"\n        target=\"_blank\"\n        rel=\"noopener noreferrer\"\n      >\n        <Icons.Xicon />\n      </a>\n    </div>\n  </section>\n);\n",
      "type": "registry:component",
      "target": ""
    }
  ],
  "categories": [
    "tool"
  ]
}
</file>

<file path="public/r/index.json">
[
  {
    "name": "accordion",
    "type": "registry:ui",
    "dependencies": [
      "@radix-ui/react-accordion"
    ],
    "files": [
      {
        "path": "ui/accordion.tsx",
        "type": "registry:ui"
      }
    ],
    "tailwind": {
      "config": {
        "theme": {
          "extend": {
            "keyframes": {
              "accordion-down": {
                "from": {
                  "height": "0"
                },
                "to": {
                  "height": "var(--radix-accordion-content-height)"
                }
              },
              "accordion-up": {
                "from": {
                  "height": "var(--radix-accordion-content-height)"
                },
                "to": {
                  "height": "0"
                }
              }
            },
            "animation": {
              "accordion-down": "accordion-down 0.2s ease-out",
              "accordion-up": "accordion-up 0.2s ease-out"
            }
          }
        }
      }
    }
  },
  {
    "name": "alert",
    "type": "registry:ui",
    "files": [
      {
        "path": "ui/alert.tsx",
        "type": "registry:ui"
      }
    ]
  },
  {
    "name": "avatar",
    "type": "registry:ui",
    "dependencies": [
      "@radix-ui/react-avatar"
    ],
    "files": [
      {
        "path": "ui/avatar.tsx",
        "type": "registry:ui"
      }
    ]
  },
  {
    "name": "badge",
    "type": "registry:ui",
    "dependencies": [
      "@radix-ui/react-slot"
    ],
    "files": [
      {
        "path": "ui/badge.tsx",
        "type": "registry:ui"
      }
    ]
  },
  {
    "name": "border-beam",
    "type": "registry:ui",
    "dependencies": [
      "@radix-ui/react-slot"
    ],
    "files": [
      {
        "path": "ui/border-beam.tsx",
        "type": "registry:ui"
      }
    ]
  },
  {
    "name": "button",
    "type": "registry:ui",
    "dependencies": [
      "@radix-ui/react-slot"
    ],
    "files": [
      {
        "path": "ui/button.tsx",
        "type": "registry:ui"
      }
    ]
  },
  {
    "name": "texture-button",
    "type": "registry:ui",
    "dependencies": [
      "@radix-ui/react-slot"
    ],
    "files": [
      {
        "path": "ui/texture-button.tsx",
        "type": "registry:ui"
      }
    ]
  },
  {
    "name": "calendar",
    "type": "registry:ui",
    "dependencies": [
      "react-day-picker@8.10.1",
      "date-fns"
    ],
    "registryDependencies": [
      "button"
    ],
    "files": [
      {
        "path": "ui/calendar.tsx",
        "type": "registry:ui"
      }
    ]
  },
  {
    "name": "card",
    "type": "registry:ui",
    "files": [
      {
        "path": "ui/card.tsx",
        "type": "registry:ui"
      }
    ]
  },
  {
    "name": "chart",
    "type": "registry:ui",
    "dependencies": [
      "recharts",
      "lucide-react"
    ],
    "registryDependencies": [
      "card"
    ],
    "files": [
      {
        "path": "ui/chart.tsx",
        "type": "registry:ui"
      }
    ]
  },
  {
    "name": "collapsible",
    "type": "registry:ui",
    "dependencies": [
      "@radix-ui/react-collapsible"
    ],
    "files": [
      {
        "path": "ui/collapsible.tsx",
        "type": "registry:ui"
      }
    ]
  },
  {
    "name": "command",
    "type": "registry:ui",
    "dependencies": [
      "cmdk"
    ],
    "registryDependencies": [
      "dialog"
    ],
    "files": [
      {
        "path": "ui/command.tsx",
        "type": "registry:ui"
      }
    ]
  },
  {
    "name": "dialog",
    "type": "registry:ui",
    "dependencies": [
      "@radix-ui/react-dialog"
    ],
    "files": [
      {
        "path": "ui/dialog.tsx",
        "type": "registry:ui"
      }
    ]
  },
  {
    "name": "drawer",
    "type": "registry:ui",
    "dependencies": [
      "vaul",
      "@radix-ui/react-dialog"
    ],
    "files": [
      {
        "path": "ui/drawer.tsx",
        "type": "registry:ui"
      }
    ]
  },
  {
    "name": "dropdown-menu",
    "type": "registry:ui",
    "dependencies": [
      "@radix-ui/react-dropdown-menu"
    ],
    "files": [
      {
        "path": "ui/dropdown-menu.tsx",
        "type": "registry:ui"
      }
    ]
  },
  {
    "name": "form",
    "type": "registry:ui",
    "dependencies": [
      "@radix-ui/react-label",
      "@radix-ui/react-slot",
      "@hookform/resolvers",
      "zod",
      "react-hook-form"
    ],
    "registryDependencies": [
      "button",
      "label"
    ],
    "files": [
      {
        "path": "ui/form.tsx",
        "type": "registry:ui"
      }
    ]
  },
  {
    "name": "hover-card",
    "type": "registry:ui",
    "dependencies": [
      "@radix-ui/react-hover-card"
    ],
    "files": [
      {
        "path": "ui/hover-card.tsx",
        "type": "registry:ui"
      }
    ]
  },
  {
    "name": "icon-button",
    "type": "registry:ui",
    "dependencies": [
      "@radix-ui/react-icon-button"
    ],
    "files": [
      {
        "path": "ui/icon-button.tsx",
        "type": "registry:ui"
      }
    ]
  },
  {
    "name": "input",
    "type": "registry:ui",
    "files": [
      {
        "path": "ui/input.tsx",
        "type": "registry:ui"
      }
    ]
  },
  {
    "name": "label",
    "type": "registry:ui",
    "dependencies": [
      "@radix-ui/react-label"
    ],
    "files": [
      {
        "path": "ui/label.tsx",
        "type": "registry:ui"
      }
    ]
  },
  {
    "name": "navigation-menu",
    "type": "registry:ui",
    "dependencies": [
      "@radix-ui/react-navigation-menu"
    ],
    "files": [
      {
        "path": "ui/navigation-menu.tsx",
        "type": "registry:ui"
      }
    ]
  },
  {
    "name": "popover",
    "type": "registry:ui",
    "dependencies": [
      "@radix-ui/react-popover"
    ],
    "files": [
      {
        "path": "ui/popover.tsx",
        "type": "registry:ui"
      }
    ]
  },
  {
    "name": "resizable",
    "type": "registry:ui",
    "dependencies": [
      "react-resizable-panels"
    ],
    "files": [
      {
        "path": "ui/resizable.tsx",
        "type": "registry:ui"
      }
    ]
  },
  {
    "name": "scroll-area",
    "type": "registry:ui",
    "dependencies": [
      "@radix-ui/react-scroll-area"
    ],
    "files": [
      {
        "path": "ui/scroll-area.tsx",
        "type": "registry:ui"
      }
    ]
  },
  {
    "name": "select",
    "type": "registry:ui",
    "dependencies": [
      "@radix-ui/react-select"
    ],
    "files": [
      {
        "path": "ui/select.tsx",
        "type": "registry:ui"
      }
    ]
  },
  {
    "name": "separator",
    "type": "registry:ui",
    "dependencies": [
      "@radix-ui/react-separator"
    ],
    "files": [
      {
        "path": "ui/separator.tsx",
        "type": "registry:ui"
      }
    ]
  },
  {
    "name": "sheet",
    "type": "registry:ui",
    "dependencies": [
      "@radix-ui/react-dialog"
    ],
    "files": [
      {
        "path": "ui/sheet.tsx",
        "type": "registry:ui"
      }
    ]
  },
  {
    "name": "sidebar",
    "type": "registry:ui",
    "dependencies": [
      "@radix-ui/react-slot",
      "class-variance-authority",
      "lucide-react"
    ],
    "registryDependencies": [
      "button",
      "separator",
      "sheet",
      "tooltip",
      "input",
      "use-mobile",
      "skeleton"
    ],
    "files": [
      {
        "path": "ui/sidebar.tsx",
        "type": "registry:ui"
      }
    ],
    "tailwind": {
      "config": {
        "theme": {
          "extend": {
            "colors": {
              "sidebar": {
                "DEFAULT": "hsl(var(--sidebar-background))",
                "foreground": "hsl(var(--sidebar-foreground))",
                "primary": "hsl(var(--sidebar-primary))",
                "primary-foreground": "hsl(var(--sidebar-primary-foreground))",
                "accent": "hsl(var(--sidebar-accent))",
                "accent-foreground": "hsl(var(--sidebar-accent-foreground))",
                "border": "hsl(var(--sidebar-border))",
                "ring": "hsl(var(--sidebar-ring))"
              }
            }
          }
        }
      }
    },
    "cssVars": {
      "light": {
        "sidebar-background": "0 0% 98%",
        "sidebar-foreground": "240 5.3% 26.1%",
        "sidebar-primary": "240 5.9% 10%",
        "sidebar-primary-foreground": "0 0% 98%",
        "sidebar-accent": "240 4.8% 95.9%",
        "sidebar-accent-foreground": "240 5.9% 10%",
        "sidebar-border": "220 13% 91%",
        "sidebar-ring": "217.2 91.2% 59.8%"
      },
      "dark": {
        "sidebar-background": "240 5.9% 10%",
        "sidebar-foreground": "240 4.8% 95.9%",
        "sidebar-primary": "224.3 76.3% 48%",
        "sidebar-primary-foreground": "0 0% 100%",
        "sidebar-accent": "240 3.7% 15.9%",
        "sidebar-accent-foreground": "240 4.8% 95.9%",
        "sidebar-border": "240 3.7% 15.9%",
        "sidebar-ring": "217.2 91.2% 59.8%"
      }
    }
  },
  {
    "name": "skeleton",
    "type": "registry:ui",
    "files": [
      {
        "path": "ui/skeleton.tsx",
        "type": "registry:ui"
      }
    ]
  },
  {
    "name": "sonner",
    "type": "registry:ui",
    "dependencies": [
      "sonner",
      "next-themes"
    ],
    "files": [
      {
        "path": "ui/sonner.tsx",
        "type": "registry:ui"
      }
    ]
  },
  {
    "name": "switch",
    "type": "registry:ui",
    "dependencies": [
      "@radix-ui/react-switch"
    ],
    "files": [
      {
        "path": "ui/switch.tsx",
        "type": "registry:ui"
      }
    ]
  },
  {
    "name": "table",
    "type": "registry:ui",
    "files": [
      {
        "path": "ui/table.tsx",
        "type": "registry:ui"
      }
    ]
  },
  {
    "name": "tabs",
    "type": "registry:ui",
    "dependencies": [
      "@radix-ui/react-tabs"
    ],
    "files": [
      {
        "path": "ui/tabs.tsx",
        "type": "registry:ui"
      }
    ]
  },
  {
    "name": "toast",
    "type": "registry:ui",
    "dependencies": [
      "@radix-ui/react-toast"
    ],
    "files": [
      {
        "path": "ui/toast.tsx",
        "type": "registry:ui"
      },
      {
        "path": "hooks/use-toast.ts",
        "type": "registry:hook"
      },
      {
        "path": "ui/toaster.tsx",
        "type": "registry:ui"
      }
    ]
  },
  {
    "name": "toaster",
    "type": "registry:ui",
    "dependencies": [
      "@radix-ui/react-toast"
    ],
    "files": [
      {
        "path": "ui/toast.tsx",
        "type": "registry:ui"
      },
      {
        "path": "hooks/use-toast.ts",
        "type": "registry:hook"
      },
      {
        "path": "ui/toaster.tsx",
        "type": "registry:ui"
      }
    ]
  },
  {
    "name": "toggle",
    "type": "registry:ui",
    "dependencies": [
      "@radix-ui/react-toggle"
    ],
    "files": [
      {
        "path": "ui/toggle.tsx",
        "type": "registry:ui"
      }
    ]
  },
  {
    "name": "toggle-group",
    "type": "registry:ui",
    "dependencies": [
      "@radix-ui/react-toggle-group"
    ],
    "registryDependencies": [
      "toggle"
    ],
    "files": [
      {
        "path": "ui/toggle-group.tsx",
        "type": "registry:ui"
      }
    ]
  },
  {
    "name": "tooltip",
    "type": "registry:ui",
    "dependencies": [
      "@radix-ui/react-tooltip"
    ],
    "files": [
      {
        "path": "ui/tooltip.tsx",
        "type": "registry:ui"
      }
    ]
  }
]
</file>

<file path="public/placeholder-dark.svg">
<svg xmlns="http://www.w3.org/2000/svg" width="1200" height="1200" fill="none"><rect width="1200" height="1200" fill="#151515" rx="3"/><g opacity=".5"><g opacity=".5"><path fill="#FAFAFA" d="M600.709 736.5c-75.454 0-136.621-61.167-136.621-136.62 0-75.454 61.167-136.621 136.621-136.621 75.453 0 136.62 61.167 136.62 136.621 0 75.453-61.167 136.62-136.62 136.62Z"/><path stroke="#C9C9C9" stroke-width="2.418" d="M600.709 736.5c-75.454 0-136.621-61.167-136.621-136.62 0-75.454 61.167-136.621 136.621-136.621 75.453 0 136.62 61.167 136.62 136.621 0 75.453-61.167 136.62-136.62 136.62Z"/></g><path stroke="url(#a)" stroke-width="2.418" d="M0-1.209h553.581" transform="scale(1 -1) rotate(45 1163.11 91.165)"/><path stroke="url(#b)" stroke-width="2.418" d="M404.846 598.671h391.726"/><path stroke="url(#c)" stroke-width="2.418" d="M599.5 795.742V404.017"/><path stroke="url(#d)" stroke-width="2.418" d="m795.717 796.597-391.441-391.44"/><path fill="#fff" d="M600.709 656.704c-31.384 0-56.825-25.441-56.825-56.824 0-31.384 25.441-56.825 56.825-56.825 31.383 0 56.824 25.441 56.824 56.825 0 31.383-25.441 56.824-56.824 56.824Z"/><g clip-path="url(#e)"><path fill="#666" fillRule="evenodd" d="M616.426 586.58h-31.434v16.176l3.553-3.554.531-.531h9.068l.074-.074 8.463-8.463h2.565l7.18 7.181V586.58Zm-15.715 14.654 3.698 3.699 1.283 1.282-2.565 2.565-1.282-1.283-5.2-5.199h-6.066l-5.514 5.514-.073.073v2.876a2.418 2.418 0 0 0 2.418 2.418h26.598a2.418 2.418 0 0 0 2.418-2.418v-8.317l-8.463-8.463-7.181 7.181-.071.072Zm-19.347 5.442v4.085a6.045 6.045 0 0 0 6.046 6.045h26.598a6.044 6.044 0 0 0 6.045-6.045v-7.108l1.356-1.355-1.282-1.283-.074-.073v-17.989h-38.689v23.43l-.146.146.146.147Z" clipRule="evenodd"/></g><path stroke="#C9C9C9" stroke-width="2.418" d="M600.709 656.704c-31.384 0-56.825-25.441-56.825-56.824 0-31.384 25.441-56.825 56.825-56.825 31.383 0 56.824 25.441 56.824 56.825 0 31.383-25.441 56.824-56.824 56.824Z"/></g><defs><linearGradient id="a" x1="554.061" x2="-.48" y1=".083" y2=".087" gradientUnits="userSpaceOnUse"><stop stop-color="#C9C9C9" stop-opacity="0"/><stop offset=".208" stop-color="#C9C9C9"/><stop offset=".792" stop-color="#C9C9C9"/><stop offset="1" stop-color="#C9C9C9" stop-opacity="0"/></linearGradient><linearGradient id="b" x1="796.912" x2="404.507" y1="599.963" y2="599.965" gradientUnits="userSpaceOnUse"><stop stop-color="#C9C9C9" stop-opacity="0"/><stop offset=".208" stop-color="#C9C9C9"/><stop offset=".792" stop-color="#C9C9C9"/><stop offset="1" stop-color="#C9C9C9" stop-opacity="0"/></linearGradient><linearGradient id="c" x1="600.792" x2="600.794" y1="403.677" y2="796.082" gradientUnits="userSpaceOnUse"><stop stop-color="#C9C9C9" stop-opacity="0"/><stop offset=".208" stop-color="#C9C9C9"/><stop offset=".792" stop-color="#C9C9C9"/><stop offset="1" stop-color="#C9C9C9" stop-opacity="0"/></linearGradient><linearGradient id="d" x1="404.85" x2="796.972" y1="403.903" y2="796.02" gradientUnits="userSpaceOnUse"><stop stop-color="#C9C9C9" stop-opacity="0"/><stop offset=".208" stop-color="#C9C9C9"/><stop offset=".792" stop-color="#C9C9C9"/><stop offset="1" stop-color="#C9C9C9" stop-opacity="0"/></linearGradient><clipPath id="e"><path fill="#fff" d="M581.364 580.535h38.689v38.689h-38.689z"/></clipPath></defs></svg>
</file>

<file path="public/placeholder.svg">
<svg xmlns="http://www.w3.org/2000/svg" width="1200" height="1200" fill="none"><rect width="1200" height="1200" fill="#EAEAEA" rx="3"/><g opacity=".5"><g opacity=".5"><path fill="#FAFAFA" d="M600.709 736.5c-75.454 0-136.621-61.167-136.621-136.62 0-75.454 61.167-136.621 136.621-136.621 75.453 0 136.62 61.167 136.62 136.621 0 75.453-61.167 136.62-136.62 136.62Z"/><path stroke="#C9C9C9" stroke-width="2.418" d="M600.709 736.5c-75.454 0-136.621-61.167-136.621-136.62 0-75.454 61.167-136.621 136.621-136.621 75.453 0 136.62 61.167 136.62 136.621 0 75.453-61.167 136.62-136.62 136.62Z"/></g><path stroke="url(#a)" stroke-width="2.418" d="M0-1.209h553.581" transform="scale(1 -1) rotate(45 1163.11 91.165)"/><path stroke="url(#b)" stroke-width="2.418" d="M404.846 598.671h391.726"/><path stroke="url(#c)" stroke-width="2.418" d="M599.5 795.742V404.017"/><path stroke="url(#d)" stroke-width="2.418" d="m795.717 796.597-391.441-391.44"/><path fill="#fff" d="M600.709 656.704c-31.384 0-56.825-25.441-56.825-56.824 0-31.384 25.441-56.825 56.825-56.825 31.383 0 56.824 25.441 56.824 56.825 0 31.383-25.441 56.824-56.824 56.824Z"/><g clip-path="url(#e)"><path fill="#666" fillRule="evenodd" d="M616.426 586.58h-31.434v16.176l3.553-3.554.531-.531h9.068l.074-.074 8.463-8.463h2.565l7.18 7.181V586.58Zm-15.715 14.654 3.698 3.699 1.283 1.282-2.565 2.565-1.282-1.283-5.2-5.199h-6.066l-5.514 5.514-.073.073v2.876a2.418 2.418 0 0 0 2.418 2.418h26.598a2.418 2.418 0 0 0 2.418-2.418v-8.317l-8.463-8.463-7.181 7.181-.071.072Zm-19.347 5.442v4.085a6.045 6.045 0 0 0 6.046 6.045h26.598a6.044 6.044 0 0 0 6.045-6.045v-7.108l1.356-1.355-1.282-1.283-.074-.073v-17.989h-38.689v23.43l-.146.146.146.147Z" clipRule="evenodd"/></g><path stroke="#C9C9C9" stroke-width="2.418" d="M600.709 656.704c-31.384 0-56.825-25.441-56.825-56.824 0-31.384 25.441-56.825 56.825-56.825 31.383 0 56.824 25.441 56.824 56.825 0 31.383-25.441 56.824-56.824 56.824Z"/></g><defs><linearGradient id="a" x1="554.061" x2="-.48" y1=".083" y2=".087" gradientUnits="userSpaceOnUse"><stop stop-color="#C9C9C9" stop-opacity="0"/><stop offset=".208" stop-color="#C9C9C9"/><stop offset=".792" stop-color="#C9C9C9"/><stop offset="1" stop-color="#C9C9C9" stop-opacity="0"/></linearGradient><linearGradient id="b" x1="796.912" x2="404.507" y1="599.963" y2="599.965" gradientUnits="userSpaceOnUse"><stop stop-color="#C9C9C9" stop-opacity="0"/><stop offset=".208" stop-color="#C9C9C9"/><stop offset=".792" stop-color="#C9C9C9"/><stop offset="1" stop-color="#C9C9C9" stop-opacity="0"/></linearGradient><linearGradient id="c" x1="600.792" x2="600.794" y1="403.677" y2="796.082" gradientUnits="userSpaceOnUse"><stop stop-color="#C9C9C9" stop-opacity="0"/><stop offset=".208" stop-color="#C9C9C9"/><stop offset=".792" stop-color="#C9C9C9"/><stop offset="1" stop-color="#C9C9C9" stop-opacity="0"/></linearGradient><linearGradient id="d" x1="404.85" x2="796.972" y1="403.903" y2="796.02" gradientUnits="userSpaceOnUse"><stop stop-color="#C9C9C9" stop-opacity="0"/><stop offset=".208" stop-color="#C9C9C9"/><stop offset=".792" stop-color="#C9C9C9"/><stop offset="1" stop-color="#C9C9C9" stop-opacity="0"/></linearGradient><clipPath id="e"><path fill="#fff" d="M581.364 580.535h38.689v38.689h-38.689z"/></clipPath></defs></svg>
</file>

<file path="registry/default/blocks/card-01/page.tsx">
import { cn } from "@/lib/utils";
import { PostCard } from "./components/post-card";

export default function Page() {
  return (
    <>
      <div className="max-w-screen  bg-backgroud z-50 p-4  2xl:overflow-visible">
        <div className="3xl:gap-36 4xl:gap-40 xl:gap-18 3xl:py-32 4xl:py-36 isolate mx-auto flex w-full max-w-2xl flex-col gap-20 px-4 py-12 md:gap-24 md:px-6 md:py-16 lg:gap-28 lg:px-8 lg:py-20 xl:py-24 2xl:gap-32 2xl:py-28">
          <Section>
            <SectionHeading className="lg:text-center">
              Posts are the sweet spots between chat and docs
            </SectionHeading>
            <PostCard />
          </Section>
        </div>
      </div>
    </>
  );
}

export function Section({
  children,
  className,
}: {
  children: React.ReactNode;
  className?: string;
}) {
  return (
    <section className={cn("flex flex-col gap-4", className)}>
      {children}
    </section>
  );
}

export function SectionHeading({
  children,
  className,
}: {
  children: React.ReactNode;
  className?: string;
}) {
  return (
    <h3
      className={cn(
        "scroll-mt-20 text-balance text-[clamp(1.5rem,_3vw,_1.8rem)] font-semibold leading-[1.2] -tracking-[0.5px]",
        className,
      )}
    >
      {children}
    </h3>
  );
}
</file>

<file path="registry/default/blocks/next-int/components/lang-switch.tsx">
"use client";

import { Button } from "@/components/ui/button";
import { Drawer, DrawerTrigger, DrawerContent, DrawerClose } from "./drawer";
import React from "react";
import { X } from "lucide-react";
import { cn } from "@/lib/utils";

export default function LangSwitch() {
  return (
    <React.Fragment>
      <Drawer>
        <DrawerTrigger asChild>
          <Button
            variant="outline"
            size="sm"
            className={cn("flex items-center rounded-sm")}
          >
            <span>EN</span>
          </Button>
        </DrawerTrigger>
        <DrawerContent>
          <div className="grid gap-4 p-4">
            <div className="flex items-center justify-between">
              <h3 className="text-lg font-medium">Select Language</h3>
              <DrawerClose asChild>
                <Button variant="ghost" size="icon" className="rou h-8 w-8">
                  <X className="h-5 w-5" />
                </Button>
              </DrawerClose>
            </div>
            <div className="grid gap-2">
              <Button variant="ghost" className="justify-start gap-2">
                <span>English</span>
              </Button>
              <Button variant="ghost" className="justify-start gap-2">
                <span>Español</span>
              </Button>
              <Button variant="ghost" className="justify-start gap-2">
                <span>Français</span>
              </Button>
              <Button variant="ghost" className="justify-start gap-2">
                <span>Deutsch</span>
              </Button>
            </div>
          </div>
        </DrawerContent>
      </Drawer>
    </React.Fragment>
  );
}
</file>

<file path="registry/default/blocks/next-int/components/photos.tsx">
import { motion } from "framer-motion";
import { Marquee } from "./marquee";
import { cn } from "@/lib/utils";

import React from "react";

export function Photos({ photos }: { photos: string[] }) {
  const [width, setWidth] = React.useState(0);
  const [isCompact, setIsCompact] = React.useState(false);
  const expandedWidth = React.useMemo(() => width * 1.38, [width]);

  React.useEffect(() => {
    const handleResize = () => {
      // 640px is the breakpoint for md
      if (window.innerWidth < 640) {
        setIsCompact(true);
        return setWidth(window.innerWidth / 2 - 64);
      }

      setWidth(window.innerWidth / photos.length - 4 * photos.length);
    };

    window.addEventListener("resize", handleResize);
    handleResize();

    return () => {
      window.removeEventListener("resize", handleResize);
    };
  }, [photos.length]);

  return (
    <motion.div
      className="mt-16 sm:mt-20"
      initial={{ opacity: 0, scale: 0.925, y: 16 }}
      animate={{ opacity: 1, scale: 1, y: 0 }}
      transition={{
        delay: 0.5,
        type: "spring",
      }}
    >
      <Marquee>
        <div className="-my-4 flex w-full snap-x snap-proximity scroll-pl-4 justify-start gap-4 overflow-x-auto p-4 sm:gap-6 md:justify-center md:overflow-x-hidden md:px-0">
          {photos.map((image, idx) => (
            <motion.div
              key={idx}
              className={cn(
                "relative h-40 flex-none shrink-0 snap-start overflow-hidden  rounded-xl bg-zinc-100 ring-2 ring-lime-800/20 dark:bg-zinc-800 dark:ring-lime-300/10 md:h-72",
              )}
              animate={{
                width,
                opacity: isCompact ? 1 : 0.85,
                filter: isCompact ? "grayscale(0)" : "grayscale(0.5)",
                rotate: idx % 2 === 0 ? 2 : -1,
              }}
              whileHover={
                isCompact
                  ? {}
                  : {
                      width: expandedWidth,
                      opacity: 1,
                      filter: "grayscale(0)",
                    }
              }
              layout
            >
              <img
                src={image}
                alt=""
                width={500}
                height={500}
                sizes="(min-width: 640px) 18rem, 11rem"
                className="pointer-events-none absolute inset-0 h-full w-full select-none object-cover"
              />
            </motion.div>
          ))}
        </div>
      </Marquee>
    </motion.div>
  );
}
</file>

<file path="registry/default/blocks/portofolio-01/components/footer.tsx">
import Link from "next/link";

const links = [
  { label: "GitHub", href: "https://github.com/BroKarim" },
  { label: "X", href: "https://x.com/BroKariim" },
  { label: "Thread", href: "https://www.threads.net/@brokariim" },
];

export const Footer = () => {
  return (
    <div className="my-20">
      <div className="text-fg-muted flex flex-col gap-2 border-t py-6 text-sm">
        <div className="text-fg-muted flex items-center gap-3 text-sm">
          <div>Find me on:</div>
          {links.map((link) => (
            <Link key={link.label} href={link.href} target="_blank">
              {link.label}
            </Link>
          ))}
        </div>
        <div>Or mail me at brokariim@gmail.com</div>
      </div>
    </div>
  );
};
</file>

<file path="registry/default/blocks/portofolio-02/components/bio-detail.tsx">
import { Prose } from "./typhography";
import { USER } from "../data/USER";

import { Panel, PanelContent, PanelHeader, PanelTitle } from "./panel";

export function BioDetails() {
  return (
    <Panel id="about" className="scroll-mt-[4.75rem]">
      <PanelHeader>
        <PanelTitle>About</PanelTitle>
      </PanelHeader>

      <PanelContent>
        <Prose className="text-primary">{USER.about}</Prose>
      </PanelContent>
    </Panel>
  );
}
</file>

<file path="registry/default/blocks/portofolio-02/components/bio.tsx">
import { USER } from "../data/USER";
import Image from "next/image";
import { BadgeCheck } from "lucide-react";

export function Bio() {
  return (
    <header className="relative mt-2">
      <div className=" border-grid flex items-center border-x">
        <div className="border-grid shrink-0 border-r">
          <div className="mx-[2px] my-[3px]">
            <AvatarBio
              size={128}
              className="size-32 rounded-full ring-1 ring-border ring-offset-2 ring-offset-background sm:size-40"
            />
          </div>
        </div>

        <div className="flex flex-1 flex-col">
          <div className="border-grid border-t">
            <h1 className="font-heading flex items-center pl-4 text-3xl font-medium">
              {USER.displayName}
              &nbsp;
              <BadgeCheck />
            </h1>
          </div>
        </div>
      </div>
    </header>
  );
}

function AvatarBio({
  className,
  size = 128,
  priority = true,
}: {
  className?: string;
  size?: number;
  priority?: boolean;
}) {
  return (
    <Image
      className={className}
      alt={`${USER.displayName}'s avatar`}
      src="https://github.com/BroKarim.png"
      width={size}
      height={size}
      quality={100}
      priority={priority}
    />
  );
}
</file>

<file path="registry/default/blocks/portofolio-02/data/career-path.ts">
import { CareerPath } from "../type/career-path";

export const EXPERIENCES: CareerPath[] = [
  {
    company: "TechNova Solutions",
    positions: [
      {
        id: "1a2b3c4d-1234-5678-9abc-def123456789",
        title: "Full Stack Developer",
        year: "03.2020 - 09.2022",
        employmentType: "Full-time",
        icon: "code",
        description:
          "- Designed and implemented scalable backend APIs using Node.js and Express.\n- Built dynamic, user-friendly dashboards with React and Material-UI.\n- Enhanced system performance by refactoring legacy code.\n- Collaborated with cross-functional teams to define and meet project goals.\n- Ensured integration and seamless deployment in CI/CD pipelines.",
        skills: [
          "Node.js",
          "Express",
          "React",
          "Material-UI",
          "MongoDB",
          "Docker",
          "CI/CD",
          "Team Collaboration",
          "Problem-solving",
        ],
        expanded: true,
      },
      {
        id: "9f8e7d6c-5432-1abc-def4-567890abcdef",
        title: "Tech Lead",
        year: "09.2021 - 09.2022",
        employmentType: "Part-time",
        icon: "code",
        description:
          "- Led a team of 6 developers to deliver a SaaS platform within tight deadlines.\n- Conducted code reviews to ensure high-quality deliverables.\n- Provided mentorship and guided junior developers in problem-solving.\n- Managed project timelines and resource allocation effectively.",
        skills: [
          "Leadership",
          "Mentorship",
          "Team Management",
          "Code Review",
          "Agile",
          "Project Planning",
        ],
      },
    ],
    current: false,
  },
  {
    company: "PixelForge Studios",
    positions: [
      {
        id: "abcd1234-ef56-7890-ghij-klmnopqrstuv",
        title: "UI/UX Designer",
        year: "02.2018 - 01.2020",
        employmentType: "Contract",
        icon: "design",
        description:
          "- Designed wireframes and prototypes for web and mobile applications.\n- Conducted user research and usability testing to refine interface designs.\n- Collaborated with developers to ensure seamless implementation.\n- Developed design systems for consistency across projects.",
        skills: [
          "Figma",
          "Sketch",
          "User Research",
          "Prototyping",
          "Design Systems",
          "Usability Testing",
        ],
      },
      {
        id: "1234abcd-5678-efgh-ijkl-890mnopqrst",
        title: "Creative Consultant",
        year: "01.2019 - 12.2019",
        employmentType: "Freelance",
        icon: "design",
        description:
          "- Provided creative direction for branding projects and marketing campaigns.\n- Developed visual identities that enhanced client brand recognition.\n- Collaborated with clients to define project goals and deliverables.",
        skills: [
          "Creativity",
          "Visual Identity",
          "Client Relations",
          "Branding",
          "Marketing Design",
        ],
      },
    ],
    current: false,
  },
  {
    company: "Innov8 AI Labs",
    positions: [
      {
        id: "a1b2c3d4-e5f6-7890-ghij-klmnopqrstuv",
        title: "Machine Learning Engineer",
        year: "11.2020 - present",
        employmentType: "Full-time",
        icon: "idea",
        description:
          "- Built predictive models using TensorFlow and PyTorch.\n- Developed and deployed scalable machine learning pipelines in production.\n- Worked on NLP-based applications, including chatbots and sentiment analysis.\n- Conducted data preprocessing and feature engineering to improve accuracy.",
        skills: [
          "TensorFlow",
          "PyTorch",
          "NLP",
          "Python",
          "Data Science",
          "AI Pipelines",
          "Feature Engineering",
          "Problem-solving",
        ],
        expanded: true,
      },
      {
        id: "mnopqrst-1234-abcd-5678-efghijkl890",
        title: "Research Scientist",
        year: "11.2021 - present",
        employmentType: "Part-time",
        icon: "idea",
        description:
          "- Conducted cutting-edge research in deep learning and computer vision.\n- Published papers in renowned AI conferences and journals.\n- Collaborated with universities to explore new advancements in AI technology.",
        skills: [
          "Deep Learning",
          "Computer Vision",
          "Research",
          "Publication",
          "Collaboration",
        ],
      },
    ],
    current: true,
  },
];
</file>

<file path="registry/default/blocks/tool-01/components/banner.tsx">
import { ButtonColorful } from "./colorful-button";
import { Installer } from "./installer";
import { Button } from "@/components/ui/button";

export const Banner = () => (
  <section className="bg-dashed flex flex-col items-center justify-center gap-6 px-4 py-16 sm:px-16 sm:py-24">
    <h1 className="max-w-3xl text-center text-4xl font-bold leading-tight tracking-tighter sm:text-5xl md:max-w-4xl md:text-6xl lg:leading-[1.1]">
      Build Your SaaS App Faster and Smarter
    </h1>
    <p className="max-w-xl text-center text-neutral-600 dark:text-neutral-400 md:max-w-2xl md:text-lg">
      A monorepo template designed to have everything you need to build your new
      SaaS app as thoroughly as possible. Free and open source, forever.
    </p>
    <div className="mx-auto flex w-full max-w-xl flex-col items-center gap-4 sm:flex-row">
      <Installer />
      <Button>Get started</Button>
    </div>
  </section>
);
</file>

<file path="registry/default/blocks/tool-01/components/installer.tsx">
"use client";

import { CopyIcon } from "lucide-react";
import { toast } from "sonner";

const command = "npx active@latest init";

export const Installer = () => {
  const handleCopy = () => {
    navigator.clipboard.writeText(command);
    toast.success("Copied to clipboard");
  };

  return (
    <div className="flex h-10 w-full items-center justify-center gap-2 whitespace-nowrap rounded-md border bg-white px-4 py-2 text-sm text-neutral-950 shadow-sm dark:bg-neutral-950 dark:text-white">
      <p className="pointer-events-none shrink-0 select-none text-neutral-500 dark:text-neutral-400">
        $
      </p>
      <div className="flex-1 truncate text-left font-mono">{command}</div>
      <div className="flex shrink-0 items-center gap-2">
        <button type="button" aria-label="Copy" onClick={handleCopy}>
          <CopyIcon
            size={14}
            className="text-neutral-500 dark:text-neutral-400"
          />
        </button>
      </div>
    </div>
  );
};
</file>

<file path="registry/default/blocks/tool-01/components/open-source.tsx">
import { StarIcon } from "lucide-react";
import { Avatar, AvatarImage } from "@/components/ui/avatar";

export const OpenSource = async () => {
  return (
    <div className="flex h-full flex-col items-start justify-between gap-4 p-8">
      <div className="flex flex-col gap-4">
        <div className="flex items-center gap-2 text-neutral-500">
          <StarIcon size={14} />
          <small>Open source</small>
        </div>
        <p className="text-xl font-semibold tracking-tight">
          Active as earned recognition from the developer community with{" "}
          <span className="text-orange-600">4000</span> stars,{" "}
          <span className="text-orange-600">1200</span> forks, and{" "}
          <span className="text-orange-600">40</span> open issues and{" "}
          <span className="text-orange-600">20</span> contributors.
        </p>
        <div className="flex -space-x-3 *:ring *:ring-background">
          <Avatar>
            <AvatarImage src="https://mynaui.com/avatars/avatar-01.jpg" />
          </Avatar>
          <Avatar>
            <AvatarImage src="https://mynaui.com//avatars/avatar-02.jpg" />
          </Avatar>
          <Avatar>
            <AvatarImage src="https://mynaui.com//avatars/avatar-03.jpg" />
          </Avatar>
        </div>
      </div>
      <a
        href="https://github.com/haydenbleasel/next-forge"
        className="inline-flex rounded-md border bg-white px-4 py-2 text-sm font-medium shadow-sm"
      >
        Browse the source code
      </a>
    </div>
  );
};
</file>

<file path="registry/default/blocks/tool-01/components/review.tsx">
import { MessageCircleIcon } from "lucide-react";
import Image from "next/image";

import { Icons } from "@/components/icons";

export const Review = () => (
  <section className="flex flex-col gap-8 p-8">
    <div className="flex items-center gap-2 text-neutral-500">
      <MessageCircleIcon size={14} />
      <small>Nice words</small>
    </div>
    <p className="text-xl font-semibold tracking-tight sm:text-2xl">
      &ldquo;Active has completely transformed how I approach SaaS development.
      The all-in-one setup saves so much time, and the fact that it's free and
      open source is just the cherry on top. Highly recommend for any devs
      looking to streamline their workflows!.&rdquo;
    </p>
    <div className="space-between flex items-center justify-between gap-4">
      <div className="flex items-center gap-2">
        <div className="flex items-center -space-x-1">
          <Image
            className="rounded-full ring-1 ring-background"
            src="https://github.com/BroKarim.png"
            width={24}
            height={24}
            alt="Avatar 01"
          />
        </div>
        <p className="text-sm text-neutral-500">
          <span className="font-medium">BroKarim</span>, CEO of Nothing
        </p>
      </div>
      <a
        href="https://x.com/rauchg/status/1853171412766466119"
        target="_blank"
        rel="noopener noreferrer"
      >
        <Icons.Xicon />
      </a>
    </div>
  </section>
);
</file>

<file path="registry/default/lib/utils.ts">
import { clsx, type ClassValue } from "clsx";
import { twMerge } from "tailwind-merge";

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs));
}
</file>

<file path="registry/registry-hooks.ts">
import { type Registry } from "@/registry/schema";

export const hooks: Registry["items"] = [
  {
    name: "use-mobile",
    type: "registry:hook",
    files: [
      {
        path: "hooks/use-mobile.tsx",
        type: "registry:hook",
      },
    ],
  },
  {
    name: "use-toast",
    type: "registry:hook",
    files: [
      {
        path: "hooks/use-toast.ts",
        type: "registry:hook",
      },
    ],
  },
];
</file>

<file path="registry/registry-lib.ts">
import { type Registry } from "@/registry/schema";

export const lib: Registry["items"] = [
  {
    name: "utils",
    type: "registry:lib",
    dependencies: ["clsx", "tailwind-merge"],
    files: [
      {
        path: "lib/utils.ts",
        type: "registry:lib",
      },
    ],
  },
];
</file>

<file path="registry/registry-themes.ts">
import { type Registry } from "./schema";

export const themes: Registry["items"] = [
  {
    name: "theme-daylight",
    type: "registry:theme",
    cssVars: {
      light: {
        background: "36 39% 88%",
        foreground: "36 45% 15%",
        primary: "36 45% 70%",
        "primary-foreground": "36 45% 11%",
        secondary: "40 35% 77%",
        "secondary-foreground": "36 45% 25%",
        accent: "36 64% 57%",
        "accent-foreground": "36 72% 17%",
        destructive: "0 84% 37%",
        "destructive-foreground": "0 0% 98%",
        muted: "36 33% 75%",
        "muted-foreground": "36 45% 25%",
        card: "36 46% 82%",
        "card-foreground": "36 45% 20%",
        popover: "0 0% 100%",
        "popover-foreground": "240 10% 3.9%",
        border: "36 45% 60%",
        input: "36 45% 60%",
        ring: "36 45% 30%",
        "chart-1": "25 34% 28%",
        "chart-2": "26 36% 34%",
        "chart-3": "28 40% 40%",
        "chart-4": "31 41% 48%",
        "chart-5": "35 43% 53%",
      },
      dark: {
        background: "36 39% 88%",
        foreground: "36 45% 15%",
        primary: "36 45% 70%",
        "primary-foreground": "36 45% 11%",
        secondary: "40 35% 77%",
        "secondary-foreground": "36 45% 25%",
        accent: "36 64% 57%",
        "accent-foreground": "36 72% 17%",
        destructive: "0 84% 37%",
        "destructive-foreground": "0 0% 98%",
        muted: "36 33% 75%",
        "muted-foreground": "36 45% 25%",
        card: "36 46% 82%",
        "card-foreground": "36 45% 20%",
        popover: "0 0% 100%",
        "popover-foreground": "240 10% 3.9%",
        border: "36 45% 60%",
        input: "36 45% 60%",
        ring: "36 45% 30%",
        "chart-1": "25 34% 28%",
        "chart-2": "26 36% 34%",
        "chart-3": "28 40% 40%",
        "chart-4": "31 41% 48%",
        "chart-5": "35 43% 53%",
      },
    },
  },
  {
    name: "theme-midnight",
    type: "registry:theme",
    cssVars: {
      light: {
        background: "240 5% 6%",
        foreground: "60 5% 90%",
        primary: "240 0% 90%",
        "primary-foreground": "60 0% 0%",
        secondary: "240 4% 15%",
        "secondary-foreground": "60 5% 85%",
        accent: "240 0% 13%",
        "accent-foreground": "60 0% 100%",
        destructive: "0 60% 50%",
        "destructive-foreground": "0 0% 98%",
        muted: "240 5% 25%",
        "muted-foreground": "60 5% 85%",
        card: "240 4% 10%",
        "card-foreground": "60 5% 90%",
        popover: "240 5% 15%",
        "popover-foreground": "60 5% 85%",
        border: "240 6% 20%",
        input: "240 6% 20%",
        ring: "240 5% 90%",
        "chart-1": "359 2% 90%",
        "chart-2": "240 1% 74%",
        "chart-3": "240 1% 58%",
        "chart-4": "240 1% 42%",
        "chart-5": "240 2% 26%",
      },
      dark: {
        background: "240 5% 6%",
        foreground: "60 5% 90%",
        primary: "240 0% 90%",
        "primary-foreground": "60 0% 0%",
        secondary: "240 4% 15%",
        "secondary-foreground": "60 5% 85%",
        accent: "240 0% 13%",
        "accent-foreground": "60 0% 100%",
        destructive: "0 60% 50%",
        "destructive-foreground": "0 0% 98%",
        muted: "240 5% 25%",
        "muted-foreground": "60 5% 85%",
        card: "240 4% 10%",
        "card-foreground": "60 5% 90%",
        popover: "240 5% 15%",
        "popover-foreground": "60 5% 85%",
        border: "240 6% 20%",
        input: "240 6% 20%",
        ring: "240 5% 90%",
        "chart-1": "359 2% 90%",
        "chart-2": "240 1% 74%",
        "chart-3": "240 1% 58%",
        "chart-4": "240 1% 42%",
        "chart-5": "240 2% 26%",
      },
    },
  },
  {
    name: "theme-emerald",
    type: "registry:theme",
    cssVars: {
      light: {
        background: "0 0% 100%",
        foreground: "240 10% 3.9%",
        card: "0 0% 100%",
        "card-foreground": "240 10% 3.9%",
        popover: "0 0% 100%",
        "popover-foreground": "240 10% 3.9%",
        primary: "142 86% 28%",
        "primary-foreground": "356 29% 98%",
        secondary: "240 4.8% 95.9%",
        "secondary-foreground": "240 5.9% 10%",
        muted: "240 4.8% 95.9%",
        "muted-foreground": "240 3.8% 45%",
        accent: "240 4.8% 95.9%",
        "accent-foreground": "240 5.9% 10%",
        destructive: "0 72% 51%",
        "destructive-foreground": "0 0% 98%",
        border: "240 5.9% 90%",
        input: "240 5.9% 90%",
        ring: "142 86% 28%",
        "chart-1": "139 65% 20%",
        "chart-2": "140 74% 44%",
        "chart-3": "142 88% 28%",
        "chart-4": "137 55% 15%",
        "chart-5": "141 40% 9%",
      },
      dark: {
        background: "240 10% 3.9%",
        foreground: "0 0% 98%",
        card: "240 10% 3.9%",
        "card-foreground": "0 0% 98%",
        popover: "240 10% 3.9%",
        "popover-foreground": "0 0% 98%",
        primary: "142 86% 28%",
        "primary-foreground": "356 29% 98%",
        secondary: "240 4.8% 95.9%",
        "secondary-foreground": "240 5.9% 10%",
        muted: "240 3.7% 15.9%",
        "muted-foreground": "240 5% 64.9%",
        accent: "240 3.7% 15.9%",
        "accent-foreground": "0 0% 98%",
        destructive: "0 72% 51%",
        "destructive-foreground": "0 0% 98%",
        border: "240 3.7% 15.9%",
        input: "240 3.7% 15.9%",
        ring: "142 86% 28%",
        "chart-1": "142 88% 28%",
        "chart-2": "139 65% 20%",
        "chart-3": "140 74% 24%",
        "chart-4": "137 55% 15%",
        "chart-5": "141 40% 9%",
      },
    },
  },
];
</file>

<file path="registry/registry-ui.ts">
import { type Registry } from "@/registry/schema";

export const ui: Registry["items"] = [
  {
    name: "accordion",
    type: "registry:ui",
    dependencies: ["@radix-ui/react-accordion"],
    files: [
      {
        path: "ui/accordion.tsx",
        type: "registry:ui",
      },
    ],
    tailwind: {
      config: {
        theme: {
          extend: {
            keyframes: {
              "accordion-down": {
                from: { height: "0" },
                to: { height: "var(--radix-accordion-content-height)" },
              },
              "accordion-up": {
                from: { height: "var(--radix-accordion-content-height)" },
                to: { height: "0" },
              },
            },
            animation: {
              "accordion-down": "accordion-down 0.2s ease-out",
              "accordion-up": "accordion-up 0.2s ease-out",
            },
          },
        },
      },
    },
  },
  {
    name: "alert",
    type: "registry:ui",
    files: [
      {
        path: "ui/alert.tsx",
        type: "registry:ui",
      },
    ],
  },

  {
    name: "avatar",
    type: "registry:ui",
    dependencies: ["@radix-ui/react-avatar"],
    files: [
      {
        path: "ui/avatar.tsx",
        type: "registry:ui",
      },
    ],
  },
  {
    name: "badge",
    type: "registry:ui",
    dependencies: ["@radix-ui/react-slot"],
    files: [
      {
        path: "ui/badge.tsx",
        type: "registry:ui",
      },
    ],
  },
  {
    name: "border-beam",
    type: "registry:ui",
    dependencies: ["@radix-ui/react-slot"],
    files: [
      {
        path: "ui/border-beam.tsx",
        type: "registry:ui",
      },
    ],
  },
  {
    name: "button",
    type: "registry:ui",
    dependencies: ["@radix-ui/react-slot"],
    files: [
      {
        path: "ui/button.tsx",
        type: "registry:ui",
      },
    ],
  },
  {
    name: "texture-button",
    type: "registry:ui",
    dependencies: ["@radix-ui/react-slot"],
    files: [
      {
        path: "ui/texture-button.tsx",
        type: "registry:ui",
      },
    ],
  },
  {
    name: "calendar",
    type: "registry:ui",
    dependencies: ["react-day-picker@8.10.1", "date-fns"],
    registryDependencies: ["button"],
    files: [
      {
        path: "ui/calendar.tsx",
        type: "registry:ui",
      },
    ],
  },
  {
    name: "card",
    type: "registry:ui",
    files: [
      {
        path: "ui/card.tsx",
        type: "registry:ui",
      },
    ],
  },

  {
    name: "chart",
    type: "registry:ui",
    files: [
      {
        path: "ui/chart.tsx",
        type: "registry:ui",
      },
    ],
    registryDependencies: ["card"],
    dependencies: ["recharts", "lucide-react"],
  },

  {
    name: "collapsible",
    type: "registry:ui",
    dependencies: ["@radix-ui/react-collapsible"],
    files: [
      {
        path: "ui/collapsible.tsx",
        type: "registry:ui",
      },
    ],
  },
  {
    name: "command",
    type: "registry:ui",
    dependencies: ["cmdk"],
    registryDependencies: ["dialog"],
    files: [
      {
        path: "ui/command.tsx",
        type: "registry:ui",
      },
    ],
  },

  {
    name: "dialog",
    type: "registry:ui",
    dependencies: ["@radix-ui/react-dialog"],
    files: [
      {
        path: "ui/dialog.tsx",
        type: "registry:ui",
      },
    ],
  },
  {
    name: "drawer",
    type: "registry:ui",
    dependencies: ["vaul", "@radix-ui/react-dialog"],
    files: [
      {
        path: "ui/drawer.tsx",
        type: "registry:ui",
      },
    ],
  },
  {
    name: "dropdown-menu",
    type: "registry:ui",
    dependencies: ["@radix-ui/react-dropdown-menu"],
    files: [
      {
        path: "ui/dropdown-menu.tsx",
        type: "registry:ui",
      },
    ],
  },
  {
    name: "form",
    type: "registry:ui",
    dependencies: [
      "@radix-ui/react-label",
      "@radix-ui/react-slot",
      "@hookform/resolvers",
      "zod",
      "react-hook-form",
    ],
    registryDependencies: ["button", "label"],
    files: [
      {
        path: "ui/form.tsx",
        type: "registry:ui",
      },
    ],
  },
  {
    name: "hover-card",
    type: "registry:ui",
    dependencies: ["@radix-ui/react-hover-card"],
    files: [
      {
        path: "ui/hover-card.tsx",
        type: "registry:ui",
      },
    ],
  },
  {
    name: "icon-button",
    type: "registry:ui",
    dependencies: ["@radix-ui/react-icon-button"],
    files: [
      {
        path: "ui/icon-button.tsx",
        type: "registry:ui",
      },
    ],
  },
  {
    name: "input",
    type: "registry:ui",
    files: [
      {
        path: "ui/input.tsx",
        type: "registry:ui",
      },
    ],
  },

  {
    name: "label",
    type: "registry:ui",
    dependencies: ["@radix-ui/react-label"],
    files: [
      {
        path: "ui/label.tsx",
        type: "registry:ui",
      },
    ],
  },

  {
    name: "navigation-menu",
    type: "registry:ui",
    dependencies: ["@radix-ui/react-navigation-menu"],
    files: [
      {
        path: "ui/navigation-menu.tsx",
        type: "registry:ui",
      },
    ],
  },

  {
    name: "popover",
    type: "registry:ui",
    dependencies: ["@radix-ui/react-popover"],
    files: [
      {
        path: "ui/popover.tsx",
        type: "registry:ui",
      },
    ],
  },

  {
    name: "resizable",
    type: "registry:ui",
    dependencies: ["react-resizable-panels"],
    files: [
      {
        path: "ui/resizable.tsx",
        type: "registry:ui",
      },
    ],
  },
  {
    name: "scroll-area",
    type: "registry:ui",
    dependencies: ["@radix-ui/react-scroll-area"],
    files: [
      {
        path: "ui/scroll-area.tsx",
        type: "registry:ui",
      },
    ],
  },
  {
    name: "select",
    type: "registry:ui",
    dependencies: ["@radix-ui/react-select"],
    files: [
      {
        path: "ui/select.tsx",
        type: "registry:ui",
      },
    ],
  },
  {
    name: "separator",
    type: "registry:ui",
    dependencies: ["@radix-ui/react-separator"],
    files: [
      {
        path: "ui/separator.tsx",
        type: "registry:ui",
      },
    ],
  },
  {
    name: "sheet",
    type: "registry:ui",
    dependencies: ["@radix-ui/react-dialog"],
    files: [
      {
        path: "ui/sheet.tsx",
        type: "registry:ui",
      },
    ],
  },
  {
    name: "sidebar",
    type: "registry:ui",
    dependencies: [
      "@radix-ui/react-slot",
      "class-variance-authority",
      "lucide-react",
    ],
    registryDependencies: [
      "button",
      "separator",
      "sheet",
      "tooltip",
      "input",
      "use-mobile",
      "skeleton",
    ],
    files: [
      {
        path: "ui/sidebar.tsx",
        type: "registry:ui",
      },
    ],
    tailwind: {
      config: {
        theme: {
          extend: {
            colors: {
              sidebar: {
                DEFAULT: "hsl(var(--sidebar-background))",
                foreground: "hsl(var(--sidebar-foreground))",
                primary: "hsl(var(--sidebar-primary))",
                "primary-foreground": "hsl(var(--sidebar-primary-foreground))",
                accent: "hsl(var(--sidebar-accent))",
                "accent-foreground": "hsl(var(--sidebar-accent-foreground))",
                border: "hsl(var(--sidebar-border))",
                ring: "hsl(var(--sidebar-ring))",
              },
            },
          },
        },
      },
    },
    cssVars: {
      light: {
        "sidebar-background": "0 0% 98%",
        "sidebar-foreground": "240 5.3% 26.1%",
        "sidebar-primary": "240 5.9% 10%",
        "sidebar-primary-foreground": "0 0% 98%",
        "sidebar-accent": "240 4.8% 95.9%",
        "sidebar-accent-foreground": "240 5.9% 10%",
        "sidebar-border": "220 13% 91%",
        "sidebar-ring": "217.2 91.2% 59.8%",
      },
      dark: {
        "sidebar-background": "240 5.9% 10%",
        "sidebar-foreground": "240 4.8% 95.9%",
        "sidebar-primary": "224.3 76.3% 48%",
        "sidebar-primary-foreground": "0 0% 100%",
        "sidebar-accent": "240 3.7% 15.9%",
        "sidebar-accent-foreground": "240 4.8% 95.9%",
        "sidebar-border": "240 3.7% 15.9%",
        "sidebar-ring": "217.2 91.2% 59.8%",
      },
    },
  },
  {
    name: "skeleton",
    type: "registry:ui",
    files: [
      {
        path: "ui/skeleton.tsx",
        type: "registry:ui",
      },
    ],
  },

  {
    name: "sonner",
    type: "registry:ui",
    dependencies: ["sonner", "next-themes"],
    files: [
      {
        path: "ui/sonner.tsx",
        type: "registry:ui",
      },
    ],
  },
  {
    name: "switch",
    type: "registry:ui",
    dependencies: ["@radix-ui/react-switch"],
    files: [
      {
        path: "ui/switch.tsx",
        type: "registry:ui",
      },
    ],
  },
  {
    name: "table",
    type: "registry:ui",
    files: [
      {
        path: "ui/table.tsx",
        type: "registry:ui",
      },
    ],
  },
  {
    name: "tabs",
    type: "registry:ui",
    dependencies: ["@radix-ui/react-tabs"],
    files: [
      {
        path: "ui/tabs.tsx",
        type: "registry:ui",
      },
    ],
  },

  {
    name: "toast",
    type: "registry:ui",
    dependencies: ["@radix-ui/react-toast"],
    files: [
      {
        path: "ui/toast.tsx",
        type: "registry:ui",
      },
      {
        path: "hooks/use-toast.ts",
        type: "registry:hook",
      },
      {
        path: "ui/toaster.tsx",
        type: "registry:ui",
      },
    ],
  },
  {
    name: "toaster",
    type: "registry:ui",
    dependencies: ["@radix-ui/react-toast"],
    files: [
      {
        path: "ui/toast.tsx",
        type: "registry:ui",
      },
      {
        path: "hooks/use-toast.ts",
        type: "registry:hook",
      },
      {
        path: "ui/toaster.tsx",
        type: "registry:ui",
      },
    ],
  },
  {
    name: "toggle",
    type: "registry:ui",
    dependencies: ["@radix-ui/react-toggle"],
    files: [
      {
        path: "ui/toggle.tsx",
        type: "registry:ui",
      },
    ],
  },
  {
    name: "toggle-group",
    type: "registry:ui",
    dependencies: ["@radix-ui/react-toggle-group"],
    registryDependencies: ["toggle"],
    files: [
      {
        path: "ui/toggle-group.tsx",
        type: "registry:ui",
      },
    ],
  },
  {
    name: "tooltip",
    type: "registry:ui",
    dependencies: ["@radix-ui/react-tooltip"],
    files: [
      {
        path: "ui/tooltip.tsx",
        type: "registry:ui",
      },
    ],
  },
];
</file>

<file path="styles/mdx.css">
[data-theme="light"] {
  display: block;
}

[data-theme="dark"] {
  display: none;
}

.dark [data-theme="light"] {
  display: none;
}

.dark [data-theme="dark"] {
  display: block;
}

[data-rehype-pretty-code-fragment] {
  @apply relative text-white;
}

[data-rehype-pretty-code-figure] {
  @apply relative text-white;
}

[data-rehype-pretty-code-figure] code {
  @apply grid min-w-full break-words rounded-none border-0 bg-transparent p-0;
  counter-reset: line;
  box-decoration-break: clone;
}

[data-rehype-pretty-code-figure] [data-line] {
  @apply px-4 min-h-[1rem] py-0.5 w-full inline-block;
}

[data-rehype-pretty-code-figure] [data-line-numbers] .line {
  @apply px-2;
}

[data-rehype-pretty-code-figure] [data-line-numbers] > [data-line]::before {
  @apply text-zinc-50/40 text-xs;
  counter-increment: line;
  content: counter(line);
  display: inline-block;
  width: 1.8rem;
  margin-right: 1.4rem;
  text-align: right;
}

[data-rehype-pretty-code-figure] .line--highlighted {
  @apply bg-zinc-700/50;
}

[data-rehype-pretty-code-figure] .line-highlighted span {
  @apply relative;
}

[data-rehype-pretty-code-figure] .word--highlighted {
  @apply rounded-md bg-zinc-700/50 border-zinc-700/70 p-1;
}

.dark [data-rehype-pretty-code-figure] .word--highlighted {
  @apply bg-zinc-900;
}

[data-rehype-pretty-code-title] {
  @apply mt-2 pt-6 px-4 text-sm font-medium text-foreground;
}

[data-rehype-pretty-code-title] + pre {
  @apply mt-2;
}
/* frafmeng */
[data-rehype-pretty-code-fragment] {
  @apply relative text-white;
}

[data-rehype-pretty-code-fragment] code {
  @apply grid min-w-full break-words rounded-none border-0 bg-transparent p-0;
  counter-reset: line;
  box-decoration-break: clone;
}

[data-rehype-pretty-code-fragment] .line {
  @apply px-4 min-h-[1rem] py-0.5 w-full inline-block;
}

[data-rehype-pretty-code-fragment] [data-line-numbers] .line {
  @apply px-2;
}

[data-rehype-pretty-code-fragment] [data-line-numbers] > .line::before {
  @apply text-zinc-50/40 text-xs;
  counter-increment: line;
  content: counter(line);
  display: inline-block;
  width: 1.8rem;
  margin-right: 1.4rem;
  text-align: right;
}

[data-rehype-pretty-code-fragment] .line--highlighted {
  @apply bg-zinc-700/50;
}

[data-rehype-pretty-code-fragment] .line-highlighted span {
  @apply relative;
}

[data-rehype-pretty-code-fragment] .word--highlighted {
  @apply rounded-md bg-zinc-700/50 border-zinc-700/70 p-1;
}

.dark [data-rehype-pretty-code-fragment] .word--highlighted {
  @apply bg-zinc-900;
}

.mdx > .steps:first-child > h3:first-child {
  @apply mt-0;
}

.steps > h3 {
  @apply mt-8 mb-4 text-base font-semibold;
}
</file>

<file path="utils/registry/themes-tweakcn.ts">
import { defaultDarkThemeStyles, defaultLightThemeStyles } from "@/config/theme-tweakcn";
import { ThemeStyleProps, ThemeStyles } from "@/types/theme-tweakcn";
import { colorFormatter } from "@/utils/color-converter";
import { getShadowMap } from "../shadow";
import { getPresetThemeStyles } from "../theme-preset-helper-tweakcn";


// Convert HSL color to the format expected by shadcn registry
const convertToRegistryColor = (color: string): string => {
  return colorFormatter(color, "oklch");
};

// Helper to get a value from either dark or light theme
const getThemeValue = (dark: ThemeStyleProps, light: ThemeStyleProps, key: keyof ThemeStyleProps): string => {
  return dark[key] || light[key] || "";
};

// Convert theme styles to registry format
const convertThemeStyles = (styles: ThemeStyles) => {
  const { light, dark } = styles;

  const convertTheme = (theme: ThemeStyleProps): ThemeStyleProps => {
    const result: ThemeStyleProps = theme;
    const convertColor = (color?: string) => convertToRegistryColor(color || "");

    // Convert all color values
    result.background = convertColor(theme.background);
    result.foreground = convertColor(theme.foreground);
    result.card = convertColor(theme.card);
    result["card-foreground"] = convertColor(theme["card-foreground"]);
    result.popover = convertColor(theme.popover);
    result["popover-foreground"] = convertColor(theme["popover-foreground"]);
    result.primary = convertColor(theme.primary);
    result["primary-foreground"] = convertColor(theme["primary-foreground"]);
    result.secondary = convertColor(theme.secondary);
    result["secondary-foreground"] = convertColor(theme["secondary-foreground"]);
    result.muted = convertColor(theme.muted);
    result["muted-foreground"] = convertColor(theme["muted-foreground"]);
    result.accent = convertColor(theme.accent);
    result["accent-foreground"] = convertColor(theme["accent-foreground"]);
    result.destructive = convertColor(theme.destructive);
    result["destructive-foreground"] = convertColor(theme["destructive-foreground"]);
    result.border = convertColor(theme.border);
    result.input = convertColor(theme.input);
    result.ring = convertColor(theme.ring);
    result["chart-1"] = convertColor(theme["chart-1"]);
    result["chart-2"] = convertColor(theme["chart-2"]);
    result["chart-3"] = convertColor(theme["chart-3"]);
    result["chart-4"] = convertColor(theme["chart-4"]);
    result["chart-5"] = convertColor(theme["chart-5"]);
    result.sidebar = convertColor(theme.sidebar);
    result["sidebar-foreground"] = convertColor(theme["sidebar-foreground"]);
    result["sidebar-primary"] = convertColor(theme["sidebar-primary"]);
    result["sidebar-primary-foreground"] = convertColor(theme["sidebar-primary-foreground"]);
    result["sidebar-accent"] = convertColor(theme["sidebar-accent"]);
    result["sidebar-accent-foreground"] = convertColor(theme["sidebar-accent-foreground"]);
    result["sidebar-border"] = convertColor(theme["sidebar-border"]);
    result["sidebar-ring"] = convertColor(theme["sidebar-ring"]);

    return result;
  };

  return {
    light: { ...defaultLightThemeStyles, ...convertTheme(light) },
    dark: { ...defaultDarkThemeStyles, ...convertTheme(dark) },
  };
};

export const generateThemeRegistryFromPreset = (name: string) => {
  const styles = getPresetThemeStyles(name);
  const registryItem = generateThemeRegistryItemFromStyles(name, styles);
  return registryItem;
};

export const generateThemeRegistryItemFromStyles = (name: string, themeStyles: ThemeStyles) => {
  const { light, dark } = convertThemeStyles(themeStyles);

  // Generate shadow variables for both light and dark modes
  const lightShadows = getShadowMap({
    styles: { light, dark },
    currentMode: "light",
  });
  const darkShadows = getShadowMap({
    styles: { light, dark },
    currentMode: "dark",
  });

  const registryItem = {
    $schema: "https://ui.shadcn.com/schema/registry-item.json",
    name,
    type: "registry:style",
    css: {
      "@layer base": {
        body: {
          "letter-spacing": "var(--tracking-normal)",
        },
      },
    },
    cssVars: {
      theme: {
        "font-sans": getThemeValue(dark, light, "font-sans") || "Inter, sans-serif",
        "font-mono": getThemeValue(dark, light, "font-mono") || "monospace",
        "font-serif": getThemeValue(dark, light, "font-serif") || "serif",
        radius: getThemeValue(dark, light, "radius") || "0.5rem",
        "tracking-tighter": "calc(var(--tracking-normal) - 0.05em)",
        "tracking-tight": "calc(var(--tracking-normal) - 0.025em)",
        "tracking-wide": "calc(var(--tracking-normal) + 0.025em)",
        "tracking-wider": "calc(var(--tracking-normal) + 0.05em)",
        "tracking-widest": "calc(var(--tracking-normal) + 0.1em)",
      },
      light: {
        ...light,
        "shadow-2xs": lightShadows["shadow-2xs"],
        "shadow-xs": lightShadows["shadow-xs"],
        "shadow-sm": lightShadows["shadow-sm"],
        shadow: lightShadows["shadow"],
        "shadow-md": lightShadows["shadow-md"],
        "shadow-lg": lightShadows["shadow-lg"],
        "shadow-xl": lightShadows["shadow-xl"],
        "shadow-2xl": lightShadows["shadow-2xl"],
        "tracking-normal": getThemeValue(dark, light, "letter-spacing") || "0em",
        spacing: getThemeValue(dark, light, "spacing") || "0.25rem",
      },
      dark: {
        ...dark,
        "shadow-2xs": darkShadows["shadow-2xs"],
        "shadow-xs": darkShadows["shadow-xs"],
        "shadow-sm": darkShadows["shadow-sm"],
        shadow: darkShadows["shadow"],
        "shadow-md": darkShadows["shadow-md"],
        "shadow-lg": darkShadows["shadow-lg"],
        "shadow-xl": darkShadows["shadow-xl"],
        "shadow-2xl": darkShadows["shadow-2xl"],
      },
    },
  };

  return registryItem;
};
</file>

<file path="tsconfig.json">
{
  "compilerOptions": {
    "baseUrl": ".",
    "target": "esnext",
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "forceConsistentCasingInFileNames": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "node",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "plugins": [
      {
        "name": "next"
      }
    ],
    "paths": {
      "@/*": ["./*"]
    }
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts"],
  "exclude": ["node_modules", "scripts/**/*", "scripts/build-registry.ts", "__registry__"]
}
</file>

<file path="__registry__/default/blocks/cta-01/page.tsx">
import { cn } from "@/lib/utils";
import { PostCard } from "./components/post-card";

export default function Page() {
  return (
    <>
      <div className="max-w-screen  bg-backgroud z-50 h-screen p-4  2xl:overflow-visible">
        <div className="3xl:gap-36 4xl:gap-40 xl:gap-18 3xl:py-32 4xl:py-36 isolate mx-auto flex w-full max-w-2xl flex-col gap-20 px-4 py-12 md:gap-24 md:px-6 md:py-16 lg:gap-28 lg:px-8 lg:py-20 xl:py-24 2xl:gap-32 2xl:py-28">
          <Section>
            <SectionHeading className="lg:text-center">
              Posts are the sweet spots between chat and docs
            </SectionHeading>
            <PostCard />
          </Section>
        </div>
      </div>
    </>
  );
}

export function Section({
  children,
  className,
}: {
  children: React.ReactNode;
  className?: string;
}) {
  return (
    <section className={cn("flex flex-col gap-4", className)}>
      {children}
    </section>
  );
}

export function SectionHeading({
  children,
  className,
}: {
  children: React.ReactNode;
  className?: string;
}) {
  return (
    <h3
      className={cn(
        "scroll-mt-20 text-balance text-[clamp(1.5rem,_3vw,_1.8rem)] font-semibold leading-[1.2] -tracking-[0.5px]",
        className,
      )}
    >
      {children}
    </h3>
  );
}
</file>

<file path="components/ui/sidebar.tsx">
"use client";

import * as React from "react";
import { Slot } from "@radix-ui/react-slot";
import { VariantProps, cva } from "class-variance-authority";
import { useIsMobile } from "@/hooks/use-mobile";
import { cn } from "@/lib/utils";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Separator } from "@/components/ui/separator";
import { Sheet, SheetContent, SheetDescription, SheetHeader, SheetTitle } from "@/components/ui/sheet";
import { Skeleton } from "@/components/ui/skeleton";
import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from "@/components/ui/tooltip";
import { ViewVerticalIcon } from "@radix-ui/react-icons";

const SIDEBAR_COOKIE_NAME = "sidebar_state";
const SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7;
const SIDEBAR_WIDTH = "16rem";
const SIDEBAR_WIDTH_MOBILE = "18rem";
const SIDEBAR_WIDTH_ICON = "3rem";
const SIDEBAR_KEYBOARD_SHORTCUT = "b";

type SidebarContext = {
  state: "expanded" | "collapsed";
  open: boolean;
  setOpen: (open: boolean) => void;
  openMobile: boolean;
  setOpenMobile: (open: boolean) => void;
  isMobile: boolean;
  toggleSidebar: () => void;
};

const SidebarContext = React.createContext<SidebarContext | null>(null);

function useSidebar() {
  const context = React.useContext(SidebarContext);
  if (!context) {
    throw new Error("useSidebar must be used within a SidebarProvider.");
  }

  return context;
}

const SidebarProvider = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & {
    defaultOpen?: boolean;
    open?: boolean;
    onOpenChange?: (open: boolean) => void;
  }
>(({ defaultOpen = true, open: openProp, onOpenChange: setOpenProp, className, style, children, ...props }, ref) => {
  const isMobile = useIsMobile();
  const [openMobile, setOpenMobile] = React.useState(false);

  // This is the internal state of the sidebar.
  // We use openProp and setOpenProp for control from outside the component.
  const [_open, _setOpen] = React.useState(defaultOpen);
  const open = openProp ?? _open;
  const setOpen = React.useCallback(
    (value: boolean | ((value: boolean) => boolean)) => {
      const openState = typeof value === "function" ? value(open) : value;
      if (setOpenProp) {
        setOpenProp(openState);
      } else {
        _setOpen(openState);
      }

      // This sets the cookie to keep the sidebar state.
      document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`;
    },
    [setOpenProp, open]
  );

  // Helper to toggle the sidebar.
  const toggleSidebar = React.useCallback(() => {
    return isMobile ? setOpenMobile((open) => !open) : setOpen((open) => !open);
  }, [isMobile, setOpen, setOpenMobile]);

  // Adds a keyboard shortcut to toggle the sidebar.
  React.useEffect(() => {
    const handleKeyDown = (event: KeyboardEvent) => {
      if (event.key === SIDEBAR_KEYBOARD_SHORTCUT && (event.metaKey || event.ctrlKey)) {
        event.preventDefault();
        toggleSidebar();
      }
    };

    window.addEventListener("keydown", handleKeyDown);
    return () => window.removeEventListener("keydown", handleKeyDown);
  }, [toggleSidebar]);

  // We add a state so that we can do data-state="expanded" or "collapsed".
  // This makes it easier to style the sidebar with Tailwind classes.
  const state = open ? "expanded" : "collapsed";

  const contextValue = React.useMemo<SidebarContext>(
    () => ({
      state,
      open,
      setOpen,
      isMobile,
      openMobile,
      setOpenMobile,
      toggleSidebar,
    }),
    [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]
  );

  return (
    <SidebarContext.Provider value={contextValue}>
      <TooltipProvider delayDuration={0}>
        <div
          style={
            {
              "--sidebar-width": SIDEBAR_WIDTH,
              "--sidebar-width-icon": SIDEBAR_WIDTH_ICON,
              ...style,
            } as React.CSSProperties
          }
          className={cn("group/sidebar-wrapper has-[[data-variant=inset]]:bg-sidebar flex min-h-svh w-full", className)}
          ref={ref}
          {...props}
        >
          {children}
        </div>
      </TooltipProvider>
    </SidebarContext.Provider>
  );
});
SidebarProvider.displayName = "SidebarProvider";

const Sidebar = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & {
    side?: "left" | "right";
    variant?: "sidebar" | "floating" | "inset";
    collapsible?: "offcanvas" | "icon" | "none";
  }
>(({ side = "left", variant = "sidebar", collapsible = "offcanvas", className, children, ...props }, ref) => {
  const { isMobile, state, openMobile, setOpenMobile } = useSidebar();

  if (collapsible === "none") {
    return (
      <div className={cn("bg-sidebar text-sidebar-foreground flex h-full w-[--sidebar-width] flex-col", className)} ref={ref} {...props}>
        {children}
      </div>
    );
  }

  if (isMobile) {
    return (
      <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>
        <SheetContent
          data-sidebar="sidebar"
          data-mobile="true"
          className="bg-sidebar text-sidebar-foreground w-[--sidebar-width] p-0 [&>button]:hidden"
          style={
            {
              "--sidebar-width": SIDEBAR_WIDTH_MOBILE,
            } as React.CSSProperties
          }
          side={side}
        >
          <SheetHeader className="sr-only">
            <SheetTitle>Sidebar</SheetTitle>
            <SheetDescription>Displays the mobile sidebar.</SheetDescription>
          </SheetHeader>
          <div className="flex h-full w-full flex-col">{children}</div>
        </SheetContent>
      </Sheet>
    );
  }

  return (
    <div ref={ref} className="text-sidebar-foreground group peer hidden md:block" data-state={state} data-collapsible={state === "collapsed" ? collapsible : ""} data-variant={variant} data-side={side}>
      {/* This is what handles the sidebar gap on desktop */}
      <div
        className={cn(
          "relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear",
          "group-data-[collapsible=offcanvas]:w-0",
          "group-data-[side=right]:rotate-180",
          variant === "floating" || variant === "inset" ? "group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]" : "group-data-[collapsible=icon]:w-[--sidebar-width-icon]"
        )}
      />
      <div
        className={cn(
          "fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex",
          side === "left" ? "left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]" : "right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]",
          // Adjust the padding for floating and inset variants.
          variant === "floating" || variant === "inset"
            ? "p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]"
            : "group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l",
          className
        )}
        {...props}
      >
        <div
          data-sidebar="sidebar"
          className="bg-sidebar group-data-[variant=floating]:border-sidebar-border flex h-full w-full flex-col group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:shadow"
        >
          {children}
        </div>
      </div>
    </div>
  );
});
Sidebar.displayName = "Sidebar";

const SidebarTrigger = React.forwardRef<React.ElementRef<typeof Button>, React.ComponentProps<typeof Button>>(({ className, onClick, ...props }, ref) => {
  const { toggleSidebar } = useSidebar();

  return (
    <Button
      ref={ref}
      data-sidebar="trigger"
      variant="ghost"
      size="icon"
      className={cn("h-7 w-7", className)}
      onClick={(event) => {
        onClick?.(event);
        toggleSidebar();
      }}
      {...props}
    >
      <ViewVerticalIcon />
      <span className="sr-only">Toggle Sidebar</span>
    </Button>
  );
});
SidebarTrigger.displayName = "SidebarTrigger";

const SidebarRail = React.forwardRef<HTMLButtonElement, React.ComponentProps<"button">>(({ className, ...props }, ref) => {
  const { toggleSidebar } = useSidebar();

  return (
    <button
      ref={ref}
      data-sidebar="rail"
      aria-label="Toggle Sidebar"
      tabIndex={-1}
      onClick={toggleSidebar}
      title="Toggle Sidebar"
      className={cn(
        "hover:after:bg-sidebar-border absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex",
        "[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize",
        "[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize",
        "group-data-[collapsible=offcanvas]:hover:bg-sidebar group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full",
        "[[data-side=left][data-collapsible=offcanvas]_&]:-right-2",
        "[[data-side=right][data-collapsible=offcanvas]_&]:-left-2",
        className
      )}
      {...props}
    />
  );
});
SidebarRail.displayName = "SidebarRail";

const SidebarInset = React.forwardRef<HTMLDivElement, React.ComponentProps<"main">>(({ className, ...props }, ref) => {
  return (
    <main
      ref={ref}
      className={cn(
        "relative flex w-full flex-1 flex-col bg-background",
        "md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow",
        className
      )}
      {...props}
    />
  );
});
SidebarInset.displayName = "SidebarInset";

const SidebarInput = React.forwardRef<React.ElementRef<typeof Input>, React.ComponentProps<typeof Input>>(({ className, ...props }, ref) => {
  return <Input ref={ref} data-sidebar="input" className={cn("focus-visible:ring-sidebar-ring h-8 w-full bg-background shadow-none focus-visible:ring-2", className)} {...props} />;
});
SidebarInput.displayName = "SidebarInput";

const SidebarHeader = React.forwardRef<HTMLDivElement, React.ComponentProps<"div">>(({ className, ...props }, ref) => {
  return <div ref={ref} data-sidebar="header" className={cn("flex flex-col gap-2 p-2", className)} {...props} />;
});
SidebarHeader.displayName = "SidebarHeader";

const SidebarFooter = React.forwardRef<HTMLDivElement, React.ComponentProps<"div">>(({ className, ...props }, ref) => {
  return <div ref={ref} data-sidebar="footer" className={cn("flex flex-col gap-2 p-2", className)} {...props} />;
});
SidebarFooter.displayName = "SidebarFooter";

const SidebarSeparator = React.forwardRef<React.ElementRef<typeof Separator>, React.ComponentProps<typeof Separator>>(({ className, ...props }, ref) => {
  return <Separator ref={ref} data-sidebar="separator" className={cn("bg-sidebar-border mx-2 w-auto", className)} {...props} />;
});
SidebarSeparator.displayName = "SidebarSeparator";

const SidebarContent = React.forwardRef<HTMLDivElement, React.ComponentProps<"div">>(({ className, ...props }, ref) => {
  return <div ref={ref} data-sidebar="content" className={cn("flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden", className)} {...props} />;
});
SidebarContent.displayName = "SidebarContent";

const SidebarGroup = React.forwardRef<HTMLDivElement, React.ComponentProps<"div">>(({ className, ...props }, ref) => {
  return <div ref={ref} data-sidebar="group" className={cn("relative flex w-full min-w-0 flex-col p-2", className)} {...props} />;
});
SidebarGroup.displayName = "SidebarGroup";

const SidebarGroupLabel = React.forwardRef<HTMLDivElement, React.ComponentProps<"div"> & { asChild?: boolean }>(({ className, asChild = false, ...props }, ref) => {
  const Comp = asChild ? Slot : "div";

  return (
    <Comp
      ref={ref as any}
      data-sidebar="group-label"
      className={cn(
        "text-sidebar-foreground/70 ring-sidebar-ring flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium outline-none transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0",
        "group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0",
        className
      )}
      {...props}
    />
  );
});
SidebarGroupLabel.displayName = "SidebarGroupLabel";

const SidebarGroupAction = React.forwardRef<HTMLButtonElement, React.ComponentProps<"button"> & { asChild?: boolean }>(({ className, asChild = false, ...props }, ref) => {
  const Comp = asChild ? Slot : "button";

  return (
    <Comp
      ref={ref as any}
      data-sidebar="group-action"
      className={cn(
        "text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-none transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0",
        // Increases the hit area of the button on mobile.
        "after:absolute after:-inset-2 after:md:hidden",
        "group-data-[collapsible=icon]:hidden",
        className
      )}
      {...props}
    />
  );
});
SidebarGroupAction.displayName = "SidebarGroupAction";

const SidebarGroupContent = React.forwardRef<HTMLDivElement, React.ComponentProps<"div">>(({ className, ...props }, ref) => <div ref={ref} data-sidebar="group-content" className={cn("w-full text-sm", className)} {...props} />);
SidebarGroupContent.displayName = "SidebarGroupContent";

const SidebarMenu = React.forwardRef<HTMLUListElement, React.ComponentProps<"ul">>(({ className, ...props }, ref) => <ul ref={ref} data-sidebar="menu" className={cn("flex w-full min-w-0 flex-col gap-1", className)} {...props} />);
SidebarMenu.displayName = "SidebarMenu";

const SidebarMenuItem = React.forwardRef<HTMLLIElement, React.ComponentProps<"li">>(({ className, ...props }, ref) => <li ref={ref} data-sidebar="menu-item" className={cn("group/menu-item relative", className)} {...props} />);
SidebarMenuItem.displayName = "SidebarMenuItem";

const sidebarMenuButtonVariants = cva(
  "peer/menu-button ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground active:bg-sidebar-accent active:text-sidebar-accent-foreground data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none transition-[width,height,padding] focus-visible:ring-2 disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:font-medium group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0",
  {
    variants: {
      variant: {
        default: "hover:bg-sidebar-accent hover:text-sidebar-accent-foreground",
        outline: "hover:bg-sidebar-accent hover:text-sidebar-accent-foreground bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]",
      },
      size: {
        default: "h-8 text-sm",
        sm: "h-7 text-xs",
        lg: "h-12 text-sm group-data-[collapsible=icon]:!p-0",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
);

const SidebarMenuButton = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<"button"> & {
    asChild?: boolean;
    isActive?: boolean;
    tooltip?: string | React.ComponentProps<typeof TooltipContent>;
  } & VariantProps<typeof sidebarMenuButtonVariants>
>(({ asChild = false, isActive = false, variant = "default", size = "default", tooltip, className, ...props }, ref) => {
  const Comp = asChild ? Slot : "button";
  const { isMobile, state } = useSidebar();

  const button = <Comp ref={ref as any} data-sidebar="menu-button" data-size={size} data-active={isActive} className={cn(sidebarMenuButtonVariants({ variant, size }), className)} {...props} />;

  if (!tooltip) {
    return button;
  }

  if (typeof tooltip === "string") {
    tooltip = {
      children: tooltip,
    };
  }

  return (
    <Tooltip>
      <TooltipTrigger asChild>{button}</TooltipTrigger>
      <TooltipContent side="right" align="center" hidden={state !== "collapsed" || isMobile} {...tooltip} />
    </Tooltip>
  );
});
SidebarMenuButton.displayName = "SidebarMenuButton";

const SidebarMenuAction = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<"button"> & {
    asChild?: boolean;
    showOnHover?: boolean;
  }
>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {
  const Comp = asChild ? Slot : "button";

  return (
    <Comp
      ref={ref as any}
      data-sidebar="menu-action"
      className={cn(
        "text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground peer-hover/menu-button:text-sidebar-accent-foreground absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-none transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0",
        // Increases the hit area of the button on mobile.
        "after:absolute after:-inset-2 after:md:hidden",
        "peer-data-[size=sm]/menu-button:top-1",
        "peer-data-[size=default]/menu-button:top-1.5",
        "peer-data-[size=lg]/menu-button:top-2.5",
        "group-data-[collapsible=icon]:hidden",
        showOnHover && "peer-data-[active=true]/menu-button:text-sidebar-accent-foreground group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 md:opacity-0",
        className
      )}
      {...props}
    />
  );
});
SidebarMenuAction.displayName = "SidebarMenuAction";

const SidebarMenuBadge = React.forwardRef<HTMLDivElement, React.ComponentProps<"div">>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    data-sidebar="menu-badge"
    className={cn(
      "text-sidebar-foreground pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums",
      "peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground",
      "peer-data-[size=sm]/menu-button:top-1",
      "peer-data-[size=default]/menu-button:top-1.5",
      "peer-data-[size=lg]/menu-button:top-2.5",
      "group-data-[collapsible=icon]:hidden",
      className
    )}
    {...props}
  />
));
SidebarMenuBadge.displayName = "SidebarMenuBadge";

const SidebarMenuSkeleton = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & {
    showIcon?: boolean;
  }
>(({ className, showIcon = false, ...props }, ref) => {
  // Random width between 50 to 90%.
  const width = React.useMemo(() => {
    return `${Math.floor(Math.random() * 40) + 50}%`;
  }, []);

  return (
    <div ref={ref} data-sidebar="menu-skeleton" className={cn("flex h-8 items-center gap-2 rounded-md px-2", className)} {...props}>
      {showIcon && <Skeleton className="size-4 rounded-md" data-sidebar="menu-skeleton-icon" />}
      <Skeleton
        className="h-4 max-w-[--skeleton-width] flex-1"
        data-sidebar="menu-skeleton-text"
        style={
          {
            "--skeleton-width": width,
          } as React.CSSProperties
        }
      />
    </div>
  );
});
SidebarMenuSkeleton.displayName = "SidebarMenuSkeleton";

const SidebarMenuSub = React.forwardRef<HTMLUListElement, React.ComponentProps<"ul">>(({ className, ...props }, ref) => (
  <ul ref={ref} data-sidebar="menu-sub" className={cn("border-sidebar-border mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l px-2.5 py-0.5", "group-data-[collapsible=icon]:hidden", className)} {...props} />
));
SidebarMenuSub.displayName = "SidebarMenuSub";

const SidebarMenuSubItem = React.forwardRef<HTMLLIElement, React.ComponentProps<"li">>(({ ...props }, ref) => <li ref={ref} {...props} />);
SidebarMenuSubItem.displayName = "SidebarMenuSubItem";

const SidebarMenuSubButton = React.forwardRef<
  HTMLAnchorElement,
  React.ComponentProps<"a"> & {
    asChild?: boolean;
    size?: "sm" | "md";
    isActive?: boolean;
  }
>(({ asChild = false, size = "md", isActive, className, ...props }, ref) => {
  const Comp = asChild ? Slot : "a";

  return (
    <Comp
      ref={ref as any}
      data-sidebar="menu-sub-button"
      data-size={size}
      data-active={isActive}
      className={cn(
        "text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground active:bg-sidebar-accent active:text-sidebar-accent-foreground [&>svg]:text-sidebar-accent-foreground flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 outline-none focus-visible:ring-2 disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0",
        "data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground",
        size === "sm" && "text-xs",
        size === "md" && "text-sm",
        "group-data-[collapsible=icon]:hidden",
        className
      )}
      {...props}
    />
  );
});
SidebarMenuSubButton.displayName = "SidebarMenuSubButton";

export {
  Sidebar,
  SidebarContent,
  SidebarFooter,
  SidebarGroup,
  SidebarGroupAction,
  SidebarGroupContent,
  SidebarGroupLabel,
  SidebarHeader,
  SidebarInput,
  SidebarInset,
  SidebarMenu,
  SidebarMenuAction,
  SidebarMenuBadge,
  SidebarMenuButton,
  SidebarMenuItem,
  SidebarMenuSkeleton,
  SidebarMenuSub,
  SidebarMenuSubButton,
  SidebarMenuSubItem,
  SidebarProvider,
  SidebarRail,
  SidebarSeparator,
  SidebarTrigger,
  useSidebar,
};
</file>

<file path="registry/default/blocks/portofolio-01/components/animated-background.tsx">
"use client";
import { cn } from "@/lib/utils";
import { AnimatePresence, Transition, motion } from "framer-motion";
import {
  Children,
  cloneElement,
  ReactElement,
  useEffect,
  useState,
  useId,
} from "react";

type AnimatedBackgroundProps = {
  children:
    | ReactElement<{ "data-id": string }>[]
    | ReactElement<{ "data-id": string }>;
  defaultValue?: string;
  onValueChange?: (newActiveId: string | null) => void;
  className?: string;
  transition?: Transition;
  enableHover?: boolean;
};

export default function AnimatedBackground({
  children,
  defaultValue,
  onValueChange,
  className,
  transition,
  enableHover = false,
}: AnimatedBackgroundProps) {
  const [activeId, setActiveId] = useState<string | null>(null);
  const uniqueId = useId();

  const handleSetActiveId = (id: string | null) => {
    setActiveId(id);

    if (onValueChange) {
      onValueChange(id);
    }
  };

  useEffect(() => {
    if (defaultValue !== undefined) {
      setActiveId(defaultValue);
    }
  }, [defaultValue]);

  return Children.map(children, (child: any, index) => {
    const id = child.props["data-id"];

    const interactionProps = enableHover
      ? {
          onMouseEnter: () => handleSetActiveId(id),
          onMouseLeave: () => handleSetActiveId(null),
        }
      : {
          onClick: () => handleSetActiveId(id),
        };

    return cloneElement(
      child,
      {
        key: index,
        className: cn("relative ", child.props.className),
        "aria-selected": activeId === id,
        "data-checked": activeId === id ? "true" : "false",
        ...interactionProps,
      },
      <>
        <AnimatePresence initial={false}>
          {activeId === id && (
            <motion.div
              layoutId={`background-${uniqueId}`}
              className={cn("absolute inset-0", className)}
              transition={transition}
              initial={{ opacity: defaultValue ? 1 : 0 }}
              animate={{
                opacity: 1,
              }}
              exit={{
                opacity: 0,
              }}
            />
          )}
        </AnimatePresence>
        <span className="z-10">{child.props.children}</span>
      </>,
    );
  });
}
</file>

<file path="registry/default/blocks/portofolio-01/contents/projects.ts">
type Project = {
  title: string;
  hint: string;
  description: string;
  href: string;
};

export const projects: Project[] = [
  {
    title: "CodeSnap",
    hint: "developer, contributor",
    description:
      "A tool for capturing and sharing beautifully styled code snippets.",
    href: "#",
  },
  {
    title: "DevQuest",
    hint: "founder, architect",
    description:
      "An interactive platform for developers to learn, grow, and solve coding challenges together.",
    href: "#",
  },
  {
    title: "BugTrackr",
    hint: "maintainer, engineer",
    description:
      "Streamlined issue tracking and task management for agile teams.",
    href: "#",
  },
  {
    title: "PixelCraft",
    hint: "UI/UX enthusiast",
    description:
      "A design framework for creating visually stunning, pixel-perfect user interfaces.",
    href: "#",
  },
];
</file>

<file path="registry/default/blocks/portofolio-02/components/career-path.tsx">
import * as AccordionPrimitive from "@radix-ui/react-accordion";
import React from "react";

import { EXPERIENCES } from "../data/career-path";
import { Prose } from "./typhography";
import { Panel, PanelHeader, PanelTitle } from "./panel";
import {
  CareerPath,
  CareerPathPositionIcon,
  CareerPathPosition,
} from "../type/career-path";
import {
  ChevronDownIcon,
  BriefcaseBusinessIcon,
  CodeXmlIcon,
  DraftingCompassIcon,
  GraduationCapIcon,
  LightbulbIcon,
  LucideProps,
  SchoolIcon,
} from "lucide-react";
import { Tag } from "./tag";

export function CareerPaths() {
  const defaultValue = EXPERIENCES.flatMap((exp) =>
    exp.positions.filter((pos) => pos.expanded).map((pos) => pos.id),
  );

  return (
    <Panel id="experience" className="scroll-mt-[4.75rem]">
      <PanelHeader>
        <PanelTitle>Experience</PanelTitle>
      </PanelHeader>

      <AccordionPrimitive.Root
        type="multiple"
        defaultValue={defaultValue}
        asChild
      >
        <div className="px-4">
          {EXPERIENCES.map((experience, index) => {
            return <ExperienceItem key={index} experience={experience} />;
          })}
        </div>
      </AccordionPrimitive.Root>
    </Panel>
  );
}

function ExperienceItem({ experience }: { experience: CareerPath }) {
  return (
    <div className="screen-line-after space-y-4 py-4">
      <div className="flex items-center gap-3">
        <h3 className="font-heading text-lg font-medium leading-snug">
          {experience.company}
        </h3>

        {experience?.current && (
          <span className="relative flex items-center justify-center">
            <span className="bg-success-foreground absolute inline-flex size-3 animate-ping rounded-full opacity-50"></span>
            <span className="bg-success-foreground relative inline-flex size-2 rounded-full"></span>
          </span>
        )}
      </div>

      <div className="relative space-y-4 before:absolute before:left-3 before:h-full before:w-px before:bg-border">
        {experience.positions.map((position, index) => {
          return <CareerPathPositionItem key={index} position={position} />;
        })}
      </div>
    </div>
  );
}

function CareerPathPositionItem({
  position,
}: {
  position: CareerPathPosition;
}) {
  return (
    <AccordionPrimitive.Item value={position.id} asChild>
      <div className="relative last:before:absolute last:before:h-full last:before:w-4 last:before:bg-background">
        <AccordionPrimitive.Trigger className="group/experience block w-full select-none text-left [&[data-state=open]_.lucide-chevron-down]:rotate-180">
          <div className="z-1 relative mb-1 flex items-center gap-3 bg-background">
            <div className="shadow-xs flex size-6 shrink-0 items-center justify-center rounded-lg border bg-accent/50 text-muted-foreground">
              <ExperienceIcon className="size-4" icon={position.icon} />
            </div>

            <h4 className="font-heading flex-1 text-balance font-medium underline-offset-4 group-hover/experience:underline">
              {position.title}
            </h4>

            <ChevronDownIcon className="size-4 shrink-0 text-muted-foreground transition-transform duration-300" />
          </div>

          <p className="flex items-center gap-2 pl-9 font-mono text-xs text-primary/70">
            {position.employmentType && (
              <>
                <span>{position.employmentType}</span>
                <span className="flex h-4 w-px shrink-0 bg-border" />
              </>
            )}

            <span>{position.year}</span>
          </p>
        </AccordionPrimitive.Trigger>

        <AccordionPrimitive.Content className="overflow-hidden transition-all duration-300 data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down">
          {position?.description && (
            <Prose className="pl-9 pt-2 text-primary ">
              {position?.description}
            </Prose>
          )}

          {Array.isArray(position.skills) && position.skills.length > 0 && (
            <div className="flex flex-wrap gap-1.5 pl-9 pt-2">
              {position.skills.map((skill, index) => (
                <Tag key={index}>{skill}</Tag>
              ))}
            </div>
          )}
        </AccordionPrimitive.Content>
      </div>
    </AccordionPrimitive.Item>
  );
}

const iconMap: Record<
  CareerPathPositionIcon,
  React.ComponentType<LucideProps>
> = {
  code: CodeXmlIcon,
  design: DraftingCompassIcon,
  education: GraduationCapIcon,
  business: BriefcaseBusinessIcon,
  school: SchoolIcon,
  idea: LightbulbIcon,
};

function ExperienceIcon({
  icon,
  ...props
}: {
  icon: CareerPathPositionIcon | undefined;
} & LucideProps) {
  const IconComponent = icon ? iconMap[icon] : BriefcaseBusinessIcon;
  return <IconComponent {...props} />;
}
</file>

<file path="registry/default/blocks/portofolio-02/data/USER.ts">
export const USER = {
  displayName: "Brokarim",
  username: "Brokarim",
  gender: "male",
  bio: "Crafting with code, fueled by enthusiasm.",
  address: "Banda Aceh, Indonesia",
  phoneNumber: "+62 8222 1111 222",
  email: "brokariim@gmail.com",
  website: "https://nothing.com",
  dateOfBirth: "2002-01-10",
  jobTitle: "Software Developer & UI/UX Designer",
  jobs: [
    {
      title: "Senior Frontend Developer & UI Design Lead",
      company: "Nothing",
      website: "https://simplamo.com?ref=IN-926722",
    },
    {
      title: "Founder",
      company: "Nothing",
      website: "https://quaric.com",
    },
  ],
  about: `
Hello, World! I am Brokarim, a Software Developer & UI/UX Designer with a passion for crafting seamless, user-focused digital experiences and innovative solutions.

With a strong foundation in web and mobile development, I excel at creating modern, high-quality applications using technologies like Next.js, React, TypeScript, and beyond. 
  `,
  dateCreated: "2023-10-20", // YYYY-MM-DD
};
</file>

<file path="registry/default/blocks/tool-01/components/github-button.tsx">
// This component is sourced from 21st.dev, originally created by Origin UI.

import { Button } from "@/components/ui/button";
import { Star } from "lucide-react";

function GitHubButton() {
  return (
    <Button>
      <Star
        className="-ms-1 me-2 opacity-60"
        size={16}
        strokeWidth={2}
        aria-hidden="true"
      />
      <span className="flex items-baseline gap-2">
        Star
        <span className="text-xs text-primary-foreground/60">729</span>
      </span>
    </Button>
  );
}

export { GitHubButton };
</file>

<file path="registry/index.tsx">
import { type Registry } from "./schema";
import { z } from "zod";

import { blocks } from "./registry-blocks";
import { lib } from "./registry-lib";
import { themes } from "./registry-themes";
import { ui } from "./registry-ui";

export const registry = {
  name: "behindui",
  homepage: "https://behindui.xyz",
  items: [...blocks, ...lib, ...themes, ...ui],
} satisfies Registry;
</file>

<file path="scripts/build-registry.mts">
import { existsSync, promises as fs } from "fs";
import { tmpdir } from "os";
import path from "path";
import template from "lodash/template";
import { rimraf } from "rimraf";

import { Registry, registryEntrySchema, registryItemTypeSchema, registrySchema } from "../registry/schema";
import { Project, ScriptKind } from "ts-morph";
import { z } from "zod";

import { registry } from "../registry";
import { baseColors, baseColorsV4 } from "../registry/registry-base-colors";
// import { registryCategories } from "../registry/registry-categories";
import { colorMapping, colors } from "../registry/registry-colors";
import { iconLibraries, icons } from "../registry/registry-icons";
import { styles } from "../registry/registry-styles";
import { fixImport } from "./fix-import.mts";

const REGISTRY_PATH = path.join(process.cwd(), "public/r");

const REGISTRY_INDEX_WHITELIST: z.infer<typeof registryItemTypeSchema>[] = ["registry:ui", "registry:lib", "registry:hook", "registry:theme", "registry:block", "registry:internal"];

const project = new Project({
  compilerOptions: {},
});

async function createTempSourceFile(filename: string) {
  const dir = await fs.mkdtemp(path.join(tmpdir(), "shadcn-"));
  return path.join(dir, filename);
}

// ----------------------------------------------------------------------------
// Sync styles
// ----------------------------------------------------------------------------
async function syncStyles() {
  const sourceStyle = "new-york";
  const targetStyle = "default";

  const syncDirectories = ["blocks", "hooks", "internal", "lib", "charts"];

  // Clean up sync directories.
  for (const dir of syncDirectories) {
    rimraf.sync(path.join("registry", targetStyle, dir));
  }

  for (const item of registry.items) {
    if (!REGISTRY_INDEX_WHITELIST.includes(item.type) && item.type !== "registry:ui") {
      continue;
    }

    const resolveFiles = item.files?.map((file) => `registry/${sourceStyle}/${typeof file === "string" ? file : file.path}`);
    if (!resolveFiles) {
      continue;
    }

    // Copy files to target style if they don't exist.
    for (const file of resolveFiles) {
      const sourcePath = path.join(process.cwd(), file);
      const targetPath = path.join(process.cwd(), file.replace(sourceStyle, targetStyle));

      if (!existsSync(targetPath)) {
        // Create directory if it doesn't exist.
        await fs.mkdir(path.dirname(targetPath), { recursive: true });
        await fs.copyFile(sourcePath, targetPath);

        // Replace all @/registry/new-york/ with @/registry/default/.
        const content = await fs.readFile(targetPath, "utf8");
        const fixedContent = content.replace(new RegExp(`@/registry/${sourceStyle}/`, "g"), `@/registry/${targetStyle}/`);
        await fs.writeFile(targetPath, fixedContent, "utf8");
      }
    }
  }
}

// ----------------------------------------------------------------------------
// Build __registry__/index.tsx.
// ----------------------------------------------------------------------------
async function buildRegistry(registry: Registry) {
  let index = `// @ts-nocheck
// This file is autogenerated by scripts/build-registry.ts
// Do not edit this file directly.
import * as React from "react"

export const Index: Record<string, any> = {
`;

  for (const style of styles) {
    index += `  "${style.name}": {`;

    // Build style index.
    for (const item of registry.items) {
      const resolveFiles = item.files?.map((file) => `registry/${style.name}/${typeof file === "string" ? file : file.path}`);
      if (!resolveFiles) {
        continue;
      }

      // Validate categories.
      // if (item.categories) {
      //   const invalidCategories = item.categories.filter((category) => !registryCategories.some((c) => c.slug === category));

      //   if (invalidCategories.length > 0) {
      //     console.error(`${item.name} has invalid categories: ${invalidCategories}`);
      //     process.exit(1);
      //   }
      // }

      const type = item.type.split(":")[1];
      let sourceFilename = "";

      if (item.type === "registry:block") {
        const file = resolveFiles[0];
        const filename = path.basename(file);
        let raw: string;
        try {
          raw = await fs.readFile(file, "utf8");
        } catch (error) {
          continue;
        }
        const tempFile = await createTempSourceFile(filename);
        const sourceFile = project.createSourceFile(tempFile, raw, {
          scriptKind: ScriptKind.TSX,
        });

        // Find all imports.
        const imports = new Map<
          string,
          {
            module: string;
            text: string;
            isDefault?: boolean;
          }
        >();
        sourceFile.getImportDeclarations().forEach((node) => {
          const module = node.getModuleSpecifier().getLiteralValue();
          node.getNamedImports().forEach((item) => {
            imports.set(item.getText(), {
              module,
              text: node.getText(),
            });
          });

          const defaultImport = node.getDefaultImport();
          if (defaultImport) {
            imports.set(defaultImport.getText(), {
              module,
              text: defaultImport.getText(),
              isDefault: true,
            });
          }
        });

        // Write the source file for blocks only.
        sourceFilename = `__registry__/${style.name}/${type}/${item.name}.tsx`;

        if (item.files) {
          const files = item.files.map((file) => (typeof file === "string" ? { type: "registry:page", path: file } : file));
          if (files?.length) {
            sourceFilename = `__registry__/${style.name}/${files[0].path}`;
          }
        }

        const sourcePath = path.join(process.cwd(), sourceFilename);
        if (!existsSync(sourcePath)) {
          await fs.mkdir(sourcePath, { recursive: true });
        }

        rimraf.sync(sourcePath);
        await fs.writeFile(sourcePath, sourceFile.getText());
      }

      let componentPath = `@/registry/${style.name}/${type}/${item.name}`;

      if (item.files) {
        const files = item.files.map((file) => (typeof file === "string" ? { type: "registry:page", path: file } : file));
        if (files?.length) {
          componentPath = `@/registry/${style.name}/${files[0].path}`;
        }
      }

      index += `
    "${item.name}": {
      name: "${item.name}",
      description: "${item.description ?? ""}",
      type: "${item.type}",
      registryDependencies: ${JSON.stringify(item.registryDependencies)},
      files: [${item.files?.map((file) => {
        const filePath = `registry/${style.name}/${typeof file === "string" ? file : file.path}`;
        const resolvedFilePath = path.resolve(filePath);
        return typeof file === "string"
          ? `"${resolvedFilePath}"`
          : `{
        path: "${filePath}",
        type: "${file.type}",
        target: "${file.target ?? ""}"
      }`;
      })}],
      categories: ${JSON.stringify(item.categories)},
      component: React.lazy(() => import("${componentPath}")),
      source: "${sourceFilename}",
      meta: ${JSON.stringify(item.meta)},
    },`;
    }

    index += `
  },`;
  }

  index += `
}
`;

  // ----------------------------------------------------------------------------
  // Build registry/index.json.
  // ----------------------------------------------------------------------------
  const items = registry.items
    .filter((item) => ["registry:ui"].includes(item.type))
    .map((item) => {
      return {
        ...item,
        files: item.files?.map((_file) => {
          const file =
            typeof _file === "string"
              ? {
                  path: _file,
                  type: item.type,
                }
              : _file;

          return file;
        }),
      };
    });
  const registryJson = JSON.stringify(items, null, 2);
  rimraf.sync(path.join(REGISTRY_PATH, "index.json"));
  await fs.writeFile(path.join(REGISTRY_PATH, "index.json"), registryJson, "utf8");

  // Write style index.
  rimraf.sync(path.join(process.cwd(), "__registry__/index.tsx"));
  await fs.writeFile(path.join(process.cwd(), "__registry__/index.tsx"), index);
}

// ----------------------------------------------------------------------------
// Build registry/styles/[style]/[name].json.
// ----------------------------------------------------------------------------
async function buildStyles(registry: Registry) {
  for (const style of styles) {
    const targetPath = path.join(REGISTRY_PATH, "styles", style.name);

    // Create directory if it doesn't exist.
    if (!existsSync(targetPath)) {
      await fs.mkdir(targetPath, { recursive: true });
    }

    for (const item of registry.items) {
      if (!REGISTRY_INDEX_WHITELIST.includes(item.type)) {
        continue;
      }

      let files;
      if (item.files) {
        files = await Promise.all(
          item.files.map(async (_file) => {
            const file =
              typeof _file === "string"
                ? {
                    path: _file,
                    type: item.type,
                    content: "",
                    target: "",
                  }
                : _file;

            let content: string;
            try {
              content = await fs.readFile(path.join(process.cwd(), "registry", style.name, file.path), "utf8");

              // Only fix imports for v0- blocks.
              if (item.name.startsWith("v0-")) {
                content = fixImport(content);
              }
            } catch (error) {
              return;
            }

            const tempFile = await createTempSourceFile(file.path);
            const sourceFile = project.createSourceFile(tempFile, content, {
              scriptKind: ScriptKind.TSX,
            });

            sourceFile.getVariableDeclaration("iframeHeight")?.remove();
            sourceFile.getVariableDeclaration("containerClassName")?.remove();
            sourceFile.getVariableDeclaration("description")?.remove();

            let target = file.target || "";

            if ((!target || target === "") && item.name.startsWith("v0-")) {
              const fileName = file.path.split("/").pop();
              if (file.type === "registry:block" || file.type === "registry:component") {
                target = `components/${fileName}`;
              }

              if (file.type === "registry:ui") {
                target = `components/ui/${fileName}`;
              }

              if (file.type === "registry:hook") {
                target = `hooks/${fileName}`;
              }

              if (file.type === "registry:lib") {
                target = `lib/${fileName}`;
              }
            }

            return {
              path: file.path,
              type: file.type,
              content: sourceFile.getText(),
              target,
            };
          })
        );
      }

      const payload = registryEntrySchema.safeParse({
        $schema: "https://ui.shadcn.com/schema/registry-item.json",
        author: "shadcn (https://ui.shadcn.com)",
        ...item,
        files,
      });

      if (payload.success) {
        await fs.writeFile(path.join(targetPath, `${item.name}.json`), JSON.stringify(payload.data, null, 2), "utf8");
      }
    }
  }

  // ----------------------------------------------------------------------------
  // Build registry/styles/index.json.
  // ----------------------------------------------------------------------------
  const stylesJson = JSON.stringify(styles, null, 2);
  await fs.writeFile(path.join(REGISTRY_PATH, "styles/index.json"), stylesJson, "utf8");
}

// ----------------------------------------------------------------------------
// Build registry/styles/[name]/index.json.
// ----------------------------------------------------------------------------
async function buildStylesIndex() {
  for (const style of styles) {
    const targetPath = path.join(REGISTRY_PATH, "styles", style.name);

    const payload: z.infer<typeof registryEntrySchema> = {
      name: style.name,
      type: "registry:style",
      dependencies: ["tailwindcss-animate", "class-variance-authority", "lucide-react"],
      registryDependencies: ["utils"],
      tailwind: {
        config: {
          plugins: [`require("tailwindcss-animate")`],
        },
      },
      cssVars: {},
      files: [],
    };

    await fs.writeFile(path.join(targetPath, "index.json"), JSON.stringify(payload, null, 2), "utf8");
  }
}

// ----------------------------------------------------------------------------
// Build registry/colors/index.json.
// ----------------------------------------------------------------------------
async function buildThemes() {
  const colorsTargetPath = path.join(REGISTRY_PATH, "colors");
  rimraf.sync(colorsTargetPath);
  if (!existsSync(colorsTargetPath)) {
    await fs.mkdir(colorsTargetPath, { recursive: true });
  }

  const colorsData: Record<string, any> = {};
  for (const [color, value] of Object.entries(colors)) {
    if (typeof value === "string") {
      colorsData[color] = value;
      continue;
    }

    if (Array.isArray(value)) {
      colorsData[color] = value.map((item) => ({
        ...item,
        rgbChannel: item.rgb.replace(/^rgb\((\d+),(\d+),(\d+)\)$/, "$1 $2 $3"),
        hslChannel: item.hsl.replace(/^hsl\(([\d.]+),([\d.]+%),([\d.]+%)\)$/, "$1 $2 $3"),
      }));
      continue;
    }

    if (typeof value === "object") {
      colorsData[color] = {
        ...value,
        rgbChannel: value.rgb.replace(/^rgb\((\d+),(\d+),(\d+)\)$/, "$1 $2 $3"),
        hslChannel: value.hsl.replace(/^hsl\(([\d.]+),([\d.]+%),([\d.]+%)\)$/, "$1 $2 $3"),
      };
      continue;
    }
  }

  await fs.writeFile(path.join(colorsTargetPath, "index.json"), JSON.stringify(colorsData, null, 2), "utf8");

  // ----------------------------------------------------------------------------
  // Build registry/colors/[base].json.
  // ----------------------------------------------------------------------------
  const BASE_STYLES = `@tailwind base;
@tailwind components;
@tailwind utilities;
  `;

  const BASE_STYLES_WITH_VARIABLES = `@tailwind base;
@tailwind components;
@tailwind utilities;

@layer base {
  :root {
    --background: <%- colors.light["background"] %>;
    --foreground: <%- colors.light["foreground"] %>;
    --card: <%- colors.light["card"] %>;
    --card-foreground: <%- colors.light["card-foreground"] %>;
    --popover: <%- colors.light["popover"] %>;
    --popover-foreground: <%- colors.light["popover-foreground"] %>;
    --primary: <%- colors.light["primary"] %>;
    --primary-foreground: <%- colors.light["primary-foreground"] %>;
    --secondary: <%- colors.light["secondary"] %>;
    --secondary-foreground: <%- colors.light["secondary-foreground"] %>;
    --muted: <%- colors.light["muted"] %>;
    --muted-foreground: <%- colors.light["muted-foreground"] %>;
    --accent: <%- colors.light["accent"] %>;
    --accent-foreground: <%- colors.light["accent-foreground"] %>;
    --destructive: <%- colors.light["destructive"] %>;
    --destructive-foreground: <%- colors.light["destructive-foreground"] %>;
    --border: <%- colors.light["border"] %>;
    --input: <%- colors.light["input"] %>;
    --ring: <%- colors.light["ring"] %>;
    --radius: 0.5rem;
    --chart-1: <%- colors.light["chart-1"] %>;
    --chart-2: <%- colors.light["chart-2"] %>;
    --chart-3: <%- colors.light["chart-3"] %>;
    --chart-4: <%- colors.light["chart-4"] %>;
    --chart-5: <%- colors.light["chart-5"] %>;
  }

  .dark {
    --background: <%- colors.dark["background"] %>;
    --foreground: <%- colors.dark["foreground"] %>;
    --card: <%- colors.dark["card"] %>;
    --card-foreground: <%- colors.dark["card-foreground"] %>;
    --popover: <%- colors.dark["popover"] %>;
    --popover-foreground: <%- colors.dark["popover-foreground"] %>;
    --primary: <%- colors.dark["primary"] %>;
    --primary-foreground: <%- colors.dark["primary-foreground"] %>;
    --secondary: <%- colors.dark["secondary"] %>;
    --secondary-foreground: <%- colors.dark["secondary-foreground"] %>;
    --muted: <%- colors.dark["muted"] %>;
    --muted-foreground: <%- colors.dark["muted-foreground"] %>;
    --accent: <%- colors.dark["accent"] %>;
    --accent-foreground: <%- colors.dark["accent-foreground"] %>;
    --destructive: <%- colors.dark["destructive"] %>;
    --destructive-foreground: <%- colors.dark["destructive-foreground"] %>;
    --border: <%- colors.dark["border"] %>;
    --input: <%- colors.dark["input"] %>;
    --ring: <%- colors.dark["ring"] %>;
    --chart-1: <%- colors.dark["chart-1"] %>;
    --chart-2: <%- colors.dark["chart-2"] %>;
    --chart-3: <%- colors.dark["chart-3"] %>;
    --chart-4: <%- colors.dark["chart-4"] %>;
    --chart-5: <%- colors.dark["chart-5"] %>;
  }
}

@layer base {
  * {
    @apply border-border;
  }
  body {
    @apply bg-background text-foreground;
  }
}`;

  for (const baseColor of ["slate", "gray", "zinc", "neutral", "stone"]) {
    const base: Record<string, any> = {
      inlineColors: {},
      cssVars: {},
    };
    for (const [mode, values] of Object.entries(colorMapping)) {
      base["inlineColors"][mode] = {};
      base["cssVars"][mode] = {};
      for (const [key, value] of Object.entries(values)) {
        if (typeof value === "string") {
          // Chart colors do not have a 1-to-1 mapping with tailwind colors.
          if (key.startsWith("chart-")) {
            base["cssVars"][mode][key] = value;
            continue;
          }

          const resolvedColor = value.replace(/{{base}}-/g, `${baseColor}-`);
          base["inlineColors"][mode][key] = resolvedColor;

          const [resolvedBase, scale] = resolvedColor.split("-");
          const color = scale ? colorsData[resolvedBase].find((item: any) => item.scale === parseInt(scale)) : colorsData[resolvedBase];
          if (color) {
            base["cssVars"][mode][key] = color.hslChannel;
          }
        }
      }
    }

    // Add v4 css vars.
    base["cssVarsV4"] = baseColorsV4[baseColor as keyof typeof baseColorsV4];

    // Build css vars.
    base["inlineColorsTemplate"] = template(BASE_STYLES)({});
    base["cssVarsTemplate"] = template(BASE_STYLES_WITH_VARIABLES)({
      colors: base["cssVars"],
    });

    await fs.writeFile(path.join(REGISTRY_PATH, `colors/${baseColor}.json`), JSON.stringify(base, null, 2), "utf8");

    // ----------------------------------------------------------------------------
    // Build registry/themes.css
    // ----------------------------------------------------------------------------
    const THEME_STYLES_WITH_VARIABLES = `
.theme-<%- theme %> {
  --background: <%- colors.light["background"] %>;
  --foreground: <%- colors.light["foreground"] %>;

  --muted: <%- colors.light["muted"] %>;
  --muted-foreground: <%- colors.light["muted-foreground"] %>;

  --popover: <%- colors.light["popover"] %>;
  --popover-foreground: <%- colors.light["popover-foreground"] %>;

  --card: <%- colors.light["card"] %>;
  --card-foreground: <%- colors.light["card-foreground"] %>;

  --border: <%- colors.light["border"] %>;
  --input: <%- colors.light["input"] %>;

  --primary: <%- colors.light["primary"] %>;
  --primary-foreground: <%- colors.light["primary-foreground"] %>;

  --secondary: <%- colors.light["secondary"] %>;
  --secondary-foreground: <%- colors.light["secondary-foreground"] %>;

  --accent: <%- colors.light["accent"] %>;
  --accent-foreground: <%- colors.light["accent-foreground"] %>;

  --destructive: <%- colors.light["destructive"] %>;
  --destructive-foreground: <%- colors.light["destructive-foreground"] %>;

  --ring: <%- colors.light["ring"] %>;

  --radius: <%- colors.light["radius"] %>;
}

.dark .theme-<%- theme %> {
  --background: <%- colors.dark["background"] %>;
  --foreground: <%- colors.dark["foreground"] %>;

  --muted: <%- colors.dark["muted"] %>;
  --muted-foreground: <%- colors.dark["muted-foreground"] %>;

  --popover: <%- colors.dark["popover"] %>;
  --popover-foreground: <%- colors.dark["popover-foreground"] %>;

  --card: <%- colors.dark["card"] %>;
  --card-foreground: <%- colors.dark["card-foreground"] %>;

  --border: <%- colors.dark["border"] %>;
  --input: <%- colors.dark["input"] %>;

  --primary: <%- colors.dark["primary"] %>;
  --primary-foreground: <%- colors.dark["primary-foreground"] %>;

  --secondary: <%- colors.dark["secondary"] %>;
  --secondary-foreground: <%- colors.dark["secondary-foreground"] %>;

  --accent: <%- colors.dark["accent"] %>;
  --accent-foreground: <%- colors.dark["accent-foreground"] %>;

  --destructive: <%- colors.dark["destructive"] %>;
  --destructive-foreground: <%- colors.dark["destructive-foreground"] %>;

  --ring: <%- colors.dark["ring"] %>;
}`;

    const themeCSS = [];
    for (const theme of baseColors) {
      themeCSS.push(
        // @ts-ignore
        template(THEME_STYLES_WITH_VARIABLES)({
          colors: theme.cssVars,
          theme: theme.name,
        })
      );
    }

    await fs.writeFile(path.join(REGISTRY_PATH, `themes.css`), themeCSS.join("\n"), "utf8");

    // ----------------------------------------------------------------------------
    // Build registry/themes/[theme].json
    // ----------------------------------------------------------------------------
    rimraf.sync(path.join(REGISTRY_PATH, "themes"));
    for (const baseColor of ["slate", "gray", "zinc", "neutral", "stone"]) {
      const payload: Record<string, any> = {
        name: baseColor,
        label: baseColor.charAt(0).toUpperCase() + baseColor.slice(1),
        cssVars: {},
      };
      for (const [mode, values] of Object.entries(colorMapping)) {
        payload.cssVars[mode] = {};
        for (const [key, value] of Object.entries(values)) {
          if (typeof value === "string") {
            const resolvedColor = value.replace(/{{base}}-/g, `${baseColor}-`);
            payload.cssVars[mode][key] = resolvedColor;

            const [resolvedBase, scale] = resolvedColor.split("-");
            const color = scale ? colorsData[resolvedBase].find((item: any) => item.scale === parseInt(scale)) : colorsData[resolvedBase];
            if (color) {
              payload["cssVars"][mode][key] = color.hslChannel;
            }
          }
        }
      }

      const targetPath = path.join(REGISTRY_PATH, "themes");

      // Create directory if it doesn't exist.
      if (!existsSync(targetPath)) {
        await fs.mkdir(targetPath, { recursive: true });
      }

      await fs.writeFile(path.join(targetPath, `${payload.name}.json`), JSON.stringify(payload, null, 2), "utf8");
    }
  }
}

// ----------------------------------------------------------------------------
// Build registry/icons/index.json.
// ----------------------------------------------------------------------------
async function buildIcons() {
  const iconsTargetPath = path.join(REGISTRY_PATH, "icons");
  rimraf.sync(iconsTargetPath);
  if (!existsSync(iconsTargetPath)) {
    await fs.mkdir(iconsTargetPath, { recursive: true });
  }

  const iconsData = icons;

  await fs.writeFile(path.join(iconsTargetPath, "index.json"), JSON.stringify(iconsData, null, 2), "utf8");
}

// ----------------------------------------------------------------------------
// Build __registry__/icons.tsx.
// ----------------------------------------------------------------------------
async function buildRegistryIcons() {
  let index = `// @ts-nocheck
// This file is autogenerated by scripts/build-registry.ts
// Do not edit this file directly.
import * as React from "react"

export const Icons = {
`;

  for (const [icon, libraries] of Object.entries(icons)) {
    index += `  "${icon}": {`;
    for (const [library, componentName] of Object.entries(libraries)) {
      const packageName = iconLibraries[library].package;
      if (packageName) {
        index += `
  ${library}: React.lazy(() => import("${packageName}").then(mod => ({
    default: mod.${componentName}
  }))),`;
      }
    }
    index += `
},`;
  }

  index += `
}
`;

  // Write style index.
  rimraf.sync(path.join(process.cwd(), "__registry__/icons.tsx"));
  await fs.writeFile(path.join(process.cwd(), "__registry__/icons.tsx"), index, "utf8");
}

try {
  console.log("💽 Building registry...");
  const result = registrySchema.safeParse(registry);

  if (!result.success) {
    console.error(result.error);
    process.exit(1);
  }

  // await syncStyles();
  await buildRegistry(result.data);
  await buildStyles(result.data);
  await buildStylesIndex();
  await buildThemes();

  await buildRegistryIcons();
  await buildIcons();

  console.log("✅ Done!");
} catch (error) {
  console.error(error);
  process.exit(1);
}
</file>

<file path="__registry__/default/blocks/portofolio-02/main.tsx">
import { BioDetails } from "./components/bio-detail";
import { Bio } from "./components/bio";

import { CareerPaths } from "./components/career-path";
import { Highlight } from "./components/highlight";

import { cn } from "@/lib/utils";

function Divider() {
  return (
    <div
      className={cn(
        "border-grid relative flex h-4 w-full border-x",
        "before:absolute before:-left-[100vw] before:h-4 before:w-[200vw]",
        "before:[--pattern-foreground:var(--color-black)]/5 dark:before:[--pattern-foreground:var(--color-white)]/5 before:bg-[image:repeating-linear-gradient(315deg,_var(--pattern-foreground)_0,_var(--pattern-foreground)_1px,_transparent_0,_transparent_50%)] before:bg-[size:10px_10px]",
      )}
    />
  );
}

export default function Layout() {
  return (
    <>
      <div className="max-w-screen bg-backgroud z-50 flex h-screen flex-col items-center justify-between overflow-x-hidden">
        <div className="mx-auto px-4 text-primary md:max-w-3xl">
          <Bio />
          <Divider />
          <main>
            <Highlight />
            <Divider />

            <BioDetails />
            <Divider />

            <CareerPaths />
            <Divider />

            <Divider />
          </main>
        </div>
      </div>
    </>
  );
}
</file>

<file path="app/(app)/[...categories]/page.tsx">
import { getAllBlockIds } from "@/lib/block";
import { BlockDisplay } from "@/components/registry/component-display";
import { registryCategories } from "@/registry/registry-categories";

export const dynamicParams = false;

export async function generateStaticParams() {
  return registryCategories.map((category) => ({
    categories: [category.slug],
  }));
}

export default async function BlocksPage({ params }: { params: { categories?: string[] } }) {
  const blocks = await getAllBlockIds(["registry:block"], params.categories ?? []);

  return blocks.map((name) => (
    <div key={name} className="container py-8   md:py-12">
      <BlockDisplay name={name} />
    </div>
  ));
}
</file>

<file path="components/icons.tsx">
import { DiscordLogoIcon, InstagramLogoIcon } from "@radix-ui/react-icons";
import { AlertTriangle, ArrowRight, Check, ChevronLeft, ClipboardCheck, Copy, CreditCard, File, FileText, HelpCircle, Image, Laptop, Loader2, Moon, MoreVertical, Pizza, Plus, Settings, SunMedium, Trash, User, X } from "lucide-react";
import { SquareMenu } from "lucide-react";
export type IconProps = React.HTMLAttributes<SVGElement>;

export const Icons = {
  contentMenu: SquareMenu,
  logo: (props: IconProps) => (
    <svg xmlns="http://www.w3.org/2000/svg" width={28} height={31} className="fill-black dark:fill-white" {...props}>
      <path
        className="fill-black dark:fill-white"
        fillRule="evenodd"
        d="M3.501 12.682h21.41a2.427 2.427 0 0 1 2.417 2.437v9.203a2.427 2.427 0 0 1-2.416 2.438H3.5a2.427 2.427 0 0 1-2.416-2.438V15.12a2.427 2.427 0 0 1 2.416-2.437Zm22.577 2.437c0-.65-.523-1.177-1.167-1.177H3.501c-.645 0-1.167.527-1.167 1.177v9.203c0 .65.522 1.177 1.166 1.177h21.411c.644 0 1.166-.527 1.166-1.177V15.12Z"
        clipRule="evenodd"
      />
      <path className="fill-black dark:fill-white" d="M24.606 12H3.394C2.072 12 1 13.163 1 14.597v9.806C1 25.837 2.072 27 3.394 27h21.212C25.928 27 27 25.837 27 24.403v-9.806C27 13.163 25.928 12 24.606 12Z" />
      <path
        className="border border-black fill-black dark:border-white dark:fill-white"
        d="m1.256 3.416-.163 21.41a2.427 2.427 0 0 0 2.419 2.435l9.202.07a2.427 2.427 0 0 0 2.456-2.398l.163-21.41a2.427 2.427 0 0 0-2.419-2.434l-9.203-.07a2.427 2.427 0 0 0-2.455 2.397Z"
      />
      <path className="fill-black dark:fill-white" d="M24.87 14c.624 0 1.13.547 1.13 1.222v9.556c0 .675-.506 1.222-1.13 1.222H4.13C3.506 26 3 25.453 3 24.778v-9.556C3 14.547 3.506 14 4.13 14h20.74Z" />
      <path
        className="fill-black dark:fill-white"
        d="m24.012 12.098-14.31 4.395C8.693 16.803 8 17.793 8 18.919v9.558c0 .234.03.467.09.692.356 1.34 1.653 2.116 2.898 1.733l14.31-4.395c1.008-.31 1.702-1.3 1.702-2.426v-9.557a2.7 2.7 0 0 0-.09-.693c-.355-1.34-1.653-2.116-2.898-1.733Z"
      />
      <path
        className="fill-white dark:fill-black"
        d="M25.955 14.863c.03.106.045.216.045.326v9.33c0 .532-.344.998-.842 1.144L10.48 29.954a1.157 1.157 0 0 1-1.435-.817A1.216 1.216 0 0 1 9 28.811v-9.33c0-.532.344-.998.842-1.144l14.678-4.291c.617-.18 1.26.186 1.435.817Z"
      />
    </svg>
  ),
  logo1: (props: IconProps) => (
    <svg xmlns="http://www.w3.org/2000/svg" width={28} height={31} fill="none" {...props}>
      <path
        className="fill-black "
        fillRule="evenodd"
        d="M3.501 12.682h21.41a2.427 2.427 0 0 1 2.417 2.437v9.203a2.427 2.427 0 0 1-2.416 2.438H3.5a2.427 2.427 0 0 1-2.416-2.438V15.12a2.427 2.427 0 0 1 2.416-2.437Zm22.577 2.437c0-.65-.523-1.177-1.167-1.177H3.501c-.645 0-1.167.527-1.167 1.177v9.203c0 .65.522 1.177 1.166 1.177h21.411c.644 0 1.166-.527 1.166-1.177V15.12Z"
        clipRule="evenodd"
      />
      <path className="fill-black " d="M24.606 12H3.394C2.072 12 1 13.163 1 14.597v9.806C1 25.837 2.072 27 3.394 27h21.212C25.928 27 27 25.837 27 24.403v-9.806C27 13.163 25.928 12 24.606 12Z" />
      <path className="border border-black fill-black dark:border-white " d="M1.174 3.47v21.41a2.427 2.427 0 0 0 2.437 2.416h9.204a2.427 2.427 0 0 0 2.437-2.416V3.47a2.427 2.427 0 0 0-2.438-2.416H3.612A2.427 2.427 0 0 0 1.174 3.47Z" />
      <path className="fill-black " d="M24.87 14c.624 0 1.13.547 1.13 1.222v9.556c0 .675-.506 1.222-1.13 1.222H4.13C3.506 26 3 25.453 3 24.778v-9.556C3 14.547 3.506 14 4.13 14h20.74Z" />
      <path
        className="fill-black "
        d="m24.012 12.098-14.31 4.395C8.693 16.803 8 17.793 8 18.919v9.558c0 .234.03.467.09.692.356 1.34 1.653 2.116 2.898 1.733l14.31-4.395c1.008-.31 1.702-1.3 1.702-2.426v-9.557a2.7 2.7 0 0 0-.09-.693c-.355-1.34-1.653-2.116-2.898-1.733Z"
      />
      <path
        fill="#fff"
        d="M25.955 14.863c.03.106.045.216.045.326v9.33c0 .532-.344.998-.842 1.144L10.48 29.954a1.157 1.157 0 0 1-1.435-.817A1.216 1.216 0 0 1 9 28.811v-9.33c0-.532.344-.998.842-1.144l14.678-4.291c.617-.18 1.26.186 1.435.817Z"
      />
    </svg>
  ),
  gridLogo: (props: IconProps) => (
    <svg xmlns="http://www.w3.org/2000/svg" width={34} height={34} fill="none" {...props}>
      <path stroke="#000" d="M32.5 32.5h-31v-31h31z" />
      <path
        fill="#000"
        fillRule="evenodd"
        d="M6.893 14.682h21.41a2.427 2.427 0 0 1 2.416 2.437v9.203a2.427 2.427 0 0 1-2.416 2.438H6.893a2.427 2.427 0 0 1-2.416-2.438V17.12a2.427 2.427 0 0 1 2.416-2.437Zm22.576 2.437c0-.65-.522-1.177-1.166-1.177H6.892c-.644 0-1.166.527-1.166 1.177v9.203c0 .65.522 1.177 1.166 1.177h21.41c.645 0 1.167-.527 1.167-1.177V17.12Z"
        clipRule="evenodd"
      />
      <path fill="#000" d="M27.998 14H6.785c-1.322 0-2.393 1.163-2.393 2.597v9.806C4.392 27.837 5.463 29 6.785 29h21.213c1.322 0 2.394-1.163 2.394-2.597v-9.806c0-1.434-1.072-2.597-2.394-2.597Z" />
      <path fill="#000" stroke="#000" d="m4.647 5.416-.163 21.41a2.427 2.427 0 0 0 2.42 2.435l9.202.07a2.427 2.427 0 0 0 2.456-2.398l.163-21.41a2.427 2.427 0 0 0-2.419-2.434l-9.203-.07a2.427 2.427 0 0 0-2.456 2.397Z" />
      <path fill="#000" d="M28.262 16c.624 0 1.13.547 1.13 1.222v9.556c0 .675-.506 1.222-1.13 1.222H7.522c-.625 0-1.13-.547-1.13-1.222v-9.556c0-.675.505-1.222 1.13-1.222h20.74Z" />
      <path
        fill="#000"
        d="m27.403 14.098-14.31 4.395c-1.007.31-1.701 1.3-1.701 2.426v9.558c0 .234.03.467.09.692.355 1.34 1.653 2.116 2.898 1.733l14.31-4.395c1.007-.31 1.702-1.3 1.702-2.426v-9.558a2.7 2.7 0 0 0-.09-.692c-.356-1.34-1.654-2.116-2.899-1.733Z"
      />
      <path
        fill="#fff"
        d="M29.347 16.863c.03.106.045.216.045.326v9.33c0 .532-.344.998-.843 1.144l-14.678 4.291a1.157 1.157 0 0 1-1.435-.817 1.216 1.216 0 0 1-.044-.326v-9.33c0-.532.343-.998.842-1.144l14.678-4.291c.617-.18 1.259.186 1.435.817Z"
      />
      <path fill="#000" d="M31 0h3v3h-3zM31 31h3v3h-3zM0 0h3v3H0zM0 31h3v3H0z" />
    </svg>
  ),
  close: X,
  spinner: Loader2,
  chevronLeft: ChevronLeft,
  discord: DiscordLogoIcon,
  instagram: InstagramLogoIcon,
  chevronRight: (props: IconProps) => (
    <svg fill="none" stroke="currentColor" width="11" height="11" viewBox="0 0 10 10" aria-hidden="true" strokeWidth="1.5" className="-mr-0.5" strokeLinecap="round" {...props}>
      <path className="opacity-0 transition group-hover:opacity-100" d="M0 5h7" strokeLinecap="round"></path>
      <path className="transition group-hover:translate-x-[3px]" d="M1 1l4 4-4 4" strokeLinecap="round"></path>
    </svg>
  ),
  trash: Trash,
  post: FileText,
  page: File,
  media: Image,
  settings: Settings,
  billing: CreditCard,
  ellipsis: MoreVertical,
  add: Plus,
  warning: AlertTriangle,
  user: User,
  arrowRight: ArrowRight,
  help: HelpCircle,
  pizza: Pizza,
  twitter: (props: IconProps) => (
    <svg {...props} height="23" viewBox="0 0 1200 1227" width="23" xmlns="http://www.w3.org/2000/svg">
      <path d="M714.163 519.284L1160.89 0H1055.03L667.137 450.887L357.328 0H0L468.492 681.821L0 1226.37H105.866L515.491 750.218L842.672 1226.37H1200L714.137 519.284H714.163ZM569.165 687.828L521.697 619.934L144.011 79.6944H306.615L611.412 515.685L658.88 583.579L1055.08 1150.3H892.476L569.165 687.854V687.828Z" />
    </svg>
  ),
  check: Check,
  copy: Copy,
  copyDone: ClipboardCheck,
  sun: SunMedium,
  moon: Moon,
  laptop: Laptop,
  gitHub: (props: IconProps) => (
    <svg viewBox="0 0 438.549 438.549" {...props}>
      <path
        fill="currentColor"
        d="M409.132 114.573c-19.608-33.596-46.205-60.194-79.798-79.8-33.598-19.607-70.277-29.408-110.063-29.408-39.781 0-76.472 9.804-110.063 29.408-33.596 19.605-60.192 46.204-79.8 79.8C9.803 148.168 0 184.854 0 224.63c0 47.78 13.94 90.745 41.827 128.906 27.884 38.164 63.906 64.572 108.063 79.227 5.14.954 8.945.283 11.419-1.996 2.475-2.282 3.711-5.14 3.711-8.562 0-.571-.049-5.708-.144-15.417a2549.81 2549.81 0 01-.144-25.406l-6.567 1.136c-4.187.767-9.469 1.092-15.846 1-6.374-.089-12.991-.757-19.842-1.999-6.854-1.231-13.229-4.086-19.13-8.559-5.898-4.473-10.085-10.328-12.56-17.556l-2.855-6.57c-1.903-4.374-4.899-9.233-8.992-14.559-4.093-5.331-8.232-8.945-12.419-10.848l-1.999-1.431c-1.332-.951-2.568-2.098-3.711-3.429-1.142-1.331-1.997-2.663-2.568-3.997-.572-1.335-.098-2.43 1.427-3.289 1.525-.859 4.281-1.276 8.28-1.276l5.708.853c3.807.763 8.516 3.042 14.133 6.851 5.614 3.806 10.229 8.754 13.846 14.842 4.38 7.806 9.657 13.754 15.846 17.847 6.184 4.093 12.419 6.136 18.699 6.136 6.28 0 11.704-.476 16.274-1.423 4.565-.952 8.848-2.383 12.847-4.285 1.713-12.758 6.377-22.559 13.988-29.41-10.848-1.14-20.601-2.857-29.264-5.14-8.658-2.286-17.605-5.996-26.835-11.14-9.235-5.137-16.896-11.516-22.985-19.126-6.09-7.614-11.088-17.61-14.987-29.979-3.901-12.374-5.852-26.648-5.852-42.826 0-23.035 7.52-42.637 22.557-58.817-7.044-17.318-6.379-36.732 1.997-58.24 5.52-1.715 13.706-.428 24.554 3.853 10.85 4.283 18.794 7.952 23.84 10.994 5.046 3.041 9.089 5.618 12.135 7.708 17.705-4.947 35.976-7.421 54.818-7.421s37.117 2.474 54.823 7.421l10.849-6.849c7.419-4.57 16.18-8.758 26.262-12.565 10.088-3.805 17.802-4.853 23.134-3.138 8.562 21.509 9.325 40.922 2.279 58.24 15.036 16.18 22.559 35.787 22.559 58.817 0 16.178-1.958 30.497-5.853 42.966-3.9 12.471-8.941 22.457-15.125 29.979-6.191 7.521-13.901 13.85-23.131 18.986-9.232 5.14-18.182 8.85-26.84 11.136-8.662 2.286-18.415 4.004-29.263 5.146 9.894 8.562 14.842 22.077 14.842 40.539v60.237c0 3.422 1.19 6.279 3.572 8.562 2.379 2.279 6.136 2.95 11.276 1.995 44.163-14.653 80.185-41.062 108.068-79.226 27.88-38.161 41.825-81.126 41.825-128.906-.01-39.771-9.818-76.454-29.414-110.049z"
      ></path>
    </svg>
  ),
  thread: (props: IconProps) => (
    <svg className="threads"  role="img" viewBox="0 0 192 192" xmlns="http://www.w3.org/2000/svg" >
      <path
        fill="currentColor"
        d="M141.537 88.9883C140.71 88.5919 139.87 88.2104 139.019 87.8451C137.537 60.5382 122.616 44.905 97.5619 44.745C97.4484 44.7443 97.3355 44.7443 97.222 44.7443C82.2364 44.7443 69.7731 51.1409 62.102 62.7807L75.881 72.2328C81.6116 63.5383 90.6052 61.6848 97.2286 61.6848C97.3051 61.6848 97.3819 61.6848 97.4576 61.6855C105.707 61.7381 111.932 64.1366 115.961 68.814C118.893 72.2193 120.854 76.925 121.825 82.8638C114.511 81.6207 106.601 81.2385 98.145 81.7233C74.3247 83.0954 59.0111 96.9879 60.0396 116.292C60.5615 126.084 65.4397 134.508 73.775 140.011C80.8224 144.663 89.899 146.938 99.3323 146.423C111.79 145.74 121.563 140.987 128.381 132.296C133.559 125.696 136.834 117.143 138.28 106.366C144.217 109.949 148.617 114.664 151.047 120.332C155.179 129.967 155.42 145.8 142.501 158.708C131.182 170.016 117.576 174.908 97.0135 175.059C74.2042 174.89 56.9538 167.575 45.7381 153.317C35.2355 139.966 29.8077 120.682 29.6052 96C29.8077 71.3178 35.2355 52.0336 45.7381 38.6827C56.9538 24.4249 74.2039 17.11 97.0132 16.9405C119.988 17.1113 137.539 24.4614 149.184 38.788C154.894 45.8136 159.199 54.6488 162.037 64.9503L178.184 60.6422C174.744 47.9622 169.331 37.0357 161.965 27.974C147.036 9.60668 125.202 0.195148 97.0695 0H96.9569C68.8816 0.19447 47.2921 9.6418 32.7883 28.0793C19.8819 44.4864 13.2244 67.3157 13.0007 95.9325L13 96L13.0007 96.0675C13.2244 124.684 19.8819 147.514 32.7883 163.921C47.2921 182.358 68.8816 191.806 96.9569 192H97.0695C122.03 191.827 139.624 185.292 154.118 170.811C173.081 151.866 172.51 128.119 166.26 113.541C161.776 103.087 153.227 94.5962 141.537 88.9883ZM98.4405 129.507C88.0005 130.095 77.1544 125.409 76.6196 115.372C76.2232 107.93 81.9158 99.626 99.0812 98.6368C101.047 98.5234 102.976 98.468 104.871 98.468C111.106 98.468 116.939 99.0737 122.242 100.233C120.264 124.935 108.662 128.946 98.4405 129.507Z"
      ></path>
    </svg>
  ),
  Xicon: (props: IconProps) => (
    <svg fill="none" height="24" viewBox="0 0 24 24" width="24" xmlns="http://www.w3.org/2000/svg" {...props}>
      <path
        clipRule="evenodd"
        d="m15.9455 23-5.5495-7.9099-6.94714 7.9099h-2.939094l8.582324-9.7689-8.582324-12.2311h7.545944l5.23029 7.45502 6.5533-7.45502h2.9391l-8.1841 9.3165 8.8971 12.6835zm3.273-2.23h-1.9787l-12.52169-17.54h1.97899l5.015 7.0232.8672 1.2187z"
        fill="#242e36"
        fillRule="evenodd"
      />
    </svg>
  ),
  radix: (props: IconProps) => (
    <svg viewBox="0 0 25 25" fill="none" {...props}>
      <path d="M12 25C7.58173 25 4 21.4183 4 17C4 12.5817 7.58173 9 12 9V25Z" fill="currentcolor"></path>
      <path d="M12 0H4V8H12V0Z" fill="currentcolor"></path>
      <path d="M17 8C19.2091 8 21 6.20914 21 4C21 1.79086 19.2091 0 17 0C14.7909 0 13 1.79086 13 4C13 6.20914 14.7909 8 17 8Z" fill="currentcolor"></path>
    </svg>
  ),
  aria: (props: IconProps) => (
    <svg role="img" viewBox="0 0 24 24" fill="currentColor" {...props}>
      <path d="M13.966 22.624l-1.69-4.281H8.122l3.892-9.144 5.662 13.425zM8.884 1.376H0v21.248zm15.116 0h-8.884L24 22.624Z" />
    </svg>
  ),
  odama: (props: IconProps) => (
    <svg xmlns="http://www.w3.org/2000/svg" width={33} height={33} className="fill-black dark:fill-white" {...props}>
      <path
        className="fill-black dark:fill-white"
        fillRule="evenodd"
        d="M33 16.5C33 25.613 25.613 33 16.5 33S0 25.613 0 16.5 7.387 0 16.5 0 33 7.387 33 16.5Zm-5.186 0c0 6.249-5.065 11.314-11.314 11.314-.433 0-.86-.024-1.281-.072 5.686-.597 10.118-5.407 10.118-11.251 0-5.816-4.388-10.606-10.033-11.243.393-.041.792-.062 1.196-.062 6.249 0 11.314 5.065 11.314 11.314Zm-14.968 7.97c3.73-.66 6.566-3.977 6.566-7.97s-2.836-7.31-6.566-7.97a8.088 8.088 0 1 1 0 15.939Z"
        clipRule="evenodd"
      />
    </svg>
  ),
  tirana: (props: IconProps) => (
    <svg xmlns="http://www.w3.org/2000/svg" width={70} height={28} className="fill-black dark:fill-white" {...props}>
      <path
        className="fill-black dark:fill-white"
        d="M63.858 6.162c1.161 0 2.19.22 3.088.66.897.421 1.59 1.012 2.08 1.773.509.76.764 1.631.764 2.613V21.39c0 .1-.041.19-.122.27a.334.334 0 0 1-.245.09h-2.814a.453.453 0 0 1-.274-.09.433.433 0 0 1-.092-.27v-.751c0-.06-.02-.1-.061-.12-.041-.02-.082-.01-.123.03-.856.96-2.09 1.441-3.7 1.441-1.345 0-2.487-.35-3.425-1.05-.937-.722-1.406-1.883-1.406-3.485 0-1.682.54-2.933 1.62-3.754 1.101-.821 2.61-1.232 4.526-1.232h2.416c.102 0 .153-.05.153-.15v-.75c0-.742-.214-1.323-.642-1.743-.408-.44-.98-.66-1.713-.66-.591 0-1.08.14-1.468.42-.367.26-.6.62-.703 1.081-.061.22-.204.33-.428.33l-2.966-.18a.452.452 0 0 1-.275-.09c-.062-.08-.082-.16-.062-.24.123-1.282.724-2.323 1.805-3.124 1.1-.8 2.456-1.201 4.067-1.201Zm-.582 13.005c.795 0 1.489-.22 2.08-.66.591-.461.887-1.062.887-1.803v-1.562c0-.1-.051-.15-.153-.15H64.04c-.897 0-1.61.19-2.14.57-.51.381-.765.932-.765 1.653 0 .64.194 1.131.581 1.471.408.32.928.481 1.56.481ZM51.36 6.162c1.488 0 2.65.46 3.485 1.381.836.921 1.254 2.193 1.254 3.815V21.39c0 .1-.04.19-.122.27a.334.334 0 0 1-.245.09H52.92a.453.453 0 0 1-.275-.09.434.434 0 0 1-.092-.27v-9.552c0-.82-.214-1.471-.642-1.952-.408-.48-.969-.72-1.682-.72-.734 0-1.325.25-1.774.75-.428.48-.642 1.131-.642 1.952v9.522c0 .1-.04.19-.122.27a.334.334 0 0 1-.245.09h-2.813a.453.453 0 0 1-.275-.09.434.434 0 0 1-.092-.27V6.762c0-.1.03-.18.092-.24a.383.383 0 0 1 .275-.12h2.813c.102 0 .184.04.245.12.082.06.122.14.122.24v.781c0 .06.02.1.062.12.04.02.08 0 .122-.06.815-.96 1.936-1.441 3.363-1.441ZM36.343 6.162c1.163 0 2.192.22 3.089.66.897.421 1.59 1.012 2.08 1.773.509.76.764 1.631.764 2.613V21.39c0 .1-.041.19-.123.27a.334.334 0 0 1-.244.09h-2.813a.453.453 0 0 1-.276-.09.434.434 0 0 1-.092-.27v-.751c0-.06-.02-.1-.06-.12-.041-.02-.082-.01-.123.03-.856.96-2.09 1.441-3.7 1.441-1.345 0-2.487-.35-3.425-1.05-.938-.722-1.406-1.883-1.406-3.485 0-1.682.54-2.933 1.62-3.754 1.101-.821 2.61-1.232 4.526-1.232h2.416c.102 0 .152-.05.152-.15v-.75c0-.742-.213-1.323-.642-1.743-.407-.44-.978-.66-1.712-.66-.591 0-1.08.14-1.468.42-.367.26-.601.62-.703 1.081-.061.22-.204.33-.428.33l-2.966-.18a.452.452 0 0 1-.276-.09c-.06-.08-.081-.16-.06-.24.122-1.282.723-2.323 1.803-3.124 1.101-.8 2.457-1.201 4.067-1.201Zm-.58 13.005c.795 0 1.488-.22 2.079-.66.591-.461.886-1.062.886-1.803v-1.562c0-.1-.05-.15-.152-.15h-2.05c-.896 0-1.61.19-2.14.57-.51.381-.764.932-.764 1.653 0 .64.194 1.131.58 1.471.409.32.929.481 1.56.481ZM28.197 6.221c.57 0 1.07.12 1.498.36.163.08.224.231.183.451l-.52 2.733c-.02.24-.162.31-.427.21s-.571-.15-.918-.15c-.143 0-.357.02-.642.06-.693.06-1.274.371-1.743.932-.448.56-.673 1.261-.673 2.102v8.47c0 .1-.04.19-.122.27a.334.334 0 0 1-.245.09h-2.813a.453.453 0 0 1-.275-.09.434.434 0 0 1-.092-.27V6.762c0-.1.03-.18.092-.24a.384.384 0 0 1 .275-.12h2.813c.102 0 .184.04.245.12.082.06.122.14.122.24v1.291c0 .08.01.13.03.15.042 0 .082-.03.123-.09.734-1.261 1.764-1.892 3.089-1.892ZM15.817 21.75a.453.453 0 0 1-.276-.09.434.434 0 0 1-.091-.27V6.732c0-.1.03-.18.091-.24a.384.384 0 0 1 .276-.12h2.813c.102 0 .183.04.245.12.081.06.122.14.122.24V21.39c0 .1-.04.19-.122.27a.334.334 0 0 1-.245.09h-2.813ZM13.516.725c.102 0 .183.04.244.12.082.06.123.14.123.24v2.313c0 .1-.041.19-.123.27a.334.334 0 0 1-.244.09h-4.74c-.102 0-.153.05-.153.151v17.48c0 .1-.04.19-.122.27a.334.334 0 0 1-.245.09H5.443a.452.452 0 0 1-.275-.09.434.434 0 0 1-.092-.27V3.91c0-.1-.05-.15-.153-.15H.367a.453.453 0 0 1-.275-.09.434.434 0 0 1-.092-.27V1.085c0-.1.03-.18.092-.24a.383.383 0 0 1 .275-.12h13.149Z"
      />
      <path
        fill="#D439FF"
        d="M15.444 3.626c.403.396.917.594 1.543.594.625 0 1.14-.198 1.543-.594.403-.396.605-.902.605-1.516 0-.634-.202-1.14-.605-1.516C18.147.198 17.632 0 16.987 0c-.626 0-1.14.198-1.543.594-.384.397-.575.902-.575 1.516s.191 1.12.575 1.516Z"
      />
    </svg>
  ),
  fund: (props: IconProps) => (
    <svg xmlns="http://www.w3.org/2000/svg" width={21} height={33} fill="none" {...props}>
      <path
        fill="#E2FD70"
        d="M.251 2.031c-.25.605-.25 1.371-.25 2.904 0 1.532 0 2.3.25 2.904a3.29 3.29 0 0 0 1.78 1.78c.605.25 1.371.25 2.904.25 1.532 0 2.3 0 2.904-.25a3.29 3.29 0 0 0 1.78-1.78c.25-.605.25-1.371.25-2.904s0-2.298-.25-2.903A3.291 3.291 0 0 0 7.837.252C7.233.002 6.468 0 4.935 0 3.402 0 2.636 0 2.031.251a3.29 3.29 0 0 0-1.78 1.78ZM.25 13.162C0 13.766 0 14.532 0 16.065s0 2.3.25 2.904a3.29 3.29 0 0 0 1.78 1.78c.605.25 1.372.25 2.904.25 1.532 0 2.3 0 2.904-.25a3.29 3.29 0 0 0 1.78-1.78c.25-.605.25-1.371.25-2.904 0-1.532 0-2.298-.25-2.902a3.29 3.29 0 0 0-1.781-1.78c-.605-.251-1.37-.252-2.903-.252-1.532 0-2.299 0-2.903.25a3.29 3.29 0 0 0-1.78 1.78ZM11.131 4.934c0 1.533 0 2.3.25 2.904a3.29 3.29 0 0 0 1.78 1.78c.605.25 1.372.25 2.905.25 1.531 0 2.299 0 2.903-.25a3.29 3.29 0 0 0 1.78-1.78c.25-.604.25-1.37.25-2.904.001-1.532 0-2.298-.25-2.902a3.29 3.29 0 0 0-1.781-1.78C18.363 0 17.598 0 16.066 0c-1.533 0-2.3 0-2.904.25a3.29 3.29 0 0 0-1.78 1.78c-.25.605-.25 1.372-.25 2.904ZM11.382 13.162c-.25.604-.25 1.37-.25 2.903s0 2.3.25 2.904a3.29 3.29 0 0 0 1.78 1.78c.604.25 1.37.25 2.903.25 1.532 0 2.3 0 2.904-.25a3.29 3.29 0 0 0 1.78-1.78c.251-.605.251-1.37.251-2.904 0-1.532-.001-2.298-.252-2.902a3.291 3.291 0 0 0-1.78-1.78c-.604-.251-1.37-.252-2.902-.252-1.533 0-2.3 0-2.904.25a3.29 3.29 0 0 0-1.78 1.78ZM.25 24.431C0 25.036 0 25.802 0 27.335c0 1.532 0 2.299.25 2.903a3.29 3.29 0 0 0 1.78 1.78c.605.251 1.372.251 2.904.251 1.532 0 2.3 0 2.904-.25a3.29 3.29 0 0 0 1.78-1.78c.25-.605.25-1.372.25-2.904 0-1.533 0-2.298-.25-2.903a3.29 3.29 0 0 0-1.781-1.78c-.605-.25-1.37-.252-2.903-.252-1.532 0-2.299 0-2.903.25a3.29 3.29 0 0 0-1.78 1.781Z"
      />
    </svg>
  ),
  nextint: (props: IconProps) => (
    <svg xmlns="http://www.w3.org/2000/svg" id="Layer_1" width={16} height={16} fill="#000" data-name="Layer 1" viewBox="0 0 24 24" {...props}>
      <g id="SVGRepo_iconCarrier">
        <defs>
          <style>{".cls-1{fill:none;stroke:#020202;stroke-miterlimit:10;stroke-width:1.92px}"}</style>
        </defs>
        <path d="M20.63 11.04v11.5H3.38v-11.5" className="cls-1" />
        <path d="M22.54 11.04 12 2.42 1.46 11.04V12h21.08v-.96zM13.92 16.79h1.92v5.75h-1.92zM8.17 16.79h1.92v1.92H8.17zM23.5 22.54H.5" className="cls-1" />
        <path d="M3.38 9.47V1.46h3.83v4.88M9.13 1.46H1.46" className="cls-1" />
      </g>
    </svg>
  ),
  npm: (props: IconProps) => (
    <svg viewBox="0 0 24 24" {...props}>
      <path
        d="M1.763 0C.786 0 0 .786 0 1.763v20.474C0 23.214.786 24 1.763 24h20.474c.977 0 1.763-.786 1.763-1.763V1.763C24 .786 23.214 0 22.237 0zM5.13 5.323l13.837.019-.009 13.836h-3.464l.01-10.382h-3.456L12.04 19.17H5.113z"
        fill="currentColor"
      />
    </svg>
  ),
  yarn: (props: IconProps) => (
    <svg viewBox="0 0 24 24" {...props}>
      <path
        d="M12 0C5.375 0 0 5.375 0 12s5.375 12 12 12 12-5.375 12-12S18.625 0 12 0zm.768 4.105c.183 0 .363.053.525.157.125.083.287.185.755 1.154.31-.088.468-.042.551-.019.204.056.366.19.463.375.477.917.542 2.553.334 3.605-.241 1.232-.755 2.029-1.131 2.576.324.329.778.899 1.117 1.825.278.774.31 1.478.273 2.015a5.51 5.51 0 0 0 .602-.329c.593-.366 1.487-.917 2.553-.931.714-.009 1.269.445 1.353 1.103a1.23 1.23 0 0 1-.945 1.362c-.649.158-.95.278-1.821.843-1.232.797-2.539 1.242-3.012 1.39a1.686 1.686 0 0 1-.704.343c-.737.181-3.266.315-3.466.315h-.046c-.783 0-1.214-.241-1.45-.491-.658.329-1.51.19-2.122-.134a1.078 1.078 0 0 1-.58-1.153 1.243 1.243 0 0 1-.153-.195c-.162-.25-.528-.936-.454-1.946.056-.723.556-1.367.88-1.71a5.522 5.522 0 0 1 .408-2.256c.306-.727.885-1.348 1.32-1.737-.32-.537-.644-1.367-.329-2.21.227-.602.412-.936.82-1.08h-.005c.199-.074.389-.153.486-.259a3.418 3.418 0 0 1 2.298-1.103c.037-.093.079-.185.125-.283.31-.658.639-1.029 1.024-1.168a.94.94 0 0 1 .328-.06zm.006.7c-.507.016-1.001 1.519-1.001 1.519s-1.27-.204-2.266.871c-.199.218-.468.334-.746.44-.079.028-.176.023-.417.672-.371.991.625 2.094.625 2.094s-1.186.839-1.626 1.881c-.486 1.144-.338 2.261-.338 2.261s-.843.732-.899 1.487c-.051.663.139 1.2.343 1.515.227.343.51.176.51.176s-.561.653-.037.931c.477.25 1.283.394 1.71-.037.31-.31.371-1.001.486-1.283.028-.065.12.111.209.199.097.093.264.195.264.195s-.755.324-.445 1.066c.102.246.468.403 1.066.398.222-.005 2.664-.139 3.313-.296.375-.088.505-.283.505-.283s1.566-.431 2.998-1.357c.917-.598 1.293-.76 2.034-.936.612-.148.57-1.098-.241-1.084-.839.009-1.575.44-2.196.825-1.163.718-1.742.672-1.742.672l-.018-.032c-.079-.13.371-1.293-.134-2.678-.547-1.515-1.413-1.881-1.344-1.997.297-.5 1.038-1.297 1.334-2.78.176-.899.13-2.377-.269-3.151-.074-.144-.732.241-.732.241s-.616-1.371-.788-1.483a.271.271 0 0 0-.157-.046z"
        fill="currentColor"
      />
    </svg>
  ),
  pnpm: (props: IconProps) => (
    <svg viewBox="0 0 24 24" {...props}>
      <path d="M0 0v7.5h7.5V0zm8.25 0v7.5h7.498V0zm8.25 0v7.5H24V0zM8.25 8.25v7.5h7.498v-7.5zm8.25 0v7.5H24v-7.5zM0 16.5V24h7.5v-7.5zm8.25 0V24h7.498v-7.5zm8.25 0V24H24v-7.5z" fill="currentColor" />
    </svg>
  ),
  react: (props: IconProps) => (
    <svg viewBox="0 0 24 24" {...props}>
      <path
        d="M14.23 12.004a2.236 2.236 0 0 1-2.235 2.236 2.236 2.236 0 0 1-2.236-2.236 2.236 2.236 0 0 1 2.235-2.236 2.236 2.236 0 0 1 2.236 2.236zm2.648-10.69c-1.346 0-3.107.96-4.888 2.622-1.78-1.653-3.542-2.602-4.887-2.602-.41 0-.783.093-1.106.278-1.375.793-1.683 3.264-.973 6.365C1.98 8.917 0 10.42 0 12.004c0 1.59 1.99 3.097 5.043 4.03-.704 3.113-.39 5.588.988 6.38.32.187.69.275 1.102.275 1.345 0 3.107-.96 4.888-2.624 1.78 1.654 3.542 2.603 4.887 2.603.41 0 .783-.09 1.106-.275 1.374-.792 1.683-3.263.973-6.365C22.02 15.096 24 13.59 24 12.004c0-1.59-1.99-3.097-5.043-4.032.704-3.11.39-5.587-.988-6.38-.318-.184-.688-.277-1.092-.278zm-.005 1.09v.006c.225 0 .406.044.558.127.666.382.955 1.835.73 3.704-.054.46-.142.945-.25 1.44-.96-.236-2.006-.417-3.107-.534-.66-.905-1.345-1.727-2.035-2.447 1.592-1.48 3.087-2.292 4.105-2.295zm-9.77.02c1.012 0 2.514.808 4.11 2.28-.686.72-1.37 1.537-2.02 2.442-1.107.117-2.154.298-3.113.538-.112-.49-.195-.964-.254-1.42-.23-1.868.054-3.32.714-3.707.19-.09.4-.127.563-.132zm4.882 3.05c.455.468.91.992 1.36 1.564-.44-.02-.89-.034-1.345-.034-.46 0-.915.01-1.36.034.44-.572.895-1.096 1.345-1.565zM12 8.1c.74 0 1.477.034 2.202.093.406.582.802 1.203 1.183 1.86.372.64.71 1.29 1.018 1.946-.308.655-.646 1.31-1.013 1.95-.38.66-.773 1.288-1.18 1.87-.728.063-1.466.098-2.21.098-.74 0-1.477-.035-2.202-.093-.406-.582-.802-1.204-1.183-1.86-.372-.64-.71-1.29-1.018-1.946.303-.657.646-1.313 1.013-1.954.38-.66.773-1.286 1.18-1.868.728-.064 1.466-.098 2.21-.098zm-3.635.254c-.24.377-.48.763-.704 1.16-.225.39-.435.782-.635 1.174-.265-.656-.49-1.31-.676-1.947.64-.15 1.315-.283 2.015-.386zm7.26 0c.695.103 1.365.23 2.006.387-.18.632-.405 1.282-.66 1.933-.2-.39-.41-.783-.64-1.174-.225-.392-.465-.774-.705-1.146zm3.063.675c.484.15.944.317 1.375.498 1.732.74 2.852 1.708 2.852 2.476-.005.768-1.125 1.74-2.857 2.475-.42.18-.88.342-1.355.493-.28-.958-.646-1.956-1.1-2.98.45-1.017.81-2.01 1.085-2.964zm-13.395.004c.278.96.645 1.957 1.1 2.98-.45 1.017-.812 2.01-1.086 2.964-.484-.15-.944-.318-1.37-.5-1.732-.737-2.852-1.706-2.852-2.474 0-.768 1.12-1.742 2.852-2.476.42-.18.88-.342 1.356-.494zm11.678 4.28c.265.657.49 1.312.676 1.948-.64.157-1.316.29-2.016.39.24-.375.48-.762.705-1.158.225-.39.435-.788.636-1.18zm-9.945.02c.2.392.41.783.64 1.175.23.39.465.772.705 1.143-.695-.102-1.365-.23-2.006-.386.18-.63.406-1.282.66-1.933zM17.92 16.32c.112.493.2.968.254 1.423.23 1.868-.054 3.32-.714 3.708-.147.09-.338.128-.563.128-1.012 0-2.514-.807-4.11-2.28.686-.72 1.37-1.536 2.02-2.44 1.107-.118 2.154-.3 3.113-.54zm-11.83.01c.96.234 2.006.415 3.107.532.66.905 1.345 1.727 2.035 2.446-1.595 1.483-3.092 2.295-4.11 2.295-.22-.005-.406-.05-.553-.132-.666-.38-.955-1.834-.73-3.703.054-.46.142-.944.25-1.438zm4.56.64c.44.02.89.034 1.345.034.46 0 .915-.01 1.36-.034-.44.572-.895 1.095-1.345 1.565-.455-.47-.91-.993-1.36-1.565z"
        fill="currentColor"
      />
    </svg>
  ),
  tailwind: (props: IconProps) => (
    <svg viewBox="0 0 24 24" {...props}>
      <path
        d="M12.001,4.8c-3.2,0-5.2,1.6-6,4.8c1.2-1.6,2.6-2.2,4.2-1.8c0.913,0.228,1.565,0.89,2.288,1.624 C13.666,10.618,15.027,12,18.001,12c3.2,0,5.2-1.6,6-4.8c-1.2,1.6-2.6,2.2-4.2,1.8c-0.913-0.228-1.565-0.89-2.288-1.624 C16.337,6.182,14.976,4.8,12.001,4.8z M6.001,12c-3.2,0-5.2,1.6-6,4.8c1.2-1.6,2.6-2.2,4.2-1.8c0.913,0.228,1.565,0.89,2.288,1.624 c1.177,1.194,2.538,2.576,5.512,2.576c3.2,0,5.2-1.6,6-4.8c-1.2,1.6-2.6,2.2-4.2,1.8c-0.913-0.228-1.565-0.89-2.288-1.624 C10.337,13.382,8.976,12,6.001,12z"
        fill="currentColor"
      />
    </svg>
  ),
  google: (props: IconProps) => (
    <svg role="img" viewBox="0 0 24 24" {...props}>
      <path
        fill="currentColor"
        d="M12.48 10.92v3.28h7.84c-.24 1.84-.853 3.187-1.787 4.133-1.147 1.147-2.933 2.4-6.053 2.4-4.827 0-8.6-3.893-8.6-8.72s3.773-8.72 8.6-8.72c2.6 0 4.507 1.027 5.907 2.347l2.307-2.307C18.747 1.44 16.133 0 12.48 0 5.867 0 .307 5.387.307 12s5.56 12 12.173 12c3.573 0 6.267-1.173 8.373-3.36 2.16-2.16 2.84-5.213 2.84-7.667 0-.76-.053-1.467-.173-2.053H12.48z"
      />
    </svg>
  ),
  apple: (props: IconProps) => (
    <svg role="img" viewBox="0 0 24 24" {...props}>
      <path
        d="M12.152 6.896c-.948 0-2.415-1.078-3.96-1.04-2.04.027-3.91 1.183-4.961 3.014-2.117 3.675-.546 9.103 1.519 12.09 1.013 1.454 2.208 3.09 3.792 3.039 1.52-.065 2.09-.987 3.935-.987 1.831 0 2.35.987 3.96.948 1.637-.026 2.676-1.48 3.676-2.948 1.156-1.688 1.636-3.325 1.662-3.415-.039-.013-3.182-1.221-3.22-4.857-.026-3.04 2.48-4.494 2.597-4.559-1.429-2.09-3.623-2.324-4.39-2.376-2-.156-3.675 1.09-4.61 1.09zM15.53 3.83c.843-1.012 1.4-2.427 1.245-3.83-1.207.052-2.662.805-3.532 1.818-.78.896-1.454 2.338-1.273 3.714 1.338.104 2.715-.688 3.559-1.701"
        fill="currentColor"
      />
    </svg>
  ),
  applePay: (props: IconProps) => (
    <svg role="img" viewBox="0 0 24 24" {...props}>
      <title>Apple Pay</title>
      <path d="M2.15 4.318a42.16 42.16 0 0 0-.454.003c-.15.005-.303.013-.452.04a1.44 1.44 0 0 0-1.06.772c-.07.138-.114.278-.14.43-.028.148-.037.3-.04.45A10.2 10.2 0 0 0 0 6.222v11.557c0 .07.002.138.003.207.004.15.013.303.04.452.027.15.072.291.142.429a1.436 1.436 0 0 0 .63.63c.138.07.278.115.43.142.148.027.3.036.45.04l.208.003h20.194l.207-.003c.15-.004.303-.013.452-.04.15-.027.291-.071.428-.141a1.432 1.432 0 0 0 .631-.631c.07-.138.115-.278.141-.43.027-.148.036-.3.04-.45.002-.07.003-.138.003-.208l.001-.246V6.221c0-.07-.002-.138-.004-.207a2.995 2.995 0 0 0-.04-.452 1.446 1.446 0 0 0-1.2-1.201 3.022 3.022 0 0 0-.452-.04 10.448 10.448 0 0 0-.453-.003zm0 .512h19.942c.066 0 .131.002.197.003.115.004.25.01.375.032.109.02.2.05.287.094a.927.927 0 0 1 .407.407.997.997 0 0 1 .094.288c.022.123.028.258.031.374.002.065.003.13.003.197v11.552c0 .065 0 .13-.003.196-.003.115-.009.25-.032.375a.927.927 0 0 1-.5.693 1.002 1.002 0 0 1-.286.094 2.598 2.598 0 0 1-.373.032l-.2.003H1.906c-.066 0-.133-.002-.196-.003a2.61 2.61 0 0 1-.375-.032c-.109-.02-.2-.05-.288-.094a.918.918 0 0 1-.406-.407 1.006 1.006 0 0 1-.094-.288 2.531 2.531 0 0 1-.032-.373 9.588 9.588 0 0 1-.002-.197V6.224c0-.065 0-.131.002-.197.004-.114.01-.248.032-.375.02-.108.05-.199.094-.287a.925.925 0 0 1 .407-.406 1.03 1.03 0 0 1 .287-.094c.125-.022.26-.029.375-.032.065-.002.131-.002.196-.003zm4.71 3.7c-.3.016-.668.199-.88.456-.191.22-.36.58-.316.918.338.03.675-.169.888-.418.205-.258.345-.603.308-.955zm2.207.42v5.493h.852v-1.877h1.18c1.078 0 1.835-.739 1.835-1.812 0-1.07-.742-1.805-1.808-1.805zm.852.719h.982c.739 0 1.161.396 1.161 1.089 0 .692-.422 1.092-1.164 1.092h-.979zm-3.154.3c-.45.01-.83.28-1.05.28-.235 0-.593-.264-.981-.257a1.446 1.446 0 0 0-1.23.747c-.527.908-.139 2.255.374 2.995.249.366.549.769.944.754.373-.014.52-.242.973-.242.454 0 .586.242.98.235.41-.007.667-.366.915-.733.286-.417.403-.82.41-.841-.007-.008-.79-.308-.797-1.209-.008-.754.615-1.113.644-1.135-.352-.52-.9-.578-1.09-.593a1.123 1.123 0 0 0-.092-.002zm8.204.397c-.99 0-1.606.533-1.652 1.256h.777c.072-.358.369-.586.845-.586.502 0 .803.266.803.711v.309l-1.097.064c-.951.054-1.488.484-1.488 1.184 0 .72.548 1.207 1.332 1.207.526 0 1.032-.281 1.264-.727h.019v.659h.788v-2.76c0-.803-.62-1.317-1.591-1.317zm1.94.072l1.446 4.009c0 .003-.073.24-.073.247-.125.41-.33.571-.711.571-.069 0-.206 0-.267-.015v.666c.06.011.267.019.335.019.83 0 1.226-.312 1.568-1.283l1.5-4.214h-.868l-1.012 3.259h-.015l-1.013-3.26zm-1.167 2.189v.316c0 .521-.45.917-1.024.917-.442 0-.731-.228-.731-.579 0-.342.278-.56.769-.593z" />
    </svg>
  ),

  paypal: (props: IconProps) => (
    <svg role="img" viewBox="0 0 24 24" {...props}>
      <path
        d="M7.076 21.337H2.47a.641.641 0 0 1-.633-.74L4.944.901C5.026.382 5.474 0 5.998 0h7.46c2.57 0 4.578.543 5.69 1.81 1.01 1.15 1.304 2.42 1.012 4.287-.023.143-.047.288-.077.437-.983 5.05-4.349 6.797-8.647 6.797h-2.19c-.524 0-.968.382-1.05.9l-1.12 7.106zm14.146-14.42a3.35 3.35 0 0 0-.607-.541c-.013.076-.026.175-.041.254-.93 4.778-4.005 7.201-9.138 7.201h-2.19a.563.563 0 0 0-.556.479l-1.187 7.527h-.506l-.24 1.516a.56.56 0 0 0 .554.647h3.882c.46 0 .85-.334.922-.788.06-.26.76-4.852.816-5.09a.932.932 0 0 1 .923-.788h.58c3.76 0 6.705-1.528 7.565-5.946.36-1.847.174-3.388-.777-4.471z"
        fill="currentColor"
      />
    </svg>
  ),
  notion: (props: IconProps) => (
    <svg width="100" height="100" viewBox="0 0 100 100" fill="none" xmlns="http://www.w3.org/2000/svg" {...props}>
      <path
        d="M6.017 4.313l55.333 -4.087c6.797 -0.583 8.543 -0.19 12.817 2.917l17.663 12.443c2.913 2.14 3.883 2.723 3.883 5.053v68.243c0 4.277 -1.553 6.807 -6.99 7.193L24.467 99.967c-4.08 0.193 -6.023 -0.39 -8.16 -3.113L3.3 79.94c-2.333 -3.113 -3.3 -5.443 -3.3 -8.167V11.113c0 -3.497 1.553 -6.413 6.017 -6.8z"
        fill="#fff"
      />
      <path
        fillRule="evenodd"
        clipRule="evenodd"
        d="M61.35 0.227l-55.333 4.087C1.553 4.7 0 7.617 0 11.113v60.66c0 2.723 0.967 5.053 3.3 8.167l13.007 16.913c2.137 2.723 4.08 3.307 8.16 3.113l64.257 -3.89c5.433 -0.387 6.99 -2.917 6.99 -7.193V20.64c0 -2.21 -0.873 -2.847 -3.443 -4.733L74.167 3.143c-4.273 -3.107 -6.02 -3.5 -12.817 -2.917zM25.92 19.523c-5.247 0.353 -6.437 0.433 -9.417 -1.99L8.927 11.507c-0.77 -0.78 -0.383 -1.753 1.557 -1.947l53.193 -3.887c4.467 -0.39 6.793 1.167 8.54 2.527l9.123 6.61c0.39 0.197 1.36 1.36 0.193 1.36l-54.933 3.307 -0.68 0.047zM19.803 88.3V30.367c0 -2.53 0.777 -3.697 3.103 -3.893L86 22.78c2.14 -0.193 3.107 1.167 3.107 3.693v57.547c0 2.53 -0.39 4.67 -3.883 4.863l-60.377 3.5c-3.493 0.193 -5.043 -0.97 -5.043 -4.083zm59.6 -54.827c0.387 1.75 0 3.5 -1.75 3.7l-2.91 0.577v42.773c-2.527 1.36 -4.853 2.137 -6.797 2.137 -3.107 0 -3.883 -0.973 -6.21 -3.887l-19.03 -29.94v28.967l6.02 1.363s0 3.5 -4.857 3.5l-13.39 0.777c-0.39 -0.78 0 -2.723 1.357 -3.11l3.497 -0.97v-38.3L30.48 40.667c-0.39 -1.75 0.58 -4.277 3.3 -4.473l14.367 -0.967 19.8 30.327v-26.83l-5.047 -0.58c-0.39 -2.143 1.163 -3.7 3.103 -3.89l13.4 -0.78z"
        fill="#000"
      />
    </svg>
  ),

  openai: (props: IconProps) => (
    <svg role="img" viewBox="0 0 24 24" {...props}>
      <path d="M22.2819 9.8211a5.9847 5.9847 0 0 0-.5157-4.9108 6.0462 6.0462 0 0 0-6.5098-2.9A6.0651 6.0651 0 0 0 4.9807 4.1818a5.9847 5.9847 0 0 0-3.9977 2.9 6.0462 6.0462 0 0 0 .7427 7.0966 5.98 5.98 0 0 0 .511 4.9107 6.051 6.051 0 0 0 6.5146 2.9001A5.9847 5.9847 0 0 0 13.2599 24a6.0557 6.0557 0 0 0 5.7718-4.2058 5.9894 5.9894 0 0 0 3.9977-2.9001 6.0557 6.0557 0 0 0-.7475-7.0729zm-9.022 12.6081a4.4755 4.4755 0 0 1-2.8764-1.0408l.1419-.0804 4.7783-2.7582a.7948.7948 0 0 0 .3927-.6813v-6.7369l2.02 1.1686a.071.071 0 0 1 .038.052v5.5826a4.504 4.504 0 0 1-4.4945 4.4944zm-9.6607-4.1254a4.4708 4.4708 0 0 1-.5346-3.0137l.142.0852 4.783 2.7582a.7712.7712 0 0 0 .7806 0l5.8428-3.3685v2.3324a.0804.0804 0 0 1-.0332.0615L9.74 19.9502a4.4992 4.4992 0 0 1-6.1408-1.6464zM2.3408 7.8956a4.485 4.485 0 0 1 2.3655-1.9728V11.6a.7664.7664 0 0 0 .3879.6765l5.8144 3.3543-2.0201 1.1685a.0757.0757 0 0 1-.071 0l-4.8303-2.7865A4.504 4.504 0 0 1 2.3408 7.872zm16.5963 3.8558L13.1038 8.364 15.1192 7.2a.0757.0757 0 0 1 .071 0l4.8303 2.7913a4.4944 4.4944 0 0 1-.6765 8.1042v-5.6772a.79.79 0 0 0-.407-.667zm2.0107-3.0231l-.142-.0852-4.7735-2.7818a.7759.7759 0 0 0-.7854 0L9.409 9.2297V6.8974a.0662.0662 0 0 1 .0284-.0615l4.8303-2.7866a4.4992 4.4992 0 0 1 6.6802 4.66zM8.3065 12.863l-2.02-1.1638a.0804.0804 0 0 1-.038-.0567V6.0742a4.4992 4.4992 0 0 1 7.3757-3.4537l-.142.0805L8.704 5.459a.7948.7948 0 0 0-.3927.6813zm1.0976-2.3654l2.602-1.4998 2.6069 1.4998v2.9994l-2.5974 1.4997-2.6067-1.4997Z" />
    </svg>
  ),
  zapier: (props: IconProps) => (
    <svg width="105" height="28" data-testid="ZapierLogo" viewBox="0 0 244 66" fill="none" xmlns="http://www.w3.org/2000/svg" {...props}>
      <path d="M57.1877 45.2253L57.1534 45.1166L78.809 25.2914V15.7391H44.0663V25.2914H64.8181L64.8524 25.3829L43.4084 45.2253V54.7775H79.1579V45.2253H57.1877Z" fill="#201515"></path>
      <path
        d="M100.487 14.8297C96.4797 14.8297 93.2136 15.434 90.6892 16.6429C88.3376 17.6963 86.3568 19.4321 85.0036 21.6249C83.7091 23.8321 82.8962 26.2883 82.6184 28.832L93.1602 30.3135C93.5415 28.0674 94.3042 26.4754 95.4482 25.5373C96.7486 24.5562 98.3511 24.0605 99.9783 24.136C102.118 24.136 103.67 24.7079 104.634 25.8519C105.59 26.9959 106.076 28.5803 106.076 30.6681V31.7091H95.9401C90.7807 31.7091 87.0742 32.8531 84.8206 35.1411C82.5669 37.429 81.442 40.4492 81.4458 44.2014C81.4458 48.0452 82.5707 50.9052 84.8206 52.7813C87.0704 54.6574 89.8999 55.5897 93.3089 55.5783C97.5379 55.5783 100.791 54.1235 103.067 51.214C104.412 49.426 105.372 47.3793 105.887 45.2024H106.27L107.723 54.7546H117.275V30.5651C117.275 25.5659 115.958 21.6936 113.323 18.948C110.688 16.2024 106.409 14.8297 100.487 14.8297ZM103.828 44.6475C102.312 45.9116 100.327 46.5408 97.8562 46.5408C95.8199 46.5408 94.4052 46.1843 93.6121 45.4712C93.2256 45.1338 92.9182 44.7155 92.7116 44.246C92.505 43.7764 92.4043 43.2671 92.4166 42.7543C92.3941 42.2706 92.4702 41.7874 92.6403 41.3341C92.8104 40.8808 93.071 40.4668 93.4062 40.1174C93.7687 39.7774 94.1964 39.5145 94.6633 39.3444C95.1303 39.1743 95.6269 39.1006 96.1231 39.1278H106.093V39.7856C106.113 40.7154 105.919 41.6374 105.527 42.4804C105.134 43.3234 104.553 44.0649 103.828 44.6475Z"
        fill="#201515"
      ></path>
      <path d="M175.035 15.7391H163.75V54.7833H175.035V15.7391Z" fill="#201515"></path>
      <path
        d="M241.666 15.7391C238.478 15.7391 235.965 16.864 234.127 19.1139C232.808 20.7307 231.805 23.1197 231.119 26.2809H230.787L229.311 15.7391H219.673V54.7775H230.959V34.7578C230.959 32.2335 231.55 30.2982 232.732 28.9521C233.914 27.606 236.095 26.933 239.275 26.933H243.559V15.7391H241.666Z"
        fill="#201515"
      ></path>
      <path
        d="M208.473 17.0147C205.839 15.4474 202.515 14.6657 198.504 14.6695C192.189 14.6695 187.247 16.4675 183.678 20.0634C180.108 23.6593 178.324 28.6166 178.324 34.9352C178.233 38.7553 179.067 42.5407 180.755 45.9689C182.3 49.0238 184.706 51.5592 187.676 53.2618C190.665 54.9892 194.221 55.8548 198.344 55.8586C201.909 55.8586 204.887 55.3095 207.278 54.2113C209.526 53.225 211.483 51.6791 212.964 49.7211C214.373 47.7991 215.42 45.6359 216.052 43.3377L206.329 40.615C205.919 42.1094 205.131 43.4728 204.041 44.5732C202.942 45.6714 201.102 46.2206 198.521 46.2206C195.451 46.2206 193.163 45.3416 191.657 43.5837C190.564 42.3139 189.878 40.5006 189.575 38.1498H216.201C216.31 37.0515 216.367 36.1306 216.367 35.387V32.9561C216.431 29.6903 215.757 26.4522 214.394 23.4839C213.118 20.7799 211.054 18.5248 208.473 17.0147ZM198.178 23.9758C202.754 23.9758 205.348 26.2275 205.962 30.731H189.775C190.032 29.2284 190.655 27.8121 191.588 26.607C193.072 24.8491 195.268 23.972 198.178 23.9758Z"
        fill="#201515"
      ></path>
      <path
        d="M169.515 0.00366253C168.666 -0.0252113 167.82 0.116874 167.027 0.421484C166.234 0.726094 165.511 1.187 164.899 1.77682C164.297 2.3723 163.824 3.08658 163.512 3.87431C163.2 4.66204 163.055 5.50601 163.086 6.35275C163.056 7.20497 163.201 8.05433 163.514 8.84781C163.826 9.64129 164.299 10.3619 164.902 10.9646C165.505 11.5673 166.226 12.0392 167.02 12.3509C167.814 12.6626 168.663 12.8074 169.515 12.7762C170.362 12.8082 171.206 12.6635 171.994 12.3514C172.782 12.0392 173.496 11.5664 174.091 10.963C174.682 10.3534 175.142 9.63077 175.446 8.83849C175.75 8.04621 175.89 7.20067 175.859 6.35275C175.898 5.50985 175.761 4.66806 175.456 3.88115C175.151 3.09424 174.686 2.37951 174.09 1.78258C173.493 1.18565 172.779 0.719644 171.992 0.414327C171.206 0.109011 170.364 -0.0288946 169.521 0.00938803L169.515 0.00366253Z"
        fill="#201515"
      ></path>
      <path
        d="M146.201 14.6695C142.357 14.6695 139.268 15.8764 136.935 18.2902C135.207 20.0786 133.939 22.7479 133.131 26.2981H132.771L131.295 15.7563H121.657V66H132.942V45.3054H133.354C133.698 46.6852 134.181 48.0267 134.795 49.3093C135.75 51.3986 137.316 53.1496 139.286 54.3314C141.328 55.446 143.629 56.0005 145.955 55.9387C150.68 55.9387 154.277 54.0988 156.748 50.419C159.219 46.7392 160.455 41.6046 160.455 35.0153C160.455 28.6509 159.259 23.6689 156.869 20.0691C154.478 16.4694 150.922 14.6695 146.201 14.6695ZM147.345 42.9602C146.029 44.8668 143.97 45.8201 141.167 45.8201C140.012 45.8735 138.86 45.6507 137.808 45.1703C136.755 44.6898 135.832 43.9656 135.116 43.0574C133.655 41.2233 132.927 38.7122 132.931 35.5243V34.7807C132.931 31.5432 133.659 29.0646 135.116 27.3448C136.572 25.625 138.59 24.7747 141.167 24.7937C144.02 24.7937 146.092 25.6994 147.385 27.5107C148.678 29.322 149.324 31.8483 149.324 35.0896C149.332 38.4414 148.676 41.065 147.356 42.9602H147.345Z"
        fill="#201515"
      ></path>
      <path d="M39.0441 45.2253H0V54.789H39.0441V45.2253Z" fill="#FF4F00"></path>
    </svg>
  ),
  googleDrive: (props: IconProps) => (
    <svg viewBox="0 0 87.3 78" xmlns="http://www.w3.org/2000/svg" {...props}>
      <path d="m6.6 66.85 3.85 6.65c.8 1.4 1.95 2.5 3.3 3.3l13.75-23.8h-27.5c0 1.55.4 3.1 1.2 4.5z" fill="#0066da" />
      <path d="m43.65 25-13.75-23.8c-1.35.8-2.5 1.9-3.3 3.3l-25.4 44a9.06 9.06 0 0 0 -1.2 4.5h27.5z" fill="#00ac47" />
      <path d="m73.55 76.8c1.35-.8 2.5-1.9 3.3-3.3l1.6-2.75 7.65-13.25c.8-1.4 1.2-2.95 1.2-4.5h-27.502l5.852 11.5z" fill="#ea4335" />
      <path d="m43.65 25 13.75-23.8c-1.35-.8-2.9-1.2-4.5-1.2h-18.5c-1.6 0-3.15.45-4.5 1.2z" fill="#00832d" />
      <path d="m59.8 53h-32.3l-13.75 23.8c1.35.8 2.9 1.2 4.5 1.2h50.8c1.6 0 3.15-.45 4.5-1.2z" fill="#2684fc" />
      <path d="m73.4 26.5-12.7-22c-.8-1.4-1.95-2.5-3.3-3.3l-13.75 23.8 16.15 28h27.45c0-1.55-.4-3.1-1.2-4.5z" fill="#ffba00" />
    </svg>
  ),
  messenger: (props: IconProps) => (
    <svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" width="100" height="100" viewBox="0 0 48 48" {...props}>
      <radialGradient id="8O3wK6b5ASW2Wn6hRCB5xa_YFbzdUk7Q3F8_gr1" cx="11.087" cy="7.022" r="47.612" gradientTransform="matrix(1 0 0 -1 0 50)" gradientUnits="userSpaceOnUse">
        <stop offset="0" stopColor="#1292ff"></stop>
        <stop offset=".079" stopColor="#2982ff"></stop>
        <stop offset=".23" stopColor="#4e69ff"></stop>
        <stop offset=".351" stopColor="#6559ff"></stop>
        <stop offset=".428" stopColor="#6d53ff"></stop>
        <stop offset=".754" stopColor="#df47aa"></stop>
        <stop offset=".946" stopColor="#ff6257"></stop>
      </radialGradient>
      <path
        fill="url(#8O3wK6b5ASW2Wn6hRCB5xa_YFbzdUk7Q3F8_gr1)"
        d="M44,23.5C44,34.27,35.05,43,24,43c-1.651,0-3.25-0.194-4.784-0.564	c-0.465-0.112-0.951-0.069-1.379,0.145L13.46,44.77C12.33,45.335,11,44.513,11,43.249v-4.025c0-0.575-0.257-1.111-0.681-1.499	C6.425,34.165,4,29.11,4,23.5C4,12.73,12.95,4,24,4S44,12.73,44,23.5z"
      ></path>
      <path
        d="M34.992,17.292c-0.428,0-0.843,0.142-1.2,0.411l-5.694,4.215	c-0.133,0.1-0.28,0.15-0.435,0.15c-0.15,0-0.291-0.047-0.41-0.136l-3.972-2.99c-0.808-0.601-1.76-0.918-2.757-0.918	c-1.576,0-3.025,0.791-3.876,2.116l-1.211,1.891l-4.12,6.695c-0.392,0.614-0.422,1.372-0.071,2.014	c0.358,0.654,1.034,1.06,1.764,1.06c0.428,0,0.843-0.142,1.2-0.411l5.694-4.215c0.133-0.1,0.28-0.15,0.435-0.15	c0.15,0,0.291,0.047,0.41,0.136l3.972,2.99c0.809,0.602,1.76,0.918,2.757,0.918c1.576,0,3.025-0.791,3.876-2.116l1.211-1.891	l4.12-6.695c0.392-0.614,0.422-1.372,0.071-2.014C36.398,17.698,35.722,17.292,34.992,17.292L34.992,17.292z"
        opacity=".05"
      ></path>
      <path
        d="M34.992,17.792c-0.319,0-0.63,0.107-0.899,0.31l-5.697,4.218	c-0.216,0.163-0.468,0.248-0.732,0.248c-0.259,0-0.504-0.082-0.71-0.236l-3.973-2.991c-0.719-0.535-1.568-0.817-2.457-0.817	c-1.405,0-2.696,0.705-3.455,1.887l-1.21,1.891l-4.115,6.688c-0.297,0.465-0.32,1.033-0.058,1.511c0.266,0.486,0.787,0.8,1.325,0.8	c0.319,0,0.63-0.107,0.899-0.31l5.697-4.218c0.216-0.163,0.468-0.248,0.732-0.248c0.259,0,0.504,0.082,0.71,0.236l3.973,2.991	c0.719,0.535,1.568,0.817,2.457,0.817c1.405,0,2.696-0.705,3.455-1.887l1.21-1.891l4.115-6.688c0.297-0.465,0.32-1.033,0.058-1.511	C36.051,18.106,35.531,17.792,34.992,17.792L34.992,17.792z"
        opacity=".07"
      ></path>
      <path
        fill="#fff"
        d="M34.394,18.501l-5.7,4.22c-0.61,0.46-1.44,0.46-2.04,0.01L22.68,19.74	c-1.68-1.25-4.06-0.82-5.19,0.94l-1.21,1.89l-4.11,6.68c-0.6,0.94,0.55,2.01,1.44,1.34l5.7-4.22c0.61-0.46,1.44-0.46,2.04-0.01	l3.974,2.991c1.68,1.25,4.06,0.82,5.19-0.94l1.21-1.89l4.11-6.68C36.434,18.901,35.284,17.831,34.394,18.501z"
      ></path>
    </svg>
  ),
  whatsapp: (props: IconProps) => (
    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 175.216 175.552" {...props}>
      <defs>
        <linearGradient id="b" x1="85.915" x2="86.535" y1="32.567" y2="137.092" gradientUnits="userSpaceOnUse">
          <stop offset="0" stopColor="#57d163" />
          <stop offset="1" stopColor="#23b33a" />
        </linearGradient>
        <filter id="a" width="1.115" height="1.114" x="-.057" y="-.057" colorInterpolationFilters="sRGB">
          <feGaussianBlur stdDeviation="3.531" />
        </filter>
      </defs>
      <path
        fill="#b3b3b3"
        d="m54.532 138.45 2.235 1.324c9.387 5.571 20.15 8.518 31.126 8.523h.023c33.707 0 61.139-27.426 61.153-61.135.006-16.335-6.349-31.696-17.895-43.251A60.75 60.75 0 0 0 87.94 25.983c-33.733 0-61.166 27.423-61.178 61.13a60.98 60.98 0 0 0 9.349 32.535l1.455 2.312-6.179 22.558zm-40.811 23.544L24.16 123.88c-6.438-11.154-9.825-23.808-9.821-36.772.017-40.556 33.021-73.55 73.578-73.55 19.681.01 38.154 7.669 52.047 21.572s21.537 32.383 21.53 52.037c-.018 40.553-33.027 73.553-73.578 73.553h-.032c-12.313-.005-24.412-3.094-35.159-8.954zm0 0"
        filter="url(#a)"
      />
      <path
        fill="#fff"
        d="m12.966 161.238 10.439-38.114a73.42 73.42 0 0 1-9.821-36.772c.017-40.556 33.021-73.55 73.578-73.55 19.681.01 38.154 7.669 52.047 21.572s21.537 32.383 21.53 52.037c-.018 40.553-33.027 73.553-73.578 73.553h-.032c-12.313-.005-24.412-3.094-35.159-8.954z"
      />
      <path
        fill="url(#linearGradient1780)"
        d="M87.184 25.227c-33.733 0-61.166 27.423-61.178 61.13a60.98 60.98 0 0 0 9.349 32.535l1.455 2.312-6.179 22.559 23.146-6.069 2.235 1.324c9.387 5.571 20.15 8.518 31.126 8.524h.023c33.707 0 61.14-27.426 61.153-61.135a60.75 60.75 0 0 0-17.895-43.251 60.75 60.75 0 0 0-43.235-17.929z"
      />
      <path
        fill="url(#b)"
        d="M87.184 25.227c-33.733 0-61.166 27.423-61.178 61.13a60.98 60.98 0 0 0 9.349 32.535l1.455 2.313-6.179 22.558 23.146-6.069 2.235 1.324c9.387 5.571 20.15 8.517 31.126 8.523h.023c33.707 0 61.14-27.426 61.153-61.135a60.75 60.75 0 0 0-17.895-43.251 60.75 60.75 0 0 0-43.235-17.928z"
      />
      <path
        fill="#fff"
        fillRule="evenodd"
        d="M68.772 55.603c-1.378-3.061-2.828-3.123-4.137-3.176l-3.524-.043c-1.226 0-3.218.46-4.902 2.3s-6.435 6.287-6.435 15.332 6.588 17.785 7.506 19.013 12.718 20.381 31.405 27.75c15.529 6.124 18.689 4.906 22.061 4.6s10.877-4.447 12.408-8.74 1.532-7.971 1.073-8.74-1.685-1.226-3.525-2.146-10.877-5.367-12.562-5.981-2.91-.919-4.137.921-4.746 5.979-5.819 7.206-2.144 1.381-3.984.462-7.76-2.861-14.784-9.124c-5.465-4.873-9.154-10.891-10.228-12.73s-.114-2.835.808-3.751c.825-.824 1.838-2.147 2.759-3.22s1.224-1.84 1.836-3.065.307-2.301-.153-3.22-4.032-10.011-5.666-13.647"
      />
    </svg>
  ),
  googleDocs: (props: IconProps) => (
    <svg width="47px" height="65px" viewBox="0 0 47 65" version="1.1" xmlns="http://www.w3.org/2000/svg" {...props}>
      <title>Docs-icon</title>
      <desc>Created with Sketch.</desc>
      <defs>
        <path d="M29.375,0 L4.40625,0 C1.9828125,0 0,1.99431818 0,4.43181818 L0,60.5681818 C0,63.0056818 1.9828125,65 4.40625,65 L42.59375,65 C45.0171875,65 47,63.0056818 47,60.5681818 L47,17.7272727 L29.375,0 Z" id="path-1"></path>
        <path d="M29.375,0 L4.40625,0 C1.9828125,0 0,1.99431818 0,4.43181818 L0,60.5681818 C0,63.0056818 1.9828125,65 4.40625,65 L42.59375,65 C45.0171875,65 47,63.0056818 47,60.5681818 L47,17.7272727 L29.375,0 Z" id="path-3"></path>
        <linearGradient x1="50.0053945%" y1="8.58610612%" x2="50.0053945%" y2="100.013939%" id="linearGradient-5">
          <stop stopColor="#1A237E" stopOpacity="0.2" offset="0%"></stop>
          <stop stopColor="#1A237E" stopOpacity="0.02" offset="100%"></stop>
        </linearGradient>
        <path d="M29.375,0 L4.40625,0 C1.9828125,0 0,1.99431818 0,4.43181818 L0,60.5681818 C0,63.0056818 1.9828125,65 4.40625,65 L42.59375,65 C45.0171875,65 47,63.0056818 47,60.5681818 L47,17.7272727 L29.375,0 Z" id="path-6"></path>
        <path d="M29.375,0 L4.40625,0 C1.9828125,0 0,1.99431818 0,4.43181818 L0,60.5681818 C0,63.0056818 1.9828125,65 4.40625,65 L42.59375,65 C45.0171875,65 47,63.0056818 47,60.5681818 L47,17.7272727 L29.375,0 Z" id="path-8"></path>
        <path d="M29.375,0 L4.40625,0 C1.9828125,0 0,1.99431818 0,4.43181818 L0,60.5681818 C0,63.0056818 1.9828125,65 4.40625,65 L42.59375,65 C45.0171875,65 47,63.0056818 47,60.5681818 L47,17.7272727 L29.375,0 Z" id="path-10"></path>
        <path d="M29.375,0 L4.40625,0 C1.9828125,0 0,1.99431818 0,4.43181818 L0,60.5681818 C0,63.0056818 1.9828125,65 4.40625,65 L42.59375,65 C45.0171875,65 47,63.0056818 47,60.5681818 L47,17.7272727 L29.375,0 Z" id="path-12"></path>
        <path d="M29.375,0 L4.40625,0 C1.9828125,0 0,1.99431818 0,4.43181818 L0,60.5681818 C0,63.0056818 1.9828125,65 4.40625,65 L42.59375,65 C45.0171875,65 47,63.0056818 47,60.5681818 L47,17.7272727 L29.375,0 Z" id="path-14"></path>
        <radialGradient cx="3.16804688%" cy="2.71744318%" fx="3.16804688%" fy="2.71744318%" r="161.248516%" gradientTransform="translate(0.031680,0.027174),scale(1.000000,0.723077),translate(-0.031680,-0.027174)" id="radialGradient-16">
          <stop stopColor="#FFFFFF" stopOpacity="0.1" offset="0%"></stop>
          <stop stopColor="#FFFFFF" stopOpacity="0" offset="100%"></stop>
        </radialGradient>
      </defs>
      <g id="Page-1" stroke="none" strokeWidth="1" fill="none" fillRule="evenodd">
        <g id="Consumer-Apps-Docs-Large-VD-R8" transform="translate(-451.000000, -463.000000)">
          <g id="Hero" transform="translate(0.000000, 63.000000)">
            <g id="Personal" transform="translate(277.000000, 309.000000)">
              <g id="Docs-icon" transform="translate(174.000000, 91.000000)">
                <g id="Group">
                  <g id="Clipped">
                    <mask id="mask-2" fill="white">
                      <use xlinkHref="#path-1"></use>
                    </mask>
                    <g id="SVGID_1_"></g>
                    <path
                      d="M29.375,0 L4.40625,0 C1.9828125,0 0,1.99431818 0,4.43181818 L0,60.5681818 C0,63.0056818 1.9828125,65 4.40625,65 L42.59375,65 C45.0171875,65 47,63.0056818 47,60.5681818 L47,17.7272727 L36.71875,10.3409091 L29.375,0 Z"
                      id="Path"
                      fill="#4285F4"
                      fillRule="nonzero"
                      mask="url(#mask-2)"
                    ></path>
                  </g>
                  <g id="Clipped">
                    <mask id="mask-4" fill="white">
                      <use xlinkHref="#path-3"></use>
                    </mask>
                    <g id="SVGID_1_"></g>
                    <polygon id="Path" fill="url(#linearGradient-5)" fillRule="nonzero" mask="url(#mask-4)" points="30.6638281 16.4309659 47 32.8582386 47 17.7272727"></polygon>
                  </g>
                  <g id="Clipped">
                    <mask id="mask-7" fill="white">
                      <use xlinkHref="#path-6"></use>
                    </mask>
                    <g id="SVGID_1_"></g>
                    <path
                      d="M11.75,47.2727273 L35.25,47.2727273 L35.25,44.3181818 L11.75,44.3181818 L11.75,47.2727273 Z M11.75,53.1818182 L29.375,53.1818182 L29.375,50.2272727 L11.75,50.2272727 L11.75,53.1818182 Z M11.75,32.5 L11.75,35.4545455 L35.25,35.4545455 L35.25,32.5 L11.75,32.5 Z M11.75,41.3636364 L35.25,41.3636364 L35.25,38.4090909 L11.75,38.4090909 L11.75,41.3636364 Z"
                      id="Shape"
                      fill="#F1F1F1"
                      fillRule="nonzero"
                      mask="url(#mask-7)"
                    ></path>
                  </g>
                  <g id="Clipped">
                    <mask id="mask-9" fill="white">
                      <use xlinkHref="#path-8"></use>
                    </mask>
                    <g id="SVGID_1_"></g>
                    <g id="Group" mask="url(#mask-9)">
                      <g transform="translate(26.437500, -2.954545)">
                        <path d="M2.9375,2.95454545 L2.9375,16.25 C2.9375,18.6985795 4.90929688,20.6818182 7.34375,20.6818182 L20.5625,20.6818182 L2.9375,2.95454545 Z" id="Path" fill="#A1C2FA" fillRule="nonzero"></path>
                      </g>
                    </g>
                  </g>
                  <g id="Clipped">
                    <mask id="mask-11" fill="white">
                      <use xlinkHref="#path-10"></use>
                    </mask>
                    <g id="SVGID_1_"></g>
                    <path
                      d="M4.40625,0 C1.9828125,0 0,1.99431818 0,4.43181818 L0,4.80113636 C0,2.36363636 1.9828125,0.369318182 4.40625,0.369318182 L29.375,0.369318182 L29.375,0 L4.40625,0 Z"
                      id="Path"
                      fillOpacity="0.2"
                      fill="#FFFFFF"
                      fillRule="nonzero"
                      mask="url(#mask-11)"
                    ></path>
                  </g>
                  <g id="Clipped">
                    <mask id="mask-13" fill="white">
                      <use xlinkHref="#path-12"></use>
                    </mask>
                    <g id="SVGID_1_"></g>
                    <path
                      d="M42.59375,64.6306818 L4.40625,64.6306818 C1.9828125,64.6306818 0,62.6363636 0,60.1988636 L0,60.5681818 C0,63.0056818 1.9828125,65 4.40625,65 L42.59375,65 C45.0171875,65 47,63.0056818 47,60.5681818 L47,60.1988636 C47,62.6363636 45.0171875,64.6306818 42.59375,64.6306818 Z"
                      id="Path"
                      fillOpacity="0.2"
                      fill="#1A237E"
                      fillRule="nonzero"
                      mask="url(#mask-13)"
                    ></path>
                  </g>
                  <g id="Clipped">
                    <mask id="mask-15" fill="white">
                      <use xlinkHref="#path-14"></use>
                    </mask>
                    <g id="SVGID_1_"></g>
                    <path
                      d="M33.78125,17.7272727 C31.3467969,17.7272727 29.375,15.7440341 29.375,13.2954545 L29.375,13.6647727 C29.375,16.1133523 31.3467969,18.0965909 33.78125,18.0965909 L47,18.0965909 L47,17.7272727 L33.78125,17.7272727 Z"
                      id="Path"
                      fillOpacity="0.1"
                      fill="#1A237E"
                      fillRule="nonzero"
                      mask="url(#mask-15)"
                    ></path>
                  </g>
                </g>
                <path
                  d="M29.375,0 L4.40625,0 C1.9828125,0 0,1.99431818 0,4.43181818 L0,60.5681818 C0,63.0056818 1.9828125,65 4.40625,65 L42.59375,65 C45.0171875,65 47,63.0056818 47,60.5681818 L47,17.7272727 L29.375,0 Z"
                  id="Path"
                  fill="url(#radialGradient-16)"
                  fillRule="nonzero"
                ></path>
              </g>
            </g>
          </g>
        </g>
      </g>
    </svg>
  ),
};
</file>

<file path="public/r/styles/default/portofolio-02.json">
{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "portofolio-02",
  "type": "registry:block",
  "author": "shadcn (https://ui.shadcn.com)",
  "description": "minimal portfolio template design for professionals.",
  "registryDependencies": [
    "footer",
    "list"
  ],
  "files": [
    {
      "path": "blocks/portofolio-02/main.tsx",
      "content": "import { BioDetails } from \"./components/bio-detail\";\nimport { Bio } from \"./components/bio\";\n\nimport { CareerPaths } from \"./components/career-path\";\nimport { Highlight } from \"./components/highlight\";\n\nimport { cn } from \"@/lib/utils\";\n\nfunction Divider() {\n  return (\n    <div\n      className={cn(\n        \"border-grid relative flex h-4 w-full border-x\",\n        \"before:absolute before:-left-[100vw] before:h-4 before:w-[200vw]\",\n        \"before:[--pattern-foreground:var(--color-black)]/5 dark:before:[--pattern-foreground:var(--color-white)]/5 before:bg-[image:repeating-linear-gradient(315deg,_var(--pattern-foreground)_0,_var(--pattern-foreground)_1px,_transparent_0,_transparent_50%)] before:bg-[size:10px_10px]\",\n      )}\n    />\n  );\n}\n\nexport default function Layout() {\n  return (\n    <>\n      <div className=\"max-w-screen bg-backgroud z-50 flex h-screen flex-col items-center justify-between overflow-x-hidden\">\n        <div className=\"mx-auto px-4 text-primary md:max-w-3xl\">\n          <Bio />\n          <Divider />\n          <main>\n            <Highlight />\n            <Divider />\n\n            <BioDetails />\n            <Divider />\n\n            <CareerPaths />\n            <Divider />\n\n            <Divider />\n          </main>\n        </div>\n      </div>\n    </>\n  );\n}\n",
      "type": "registry:page",
      "target": "app/main.tsx"
    },
    {
      "path": "blocks/portofolio-02/components/bio-detail.tsx",
      "content": "import { Prose } from \"./typhography\";\nimport { USER } from \"../data/USER\";\n\nimport { Panel, PanelContent, PanelHeader, PanelTitle } from \"./panel\";\n\nexport function BioDetails() {\n  return (\n    <Panel id=\"about\" className=\"scroll-mt-[4.75rem]\">\n      <PanelHeader>\n        <PanelTitle>About</PanelTitle>\n      </PanelHeader>\n\n      <PanelContent>\n        <Prose className=\"text-primary\">{USER.about}</Prose>\n      </PanelContent>\n    </Panel>\n  );\n}\n",
      "type": "registry:component",
      "target": ""
    },
    {
      "path": "blocks/portofolio-02/components/bio.tsx",
      "content": "import { USER } from \"../data/USER\";\nimport Image from \"next/image\";\nimport { BadgeCheck } from \"lucide-react\";\n\nexport function Bio() {\n  return (\n    <header className=\"relative mt-2\">\n      <div className=\" border-grid flex items-center border-x\">\n        <div className=\"border-grid shrink-0 border-r\">\n          <div className=\"mx-[2px] my-[3px]\">\n            <AvatarBio\n              size={128}\n              className=\"size-32 rounded-full ring-1 ring-border ring-offset-2 ring-offset-background sm:size-40\"\n            />\n          </div>\n        </div>\n\n        <div className=\"flex flex-1 flex-col\">\n          <div className=\"border-grid border-t\">\n            <h1 className=\"font-heading flex items-center pl-4 text-3xl font-medium\">\n              {USER.displayName}\n              &nbsp;\n              <BadgeCheck />\n            </h1>\n          </div>\n        </div>\n      </div>\n    </header>\n  );\n}\n\nfunction AvatarBio({\n  className,\n  size = 128,\n  priority = true,\n}: {\n  className?: string;\n  size?: number;\n  priority?: boolean;\n}) {\n  return (\n    <Image\n      className={className}\n      alt={`${USER.displayName}'s avatar`}\n      src=\"https://github.com/BroKarim.png\"\n      width={size}\n      height={size}\n      quality={100}\n      priority={priority}\n    />\n  );\n}\n",
      "type": "registry:component",
      "target": ""
    },
    {
      "path": "blocks/portofolio-02/components/career-path.tsx",
      "content": "import * as AccordionPrimitive from \"@radix-ui/react-accordion\";\nimport React from \"react\";\n\nimport { EXPERIENCES } from \"../data/career-path\";\nimport { Prose } from \"./typhography\";\nimport { Panel, PanelHeader, PanelTitle } from \"./panel\";\nimport {\n  CareerPath,\n  CareerPathPositionIcon,\n  CareerPathPosition,\n} from \"../type/career-path\";\nimport {\n  ChevronDownIcon,\n  BriefcaseBusinessIcon,\n  CodeXmlIcon,\n  DraftingCompassIcon,\n  GraduationCapIcon,\n  LightbulbIcon,\n  LucideProps,\n  SchoolIcon,\n} from \"lucide-react\";\nimport { Tag } from \"./tag\";\n\nexport function CareerPaths() {\n  const defaultValue = EXPERIENCES.flatMap((exp) =>\n    exp.positions.filter((pos) => pos.expanded).map((pos) => pos.id),\n  );\n\n  return (\n    <Panel id=\"experience\" className=\"scroll-mt-[4.75rem]\">\n      <PanelHeader>\n        <PanelTitle>Experience</PanelTitle>\n      </PanelHeader>\n\n      <AccordionPrimitive.Root\n        type=\"multiple\"\n        defaultValue={defaultValue}\n        asChild\n      >\n        <div className=\"px-4\">\n          {EXPERIENCES.map((experience, index) => {\n            return <ExperienceItem key={index} experience={experience} />;\n          })}\n        </div>\n      </AccordionPrimitive.Root>\n    </Panel>\n  );\n}\n\nfunction ExperienceItem({ experience }: { experience: CareerPath }) {\n  return (\n    <div className=\"screen-line-after space-y-4 py-4\">\n      <div className=\"flex items-center gap-3\">\n        <h3 className=\"font-heading text-lg font-medium leading-snug\">\n          {experience.company}\n        </h3>\n\n        {experience?.current && (\n          <span className=\"relative flex items-center justify-center\">\n            <span className=\"bg-success-foreground absolute inline-flex size-3 animate-ping rounded-full opacity-50\"></span>\n            <span className=\"bg-success-foreground relative inline-flex size-2 rounded-full\"></span>\n          </span>\n        )}\n      </div>\n\n      <div className=\"relative space-y-4 before:absolute before:left-3 before:h-full before:w-px before:bg-border\">\n        {experience.positions.map((position, index) => {\n          return <CareerPathPositionItem key={index} position={position} />;\n        })}\n      </div>\n    </div>\n  );\n}\n\nfunction CareerPathPositionItem({\n  position,\n}: {\n  position: CareerPathPosition;\n}) {\n  return (\n    <AccordionPrimitive.Item value={position.id} asChild>\n      <div className=\"relative last:before:absolute last:before:h-full last:before:w-4 last:before:bg-background\">\n        <AccordionPrimitive.Trigger className=\"group/experience block w-full select-none text-left [&[data-state=open]_.lucide-chevron-down]:rotate-180\">\n          <div className=\"z-1 relative mb-1 flex items-center gap-3 bg-background\">\n            <div className=\"shadow-xs flex size-6 shrink-0 items-center justify-center rounded-lg border bg-accent/50 text-muted-foreground\">\n              <ExperienceIcon className=\"size-4\" icon={position.icon} />\n            </div>\n\n            <h4 className=\"font-heading flex-1 text-balance font-medium underline-offset-4 group-hover/experience:underline\">\n              {position.title}\n            </h4>\n\n            <ChevronDownIcon className=\"size-4 shrink-0 text-muted-foreground transition-transform duration-300\" />\n          </div>\n\n          <p className=\"flex items-center gap-2 pl-9 font-mono text-xs text-primary/70\">\n            {position.employmentType && (\n              <>\n                <span>{position.employmentType}</span>\n                <span className=\"flex h-4 w-px shrink-0 bg-border\" />\n              </>\n            )}\n\n            <span>{position.year}</span>\n          </p>\n        </AccordionPrimitive.Trigger>\n\n        <AccordionPrimitive.Content className=\"overflow-hidden transition-all duration-300 data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\">\n          {position?.description && (\n            <Prose className=\"pl-9 pt-2 text-primary \">\n              {position?.description}\n            </Prose>\n          )}\n\n          {Array.isArray(position.skills) && position.skills.length > 0 && (\n            <div className=\"flex flex-wrap gap-1.5 pl-9 pt-2\">\n              {position.skills.map((skill, index) => (\n                <Tag key={index}>{skill}</Tag>\n              ))}\n            </div>\n          )}\n        </AccordionPrimitive.Content>\n      </div>\n    </AccordionPrimitive.Item>\n  );\n}\n\nconst iconMap: Record<\n  CareerPathPositionIcon,\n  React.ComponentType<LucideProps>\n> = {\n  code: CodeXmlIcon,\n  design: DraftingCompassIcon,\n  education: GraduationCapIcon,\n  business: BriefcaseBusinessIcon,\n  school: SchoolIcon,\n  idea: LightbulbIcon,\n};\n\nfunction ExperienceIcon({\n  icon,\n  ...props\n}: {\n  icon: CareerPathPositionIcon | undefined;\n} & LucideProps) {\n  const IconComponent = icon ? iconMap[icon] : BriefcaseBusinessIcon;\n  return <IconComponent {...props} />;\n}\n",
      "type": "registry:component",
      "target": ""
    },
    {
      "path": "blocks/portofolio-02/components/highlight.tsx",
      "content": "import {\n  LinkIcon,\n  MapPinIcon,\n  MailIcon,\n  BriefcaseBusinessIcon,\n  CodeXmlIcon,\n  LightbulbIcon,\n  PhoneIcon,\n} from \"lucide-react\";\n\nimport { USER } from \"../data/USER\";\nimport { Panel, PanelContent } from \"./panel\";\nimport { IntroItem } from \"./intro-item\";\n\nexport function Highlight() {\n  return (\n    <Panel>\n      <h2 className=\"sr-only\">Overview</h2>\n\n      <PanelContent className=\"space-y-2\">\n        {USER.jobs.map((job, index) => {\n          return (\n            <JobItem\n              key={index}\n              title={job.title}\n              company={job.company}\n              website={job.website}\n            />\n          );\n        })}\n\n        <IntroItem icon={<MapPinIcon />} content={USER.address} />\n\n        <PhoneItem phoneNumber={USER.phoneNumber} />\n\n        <EmailItem email={USER.email} />\n\n        <IntroItem\n          icon={<LinkIcon />}\n          content={USER.website}\n          href={USER.website}\n        />\n      </PanelContent>\n    </Panel>\n  );\n}\n\nfunction EmailItem({ email }: { email: string }) {\n  return <IntroItem icon={<MailIcon />} content={email} href=\"#\" />;\n}\n\nfunction getJobIcon(title: string) {\n  if (/(developer|engineer)/i.test(title)) {\n    return <CodeXmlIcon />;\n  }\n\n  if (/(founder|co-founder)/i.test(title)) {\n    return <LightbulbIcon />;\n  }\n\n  return <BriefcaseBusinessIcon />;\n}\n\nexport function JobItem({\n  title,\n  company,\n  website,\n}: {\n  title: string;\n  company: string;\n  website: string;\n}) {\n  return (\n    <IntroItem\n      icon={getJobIcon(title)}\n      content={\n        <>\n          {title} @\n          <a\n            className=\"ml-0.5\"\n            href={website}\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            {company}\n          </a>\n        </>\n      }\n    />\n  );\n}\n\nexport function PhoneItem({ phoneNumber }: { phoneNumber: string }) {\n  return <IntroItem icon={<PhoneIcon />} content={phoneNumber} href=\"/\" />;\n}\n",
      "type": "registry:component",
      "target": ""
    },
    {
      "path": "blocks/portofolio-02/components/intro-item.tsx",
      "content": "import { JSX } from \"react\";\n\nexport function IntroItem({\n  icon,\n  content,\n  href,\n}: {\n  icon: JSX.Element;\n  content: React.ReactNode;\n  href?: string;\n}) {\n  const isLink = !!href;\n\n  return (\n    <div className=\"flex items-center gap-4 font-mono text-sm [&_svg:not([class*='size-'])]:size-4 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg]:text-muted-foreground\">\n      {icon}\n\n      <p className=\"text-balance\">\n        {isLink ? (\n          <a\n            className=\"underline-offset-4 hover:underline\"\n            href={href}\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            {content}\n          </a>\n        ) : (\n          content\n        )}\n      </p>\n    </div>\n  );\n}\n",
      "type": "registry:component",
      "target": ""
    },
    {
      "path": "blocks/portofolio-02/components/panel.tsx",
      "content": "import { Slot } from \"@radix-ui/react-slot\";\nimport React from \"react\";\n\nimport { cn } from \"@/lib/utils\";\n\ntype ProseProps = React.ComponentPropsWithoutRef<\"div\"> & {\n  asChild?: boolean;\n};\n\nfunction Panel({ className, ...props }: React.ComponentProps<\"section\">) {\n  return (\n    <section\n      data-slot=\"panel\"\n      className={cn(\" screen-line-after border-grid border-x\", className)}\n      {...props}\n    />\n  );\n}\n\nfunction PanelHeader({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"panel-header\"\n      className={cn(\"r px-4\", className)}\n      {...props}\n    />\n  );\n}\n\nfunction PanelTitle({ className, asChild = false, ...props }: ProseProps) {\n  const Comp = asChild ? Slot : \"h2\";\n\n  return (\n    <Comp\n      data-slot=\"panel-title\"\n      className={cn(\"font-heading text-3xl font-medium\", className)}\n      {...props}\n    />\n  );\n}\n\nfunction PanelContent({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div data-slot=\"panel-body\" className={cn(\"p-4\", className)} {...props} />\n  );\n}\n\nexport { Panel, PanelContent, PanelHeader, PanelTitle };\n",
      "type": "registry:component",
      "target": ""
    },
    {
      "path": "blocks/portofolio-02/components/typhography.tsx",
      "content": "import { Slot } from \"@radix-ui/react-slot\";\nimport React from \"react\";\n\nimport { cn } from \"@/lib/utils\";\n\ntype ProseProps = React.ComponentPropsWithoutRef<\"div\"> & {\n  asChild?: boolean;\n};\n\nfunction Prose({ className, asChild = false, ...props }: ProseProps) {\n  const Comp = asChild ? Slot : \"div\";\n  return (\n    <Comp\n      data-slot=\"prose\"\n      className={cn(\n        \"prose prose-sm prose-zinc dark:prose-invert max-w-none font-mono text-foreground\",\n        \"prose-headings:font-heading prose-headings:font-medium prose-headings:text-balance\",\n        \"prose-h2:border-b prose-h2:pb-2\",\n        \"prose-lead:text-base\",\n        \"prose-a:font-medium prose-a:break-words prose-a:text-foreground prose-a:underline prose-a:underline-offset-4\",\n        \"prose-code:rounded prose-code:bg-muted prose-code:px-[0.3rem] prose-code:py-[0.2rem] prose-code:text-sm prose-code:font-normal prose-code:before:content-none prose-code:after:content-none\",\n        \"prose-hr:border-grid\",\n        className,\n      )}\n      {...props}\n    />\n  );\n}\n\nfunction Code({ className, ...props }: React.ComponentProps<\"code\">) {\n  const isCodeBlock = \"data-language\" in props;\n\n  return (\n    <code\n      data-slot={isCodeBlock ? \"code-block\" : \"code-inline\"}\n      className={cn(\n        !isCodeBlock &&\n          \"rounded-md bg-muted px-[0.3rem] py-[0.2rem] font-mono text-sm\",\n        className,\n      )}\n      {...props}\n    />\n  );\n}\n\nexport { Code, Prose };\n",
      "type": "registry:component",
      "target": ""
    },
    {
      "path": "blocks/portofolio-02/components/typhography.tsx",
      "content": "import { Slot } from \"@radix-ui/react-slot\";\nimport React from \"react\";\n\nimport { cn } from \"@/lib/utils\";\n\ntype ProseProps = React.ComponentPropsWithoutRef<\"div\"> & {\n  asChild?: boolean;\n};\n\nfunction Prose({ className, asChild = false, ...props }: ProseProps) {\n  const Comp = asChild ? Slot : \"div\";\n  return (\n    <Comp\n      data-slot=\"prose\"\n      className={cn(\n        \"prose prose-sm prose-zinc dark:prose-invert max-w-none font-mono text-foreground\",\n        \"prose-headings:font-heading prose-headings:font-medium prose-headings:text-balance\",\n        \"prose-h2:border-b prose-h2:pb-2\",\n        \"prose-lead:text-base\",\n        \"prose-a:font-medium prose-a:break-words prose-a:text-foreground prose-a:underline prose-a:underline-offset-4\",\n        \"prose-code:rounded prose-code:bg-muted prose-code:px-[0.3rem] prose-code:py-[0.2rem] prose-code:text-sm prose-code:font-normal prose-code:before:content-none prose-code:after:content-none\",\n        \"prose-hr:border-grid\",\n        className,\n      )}\n      {...props}\n    />\n  );\n}\n\nfunction Code({ className, ...props }: React.ComponentProps<\"code\">) {\n  const isCodeBlock = \"data-language\" in props;\n\n  return (\n    <code\n      data-slot={isCodeBlock ? \"code-block\" : \"code-inline\"}\n      className={cn(\n        !isCodeBlock &&\n          \"rounded-md bg-muted px-[0.3rem] py-[0.2rem] font-mono text-sm\",\n        className,\n      )}\n      {...props}\n    />\n  );\n}\n\nexport { Code, Prose };\n",
      "type": "registry:component",
      "target": ""
    },
    {
      "path": "blocks/portofolio-02/components/tag.tsx",
      "content": "import React from \"react\";\n\nimport { cn } from \"@/lib/utils\";\n\nfunction Tag({ className, ...props }: React.ComponentProps<\"span\">) {\n  return (\n    <span\n      className={cn(\n        \"inline-flex items-center rounded-lg border px-1.5 py-0.5 font-mono text-xs text-muted-foreground\",\n        className,\n      )}\n      {...props}\n    />\n  );\n}\n\nexport { Tag };\n",
      "type": "registry:component",
      "target": ""
    },
    {
      "path": "blocks/portofolio-02/data/career-path.ts",
      "content": "import { CareerPath } from \"../type/career-path\";\n\nexport const EXPERIENCES: CareerPath[] = [\n  {\n    company: \"TechNova Solutions\",\n    positions: [\n      {\n        id: \"1a2b3c4d-1234-5678-9abc-def123456789\",\n        title: \"Full Stack Developer\",\n        year: \"03.2020 - 09.2022\",\n        employmentType: \"Full-time\",\n        icon: \"code\",\n        description:\n          \"- Designed and implemented scalable backend APIs using Node.js and Express.\\n- Built dynamic, user-friendly dashboards with React and Material-UI.\\n- Enhanced system performance by refactoring legacy code.\\n- Collaborated with cross-functional teams to define and meet project goals.\\n- Ensured integration and seamless deployment in CI/CD pipelines.\",\n        skills: [\n          \"Node.js\",\n          \"Express\",\n          \"React\",\n          \"Material-UI\",\n          \"MongoDB\",\n          \"Docker\",\n          \"CI/CD\",\n          \"Team Collaboration\",\n          \"Problem-solving\",\n        ],\n        expanded: true,\n      },\n      {\n        id: \"9f8e7d6c-5432-1abc-def4-567890abcdef\",\n        title: \"Tech Lead\",\n        year: \"09.2021 - 09.2022\",\n        employmentType: \"Part-time\",\n        icon: \"code\",\n        description:\n          \"- Led a team of 6 developers to deliver a SaaS platform within tight deadlines.\\n- Conducted code reviews to ensure high-quality deliverables.\\n- Provided mentorship and guided junior developers in problem-solving.\\n- Managed project timelines and resource allocation effectively.\",\n        skills: [\n          \"Leadership\",\n          \"Mentorship\",\n          \"Team Management\",\n          \"Code Review\",\n          \"Agile\",\n          \"Project Planning\",\n        ],\n      },\n    ],\n    current: false,\n  },\n  {\n    company: \"PixelForge Studios\",\n    positions: [\n      {\n        id: \"abcd1234-ef56-7890-ghij-klmnopqrstuv\",\n        title: \"UI/UX Designer\",\n        year: \"02.2018 - 01.2020\",\n        employmentType: \"Contract\",\n        icon: \"design\",\n        description:\n          \"- Designed wireframes and prototypes for web and mobile applications.\\n- Conducted user research and usability testing to refine interface designs.\\n- Collaborated with developers to ensure seamless implementation.\\n- Developed design systems for consistency across projects.\",\n        skills: [\n          \"Figma\",\n          \"Sketch\",\n          \"User Research\",\n          \"Prototyping\",\n          \"Design Systems\",\n          \"Usability Testing\",\n        ],\n      },\n      {\n        id: \"1234abcd-5678-efgh-ijkl-890mnopqrst\",\n        title: \"Creative Consultant\",\n        year: \"01.2019 - 12.2019\",\n        employmentType: \"Freelance\",\n        icon: \"design\",\n        description:\n          \"- Provided creative direction for branding projects and marketing campaigns.\\n- Developed visual identities that enhanced client brand recognition.\\n- Collaborated with clients to define project goals and deliverables.\",\n        skills: [\n          \"Creativity\",\n          \"Visual Identity\",\n          \"Client Relations\",\n          \"Branding\",\n          \"Marketing Design\",\n        ],\n      },\n    ],\n    current: false,\n  },\n  {\n    company: \"Innov8 AI Labs\",\n    positions: [\n      {\n        id: \"a1b2c3d4-e5f6-7890-ghij-klmnopqrstuv\",\n        title: \"Machine Learning Engineer\",\n        year: \"11.2020 - present\",\n        employmentType: \"Full-time\",\n        icon: \"idea\",\n        description:\n          \"- Built predictive models using TensorFlow and PyTorch.\\n- Developed and deployed scalable machine learning pipelines in production.\\n- Worked on NLP-based applications, including chatbots and sentiment analysis.\\n- Conducted data preprocessing and feature engineering to improve accuracy.\",\n        skills: [\n          \"TensorFlow\",\n          \"PyTorch\",\n          \"NLP\",\n          \"Python\",\n          \"Data Science\",\n          \"AI Pipelines\",\n          \"Feature Engineering\",\n          \"Problem-solving\",\n        ],\n        expanded: true,\n      },\n      {\n        id: \"mnopqrst-1234-abcd-5678-efghijkl890\",\n        title: \"Research Scientist\",\n        year: \"11.2021 - present\",\n        employmentType: \"Part-time\",\n        icon: \"idea\",\n        description:\n          \"- Conducted cutting-edge research in deep learning and computer vision.\\n- Published papers in renowned AI conferences and journals.\\n- Collaborated with universities to explore new advancements in AI technology.\",\n        skills: [\n          \"Deep Learning\",\n          \"Computer Vision\",\n          \"Research\",\n          \"Publication\",\n          \"Collaboration\",\n        ],\n      },\n    ],\n    current: true,\n  },\n];\n",
      "type": "registry:file",
      "target": "data/career-path.ts"
    },
    {
      "path": "blocks/portofolio-02/data/USER.ts",
      "content": "export const USER = {\n  displayName: \"Brokarim\",\n  username: \"Brokarim\",\n  gender: \"male\",\n  bio: \"Crafting with code, fueled by enthusiasm.\",\n  address: \"Banda Aceh, Indonesia\",\n  phoneNumber: \"+62 8222 1111 222\",\n  email: \"brokariim@gmail.com\",\n  website: \"https://nothing.com\",\n  dateOfBirth: \"2002-01-10\",\n  jobTitle: \"Software Developer & UI/UX Designer\",\n  jobs: [\n    {\n      title: \"Senior Frontend Developer & UI Design Lead\",\n      company: \"Nothing\",\n      website: \"https://simplamo.com?ref=IN-926722\",\n    },\n    {\n      title: \"Founder\",\n      company: \"Nothing\",\n      website: \"https://quaric.com\",\n    },\n  ],\n  about: `\nHello, World! I am Brokarim, a Software Developer & UI/UX Designer with a passion for crafting seamless, user-focused digital experiences and innovative solutions.\n\nWith a strong foundation in web and mobile development, I excel at creating modern, high-quality applications using technologies like Next.js, React, TypeScript, and beyond. \n  `,\n  dateCreated: \"2023-10-20\", // YYYY-MM-DD\n};\n",
      "type": "registry:file",
      "target": "data/USER.ts"
    },
    {
      "path": "blocks/portofolio-02/type/career-path.ts",
      "content": "export type CareerPathPositionIcon =\n  | \"code\"\n  | \"design\"\n  | \"education\"\n  | \"business\"\n  | \"school\"\n  | \"idea\";\n\nexport type CareerPathPosition = {\n  id: string;\n  title: string;\n  year: string;\n  employmentType?: string;\n  description?: string;\n  icon?: CareerPathPositionIcon;\n  skills?: string[];\n  expanded?: boolean;\n};\n\nexport type CareerPath = {\n  company: string;\n  companyLogo?: string;\n  positions: CareerPathPosition[];\n  current?: boolean;\n};\n",
      "type": "registry:file",
      "target": "type/career-pat.ts"
    }
  ],
  "categories": [
    "portofolio"
  ]
}
</file>

<file path="registry/default/blocks/bento-01/page.tsx">
"use client";

import { Card, CardContent } from "@/components/ui/card";
import { useAnimations } from "./hooks/useAnimation";
import { motion } from "framer-motion";
import { MoveUpRight } from "lucide-react";
import Image from "next/image";
import AnimatedEmoji from "./components/animated-emoji";
import Logo from "./components/logo";

export default function MainLayout() {
  const { cardIdentity, cardSlogan, cardProduct, verticalCard, quoteCard } =
    useAnimations();

  return (
    <>
      <div className="max-w-screen  bg-backgroud z-50 h-screen p-4  2xl:overflow-visible">
        <div className="grid grid-cols-4 grid-rows-8 gap-5 text-primary lg:grid-cols-3">
          <div className=" col-span-full h-full w-full lg:col-span-1 lg:col-start-2 lg:row-span-2 lg:row-start-2">
            <Card className=" h-full w-full">
              <CardContent className="flex h-full  w-full items-center justify-center gap-2">
                <Logo className="h-auto w-48" />
              </CardContent>
            </Card>
          </div>
          <motion.div
            className=" group relative col-span-full p-0  lg:col-span-2 lg:row-span-1 lg:row-start-1"
            {...cardIdentity}
          >
            <Card className=" h-full w-full text-primary">
              <CardContent className="flex h-full items-end justify-start gap-2 px-8">
                <div className="w-80 text-xl ">
                  Discover our new eco-friendly skincare collection designs to
                  nourish your skin
                </div>
                <button className="dark:border-knight absolute  right-2 top-2 h-10 w-10 rounded-full border-2 border-transparent bg-primary p-2 transition-all duration-500 ease-in-out group-hover:w-40 group-hover:bg-primary md:h-[2.75rem] md:w-[2.75rem]">
                  <div className="flex items-center justify-center">
                    <span className="md:text-medium animate-fade invisible mr-1 hidden text-nowrap text-sm text-black  group-hover:visible group-hover:block ">
                      Order Now
                    </span>
                    <MoveUpRight className="text-black" />
                  </div>
                </button>
              </CardContent>
            </Card>
          </motion.div>
          <motion.div
            className=" col-span-full row-start-2 row-end-3 rounded-full  p-0 lg:col-span-1 lg:col-start-1 lg:row-start-2"
            {...cardSlogan}
          >
            <Card className=" h-full w-full bg-blue-300 text-primary">
              <CardContent className="flex h-full items-center justify-center p-0">
                <h2 className="text-center text-2xl font-bold  lg:text-3xl">
                  Beauty & Care
                </h2>
              </CardContent>
            </Card>
          </motion.div>
          <motion.div
            className="col-span-2 hidden justify-center rounded-full  p-0 lg:col-span-1 lg:col-start-3 lg:row-span-1 lg:row-start-3 lg:flex"
            {...cardProduct}
          >
            <Card className="flex h-full w-full items-center justify-center bg-blue-300 text-primary">
              <CardContent className=" flex items-center justify-center p-0 ">
                <div className="text-center text-3xl font-bold">
                  Serum & Treatment
                </div>
              </CardContent>
            </Card>
          </motion.div>

          <motion.div
            className="col-span-full p-0 lg:col-span-1 lg:col-start-1 lg:row-span-2 lg:row-start-3"
            {...verticalCard}
          >
            <Card className="h-full w-full">
              <CardContent className="flex h-full items-center justify-center p-0">
                <AnimatedEmoji />
              </CardContent>
            </Card>
          </motion.div>

          <motion.div
            className="relative hidden rounded-xl  lg:col-start-3 lg:row-span-2 lg:row-start-1 lg:block lg:h-[350px]"
            {...verticalCard}
          >
            <Image
              src="https://images.unsplash.com/photo-1724084120131-3f2e0d11a288?q=80&w=2940&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D"
              priority={true}
              alt="profile image"
              fill
              style={{
                width: "100%",
                height: "100%",
                objectFit: "cover",
                borderRadius: "15px",
              }}
            />
          </motion.div>
          <motion.div
            className="relative col-span-full  lg:col-span-2 lg:col-start-2 lg:row-span-1 lg:row-start-4"
            {...quoteCard}
          >
            <Card className="h-full w-full">
              <div className="absolute inset-0">
                <Image
                  src="https://images.unsplash.com/photo-1584949514123-474cfa705dfe?q=80&w=2787&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D"
                  priority={true}
                  alt="profile image"
                  fill
                  style={{
                    width: "100%",
                    height: "100%",
                    objectFit: "cover",
                    borderRadius: "15px",
                  }}
                />
              </div>
              <div className="absolute inset-0 rounded-[15px] bg-black/30"></div>

              {/* Text Container with Center Alignment */}
              <div className="relative z-10 flex h-full  w-full items-center justify-center gap-1 px-4 text-center text-primary ">
                <p className="text-xl font-light">your secret</p>

                {/* Horizontal Line */}
                <div className="my-3 h-px bg-primary md:w-40"></div>

                <p className="text-xl font-light">beauty</p>
              </div>
            </Card>
          </motion.div>
        </div>
      </div>
    </>
  );
}
</file>

<file path="registry/default/blocks/next-int/page.tsx">
"use client";

import React from "react";
import { motion } from "framer-motion";
import { Icons } from "@/components/icons";
import { NavigationBar } from "./components/navbar";
import { Photos } from "./components/photos";
import LangSwitch from "./components/lang-switch";
const projects = [
  {
    id: 1,
    media:
      "https://images.unsplash.com/photo-1571781418606-70265b9cce90?q=80&w=3087&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D",
  },
  {
    id: 2,
    media:
      "https://images.unsplash.com/photo-1505576391880-b3f9d713dc4f?q=80&w=1870&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D",
  },
  {
    id: 3,
    media:
      "https://images.unsplash.com/photo-1557804483-ef3ae78eca57?q=80&w=2688&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D",
  },
  {
    id: 4,
    media:
      "https://plus.unsplash.com/premium_photo-1684445035564-c98efbe1fb7d?q=80&w=3087&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D",
  },
  {
    id: 5,
    media:
      "https://images.unsplash.com/photo-1493857671505-72967e2e2760?q=80&w=2940&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D",
  },
  {
    id: 7,
    media:
      "https://images.unsplash.com/photo-1551038247-3d9af20df552?q=80&w=3087&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D",
  },
];

const NextInt = () => {
  const photos = projects.map((project) => project.media);
  return (
    <>
      <div className="bg-backgroud z-50 flex h-full flex-col items-center justify-between overflow-hidden px-4 md:h-screen">
        <div className="flex w-full items-center justify-between p-6 px-10">
          <div className="flex flex-1 text-lg font-medium text-primary md:text-2xl">
            NexInt
          </div>
          <div className="hidden w-full flex-1 justify-end md:flex md:justify-center">
            <NavigationBar.Desktop />
          </div>
          <div className="flex justify-end gap-3 md:flex-1">
            <LangSwitch />
          </div>
        </div>

        <div className=" flex-1  md:mt-10">
          <div className="container flex-col items-center md:flex md:h-full md:justify-between">
            <div className="md:translate-y-32">
              <div className="mb-2 flex w-full items-center justify-center gap-2 text-primary">
                <Icons.nextint />
                Broadway St., 123, New York, NY 10007 USA
              </div>
              <h1 className="font-heading xs:text-2xl text-pretty text-center text-xl tracking-tighter text-primary  sm:text-3xl  md:max-w-6xl md:text-7xl">
                Building visions & creating reality <br />
                with NextInt
              </h1>
            </div>
            <Photos photos={photos} />
          </div>
        </div>
      </div>
    </>
  );
};

export default NextInt;
</file>

<file path="registry/default/blocks/portofolio-02/main.tsx">
import { BioDetails } from "./components/bio-detail";
import { Bio } from "./components/bio";

import { CareerPaths } from "./components/career-path";
import { Highlight } from "./components/highlight";

import { cn } from "@/lib/utils";

function Divider() {
  return (
    <div
      className={cn(
        "border-grid relative flex h-4 w-full border-x",
        "before:absolute before:-left-[100vw] before:h-4 before:w-[200vw]",
        "before:[--pattern-foreground:var(--color-black)]/5 dark:before:[--pattern-foreground:var(--color-white)]/5 before:bg-[image:repeating-linear-gradient(315deg,_var(--pattern-foreground)_0,_var(--pattern-foreground)_1px,_transparent_0,_transparent_50%)] before:bg-[size:10px_10px]",
      )}
    />
  );
}

export default function Layout() {
  return (
    <>
      <div className="max-w-screen bg-backgroud z-50 flex h-screen flex-col items-center justify-between overflow-x-hidden">
        <div className="mx-auto px-4 text-primary md:max-w-3xl">
          <Bio />
          <Divider />
          <main>
            <Highlight />
            <Divider />

            <BioDetails />
            <Divider />

            <CareerPaths />
            <Divider />

            <Divider />
          </main>
        </div>
      </div>
    </>
  );
}
</file>

<file path="next.config.mjs">
/** @type {import('next').NextConfig} */
const nextConfig = {
  output: process.env.NODE_ENV === "production" ? "standalone" : undefined,
  reactStrictMode: true,
  swcMinify: true,
  experimental: {
    optimizeCss: true,
  },
  images: {
    remotePatterns: [
      {
        protocol: "https",
        hostname: "**",
      },
      {
        protocol: "http",
        hostname: "**",
      },
    ],
  },
  async redirects() {
    return [
      {
        source: "/r/:name",
        destination: "/r/styles/default/:name.json",
        permanent: true,
      },
    ];
  },
};

export default nextConfig;
</file>

<file path="public/r/styles/default/hero-01.json">
{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "hero-01",
  "type": "registry:block",
  "author": "shadcn (https://ui.shadcn.com)",
  "description": "Ideal for product designers.",
  "registryDependencies": [
    "nav",
    "lang-switch",
    "photos"
  ],
  "files": [
    {
      "path": "blocks/next-int/page.tsx",
      "content": "\"use client\";\n\nimport React from \"react\";\nimport { motion } from \"framer-motion\";\nimport { Icons } from \"@/components/icons\";\nimport { NavigationBar } from \"./components/navbar\";\nimport { Photos } from \"./components/photos\";\nimport LangSwitch from \"./components/lang-switch\";\nconst projects = [\n  {\n    id: 1,\n    media:\n      \"https://images.unsplash.com/photo-1571781418606-70265b9cce90?q=80&w=3087&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D\",\n  },\n  {\n    id: 2,\n    media:\n      \"https://images.unsplash.com/photo-1505576391880-b3f9d713dc4f?q=80&w=1870&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D\",\n  },\n  {\n    id: 3,\n    media:\n      \"https://images.unsplash.com/photo-1557804483-ef3ae78eca57?q=80&w=2688&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D\",\n  },\n  {\n    id: 4,\n    media:\n      \"https://plus.unsplash.com/premium_photo-1684445035564-c98efbe1fb7d?q=80&w=3087&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D\",\n  },\n  {\n    id: 5,\n    media:\n      \"https://images.unsplash.com/photo-1493857671505-72967e2e2760?q=80&w=2940&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D\",\n  },\n  {\n    id: 7,\n    media:\n      \"https://images.unsplash.com/photo-1551038247-3d9af20df552?q=80&w=3087&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D\",\n  },\n];\n\nconst NextInt = () => {\n  const photos = projects.map((project) => project.media);\n  return (\n    <>\n      <div className=\"bg-backgroud z-50 flex h-full flex-col items-center justify-between overflow-hidden px-4 md:h-screen\">\n        <div className=\"flex w-full items-center justify-between p-6 px-10\">\n          <div className=\"flex flex-1 text-lg font-medium text-primary md:text-2xl\">\n            NexInt\n          </div>\n          <div className=\"hidden w-full flex-1 justify-end md:flex md:justify-center\">\n            <NavigationBar.Desktop />\n          </div>\n          <div className=\"flex justify-end gap-3 md:flex-1\">\n            <LangSwitch />\n          </div>\n        </div>\n\n        <div className=\" flex-1  md:mt-10\">\n          <div className=\"container flex-col items-center md:flex md:h-full md:justify-between\">\n            <div className=\"md:translate-y-32\">\n              <div className=\"mb-2 flex w-full items-center justify-center gap-2 text-primary\">\n                <Icons.nextint />\n                Broadway St., 123, New York, NY 10007 USA\n              </div>\n              <h1 className=\"font-heading xs:text-2xl text-pretty text-center text-xl tracking-tighter text-primary  sm:text-3xl  md:max-w-6xl md:text-7xl\">\n                Building visions & creating reality <br />\n                with NextInt\n              </h1>\n            </div>\n            <Photos photos={photos} />\n          </div>\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default NextInt;\n",
      "type": "registry:page",
      "target": "app/page.tsx"
    },
    {
      "path": "blocks/next-int/components/navbar.tsx",
      "content": "import React from \"react\";\nimport { motion, useMotionTemplate, useMotionValue } from \"framer-motion\";\nimport Link from \"next/link\";\nimport { usePathname } from \"next/navigation\";\nimport { cn } from \"@/lib/utils\";\n\nfunction NavItem({\n  href,\n  children,\n}: {\n  href: string;\n  children: React.ReactNode;\n}) {\n  const pathname = usePathname();\n  const isActive = pathname === href;\n\n  return (\n    <li>\n      <Link\n        href=\"/\"\n        className={`relative block whitespace-nowrap px-3 py-2 transition ${isActive ? \"text-lime-600 dark:text-lime-400\" : \"hover:text-lime-600 dark:hover:text-lime-400\"}`}\n      >\n        {children}\n        {isActive && (\n          <motion.span\n            className=\"absolute inset-x-1 -bottom-px h-px bg-gradient-to-r from-lime-700/0 via-lime-700/70 to-lime-700/0 dark:from-lime-400/0 dark:via-lime-400/40 dark:to-lime-400/0\"\n            layoutId=\"active-nav-item\"\n          />\n        )}\n      </Link>\n    </li>\n  );\n}\n\nfunction Desktop({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  const mouseX = useMotionValue(0);\n  const mouseY = useMotionValue(0);\n  const radius = useMotionValue(0);\n  const handleMouseMove = React.useCallback(\n    ({ clientX, clientY, currentTarget }: React.MouseEvent) => {\n      const bounds = currentTarget.getBoundingClientRect();\n      mouseX.set(clientX - bounds.left);\n      mouseY.set(clientY - bounds.top);\n      radius.set(Math.sqrt(bounds.width ** 2 + bounds.height ** 2) / 2.5);\n    },\n    [mouseX, mouseY, radius],\n  );\n  const background = useMotionTemplate`radial-gradient(${radius}px circle at ${mouseX}px ${mouseY}px, var(--spotlight-color) 0%, transparent 65%)`;\n\n  return (\n    <nav\n      onMouseMove={handleMouseMove}\n      className={cn(\n        \"group relative\",\n        \"rounded-full bg-background\",\n        \"shadow-lg shadow-zinc-800/5 ring-1 ring-zinc-900/5 backdrop-blur-md\",\n        // \"dark:from-zinc-900/70 dark:to-zinc-800/90 dark:ring-zinc-100/10\",\n        \"[--spotlight-color:rgb(236_252_203_/_0.6)] \",\n        className,\n      )}\n      {...props}\n    >\n      {/* Spotlight overlay */}\n      <motion.div\n        className=\"pointer-events-none absolute -inset-px rounded-full opacity-0 transition-opacity duration-500 group-hover:opacity-100\"\n        style={{ background }}\n        aria-hidden=\"true\"\n      />\n\n      <ul className=\"flex bg-transparent px-3 text-sm font-medium text-primary \">\n        {navigationItems.map(({ href, text }) => (\n          <NavItem key={href} href={href}>\n            {text}\n          </NavItem>\n        ))}\n      </ul>\n    </nav>\n  );\n}\n// keknya bagian mobiele kita buat bentuk Tirana aja, dengan catatan ada animasi x close\n// namun saat dipanggil tetap kaya cali.so\n\nexport const navigationItems = [\n  { href: \"/\", text: \"About\" },\n  { href: \"/\", text: \"Service\" },\n  { href: \"/\", text: \"Testimonial\" },\n  { href: \"/\", text: \"Projects\" },\n];\n\nexport const NavigationBar = {\n  Desktop,\n} as const;\n",
      "type": "registry:component",
      "target": ""
    },
    {
      "path": "blocks/next-int/components/lang-switch.tsx",
      "content": "\"use client\";\n\nimport { Button } from \"@/components/ui/button\";\nimport { Drawer, DrawerTrigger, DrawerContent, DrawerClose } from \"./drawer\";\nimport React from \"react\";\nimport { X } from \"lucide-react\";\nimport { cn } from \"@/lib/utils\";\n\nexport default function LangSwitch() {\n  return (\n    <React.Fragment>\n      <Drawer>\n        <DrawerTrigger asChild>\n          <Button\n            variant=\"outline\"\n            size=\"sm\"\n            className={cn(\"flex items-center rounded-sm\")}\n          >\n            <span>EN</span>\n          </Button>\n        </DrawerTrigger>\n        <DrawerContent>\n          <div className=\"grid gap-4 p-4\">\n            <div className=\"flex items-center justify-between\">\n              <h3 className=\"text-lg font-medium\">Select Language</h3>\n              <DrawerClose asChild>\n                <Button variant=\"ghost\" size=\"icon\" className=\"rou h-8 w-8\">\n                  <X className=\"h-5 w-5\" />\n                </Button>\n              </DrawerClose>\n            </div>\n            <div className=\"grid gap-2\">\n              <Button variant=\"ghost\" className=\"justify-start gap-2\">\n                <span>English</span>\n              </Button>\n              <Button variant=\"ghost\" className=\"justify-start gap-2\">\n                <span>Español</span>\n              </Button>\n              <Button variant=\"ghost\" className=\"justify-start gap-2\">\n                <span>Français</span>\n              </Button>\n              <Button variant=\"ghost\" className=\"justify-start gap-2\">\n                <span>Deutsch</span>\n              </Button>\n            </div>\n          </div>\n        </DrawerContent>\n      </Drawer>\n    </React.Fragment>\n  );\n}\n",
      "type": "registry:component",
      "target": ""
    },
    {
      "path": "blocks/next-int/components/photos.tsx",
      "content": "import { motion } from \"framer-motion\";\nimport { Marquee } from \"./marquee\";\nimport { cn } from \"@/lib/utils\";\n\nimport React from \"react\";\n\nexport function Photos({ photos }: { photos: string[] }) {\n  const [width, setWidth] = React.useState(0);\n  const [isCompact, setIsCompact] = React.useState(false);\n  const expandedWidth = React.useMemo(() => width * 1.38, [width]);\n\n  React.useEffect(() => {\n    const handleResize = () => {\n      // 640px is the breakpoint for md\n      if (window.innerWidth < 640) {\n        setIsCompact(true);\n        return setWidth(window.innerWidth / 2 - 64);\n      }\n\n      setWidth(window.innerWidth / photos.length - 4 * photos.length);\n    };\n\n    window.addEventListener(\"resize\", handleResize);\n    handleResize();\n\n    return () => {\n      window.removeEventListener(\"resize\", handleResize);\n    };\n  }, [photos.length]);\n\n  return (\n    <motion.div\n      className=\"mt-16 sm:mt-20\"\n      initial={{ opacity: 0, scale: 0.925, y: 16 }}\n      animate={{ opacity: 1, scale: 1, y: 0 }}\n      transition={{\n        delay: 0.5,\n        type: \"spring\",\n      }}\n    >\n      <Marquee>\n        <div className=\"-my-4 flex w-full snap-x snap-proximity scroll-pl-4 justify-start gap-4 overflow-x-auto p-4 sm:gap-6 md:justify-center md:overflow-x-hidden md:px-0\">\n          {photos.map((image, idx) => (\n            <motion.div\n              key={idx}\n              className={cn(\n                \"relative h-40 flex-none shrink-0 snap-start overflow-hidden  rounded-xl bg-zinc-100 ring-2 ring-lime-800/20 dark:bg-zinc-800 dark:ring-lime-300/10 md:h-72\",\n              )}\n              animate={{\n                width,\n                opacity: isCompact ? 1 : 0.85,\n                filter: isCompact ? \"grayscale(0)\" : \"grayscale(0.5)\",\n                rotate: idx % 2 === 0 ? 2 : -1,\n              }}\n              whileHover={\n                isCompact\n                  ? {}\n                  : {\n                      width: expandedWidth,\n                      opacity: 1,\n                      filter: \"grayscale(0)\",\n                    }\n              }\n              layout\n            >\n              <img\n                src={image}\n                alt=\"\"\n                width={500}\n                height={500}\n                sizes=\"(min-width: 640px) 18rem, 11rem\"\n                className=\"pointer-events-none absolute inset-0 h-full w-full select-none object-cover\"\n              />\n            </motion.div>\n          ))}\n        </div>\n      </Marquee>\n    </motion.div>\n  );\n}\n",
      "type": "registry:component",
      "target": ""
    }
  ],
  "categories": [
    "hero"
  ]
}
</file>

<file path="public/r/styles/default/hero-02.json">
{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "hero-02",
  "type": "registry:block",
  "author": "shadcn (https://ui.shadcn.com)",
  "description": "Designed for library applications.",
  "registryDependencies": [
    "banner",
    "colorfulButton",
    "githubButton",
    "openSource"
  ],
  "files": [
    {
      "path": "blocks/tool-01/main.tsx",
      "content": "import { Header } from \"./components/header\";\nimport { Banner } from \"./components/banner\";\nimport { Review } from \"./components/review\";\nimport { OpenSource } from \"./components/open-source\";\n\nexport default function HomeLayout() {\n  return (\n    <div className=\"flex flex-col \">\n      <div className=\"container mx-auto border-x\">\n        <Header />\n        <div className=\"divide-y\">\n          <Banner />\n          <div className=\"grid divide-y sm:grid-cols-3 sm:divide-x sm:divide-y-0\">\n            <div className=\"sm:col-span-2\">\n              <Review />\n            </div>\n            <div className=\"sm:col-span-1\">\n              <OpenSource />\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n",
      "type": "registry:page",
      "target": "app/main.tsx"
    },
    {
      "path": "blocks/tool-01/style/style.css",
      "content": ".bg-dashed {\n  background-image: linear-gradient(45deg, #e5e5e5 12.5%, transparent 12.5%, transparent 50%, #e5e5e5 50%, #e5e5e5 62.5%, transparent 62.5%, transparent 100%);\n  background-size: 0.25rem 0.25rem;\n}\n",
      "type": "registry:page",
      "target": "app/style.css"
    },
    {
      "path": "blocks/tool-01/components/header.tsx",
      "content": "import Link from \"next/link\";\nimport { GitHubButton } from \"./github-button\";\nimport { ButtonColorful } from \"./colorful-button\";\nimport Logo from \"./logo.svg\";\nimport { Icons } from \"@/components/icons\";\n\nconst links = [\n  {\n    label: \"Home\",\n    href: \"/#\",\n  },\n  {\n    label: \"Apps\",\n    href: \"/#apps\",\n  },\n  {\n    label: \"Features\",\n    href: \"/#features\",\n  },\n  {\n    label: \"Community\",\n    href: \"/#community\",\n  },\n];\n\nexport const Header = () => (\n  <div className=\"sticky top-0 z-50 w-full border-b  backdrop-blur-sm\">\n    <div className=\"container mx-auto flex items-center justify-between px-8 py-2\">\n      <div className=\"flex items-center gap-8\">\n        <Link href=\"/\" className=\"flex items-center gap-2 py-1\">\n          <Icons.logo />\n          <p className=\"hidden text-lg font-semibold tracking-tight sm:block\">\n            active\n          </p>\n        </Link>\n        <div className=\"hidden items-center gap-4 text-sm font-medium text-neutral-500 lg:flex\">\n          {links.map((link) => (\n            <Link key={link.href} href={link.href}>\n              {link.label}\n            </Link>\n          ))}\n        </div>\n      </div>\n      <div className=\"flex items-center gap-4\">\n        <GitHubButton />\n        <ButtonColorful />\n      </div>\n    </div>\n  </div>\n);\n",
      "type": "registry:component",
      "target": ""
    },
    {
      "path": "blocks/tool-01/components/banner.tsx",
      "content": "import { ButtonColorful } from \"./colorful-button\";\nimport { Installer } from \"./installer\";\nimport { Button } from \"@/components/ui/button\";\n\nexport const Banner = () => (\n  <section className=\"bg-dashed flex flex-col items-center justify-center gap-6 px-4 py-16 sm:px-16 sm:py-24\">\n    <h1 className=\"max-w-3xl text-center text-4xl font-bold leading-tight tracking-tighter sm:text-5xl md:max-w-4xl md:text-6xl lg:leading-[1.1]\">\n      Build Your SaaS App Faster and Smarter\n    </h1>\n    <p className=\"max-w-xl text-center text-neutral-600 dark:text-neutral-400 md:max-w-2xl md:text-lg\">\n      A monorepo template designed to have everything you need to build your new\n      SaaS app as thoroughly as possible. Free and open source, forever.\n    </p>\n    <div className=\"mx-auto flex w-full max-w-xl flex-col items-center gap-4 sm:flex-row\">\n      <Installer />\n      <Button>Get started</Button>\n    </div>\n  </section>\n);\n",
      "type": "registry:component",
      "target": ""
    },
    {
      "path": "blocks/tool-01/components/colorful-button.tsx",
      "content": "import { Button } from \"@/components/ui/button\";\nimport { cn } from \"@/lib/utils\";\nimport { ArrowUpRight } from \"lucide-react\";\n\ninterface ButtonColorfulProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement> {\n  label?: string;\n}\n\nexport function ButtonColorful({\n  className,\n  label = \"Explore Components\",\n  ...props\n}: ButtonColorfulProps) {\n  return (\n    <Button\n      className={cn(\n        \"relative h-10 overflow-hidden px-4\",\n        \"bg-zinc-900 dark:bg-zinc-100\",\n        \"transition-all duration-200\",\n        \"group\",\n        className,\n      )}\n      {...props}\n    >\n      {/* Gradient background effect */}\n      <div\n        className={cn(\n          \"absolute inset-0\",\n          \"bg-gradient-to-r from-indigo-500 via-purple-500 to-pink-500\",\n          \"opacity-40 group-hover:opacity-80\",\n          \"blur transition-opacity duration-500\",\n        )}\n      />\n\n      {/* Content */}\n      <div className=\"relative flex items-center justify-center gap-2\">\n        <span className=\"text-white dark:text-zinc-900\">{label}</span>\n        <ArrowUpRight className=\"h-3.5 w-3.5 text-white/90 dark:text-zinc-900/90\" />\n      </div>\n    </Button>\n  );\n}\n",
      "type": "registry:component",
      "target": ""
    },
    {
      "path": "blocks/tool-01/components/github-button.tsx",
      "content": "import { Button } from \"@/components/ui/button\";\nimport { Star } from \"lucide-react\";\n\nfunction GitHubButton() {\n  return (\n    <Button>\n      <Star\n        className=\"-ms-1 me-2 opacity-60\"\n        size={16}\n        strokeWidth={2}\n        aria-hidden=\"true\"\n      />\n      <span className=\"flex items-baseline gap-2\">\n        Star\n        <span className=\"text-xs text-primary-foreground/60\">729</span>\n      </span>\n    </Button>\n  );\n}\n\nexport { GitHubButton };\n",
      "type": "registry:component",
      "target": ""
    },
    {
      "path": "blocks/tool-01/components/installer.tsx",
      "content": "\"use client\";\n\nimport { CopyIcon } from \"lucide-react\";\nimport { toast } from \"sonner\";\n\nconst command = \"npx active@latest init\";\n\nexport const Installer = () => {\n  const handleCopy = () => {\n    navigator.clipboard.writeText(command);\n    toast.success(\"Copied to clipboard\");\n  };\n\n  return (\n    <div className=\"flex h-10 w-full items-center justify-center gap-2 whitespace-nowrap rounded-md border bg-white px-4 py-2 text-sm text-neutral-950 shadow-sm dark:bg-neutral-950 dark:text-white\">\n      <p className=\"pointer-events-none shrink-0 select-none text-neutral-500 dark:text-neutral-400\">\n        $\n      </p>\n      <div className=\"flex-1 truncate text-left font-mono\">{command}</div>\n      <div className=\"flex shrink-0 items-center gap-2\">\n        <button type=\"button\" aria-label=\"Copy\" onClick={handleCopy}>\n          <CopyIcon\n            size={14}\n            className=\"text-neutral-500 dark:text-neutral-400\"\n          />\n        </button>\n      </div>\n    </div>\n  );\n};\n",
      "type": "registry:component",
      "target": ""
    },
    {
      "path": "blocks/tool-01/components/open-source.tsx",
      "content": "import { StarIcon } from \"lucide-react\";\nimport { Avatar, AvatarImage } from \"@/components/ui/avatar\";\n\nexport const OpenSource = async () => {\n  return (\n    <div className=\"flex h-full flex-col items-start justify-between gap-4 p-8\">\n      <div className=\"flex flex-col gap-4\">\n        <div className=\"flex items-center gap-2 text-neutral-500\">\n          <StarIcon size={14} />\n          <small>Open source</small>\n        </div>\n        <p className=\"text-xl font-semibold tracking-tight\">\n          Active as earned recognition from the developer community with{\" \"}\n          <span className=\"text-orange-600\">4000</span> stars,{\" \"}\n          <span className=\"text-orange-600\">1200</span> forks, and{\" \"}\n          <span className=\"text-orange-600\">40</span> open issues and{\" \"}\n          <span className=\"text-orange-600\">20</span> contributors.\n        </p>\n        <div className=\"flex -space-x-3 *:ring *:ring-background\">\n          <Avatar>\n            <AvatarImage src=\"https://mynaui.com/avatars/avatar-01.jpg\" />\n          </Avatar>\n          <Avatar>\n            <AvatarImage src=\"https://mynaui.com//avatars/avatar-02.jpg\" />\n          </Avatar>\n          <Avatar>\n            <AvatarImage src=\"https://mynaui.com//avatars/avatar-03.jpg\" />\n          </Avatar>\n        </div>\n      </div>\n      <a\n        href=\"https://github.com/haydenbleasel/next-forge\"\n        className=\"inline-flex rounded-md border bg-white px-4 py-2 text-sm font-medium shadow-sm\"\n      >\n        Browse the source code\n      </a>\n    </div>\n  );\n};\n",
      "type": "registry:component",
      "target": ""
    },
    {
      "path": "blocks/tool-01/components/review.tsx",
      "content": "import { MessageCircleIcon } from \"lucide-react\";\nimport Image from \"next/image\";\n\nimport { Icons } from \"@/components/icons\";\n\nexport const Review = () => (\n  <section className=\"flex flex-col gap-8 p-8\">\n    <div className=\"flex items-center gap-2 text-neutral-500\">\n      <MessageCircleIcon size={14} />\n      <small>Nice words</small>\n    </div>\n    <p className=\"text-xl font-semibold tracking-tight sm:text-2xl\">\n      &ldquo;Active has completely transformed how I approach SaaS development.\n      The all-in-one setup saves so much time, and the fact that it's free and\n      open source is just the cherry on top. Highly recommend for any devs\n      looking to streamline their workflows!.&rdquo;\n    </p>\n    <div className=\"space-between flex items-center justify-between gap-4\">\n      <div className=\"flex items-center gap-2\">\n        <div className=\"flex items-center -space-x-1\">\n          <Image\n            className=\"rounded-full ring-1 ring-background\"\n            src=\"https://github.com/BroKarim.png\"\n            width={24}\n            height={24}\n            alt=\"Avatar 01\"\n          />\n        </div>\n        <p className=\"text-sm text-neutral-500\">\n          <span className=\"font-medium\">BroKarim</span>, CEO of Nothing\n        </p>\n      </div>\n      <a\n        href=\"https://x.com/rauchg/status/1853171412766466119\"\n        target=\"_blank\"\n        rel=\"noopener noreferrer\"\n      >\n        <Icons.Xicon />\n      </a>\n    </div>\n  </section>\n);\n",
      "type": "registry:component",
      "target": ""
    }
  ],
  "categories": [
    "hero",
    "tool"
  ]
}
</file>

<file path="registry/default/blocks/portofolio-01/components/list.tsx">
"use client";

import { useState } from "react";
import { Link } from "next-view-transitions";
import { cn } from "@/lib/utils";
import AnimatedBackground from "./animated-background";

export const List = ({
  items,
}: {
  items: { title: string; description?: string; hint?: string; href: string }[];
}) => {
  const [hoveredIndex, setHoveredIndex] = useState<number | null>(null);

  return (
    <div className="text-sm">
      {items.map((item, index) => (
        <AnimatedBackground
          key={index}
          className="rounded-lg bg-zinc-100/50 hover:text-primary dark:bg-zinc-800/50 "
          transition={{
            type: "spring",
            bounce: 0.2,
            duration: 0.6,
          }}
          enableHover
        >
          <div>
            <Link
              href={item.href}
              target={item.href.startsWith("http") ? "_blank" : undefined}
              className="w-full"
            >
              <div
                className={cn(
                  "flex items-center justify-between border-b py-3 duration-200",
                  hoveredIndex !== null && hoveredIndex !== index
                    ? "!opacity-50"
                    : "",
                )}
              >
                <div className="flex flex-col">
                  <span>{item.title}</span>
                  {item.description && <span>{item.description}</span>}
                </div>
                {item.hint && <span className=" text-right">{item.hint}</span>}
              </div>
            </Link>
          </div>
        </AnimatedBackground>
      ))}
    </div>
  );
};
</file>

<file path="styles/globals.css">
@tailwind base;
@tailwind components;
@tailwind utilities;

@layer base {
  :root {
    --background: 0 0% 100%;
    --foreground: 240 10% 3.9%;
    --card: 0 0% 100%;
    --card-foreground: 240 10% 3.9%;
    --popover: 0 0% 100%;
    --popover-foreground: 240 10% 3.9%;
    --primary: 240 5.9% 10%;
    --primary-foreground: 0 0% 98%;
    --secondary: 240 4.8% 95.9%;
    --secondary-foreground: 240 5.9% 10%;
    --muted: 240 4.8% 95.9%;
    --muted-foreground: 240 3.8% 46.1%;
    --accent: 240 4.8% 95.9%;
    --accent-foreground: 240 5.9% 10%;
    --destructive: 0 72.22% 50.59%;
    --destructive-foreground: 0 0% 98%;
    --border: 240 5.9% 90%;
    --input: 240 5.9% 90%;
    --ring: 240 5% 64.9%;
    --chart-1: 12 76% 61%;
    --chart-2: 173 58% 39%;
    --chart-3: 197 37% 24%;
    --chart-4: 43 74% 66%;
    --chart-5: 27 87% 67%;
    --sidebar: 0 0% 98%;
    --sidebar-foreground: 240 5.3% 26.1%;
    --sidebar-primary: 240 5.9% 10%;
    --sidebar-primary-foreground: 0 0% 98%;
    --sidebar-accent: 240 4.8% 95.9%;
    --sidebar-accent-foreground: 240 5.9% 10%;
    --sidebar-border: 220 13% 91%;
    --sidebar-ring: 240 5% 64.9%;
    --font-sans: "Oxanium", sans-serif;
    --font-serif: ui-serif, Georgia, Cambria, "Times New Roman", Times, serif;
    --font-mono: "Source Code Pro", monospace;
    --radius: 0.5rem;
    --shadow-color: 0 0% 0%;
    --shadow-opacity: 0.4;
    --shadow-blur: 4px;
    --shadow-spread: 0px;
    --shadow-offset-x: 0px;
    --shadow-offset-y: 2px;
    --letter-spacing: 0em;
    --spacing: 0.25rem;
  }

  .dark {
    --background: 240 10% 3.9%;
    --foreground: 0 0% 98%;
    --card: 240 10% 3.9%;
    --card-foreground: 0 0% 98%;
    --popover: 240 10% 3.9%;
    --popover-foreground: 0 0% 98%;
    --primary: 0 0% 98%;
    --primary-foreground: 240 5.9% 10%;
    --secondary: 240 3.7% 15.9%;
    --secondary-foreground: 0 0% 98%;
    --muted: 240 3.7% 15.9%;
    --muted-foreground: 240 5% 64.9%;
    --accent: 240 3.7% 15.9%;
    --accent-foreground: 0 0% 98%;
    --destructive: 0 62.8% 30.6%;
    --destructive-foreground: 0 85.7% 97.3%;
    --border: 240 3.7% 15.9%;
    --input: 240 3.7% 15.9%;
    --ring: 240 4.9% 83.9%;
    --chart-1: 220 70% 50%;
    --chart-2: 160 60% 45%;
    --chart-3: 30 80% 55%;
    --chart-4: 280 65% 60%;
    --chart-5: 340 75% 55%;
    --sidebar: 240 4.8% 95.9%;
    --sidebar-primary: 224.3 76.3% 48%;
    --sidebar-primary-foreground: 0 0% 100%;
    --sidebar-accent: 240 3.7% 15.9%;
    --sidebar-accent-foreground: 240 4.8% 95.9%;
    --sidebar-border: 240 3.7% 15.9%;
    --sidebar-ring: 240 4.9% 83.9%;
    --font-sans: "Oxanium", sans-serif;
    --font-serif: ui-serif, Georgia, Cambria, "Times New Roman", Times, serif;
    --font-mono: "Source Code Pro", monospace;
    --radius: 0.5rem;
    --shadow-color: 0 0% 0%;
    --shadow-opacity: 0.4;
    --shadow-blur: 4px;
    --shadow-spread: 0px;
    --shadow-offset-x: 0px;
    --shadow-offset-y: 2px;
    --letter-spacing: 0em;
    --spacing: 0.25rem;
  }
}

@layer base {
  * {
    @apply border-border;
  }
  html {
    @apply scroll-smooth;
  }
  body {
    @apply bg-background text-foreground overscroll-none;
    /* font-feature-settings: "rlig" 1, "calt" 1; */
    font-synthesis-weight: none;
    text-rendering: optimizeLegibility;
  }

  @supports (font: -apple-system-body) and (-webkit-appearance: none) {
    [data-wrapper] {
      @apply min-[1800px]:border-t;
    }
  }

  /* Custom scrollbar styling. Thanks @pranathiperii. */
  ::-webkit-scrollbar {
    width: 5px;
  }
  ::-webkit-scrollbar-track {
    background: transparent;
  }
  ::-webkit-scrollbar-thumb {
    background: hsl(var(--border));
    border-radius: 5px;
  }
  * {
    scrollbar-width: thin;
    scrollbar-color: hsl(var(--border)) transparent;
  }
  .border-grid {
    @apply border-border/50 dark:border-border border-dashed;
  }
}

@layer utilities {
  .step {
    counter-increment: step;
  }
  .bg-dashed {
    background-image: linear-gradient(45deg, #e5e5e5 12.5%, transparent 12.5%, transparent 50%, #e5e5e5 50%, #e5e5e5 62.5%, transparent 62.5%, transparent 100%);
    background-size: 0.25rem 0.25rem;
  }

  .step:before {
    @apply md:absolute w-8 h-8 md:w-9 md:h-9 bg-muted rounded-full font-mono font-medium text-center text-base inline-flex items-center justify-center -indent-px border-4 mr-2 border-background;
    @apply md:ml-[-50px] md:mt-[-4px];
    content: counter(step);
  }
  .bg-elevated {
    --base-shadow-color: rgb(0 0 0 / 0.045);

    .bg-primary {
      --base-shadow-color: rgb(0 0 0 / 0.05);
    }
  }

  .chunk-container {
    @apply shadow-none;
  }

  .chunk-container::after {
    content: "";
    @apply absolute -inset-4 shadow-xl rounded-xl border;
  }

  /* Hide scrollbar for Chrome, Safari and Opera */
  .no-scrollbar::-webkit-scrollbar {
    display: none;
  }
  /* Hide scrollbar for IE, Edge and Firefox */
  .no-scrollbar {
    -ms-overflow-style: none; /* IE and Edge */
    scrollbar-width: none; /* Firefox */
  }

  .container-wrapper {
    @apply max-w-[1400px] min-[1800px]:max-w-screen-2xl min-[1400px]:border-x border-border/70 dark:border-border mx-auto w-full border-dashed;
  }

  .container {
    @apply px-4 xl:px-6 mx-auto max-w-screen-2xl;
  }
}
</file>

<file path="__registry__/default/blocks/next-int/page.tsx">
"use client";

import React from "react";
import { motion } from "framer-motion";
import { Icons } from "@/components/icons";
import { NavigationBar } from "./components/navbar";
import { Photos } from "./components/photos";
import LangSwitch from "./components/lang-switch";
const projects = [
  {
    id: 1,
    media:
      "https://images.unsplash.com/photo-1571781418606-70265b9cce90?q=80&w=3087&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D",
  },
  {
    id: 2,
    media:
      "https://images.unsplash.com/photo-1505576391880-b3f9d713dc4f?q=80&w=1870&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D",
  },
  {
    id: 3,
    media:
      "https://images.unsplash.com/photo-1557804483-ef3ae78eca57?q=80&w=2688&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D",
  },
  {
    id: 4,
    media:
      "https://plus.unsplash.com/premium_photo-1684445035564-c98efbe1fb7d?q=80&w=3087&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D",
  },
  {
    id: 5,
    media:
      "https://images.unsplash.com/photo-1493857671505-72967e2e2760?q=80&w=2940&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D",
  },
  {
    id: 7,
    media:
      "https://images.unsplash.com/photo-1551038247-3d9af20df552?q=80&w=3087&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D",
  },
];

const NextInt = () => {
  const photos = projects.map((project) => project.media);
  return (
    <>
      <div className="bg-backgroud z-50 flex h-full flex-col items-center justify-between overflow-hidden px-4 md:h-screen">
        <div className="flex w-full items-center justify-between p-6 px-10">
          <div className="flex flex-1 text-lg font-medium text-primary md:text-2xl">
            NexInt
          </div>
          <div className="hidden w-full flex-1 justify-end md:flex md:justify-center">
            <NavigationBar.Desktop />
          </div>
          <div className="flex justify-end gap-3 md:flex-1">
            <LangSwitch />
          </div>
        </div>

        <div className=" flex-1  md:mt-10">
          <div className="container flex-col items-center md:flex md:h-full md:justify-between">
            <div className="md:translate-y-32">
              <div className="mb-2 flex w-full items-center justify-center gap-2 text-primary">
                <Icons.nextint />
                Broadway St., 123, New York, NY 10007 USA
              </div>
              <h1 className="font-heading xs:text-2xl text-pretty text-center text-xl tracking-tighter text-primary  sm:text-3xl  md:max-w-6xl md:text-7xl">
                Building visions & creating reality <br />
                with NextInt
              </h1>
            </div>
            <Photos photos={photos} />
          </div>
        </div>
      </div>
    </>
  );
};

export default NextInt;
</file>

<file path="components/theme-wrapper.tsx">
"use client";

import { useEffect, useRef } from "react";
import { fontSans, fontMono, fontRoboto, fontSerif } from "@/lib/font";
import { cn } from "@/lib/utils";
import { useConfig } from "@/lib/use-config";
import { useEditorStore } from "@/store/editor-store";
import { useTheme } from "next-themes";

interface ThemeWrapperProps extends React.ComponentProps<"div"> {}

export function ThemeWrapper({ children, className }: ThemeWrapperProps) {
  const [config] = useConfig();
  const { resolvedTheme: mode } = useTheme();
  const themeStyles = useEditorStore((state) => state.themeState.styles);
  console.log("🚀 ~ ThemeWrapper ~ themeStyles:", themeStyles);
  const wrapperRef = useRef<HTMLDivElement>(null);

  useEffect(() => {
    const timeout = setTimeout(() => {
      if (!wrapperRef.current) return;

      const styles = getComputedStyle(wrapperRef.current);
      console.log("Background var:", styles.getPropertyValue("--font-sans"));
    }, 50);

    return () => clearTimeout(timeout);
  }, []);

  useEffect(() => {
    const lightVars = themeStyles?.light;
    const darkVars = themeStyles?.dark;

    if (!lightVars || !darkVars) return;

    const root = document.documentElement;
    const isDark = mode === "dark";
    const vars = isDark ? darkVars : lightVars;

    Object.entries(vars).forEach(([key, value]) => {
      root.style.setProperty(`--${key}`, value);
    });
  }, [themeStyles, mode]);

  return (
    <div
      ref={wrapperRef}
      className={cn(
        "w-full",
        className,
        config.font === "roboto" ? fontRoboto.className : config.font === "mono" ? fontMono.className : config.font === "serif" ? fontSerif.className : fontSans.className // default
      )}
      style={
        {
          "--radius": `${config.radius}rem`,
          ...(themeStyles ?? {}),
        } as React.CSSProperties
      }
    >
      {children}
    </div>
  );
}
</file>

<file path="lib/registry-utils.ts">
// utils/registry-utils.ts
import { promises as fs } from "fs";
import { tmpdir } from "os";
import path from "path";
import { Index } from "@/__registry__";
import { registryItemFileSchema, registryEntrySchema } from "@/registry/schema";
import { Style } from "@/registry/registry-styles";
import { Project, ScriptKind, SourceFile } from "ts-morph";
import { z } from "zod";

export const DEFAULT_REGISTRY_STYLE = "default" satisfies Style["name"];

const memoizedIndex: typeof Index = Object.fromEntries(Object.entries(Index).map(([style, items]) => [style, { ...items }]));

export function getRegistryComponent(name: string, style: Style["name"] = DEFAULT_REGISTRY_STYLE) {
  const component = memoizedIndex[style][name]?.component;

  if (!component) {
    console.error(`Component "${name}" not found in registry`);
    return null;
  }

  return memoizedIndex[style][name]?.component;
}

export async function getRegistryItem(name: string, style: Style["name"] = DEFAULT_REGISTRY_STYLE) {
  const item = memoizedIndex[style][name];

  if (!item) {
    return null;
  }

  // Convert all file paths to object.
  // TODO: remove when we migrate to new registry.
  item.files = item.files.map((file: unknown) => (typeof file === "string" ? { path: file } : file));

  // Fail early before doing expensive file operations.
  const result = registryEntrySchema.safeParse(item);
  if (!result.success) {
    return null;
  }

  let files: typeof result.data.files = [];

  for (const file of item.files) {
    const content = await getFileContent(file);
    const relativePath = path.relative(process.cwd(), file.path);

    files.push({
      ...file,
      path: relativePath,
      content,
    });
  }

  // Get meta.
  // Assume the first file is the main file.
  // const meta = await getFileMeta(files[0].path)

  // Fix file paths.
  files = fixFilePaths(files);

  const parsed = registryEntrySchema.safeParse({
    ...result.data,
    files,
    // meta,
  });

  if (!parsed.success) {
    console.error(parsed.error.message);
    return null;
  }

  return parsed.data;
}

async function getFileContent(file: z.infer<typeof registryItemFileSchema>) {
  const raw = await fs.readFile(file.path, "utf-8");

  const project = new Project({
    compilerOptions: {},
  });

  const tempFile = await createTempSourceFile(file.path);
  const sourceFile = project.createSourceFile(tempFile, raw, {
    scriptKind: ScriptKind.TSX,
  });

  // Remove meta variables.
  removeVariable(sourceFile, "iframeHeight");
  removeVariable(sourceFile, "containerClassName");
  removeVariable(sourceFile, "description");

  let code = sourceFile.getFullText();

  // Some registry items uses default export.
  // We want to use named export instead.
  // TODO: do we really need this? - @shadcn.
  if (file.type !== "registry:page") {
    code = code.replaceAll("export default", "export");
  }

  // Fix imports.
  code = fixImport(code);

  return code;
}

function removeVariable(sourceFile: SourceFile, name: string) {
  sourceFile.getVariableDeclaration(name)?.remove();
}

async function createTempSourceFile(filename: string) {
  const dir = await fs.mkdtemp(path.join(tmpdir(), "shadcn-"));
  return path.join(dir, filename);
}

function fixFilePaths(files: z.infer<typeof registryEntrySchema>["files"]) {
  if (!files) {
    return [];
  }

  // Resolve all paths relative to the first file's directory.
  const firstFilePath = files[0].path;
  const firstFilePathDir = path.dirname(firstFilePath);

  return files.map((file) => {
    return {
      ...file,
      path: path.relative(firstFilePathDir, file.path),
      target: getFileTarget(file),
    };
  });
}

export function fixImport(content: string) {
  const regex = /@\/(.+?)\/((?:.*?\/)?(?:components|ui|hooks|lib))\/([\w-]+)/g;

  const replacement = (match: string, path: string, type: string, component: string) => {
    if (type.endsWith("components")) {
      return `@/components/${component}`;
    } else if (type.endsWith("ui")) {
      return `@/components/ui/${component}`;
    } else if (type.endsWith("hooks")) {
      return `@/hooks/${component}`;
    } else if (type.endsWith("lib")) {
      return `@/lib/${component}`;
    }

    return match;
  };

  return content.replace(regex, replacement);
}

// function getFileTarget(file: z.infer<typeof registryItemFileSchema>) {
//   let target = file.target;

//   if (!target || target === "") {
//     const fileName = file.path.split("/").pop();
//     if (file.type === "registry:page" || file.type === "registry:file") {
//       target = `app/${fileName}`;
//     }
//     // Penanganan untuk tipe lainnya
//     else if (file.type === "registry:block" || file.type === "registry:component") {
//       target = `components/${fileName}`;
//     }
//   }

//   return target ?? "";
// }

function getFileTarget(file: z.infer<typeof registryItemFileSchema>) {
  let target = file.target;

  if (!target || target === "") {
    const fileName = file.path.split("/").pop();
    if (file.type === "registry:page" || file.type === "registry:file") {
      target = `app/${fileName}`;
    }
    // Penanganan untuk tipe lainnya
    else if (file.type === "registry:block" || file.type === "registry:component") {
      target = `components/${fileName}`;
    }

    if (file.type === "registry:ui") {
      target = `components/ui/${fileName}`;
    }

    if (file.type === "registry:hook") {
      target = `hooks/${fileName}`;
    }

    if (file.type === "registry:lib") {
      target = `lib/${fileName}`;
    }
  }

  return target ?? "";
}

export type FileTree = {
  name: string;
  path?: string;
  children?: FileTree[];
};

export function createFileTreeForRegistryItemFiles(files: Array<{ path: string; target?: string }>) {
  const root: FileTree[] = [];

  for (const file of files) {
    const path = file.target ?? file.path;
    const parts = path.split("/");
    let currentLevel = root;

    for (let i = 0; i < parts.length; i++) {
      const part = parts[i];
      const isFile = i === parts.length - 1;
      const existingNode = currentLevel.find((node) => node.name === part);

      if (existingNode) {
        if (isFile) {
          // Update existing file node with full path
          existingNode.path = path;
        } else {
          // Move to next level in the tree
          currentLevel = existingNode.children!;
        }
      } else {
        const newNode: FileTree = isFile ? { name: part, path } : { name: part, children: [] };

        currentLevel.push(newNode);

        if (!isFile) {
          currentLevel = newNode.children!;
        }
      }
    }
  }

  return root;
}
</file>

<file path="registry/default/blocks/tool-01/components/header.tsx">
import Link from "next/link";
import { GitHubButton } from "./github-button";
import { ButtonColorful } from "./colorful-button";
import Logo from "./logo.svg";
import { Icons } from "@/components/icons";

const links = [
  {
    label: "Home",
    href: "/#",
  },
  {
    label: "Apps",
    href: "/#apps",
  },
  {
    label: "Features",
    href: "/#features",
  },
  {
    label: "Community",
    href: "/#community",
  },
];

export const Header = () => (
  <div className="sticky top-0 z-50 w-full border-b  backdrop-blur-sm">
    <div className="container mx-auto flex items-center justify-between px-8 py-2">
      <div className="flex items-center gap-8">
        <Link href="/" className="flex items-center gap-2 py-1">
          <Icons.logo />
          <p className="hidden text-lg font-semibold tracking-tight sm:block">
            active
          </p>
        </Link>
        <div className="hidden items-center gap-4 text-sm font-medium text-neutral-500 lg:flex">
          {links.map((link) => (
            <Link key={link.href} href={link.href}>
              {link.label}
            </Link>
          ))}
        </div>
      </div>
      <div className="flex items-center gap-4">
        <GitHubButton />
        <ButtonColorful />
      </div>
    </div>
  </div>
);
</file>

<file path="registry/schema.ts">
import { z } from "zod";

// define (enum) yg menntukan jenis item dalam regstry
export const registryItemTypeSchema = z.enum([
  "registry:lib",
  "registry:block",
  "registry:component",
  "registry:ui",
  "registry:hook",
  "registry:page",
  "registry:file",

  // Internal use only
  "registry:theme",
  "registry:style",
  "registry:internal",
]);
export const registryItemFileSchema = z.discriminatedUnion("type", [
  // Target is required for registry:file and registry:page
  z.object({
    path: z.string(),
    content: z.string().optional(),
    type: z.enum(["registry:file", "registry:page"]),
    target: z.string(),
  }),
  z.object({
    path: z.string(),
    content: z.string().optional(),
    type: registryItemTypeSchema.exclude(["registry:file", "registry:page"]),
    target: z.string().optional(),
  }),
]);

export const registryItemTailwindSchema = z.object({
  config: z.object({
    content: z.array(z.string()).optional(),
    theme: z.record(z.string(), z.any()).optional(),
    plugins: z.array(z.string()).optional(),
  }),
});

export const registryItemCssVarsSchema = z.object({
  light: z.record(z.string(), z.string()).optional(),
  dark: z.record(z.string(), z.string()).optional(),
});

// strukture item registry
export const registryEntrySchema = z.object({
  $schema: z.string().optional(),
  name: z.string(),
  type: registryItemTypeSchema,
  title: z.string().optional(),
  author: z.string().min(2).optional(),
  description: z.string().optional(),
  dependencies: z.array(z.string()).optional(),
  devDependencies: z.array(z.string()).optional(),
  registryDependencies: z.array(z.string()).optional(),
  files: z.array(registryItemFileSchema).optional(),
  tailwind: registryItemTailwindSchema.optional(),
  cssVars: registryItemCssVarsSchema.optional(),
  meta: z.record(z.string(), z.any()).optional(),
  docs: z.string().optional(),
  categories: z.array(z.string()).optional(),
});

// export const registrySchema = z.array(registryEntrySchema);

// Struktur keseluruhan registry, yg include name dan items
export const registrySchema = z.object({
  name: z.string(),
  homepage: z.string(),
  items: z.array(registryEntrySchema),
});

export type RegistryEntry = z.infer<typeof registryEntrySchema>;

// type yg dieskport untk validasi
export type Registry = z.infer<typeof registrySchema>;

export const blockSchema = registryEntrySchema.extend({
  type: z.literal("registry:block"),
  style: z.enum(["default"]),
  component: z.any(),
  container: z
    .object({
      height: z.string().nullish(),
      className: z.string().nullish(),
    })
    .optional(),
  code: z.string(),
  highlightedCode: z.string(),
});

export type Block = z.infer<typeof blockSchema>;
</file>

<file path="README.md">
# BehindUI

**Beautiful UI Components.**

[BehindUI](https://github.com/BroKarim/behinUI) is my little hobby project where I collect, design, and share beautiful UI components. &lt;br/&gt; Built on top of [shadcn/ui](https://github.com/shadcn-ui/ui) with tweaks, themes, and a personal touch — feel free to explore or fork!

&lt;img alt="BehindUI - Beautiful UI Components" src="https://github.com/user-attachments/assets/14f6c581-1281-4d6f-b11d-1babadd08734" width="100%"&gt;

&lt;p align="center"&gt; &lt;a href="https://github.com/BroKarim/behinUI/stargazers"&gt;&lt;img alt="GitHub Repo stars"src="https://img.shields.io/github/stars/BroKarim/behinUI"&gt;&lt;/a&gt;   &lt;a href="https://x.com/BroKariim"&gt;&lt;img alt="Twitter Follow" src="https://img.shields.io/twitter/follow/BroKariim"&gt;&lt;/a&gt; &lt;/p&gt;

## License

MIT
</file>

<file path="tailwind.config.cjs">
const { fontFamily } = require("tailwindcss/defaultTheme");
const colors = require("tailwindcss/colors");

/** @type {import('tailwindcss').Config} */

module.exports = {
  darkMode: ["class"],
  content: ["./components/**/*.{ts,tsx}", "./app/**/*.{ts,tsx}", "./registry/**/*.{ts,tsx}"],
  theme: {
    container: {
      center: true,
      padding: "2rem",
      screens: {
        "2xl": "1600px",
      },
    },
    extend: {
      fontFamily: {
        sans: ["var(--font-geist-sans)", ...fontFamily.sans],
        // mono: ["var(--font-geist-mono)", ...fontFamily.mono],
      },
      colors: {
        border: "hsl(var(--border))",
        input: "hsl(var(--input))",
        ring: "hsl(var(--ring))",
        background: "hsl(var(--background))",
        foreground: "hsl(var(--foreground))",
        primary: {
          DEFAULT: "hsl(var(--primary))",
          foreground: "hsl(var(--primary-foreground))",
        },
        secondary: {
          DEFAULT: "hsl(var(--secondary))",
          foreground: "hsl(var(--secondary-foreground))",
        },
        destructive: {
          DEFAULT: "hsl(var(--destructive))",
          foreground: "hsl(var(--destructive-foreground))",
        },
        muted: {
          DEFAULT: "hsl(var(--muted))",
          foreground: "hsl(var(--muted-foreground))",
        },
        accent: {
          DEFAULT: "hsl(var(--accent))",
          foreground: "hsl(var(--accent-foreground))",
        },
        popover: {
          DEFAULT: "hsl(var(--popover))",
          foreground: "hsl(var(--popover-foreground))",
        },
        card: {
          DEFAULT: "hsl(var(--card))",
          foreground: "hsl(var(--card-foreground))",
        },
      },
      borderRadius: {
        xl: "calc(var(--radius) + 4px)",
        lg: "var(--radius)",
        md: "calc(var(--radius) - 2px)",
        sm: "calc(var(--radius) - 4px)",
      },
      animation: {
        "accordion-down": "accordion-down 0.2s ease-out",
        "accordion-up": "accordion-up 0.2s ease-out",
        gradient: "gradient 8s linear infinite",
        meteor: "meteor 5s linear infinite",
        grid: "grid 15s linear infinite",
        marquee: "marquee var(--duration) infinite linear",
        "marquee-vertical": "marquee-vertical var(--duration) linear infinite",
        "spin-around": "spin-around calc(var(--speed) * 2) infinite linear",
        "shiny-text": "shiny-text 8s infinite",
        "shimmer-slide": "shimmer-slide var(--speed) ease-in-out infinite alternate",
        ripple: "ripple var(--duration,2s) ease calc(var(--i, 0)*.2s) infinite",
        line: "line 2s linear infinite",
        "border-beam": "border-beam calc(var(--duration)*1s) infinite linear",
        orbit: "orbit calc(var(--duration)*1s) linear infinite",
        "background-position-spin": "background-position-spin 3000ms infinite alternate",
        shine: "shine var(--duration) infinite linear",
        pulse: "pulse var(--duration) ease-out infinite",
        rainbow: "rainbow var(--speed, 2s) infinite linear",
        "border-beam": "border-beam calc(var(--duration)*1s) infinite linear",
      },
      keyframes: {
        "accordion-down": {
          from: { height: "0" },
          to: { height: "var(--radix-accordion-content-height)" },
        },
        "accordion-up": {
          from: { height: "var(--radix-accordion-content-height)" },
          to: { height: "0" },
        },
        "border-beam": {
          "100%": {
            "offset-distance": "100%",
          },
        },
        "background-position-spin": {
          "0%": { backgroundPosition: "top center" },
          "100%": { backgroundPosition: "bottom center" },
        },
        gradient: {
          to: {
            backgroundPosition: "var(--bg-size) 0",
          },
        },
        meteor: {
          "0%": { transform: "rotate(215deg) translateX(0)", opacity: "1" },
          "70%": { opacity: "1" },
          "100%": {
            transform: "rotate(215deg) translateX(-500px)",
            opacity: "0",
          },
        },
        grid: {
          "0%": { transform: "translateY(-50%)" },
          "100%": { transform: "translateY(0)" },
        },
        marquee: {
          from: { transform: "translateX(0)" },
          to: { transform: "translateX(calc(-100% - var(--gap)))" },
        },
        "marquee-vertical": {
          from: { transform: "translateY(0)" },
          to: { transform: "translateY(calc(-100% - var(--gap)))" },
        },
        "spin-around": {
          "0%": {
            transform: "translateZ(0) rotate(0)",
          },
          "15%, 35%": {
            transform: "translateZ(0) rotate(90deg)",
          },
          "65%, 85%": {
            transform: "translateZ(0) rotate(270deg)",
          },
          "100%": {
            transform: "translateZ(0) rotate(360deg)",
          },
        },
        ripple: {
          "0%, 100%": {
            transform: "translate(-50%, -50%) scale(1)",
          },
          "50%": {
            transform: "translate(-50%, -50%) scale(0.9)",
          },
        },
        "shimmer-slide": {
          to: {
            transform: "translate(calc(100cqw - 100%), 0)",
          },
        },
        line: {
          "0%": { "mask-position-x": "0%" },
          "100%": { "mask-position-x": "100%" },
        },
        "border-beam": {
          "100%": {
            "offset-distance": "100%",
          },
        },
        "shiny-text": {
          "0%, 90%, 100%": {
            "background-position": "calc(-100% - var(--shiny-width)) 0",
          },
          "30%, 60%": {
            "background-position": "calc(100% + var(--shiny-width)) 0",
          },
        },
        orbit: {
          "0%": {
            transform: "rotate(0deg) translateY(calc(var(--radius) * 1px)) rotate(0deg)",
          },
          "100%": {
            transform: "rotate(360deg) translateY(calc(var(--radius) * 1px)) rotate(-360deg)",
          },
        },
        shine: {
          "0%": {
            "background-position": "0% 0%",
          },
          "50%": {
            "background-position": "100% 100%",
          },
          to: {
            "background-position": "0% 0%",
          },
        },
        pulse: {
          "0%, 100%": { boxShadow: "0 0 0 0 var(--pulse-color)" },
          "50%": { boxShadow: "0 0 0 8px var(--pulse-color)" },
        },
        rainbow: {
          "0%": { "background-position": "0%" },
          "100%": { "background-position": "200%" },
        },
      },
    },
  },
  plugins: [require("tailwindcss-animate")],
};
</file>

<file path="__registry__/default/blocks/portofolio-01/main.tsx">
import { List } from "./components/list";
import Link from "next/link";
import { Footer } from "./components/footer";
import { projects } from "./contents/projects";
import AnimatedBackground from "./components/animated-background";

export default function Layout() {
  return (
    <>
      <div className=" relative z-50 mx-auto flex h-full w-full justify-center px-4 pt-20 text-primary md:h-screen">
        <div>
          <div>
            <h1 className="text-lg font-semibold">BroKarim</h1>
          </div>
          <div>
            <p className="text-fg-muted">Software Engineer</p>
          </div>

          <div>
            <p className="mt-10 text-sm">
              Designing sleek, accessible, and modern UIs that set a new
              standard in functionality and aesthetics
            </p>
          </div>
          <div>
            <h2 className="text-fg-muted mb-2 mt-10 text-sm">Projects</h2>
          </div>
          <List items={projects} />
          <div>
            <Footer />
          </div>
        </div>
      </div>
    </>
  );
}
</file>

<file path="public/r/styles/default/nextint.json">
{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "nextint",
  "type": "registry:block",
  "author": "shadcn (https://ui.shadcn.com)",
  "description": "A simple sidebar with navigation grouped by section.",
  "registryDependencies": [
    "nav",
    "lang-switch",
    "photos"
  ],
  "files": [
    {
      "path": "blocks/next-int/page.tsx",
      "content": "\"use client\";\n\nimport React from \"react\";\nimport { motion } from \"framer-motion\";\nimport { Icons } from \"@/components/icons\";\nimport { NavigationBar } from \"./components/navbar\";\nimport { Photos } from \"./components/photos\";\nimport LangSwitch from \"./components/lang-switch\";\nconst projects = [\n  {\n    id: 1,\n    media:\n      \"https://images.unsplash.com/photo-1571781418606-70265b9cce90?q=80&w=3087&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D\",\n  },\n  {\n    id: 2,\n    media:\n      \"https://images.unsplash.com/photo-1505576391880-b3f9d713dc4f?q=80&w=1870&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D\",\n  },\n  {\n    id: 3,\n    media:\n      \"https://images.unsplash.com/photo-1557804483-ef3ae78eca57?q=80&w=2688&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D\",\n  },\n  {\n    id: 4,\n    media:\n      \"https://plus.unsplash.com/premium_photo-1684445035564-c98efbe1fb7d?q=80&w=3087&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D\",\n  },\n  {\n    id: 5,\n    media:\n      \"https://images.unsplash.com/photo-1493857671505-72967e2e2760?q=80&w=2940&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D\",\n  },\n  {\n    id: 7,\n    media:\n      \"https://images.unsplash.com/photo-1551038247-3d9af20df552?q=80&w=3087&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D\",\n  },\n];\n\nconst NextInt = () => {\n  const photos = projects.map((project) => project.media);\n  return (\n    <>\n      <div className=\"bg-backgroud z-50 flex h-full flex-col items-center justify-between overflow-hidden px-4 md:h-screen \">\n        <div className=\"flex w-full items-center justify-between p-6 px-10\">\n          <div className=\"flex flex-1 text-lg font-medium text-primary md:text-2xl\">\n            NexInt\n          </div>\n          <div className=\"hidden w-full flex-1 justify-end md:flex md:justify-center\">\n            <NavigationBar.Desktop />\n          </div>\n          <div className=\"flex justify-end gap-3 md:flex-1\">\n            <LangSwitch />\n          </div>\n        </div>\n\n        <div className=\" flex-1  md:mt-10\">\n          <div className=\"container flex-col items-center md:flex md:h-full md:justify-between\">\n            <div className=\"md:translate-y-32\">\n              <div className=\"mb-2 flex w-full items-center justify-center gap-2 text-primary\">\n                <Icons.nextint />\n                Broadway St., 123, New York, NY 10007 USA\n              </div>\n              <h1 className=\"font-heading xs:text-2xl text-pretty text-center text-xl tracking-tighter text-primary  sm:text-3xl  md:max-w-6xl md:text-7xl\">\n                Building visions & creating reality <br />\n                with NextInt\n              </h1>\n            </div>\n            <Photos photos={photos} />\n          </div>\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default NextInt;\n",
      "type": "registry:page",
      "target": "app/page.tsx"
    },
    {
      "path": "blocks/next-int/components/navbar.tsx",
      "content": "import React from \"react\";\nimport { motion, useMotionTemplate, useMotionValue } from \"framer-motion\";\nimport Link from \"next/link\";\nimport { usePathname } from \"next/navigation\";\nimport { cn } from \"@/lib/utils\";\n\nfunction NavItem({\n  href,\n  children,\n}: {\n  href: string;\n  children: React.ReactNode;\n}) {\n  const pathname = usePathname();\n  const isActive = pathname === href;\n\n  return (\n    <li>\n      <Link\n        href=\"/\"\n        className={`relative block whitespace-nowrap px-3 py-2 transition ${isActive ? \"text-lime-600 dark:text-lime-400\" : \"hover:text-lime-600 dark:hover:text-lime-400\"}`}\n      >\n        {children}\n        {isActive && (\n          <motion.span\n            className=\"absolute inset-x-1 -bottom-px h-px bg-gradient-to-r from-lime-700/0 via-lime-700/70 to-lime-700/0 dark:from-lime-400/0 dark:via-lime-400/40 dark:to-lime-400/0\"\n            layoutId=\"active-nav-item\"\n          />\n        )}\n      </Link>\n    </li>\n  );\n}\n\nfunction Desktop({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  const mouseX = useMotionValue(0);\n  const mouseY = useMotionValue(0);\n  const radius = useMotionValue(0);\n  const handleMouseMove = React.useCallback(\n    ({ clientX, clientY, currentTarget }: React.MouseEvent) => {\n      const bounds = currentTarget.getBoundingClientRect();\n      mouseX.set(clientX - bounds.left);\n      mouseY.set(clientY - bounds.top);\n      radius.set(Math.sqrt(bounds.width ** 2 + bounds.height ** 2) / 2.5);\n    },\n    [mouseX, mouseY, radius],\n  );\n  const background = useMotionTemplate`radial-gradient(${radius}px circle at ${mouseX}px ${mouseY}px, var(--spotlight-color) 0%, transparent 65%)`;\n\n  return (\n    <nav\n      onMouseMove={handleMouseMove}\n      className={cn(\n        \"group relative\",\n        \"rounded-full bg-background\",\n        \"shadow-lg shadow-zinc-800/5 ring-1 ring-zinc-900/5 backdrop-blur-md\",\n        // \"dark:from-zinc-900/70 dark:to-zinc-800/90 dark:ring-zinc-100/10\",\n        \"[--spotlight-color:rgb(236_252_203_/_0.6)] \",\n        className,\n      )}\n      {...props}\n    >\n      {/* Spotlight overlay */}\n      <motion.div\n        className=\"pointer-events-none absolute -inset-px rounded-full opacity-0 transition-opacity duration-500 group-hover:opacity-100\"\n        style={{ background }}\n        aria-hidden=\"true\"\n      />\n\n      <ul className=\"flex bg-transparent px-3 text-sm font-medium text-primary \">\n        {navigationItems.map(({ href, text }) => (\n          <NavItem key={href} href={href}>\n            {text}\n          </NavItem>\n        ))}\n      </ul>\n    </nav>\n  );\n}\n// keknya bagian mobiele kita buat bentuk Tirana aja, dengan catatan ada animasi x close\n// namun saat dipanggil tetap kaya cali.so\n\nexport const navigationItems = [\n  { href: \"/\", text: \"About\" },\n  { href: \"/\", text: \"Service\" },\n  { href: \"/\", text: \"Testimonial\" },\n  { href: \"/\", text: \"Projects\" },\n];\n\nexport const NavigationBar = {\n  Desktop,\n} as const;\n",
      "type": "registry:component",
      "target": ""
    },
    {
      "path": "blocks/next-int/components/lang-switch.tsx",
      "content": "\"use client\";\n\nimport { Button } from \"@/components/ui/button\";\nimport { Drawer, DrawerTrigger, DrawerContent, DrawerClose } from \"./drawer\";\nimport React from \"react\";\nimport { X } from \"lucide-react\";\nimport { cn } from \"@/lib/utils\";\n\nexport default function LangSwitch() {\n  return (\n    <React.Fragment>\n      <Drawer>\n        <DrawerTrigger asChild>\n          <Button\n            variant=\"outline\"\n            size=\"sm\"\n            className={cn(\"flex items-center rounded-sm\")}\n          >\n            <span>EN</span>\n          </Button>\n        </DrawerTrigger>\n        <DrawerContent>\n          <div className=\"grid gap-4 p-4\">\n            <div className=\"flex items-center justify-between\">\n              <h3 className=\"text-lg font-medium\">Select Language</h3>\n              <DrawerClose asChild>\n                <Button variant=\"ghost\" size=\"icon\" className=\"rou h-8 w-8\">\n                  <X className=\"h-5 w-5\" />\n                </Button>\n              </DrawerClose>\n            </div>\n            <div className=\"grid gap-2\">\n              <Button variant=\"ghost\" className=\"justify-start gap-2\">\n                <span>English</span>\n              </Button>\n              <Button variant=\"ghost\" className=\"justify-start gap-2\">\n                <span>Español</span>\n              </Button>\n              <Button variant=\"ghost\" className=\"justify-start gap-2\">\n                <span>Français</span>\n              </Button>\n              <Button variant=\"ghost\" className=\"justify-start gap-2\">\n                <span>Deutsch</span>\n              </Button>\n            </div>\n          </div>\n        </DrawerContent>\n      </Drawer>\n    </React.Fragment>\n  );\n}\n",
      "type": "registry:component",
      "target": ""
    },
    {
      "path": "blocks/next-int/components/photos.tsx",
      "content": "import { motion } from \"framer-motion\";\nimport { Marquee } from \"./marquee\";\nimport { cn } from \"@/lib/utils\";\n\nimport React from \"react\";\n\nexport function Photos({ photos }: { photos: string[] }) {\n  const [width, setWidth] = React.useState(0);\n  const [isCompact, setIsCompact] = React.useState(false);\n  const expandedWidth = React.useMemo(() => width * 1.38, [width]);\n\n  React.useEffect(() => {\n    const handleResize = () => {\n      // 640px is the breakpoint for md\n      if (window.innerWidth < 640) {\n        setIsCompact(true);\n        return setWidth(window.innerWidth / 2 - 64);\n      }\n\n      setWidth(window.innerWidth / photos.length - 4 * photos.length);\n    };\n\n    window.addEventListener(\"resize\", handleResize);\n    handleResize();\n\n    return () => {\n      window.removeEventListener(\"resize\", handleResize);\n    };\n  }, [photos.length]);\n\n  return (\n    <motion.div\n      className=\"mt-16 sm:mt-20\"\n      initial={{ opacity: 0, scale: 0.925, y: 16 }}\n      animate={{ opacity: 1, scale: 1, y: 0 }}\n      transition={{\n        delay: 0.5,\n        type: \"spring\",\n      }}\n    >\n      <Marquee>\n        <div className=\"-my-4 flex w-full snap-x snap-proximity scroll-pl-4 justify-start gap-4 overflow-x-auto p-4 sm:gap-6 md:justify-center md:overflow-x-hidden md:px-0\">\n          {photos.map((image, idx) => (\n            <motion.div\n              key={idx}\n              className={cn(\n                \"relative h-40 flex-none shrink-0 snap-start overflow-hidden  rounded-xl bg-zinc-100 ring-2 ring-lime-800/20 dark:bg-zinc-800 dark:ring-lime-300/10 md:h-72\",\n              )}\n              animate={{\n                width,\n                opacity: isCompact ? 1 : 0.85,\n                filter: isCompact ? \"grayscale(0)\" : \"grayscale(0.5)\",\n                rotate: idx % 2 === 0 ? 2 : -1,\n              }}\n              whileHover={\n                isCompact\n                  ? {}\n                  : {\n                      width: expandedWidth,\n                      opacity: 1,\n                      filter: \"grayscale(0)\",\n                    }\n              }\n              layout\n            >\n              <img\n                src={image}\n                alt=\"\"\n                width={500}\n                height={500}\n                sizes=\"(min-width: 640px) 18rem, 11rem\"\n                className=\"pointer-events-none absolute inset-0 h-full w-full select-none object-cover\"\n              />\n            </motion.div>\n          ))}\n        </div>\n      </Marquee>\n    </motion.div>\n  );\n}\n",
      "type": "registry:component",
      "target": ""
    }
  ],
  "categories": [
    "startup"
  ]
}
</file>

<file path="registry/default/blocks/portofolio-01/main.tsx">
import { List } from "./components/list";
import Link from "next/link";
import { Footer } from "./components/footer";
import { projects } from "./contents/projects";
import AnimatedBackground from "./components/animated-background";

export default function Layout() {
  return (
    <>
      <div className=" relative z-50 mx-auto flex h-full w-full justify-center px-4 pt-20 text-primary md:h-screen">
        <div>
          <div>
            <h1 className="text-lg font-semibold">BroKarim</h1>
          </div>
          <div>
            <p className="text-fg-muted">Software Engineer</p>
          </div>

          <div>
            <p className="mt-10 text-sm">
              Designing sleek, accessible, and modern UIs that set a new
              standard in functionality and aesthetics
            </p>
          </div>
          <div>
            <h2 className="text-fg-muted mb-2 mt-10 text-sm">Projects</h2>
          </div>
          <List items={projects} />
          <div>
            <Footer />
          </div>
        </div>
      </div>
    </>
  );
}
</file>

<file path="app/(app)/layout.tsx">
import { SiteFooter } from "@/components/site-footer";
import { SiteHeader } from "@/components/site-header";
import { ThemeCustomizer } from "@/components/theme-customizer";
import { ScrollArea, ScrollBar } from "@/components/ui/scroll-area";
import { BlocksNav } from "@/components/registry/component-nav";

interface AppLayoutProps {
  children: React.ReactNode;
}

export default async function AppLayout({ children }: AppLayoutProps) {
  return (
    <>
      <SiteHeader />
      <main className="no-scrollbar relative flex h-screen overflow-hidden ">
        <div className="hidden h-screen shrink-0 flex-col gap-2 overflow-y-auto font-sans md:flex md:w-[300px] lg:w-[400px]">
          <div className="sticky top-0 z-30 flex h-fit w-full flex-col items-center gap-2 border-b bg-background p-2 px-4 sm:static ">
            <h1 className="w-full font-bold">Customizer</h1>
            <p className="w-full ">Designed for effortless use—just copy and paste! Make your work with ShadCN and Tailwind faster, cleaner, and visually stunning.</p>
          </div>
          <ScrollArea className="h-full w-full flex-1 p-4">
            <ThemeCustomizer />
          </ScrollArea>
        </div>
        {/* Main Content */}
        <div className="relative flex w-full flex-col border-l  md:w-[calc(100%-300px)]  lg:w-[calc(100%-400px)]">
          {" "}
          <div className=" flex w-full items-center justify-center px-0 py-4">
            <BlocksNav />
          </div>
          <ScrollArea className="h-full w-full ">
            <div className=" flex w-full flex-col items-start gap-2 py-4 md:py-10 lg:py-0">
              <div className="grid h-full w-full grid-cols-1 md:items-center md:justify-center md:gap-8 ">{children}</div>
            </div>
          </ScrollArea>
        </div>
      </main>
      <SiteFooter />
    </>
  );
}
</file>

<file path="components/registry/component-viewer.tsx">
"use client";

import * as React from "react";
import Image from "next/image";
import Link from "next/link";
import { Check, ChevronRight, Clipboard, File, Folder, Fullscreen, Monitor, Smartphone, Tablet, Terminal } from "lucide-react";
import { ImperativePanelHandle } from "react-resizable-panels";

import { registryItemFileSchema, registryEntrySchema } from "@/registry/schema";
import { z } from "zod";

import { trackEvent } from "@/lib/events";
import { FileTree, createFileTreeForRegistryItemFiles } from "@/lib/registry-utils";
import { useCopyToClipboard } from "@/hooks/use-copy-to-clipboard";
import { Button } from "../ui/button";
import { Collapsible, CollapsibleContent, CollapsibleTrigger } from "../ui/collapsible";
import { ResizableHandle, ResizablePanel, ResizablePanelGroup } from "../ui/resizable";
import { Separator } from "../ui/separator";
import { Sidebar, SidebarGroup, SidebarGroupContent, SidebarGroupLabel, SidebarMenu, SidebarMenuButton, SidebarMenuItem, SidebarMenuSub, SidebarProvider } from "../ui/sidebar";
import { Tabs, TabsList, TabsTrigger } from "../ui/tabs";
import { ToggleGroup, ToggleGroupItem } from "../ui/toggle-group";
import { Style } from "@/registry/registry-styles";

type BlockViewerContext = {
  item: z.infer<typeof registryEntrySchema>;
  view: "code" | "preview";
  setView: (view: "code" | "preview") => void;
  style?: Style["name"];
  setStyle: (style: Style["name"]) => void;
  activeFile: string | null;
  setActiveFile: (file: string) => void;
  resizablePanelRef: React.RefObject<ImperativePanelHandle> | null;
  tree: ReturnType<typeof createFileTreeForRegistryItemFiles> | null;
  highlightedFiles:
    | (z.infer<typeof registryItemFileSchema> & {
        highlightedContent: string;
      })[]
    | null;
};

const BlockViewerContext = React.createContext<BlockViewerContext | null>(null);

function useBlockViewer() {
  const context = React.useContext(BlockViewerContext);
  if (!context) {
    throw new Error("useBlockViewer must be used within a BlockViewerProvider.");
  }
  return context;
}

function BlockViewerProvider({
  item,
  tree,
  highlightedFiles,
  children,
}: Pick<BlockViewerContext, "item" | "tree" | "highlightedFiles"> & {
  children: React.ReactNode;
}) {
  const [view, setView] = React.useState<BlockViewerContext["view"]>("preview");
  const [style, setStyle] = React.useState<BlockViewerContext["style"]>("default");
  const [activeFile, setActiveFile] = React.useState<BlockViewerContext["activeFile"]>(highlightedFiles?.[0].target ?? null);
  const resizablePanelRef = React.useRef<ImperativePanelHandle>(null);

  return (
    <BlockViewerContext.Provider
      value={{
        item,
        view,
        setView,
        style,
        setStyle,
        resizablePanelRef,
        activeFile,
        setActiveFile,
        tree,
        highlightedFiles,
      }}
    >
      <div
        id={item.name}
        data-view={view}
        className="group/block-view-wrapper flex min-w-0 flex-col items-stretch gap-4"
        style={
          {
            "--height": item.meta?.iframeHeight ?? "930px",
          } as React.CSSProperties
        }
      >
        {children}
      </div>
    </BlockViewerContext.Provider>
  );
}

function BlockViewerToolbar() {
  const { setView, item, resizablePanelRef, style } = useBlockViewer();
  const { copyToClipboard, isCopied } = useCopyToClipboard();

  return (
    <div className="flex w-full items-center gap-2 md:pr-[14px] ">
      <Tabs defaultValue="preview" onValueChange={(value) => setView(value as "preview" | "code")} className="hidden lg:flex">
        <TabsList className="h-7 items-center rounded-md p-0 px-[calc(theme(spacing.1)_-_2px)] py-[theme(spacing.1)]">
          <TabsTrigger value="preview" className="h-[1.45rem] rounded-sm px-2 text-xs">
            Preview
          </TabsTrigger>
          <TabsTrigger value="code" className="h-[1.45rem] rounded-sm px-2 text-xs">
            Code
          </TabsTrigger>
        </TabsList>
      </Tabs>
      <Separator orientation="vertical" className="mx-2 hidden h-4 lg:flex" />
      <a href={`#${item.name}`} className="text-sm font-medium underline-offset-2 hover:underline">
        {item.description}
      </a>
      <div className="ml-auto hidden items-center gap-2 md:flex">
        <div className="hidden h-7 items-center gap-1.5 rounded-md border p-[2px] shadow-none lg:flex">
          <ToggleGroup
            type="single"
            defaultValue="100"
            onValueChange={(value) => {
              if (resizablePanelRef?.current) {
                resizablePanelRef.current.resize(parseInt(value));
              }
            }}
          >
            <ToggleGroupItem value="100" className="h-[22px] w-[22px] min-w-0 rounded-sm p-0" title="Desktop">
              <Monitor className="h-3.5 w-3.5" />
            </ToggleGroupItem>
            <ToggleGroupItem value="60" className="h-[22px] w-[22px] min-w-0 rounded-sm p-0" title="Tablet">
              <Tablet className="h-3.5 w-3.5" />
            </ToggleGroupItem>
            <ToggleGroupItem value="30" className="h-[22px] w-[22px] min-w-0 rounded-sm p-0" title="Mobile">
              <Smartphone className="h-3.5 w-3.5" />
            </ToggleGroupItem>
            <Separator orientation="vertical" className="h-4" />
            <Button size="icon" variant="ghost" className="h-[22px] w-[22px] rounded-sm p-0" asChild title="Open in New Tab">
              <Link href={`/view/styles/${style}/${item.name}`} target="_blank">
                <span className="sr-only">Open in New Tab</span>
                <Fullscreen className="h-3.5 w-3.5" />
              </Link>
            </Button>
          </ToggleGroup>
        </div>
      </div>
    </div>
  );
}

function BlockViewerView() {
  const { item, style, resizablePanelRef } = useBlockViewer();

  if (!item || !item.files) return null;

  return (
    <div className="group-data-[view=code]/block-view-wrapper:hidden md:h-[--height]">
      <div className="grid w-full gap-4">
        <ResizablePanelGroup direction="horizontal" className="relative z-10">
          <ResizablePanel ref={resizablePanelRef} className="relative aspect-[4/2.5] rounded-xl border bg-background md:aspect-auto" defaultSize={100} minSize={30}>
            <Image src={`/r/styles/${style}/${item.name}-light.png`} alt={item.name} data-block={item.name} width={1440} height={900} className="object-cover dark:hidden md:hidden md:dark:hidden" />
            <Image src={`/r/styles/${style}/${item.name}-dark.png`} alt={item.name} data-block={item.name} width={1440} height={900} className="hidden object-cover dark:block md:hidden md:dark:hidden" />
            <iframe src={`/view/styles/${style}/${item.name}`} height={item.meta?.iframeHeight ?? 930} className="relative z-20 hidden w-full bg-background md:block" />
          </ResizablePanel>
          <ResizableHandle className="relative hidden w-3 bg-transparent p-0 after:absolute after:right-0 after:top-1/2 after:h-8 after:w-[6px] after:-translate-y-1/2 after:translate-x-[-1px] after:rounded-full after:bg-border after:transition-all after:hover:h-10 md:block" />
          <ResizablePanel defaultSize={0} minSize={0} />
        </ResizablePanelGroup>
      </div>
    </div>
  );
}

function BlockViewerCode() {
  const { activeFile, highlightedFiles } = useBlockViewer();

  const file = React.useMemo(() => {
    return highlightedFiles?.find((file) => file.target === activeFile) || highlightedFiles?.[0];
  }, [highlightedFiles, activeFile]);

  if (!file) {
    console.warn("No file found matching the activeFile:", activeFile); // Peringatan jika file tidak ditemukan
    return null;
  }

  return (
    <div className="mr-[14px] flex overflow-hidden rounded-xl bg-zinc-950 text-white group-data-[view=preview]/block-view-wrapper:hidden md:h-[--height]">
      <div className="w-[280px]">
        <BlockViewerFileTree />
      </div>
      <div className="flex min-w-0 flex-1 flex-col">
        <div className="flex h-12 w-full items-center justify-between gap-2 border-b border-zinc-700 bg-zinc-900 px-4 text-sm font-medium">
          <File className="size-4" />
          {file.target}
          <div className="ml-auto flex items-center gap-2 ">
            <BlockCopyCodeButton />
          </div>
        </div>
        <div
          key={file?.path}
          data-rehype-pretty-code-fragment
          dangerouslySetInnerHTML={{ __html: file?.highlightedContent ?? "" }}
          className="relative flex-1 overflow-hidden after:absolute after:inset-y-0 after:left-0 after:w-10 after:bg-zinc-950 [&_.line:before]:sticky [&_.line:before]:left-2 [&_.line:before]:z-10 [&_.line:before]:translate-y-[-1px] [&_.line:before]:pr-1 [&_pre]:h-[--height] [&_pre]:overflow-auto [&_pre]:!bg-transparent [&_pre]:pb-20 [&_pre]:pt-4 [&_pre]:font-mono [&_pre]:text-sm [&_pre]:leading-relaxed"
        />
      </div>
    </div>
  );
}

export function BlockViewerFileTree() {
  const { tree } = useBlockViewer();

  if (!tree) {
    return null;
  }

  return (
    <SidebarProvider className="flex !min-h-full flex-col">
      <Sidebar collapsible="none" className="w-full flex-1 border-r border-zinc-700 bg-zinc-900 text-white">
        <SidebarGroupLabel className="h-12 rounded-none border-b border-zinc-700 px-4 text-sm text-white">Files</SidebarGroupLabel>
        <SidebarGroup className="p-0">
          <SidebarGroupContent>
            <SidebarMenu className="gap-1.5">
              {tree.map((file, index) => (
                <Tree key={index} item={file} index={1} />
              ))}
            </SidebarMenu>
          </SidebarGroupContent>
        </SidebarGroup>
      </Sidebar>
    </SidebarProvider>
  );
}

function Tree({ item, index }: { item: FileTree; index: number }) {
  const { activeFile, setActiveFile } = useBlockViewer();

  if (!item.children) {
    return (
      <SidebarMenuItem>
        <SidebarMenuButton
          isActive={item.path === activeFile}
          onClick={() => item.path && setActiveFile(item.path)}
          className="whitespace-nowrap rounded-none pl-[--index] hover:bg-zinc-700 hover:text-white focus:bg-zinc-700 focus:text-white focus-visible:bg-zinc-700 focus-visible:text-white active:bg-zinc-700 active:text-white data-[active=true]:bg-zinc-700 data-[active=true]:text-white"
          data-index={index}
          style={
            {
              "--index": `${index * (index === 2 ? 1.2 : 1.3)}rem`,
            } as React.CSSProperties
          }
        >
          <ChevronRight className="invisible" />
          <File className="h-4 w-4" />
          {item.name}
        </SidebarMenuButton>
      </SidebarMenuItem>
    );
  }

  return (
    <SidebarMenuItem>
      <Collapsible className="group/collapsible [&[data-state=open]>button>svg:first-child]:rotate-90" defaultOpen>
        <CollapsibleTrigger asChild>
          <SidebarMenuButton
            className="whitespace-nowrap rounded-none pl-[--index] hover:bg-zinc-700 hover:text-white focus-visible:bg-zinc-700 focus-visible:text-white active:bg-zinc-700 active:text-white data-[active=true]:bg-zinc-700 data-[active=true]:text-white data-[state=open]:hover:bg-zinc-700 data-[state=open]:hover:text-white"
            style={
              {
                "--index": `${index * (index === 1 ? 1 : 1.2)}rem`,
              } as React.CSSProperties
            }
          >
            <ChevronRight className="h-4 w-4 transition-transform" />
            <Folder className="h-4 w-4" />
            {item.name}
          </SidebarMenuButton>
        </CollapsibleTrigger>
        <CollapsibleContent>
          <SidebarMenuSub className="m-0 w-full border-none p-0">
            {item.children.map((subItem, key) => (
              <Tree key={key} item={subItem} index={index + 1} />
            ))}
          </SidebarMenuSub>
        </CollapsibleContent>
      </Collapsible>
    </SidebarMenuItem>
  );
}

function BlockCopyCodeButton() {
  const { activeFile, item } = useBlockViewer();
  const { copyToClipboard, isCopied } = useCopyToClipboard();

  const file = React.useMemo(() => {
    return item.files?.find((file) => file.target === activeFile);
  }, [activeFile, item.files]);

  const content = file?.content;

  if (!content) {
    return null;
  }

  return (
    <Button
      onClick={() => {
        copyToClipboard(content);
        trackEvent({
          name: "copy_block_code",
          properties: {
            name: item.name,
            file: file.path,
          },
        });
      }}
      className="h-7 w-7 rounded-lg p-0 hover:bg-zinc-700 hover:text-white focus:bg-zinc-700 focus:text-white focus-visible:bg-zinc-700 focus-visible:text-white active:bg-zinc-700 active:text-white data-[active=true]:bg-zinc-700 data-[active=true]:text-white [&>svg]:size-3"
      variant="ghost"
    >
      {isCopied ? <Check /> : <Clipboard />}
    </Button>
  );
}

function BlockViewer({ item, tree, highlightedFiles, ...props }: Pick<BlockViewerContext, "item" | "tree" | "highlightedFiles">) {
  return (
    <BlockViewerProvider item={item} tree={tree} highlightedFiles={highlightedFiles} {...props}>
      <BlockViewerToolbar />
      <BlockViewerView />
      <BlockViewerCode />
    </BlockViewerProvider>
  );
}

export { BlockViewer };
</file>

<file path="app/layout.tsx">
import { fontSans, fontMono, fontRoboto, fontSerif } from "@/lib/font";
import { cn } from "@/lib/utils";
import { Toaster } from "@/components/ui/toaster";
import { TooltipProvider } from "@/components/ui/tooltip";
import { Analytics } from "@/components/analytics";
import { PHProvider } from "@/components/posthog-provider";
import { ThemeProvider } from "@/components/theme-provider";
import { siteConfig, SiteConfig } from "@/config/site";
import { Suspense } from "react";
import "@/styles/globals.css";
import "@/styles/mdx.css";

import type { Viewport } from "next";
import { Metadata } from "next";

export const metadata: Metadata = {
  title: siteConfig.name,
  description: siteConfig.description,
  metadataBase: new URL(siteConfig.url),
  keywords: ["React", "Tailwind CSS", "Framer Motion", "Landing Page", "Components", "Next.js"],
  authors: [
    {
      name: "brokariim",
      url: "https://www.behindui.xyz/",
    },
  ],
  creator: "brokariim",
  openGraph: {
    type: "website",
    locale: "en_US",
    url: siteConfig.url,
    title: siteConfig.name,
    description: siteConfig.description,
    siteName: siteConfig.name,
    images: [
      {
        url: siteConfig.ogImage,
        width: 1200,
        height: 630,
        alt: siteConfig.name,
      },
    ],
  },
  twitter: {
    card: "summary_large_image",
    title: siteConfig.name,
    description: siteConfig.description,
    images: [siteConfig.ogImage],
    creator: "@Brokariim",
  },
};

export const viewport: Viewport = {
  themeColor: [
    // { media: "(prefers-color-scheme: light)", color: "black" },
    { media: "(prefers-color-scheme: dark)", color: "black" },
  ],
};

export default function RootLayout({ children }: { children: React.ReactNode }) {
  return (
    <html lang="en" className={cn("min-h-screen", fontSans.variable, fontMono.variable)}>
      <head>
        <link rel="manifest" href="/site.webmanifest" />
        <link rel="preconnect" href="https://fonts.googleapis.com" />
        <link rel="preconnect" href="https://fonts.gstatic.com" crossOrigin="anonymous" />
        <link
          href="https://fonts.googleapis.com/css2?family=Architects+Daughter&family=DM+Sans:ital,opsz,wght@0,9..40,100..1000;1,9..40,100..1000&family=Fira+Code:wght@300..700&family=Geist+Mono:wght@100..900&family=Geist:wght@100..900&family=IBM+Plex+Mono:ital,wght@0,100;0,200;0,300;0,400;0,500;0,600;0,700;1,100;1,200;1,300;1,400;1,500;1,600;1,700&family=IBM+Plex+Sans:ital,wght@0,100..700;1,100..700&family=Inter:ital,opsz,wght@0,14..32,100..900;1,14..32,100..900&family=JetBrains+Mono:ital,wght@0,100..800;1,100..800&family=Libre+Baskerville:ital,wght@0,400;0,700;1,400&family=Lora:ital,wght@0,400..700;1,400..700&family=Merriweather:ital,opsz,wght@0,18..144,300..900;1,18..144,300..900&family=Montserrat:ital,wght@0,100..900;1,100..900&family=Open+Sans:ital,wght@0,300..800;1,300..800&family=Outfit:wght@100..900&family=Oxanium:wght@200..800&family=Playfair+Display:ital,wght@0,400..900;1,400..900&family=Plus+Jakarta+Sans:ital,wght@0,200..800;1,200..800&family=Poppins:ital,wght@0,100;0,200;0,300;0,400;0,500;0,600;0,700;0,800;0,900;1,100;1,200;1,300;1,400;1,500;1,600;1,700;1,800;1,900&family=Roboto+Mono:ital,wght@0,100..700;1,100..700&family=Roboto:ital,wght@0,100..900;1,100..900&family=Source+Code+Pro:ital,wght@0,200..900;1,200..900&family=Source+Serif+4:ital,opsz,wght@0,8..60,200..900;1,8..60,200..900&family=Space+Grotesk:wght@300..700&family=Space+Mono:ital,wght@0,400;0,700;1,400;1,700&display=swap"
          rel="stylesheet"
        />
      </head>
      <body className={cn("relative flex h-screen w-full flex-col justify-center overflow-hidden scroll-smooth bg-background  font-sans  antialiased")}>
        <PHProvider>
          <Suspense>
            <ThemeProvider defaultTheme="light">
              <TooltipProvider>
                <Toaster />
                {children}
                <Analytics />
              </TooltipProvider>
            </ThemeProvider>
          </Suspense>
        </PHProvider>
      </body>
    </html>
  );
}
</file>

<file path="package.json">
{
  "name": "behindui",
  "version": "0.1.1",
  "private": true,
  "type": "module",
  "scripts": {
    "install:cli": "pnpm prefix:cli install",
    "dev:cli": "pnpm prefix:cli dev",
    "build:cli": "pnpm prefix:cli build",
    "release:cli": "pnpm prefix:cli release",
    "preinstall": "npx only-allow pnpm",
    "dev": "next dev",
    "prebuild": "pnpm build:registry",
    "build": "next build",
    "build:registry": "tsx --tsconfig ./tsconfig.scripts.json ./scripts/build-registry.mts && prettier --loglevel silent --write \"registry/**/*.{ts,tsx,mdx}\" --cache",
    "registry:capture": "tsx --tsconfig ./tsconfig.scripts.json ./scripts/capture-registry.mts",
    "generate-theme-registry": "tsx scripts/generate-theme-registry-tweakcn.ts && tsx scripts/generate-registry-tweakcn.ts",
    "typecheck": "tsc --noEmit",
    "start": "next start",
    "clean": "rm -rf .next",
    "lint": "next lint",
    "lint:fix": "next lint --fix",
    "format:write": "prettier --write \"**/*.{ts,tsx,mdx}\" --cache",
    "format:check": "prettier --check \"**/*.{ts,tsx,mdx}\" --cache",
    "prepare": "husky"
  },
  "dependencies": {
    "@heroicons/react": "^2.2.0",
    "@lottiefiles/react-lottie-player": "^3.6.0",
    "@ngard/tiny-isequal": "^1.1.0",
    "@radix-ui/react-accordion": "^1.2.3",
    "@radix-ui/react-alert-dialog": "^1.1.6",
    "@radix-ui/react-avatar": "^1.1.3",
    "@radix-ui/react-collapsible": "^1.1.3",
    "@radix-ui/react-dialog": "^1.1.6",
    "@radix-ui/react-dropdown-menu": "^2.1.6",
    "@radix-ui/react-hover-card": "^1.1.6",
    "@radix-ui/react-icons": "^1.3.2",
    "@radix-ui/react-label": "^2.1.2",
    "@radix-ui/react-navigation-menu": "^1.2.5",
    "@radix-ui/react-popover": "^1.1.6",
    "@radix-ui/react-scroll-area": "^1.2.3",
    "@radix-ui/react-select": "^2.1.6",
    "@radix-ui/react-separator": "^1.1.2",
    "@radix-ui/react-slot": "^1.1.2",
    "@radix-ui/react-switch": "^1.1.3",
    "@radix-ui/react-tabs": "^1.1.3",
    "@radix-ui/react-toast": "^1.2.6",
    "@radix-ui/react-toggle": "^1.1.2",
    "@radix-ui/react-toggle-group": "^1.1.2",
    "@radix-ui/react-tooltip": "^1.1.8",
    "@t3-oss/env-nextjs": "^0.7.3",
    "@types/lodash.template": "^4.5.3",
    "autoprefixer": "10.4.14",
    "canvas-confetti": "^1.9.3",
    "class-variance-authority": "^0.6.1",
    "clsx": "^2.1.1",
    "cmdk": "^1.1.1",
    "cobe": "^0.6.3",
    "concurrently": "^9.1.2",
    "crisp-sdk-web": "^1.0.25",
    "critters": "^0.0.24",
    "culori": "^4.0.1",
    "date-fns": "^2.30.0",
    "framer-motion": "^11.18.2",
    "geist": "^1.3.1",
    "gray-matter": "^4.0.3",
    "jotai": "^2.12.2",
    "lodash": "^4.17.21",
    "lodash.template": "^4.5.0",
    "lucide-react": "^0.401.0",
    "next": "14.2.13",
    "next-themes": "^0.3.0",
    "next-view-transitions": "^0.3.4",
    "nodemailer": "^6.10.0",
    "octokit": "^4.1.2",
    "postcss": "8.4.39",
    "posthog-js": "^1.234.9",
    "prism-react-renderer": "^2.4.1",
    "puppeteer": "^24.6.1",
    "react": "18.3.1",
    "react-day-picker": "8.10.1",
    "react-dom": "18.3.1",
    "react-hook-form": "^7.55.0",
    "react-icon-cloud": "^4.1.7",
    "react-resizable-panels": "^2.1.7",
    "react-tweet": "^3.2.2",
    "recharts": "^2.15.2",
    "schema-dts": "^1.1.5",
    "shiki": "^1.29.2",
    "sonner": "^1.7.4",
    "tailwind-merge": "^2.6.0",
    "ts-morph": "^23.0.0",
    "usehooks-ts": "^3.1.1",
    "vaul": "^1.1.2",
    "zod": "^3.24.2",
    "zustand": "^5.0.4"
  },
  "devDependencies": {
    "@commitlint/cli": "^19.8.0",
    "@commitlint/config-conventional": "^19.8.0",
    "@ianvs/prettier-plugin-sort-imports": "^4.4.1",
    "@tailwindcss/typography": "^0.5.16",
    "@types/canvas-confetti": "^1.9.0",
    "@types/culori": "^4.0.0",
    "@types/jest": "^29.5.14",
    "@types/node": "^20.17.30",
    "@types/nodemailer": "^6.4.17",
    "@types/react": "18.2.12",
    "@types/react-dom": "18.2.5",
    "@types/react-syntax-highlighter": "^15.5.13",
    "@types/unist": "^3.0.3",
    "cssnano": "^6.1.2",
    "eslint": "^8.57.1",
    "eslint-config-next": "13.3.0",
    "eslint-config-prettier": "^8.10.0",
    "eslint-plugin-react": "^7.37.5",
    "eslint-plugin-tailwindcss": "3.13.1",
    "husky": "^9.1.7",
    "lint-staged": "^15.5.0",
    "mdast-util-toc": "^6.1.1",
    "npm-run-all": "^4.1.5",
    "prettier": "^3.5.3",
    "rehype": "^13.0.2",
    "rehype-autolink-headings": "^7.1.0",
    "rehype-pretty-code": "^0.13.2",
    "rehype-slug": "6.0.0",
    "remark": "^14.0.3",
    "remark-code-import": "^1.2.0",
    "remark-gfm": "^4.0.1",
    "rimraf": "^5.0.10",
    "source-map-support": "^0.5.21",
    "tailwindcss": "3.4.1",
    "tailwindcss-animate": "^1.0.7",
    "tsx": "^4.19.3",
    "typescript": "^5.8.3",
    "unist-builder": "4.0.0",
    "unist-util-visit": "^5.0.0"
  },
  "engines": {
    "node": ">=20.6.1",
    "pnpm": ">=9"
  },
  "packageManager": "pnpm@9.12.3"
}
</file>

<file path="components/theme-customizer.tsx">
"use client";

import * as React from "react";
import template from "lodash.template";
import { Check, Copy, Moon, Repeat, Sun } from "lucide-react";
import { useTheme } from "next-themes";
import { ThemeToggle } from "./theme-toggle";
import { cn } from "@/lib/utils";
import { ThemeWrapper } from "./theme-wrapper";
import { Theme, THEMES } from "@/lib/themes";
import { copyToClipboardWithMeta } from "./copy-button";
import { useConfig } from "@/lib/use-config";
import { Button } from "./ui/button";
import { Label } from "./ui/label";
import { baseColors, BaseColor } from "@/registry/registry-base-colors";
import { Skeleton } from "./ui/skeleton";
import { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from "./ui/dialog";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import "@/styles/mdx.css";
import ThemePresetSelect from "./editor/theme-select";
import { useThemePresetStore } from "@/store/theme-preset-store";
import { useEditorStore } from "@/store/editor-store";
import { CodePanelDialog } from "./code-panel-dialog";

export function ThemeCustomizer() {
  const [mounted, setMounted] = React.useState(false);
  const [codePanelOpen, setCodePanelOpen] = React.useState(false);
  const { themeState } = useEditorStore();

  React.useEffect(() => {
    setMounted(true);
  }, []);

  return (
    <>
      <div className="w-full">
        <Customizer />
        {/* <CopyCodeButton variant="ghost" size="sm" className=" [&_svg]:hidden" /> */}
        <Button className="mt-8 w-full bg-black text-white" onClick={() => setCodePanelOpen(true)}>
          Show Code
        </Button>
        <CodePanelDialog open={codePanelOpen} onOpenChange={setCodePanelOpen} themeEditorState={themeState} />
      </div>
    </>
  );
}

function Customizer() {
  const [mounted, setMounted] = React.useState(false);
  const { setTheme: setMode, resolvedTheme: mode } = useTheme();
  const [config, setConfig] = useConfig();
  const { applyThemePreset, themeState } = useEditorStore();
  const presets = useThemePresetStore((state) => state.getAllPresets());

  React.useEffect(() => {
    setMounted(true);
  }, []);

  return (
    <ThemeWrapper className="flex flex-col space-y-4  md:space-y-6">
      <div className="flex flex-1 flex-col space-y-4 font-sans md:space-y-6">
        {/* Mode opt */}
        <div className="space-y-4 bg-background">
          <h3 className="text-xl font-medium">Mode</h3>
          <div className="grid grid-cols-3 gap-2">
            {mounted ? (
              <>
                <ThemeToggle />
              </>
            ) : (
              <>
                <Skeleton className="h-8 w-full" />
              </>
            )}
          </div>
        </div>
        <div className="space-y-4">
          <ThemePresetSelect presets={presets} currentPreset={themeState.preset || null} onPresetChange={applyThemePreset} />
        </div>
        {/* color */}
        <div className="space-y-4">
          <h3 className="text-xl font-medium">Color</h3>
          <div className="grid grid-cols-2 gap-4 sm:grid-cols-3">
            {baseColors
              .filter((theme) => !["slate", "stone", "gray", "neutral"].includes(theme.name))
              .map((theme) => {
                const isActive = config.theme === theme.name;

                return mounted ? (
                  <Button
                    variant={"outline"}
                    size="sm"
                    key={theme.name}
                    onClick={() => {
                      setConfig({
                        ...config,
                        theme: theme.name,
                      });
                    }}
                    className={cn("justify-start", isActive && "border-2 border-primary")}
                    style={
                      {
                        "--theme-primary": `hsl(${theme?.activeColor[mode === "dark" ? "dark" : "light"]})`,
                      } as React.CSSProperties
                    }
                  >
                    <span className={cn("mr-1 flex h-5 w-5 shrink-0 -translate-x-1 items-center justify-center rounded-full bg-[--theme-primary]")}>{isActive && <Check className="h-4 w-4 text-white" />}</span>
                    {theme.label}
                  </Button>
                ) : (
                  <Skeleton className="h-8 w-full" key={theme.name} />
                );
              })}
          </div>
        </div>
        {/* radius */}
        <div className="space-y-4">
          <Label className="text-xs">Radius</Label>
          <div className="grid grid-cols-5 gap-2">
            {["0", "0.3", "0.5", "0.75", "1.0"].map((value) => {
              return (
                <Button
                  variant={"outline"}
                  size="sm"
                  key={value}
                  onClick={() => {
                    setConfig({
                      ...config,
                      radius: parseFloat(value),
                    });
                  }}
                  className={cn(config.radius === parseFloat(value) && "border-2 border-primary")}
                >
                  {value}
                </Button>
              );
            })}
          </div>
        </div>
        {/* font */}
        <div className="space-y-4">
          <h3 className="text-sm font-medium">Font</h3>
          <Select value={config.font} onValueChange={(value) => setConfig({ ...config, font: value as "sans" | "mono" | "serif" | "roboto" })}>
            <SelectTrigger className="w-full">
              <SelectValue placeholder="Select font" />
            </SelectTrigger>
            <SelectContent>
              <SelectItem value="sans">Sans</SelectItem>
              <SelectItem value="serif">Serif</SelectItem>
              <SelectItem value="mono">Mono</SelectItem>
              <SelectItem value="roboto">Roboto</SelectItem>
              {/* <SelectItem value="roboto">Roboto</SelectItem> */}
            </SelectContent>
          </Select>
        </div>
      </div>
    </ThemeWrapper>
  );
}

// function CopyCodeButton({ className, ...props }: React.ComponentProps<typeof Button>) {
//   const [config, setConfig] = useConfig();
//   const activeTheme = baseColors.find((theme) => theme.name === config.theme);
//   const [hasCopied, setHasCopied] = React.useState(false);

//   React.useEffect(() => {
//     setTimeout(() => {
//       setHasCopied(false);
//     }, 2000);
//   }, [hasCopied]);

//   return (
//     <>
//       {activeTheme && (
//         <Button
//           onClick={() => {
//             copyToClipboardWithMeta(getThemeCode(activeTheme, config.radius), {
//               name: "copy_theme_code",
//               properties: {
//                 theme: activeTheme.name,
//                 radius: config.radius,
//               },
//             });
//             setHasCopied(true);
//           }}
//           className={cn("md:hidden", className)}
//           {...props}
//         >
//           {hasCopied ? <Check /> : <Copy />}
//           Copy code
//         </Button>
//       )}
//       <Dialog>
//         <div className="mt-10 flex w-full  items-center space-x-2">
//           <DialogTrigger asChild className="flex items-center justify-center">
//             <Button className={cn(" w-full  bg-black text-white   ", className)} {...props}>
//               Copy code
//             </Button>
//           </DialogTrigger>
//           <DialogContent className="flex max-w-2xl flex-col outline-none">
//             <DialogHeader>
//               <DialogTitle>Theme</DialogTitle>
//               <DialogDescription>Copy and paste the following code into your CSS file.</DialogDescription>
//             </DialogHeader>
//             <ThemeWrapper  className="relative">
//               <CustomizerCode />
//               {activeTheme && (
//                 <Button
//                   size="sm"
//                   onClick={() => {
//                     copyToClipboardWithMeta(getThemeCode(activeTheme, config.radius), {
//                       name: "copy_theme_code",
//                       properties: {
//                         theme: activeTheme.name,
//                         radius: config.radius,
//                       },
//                     });
//                     setHasCopied(true);
//                   }}
//                   className="absolute right-4 top-4 bg-muted text-muted-foreground hover:bg-muted hover:text-muted-foreground"
//                 >
//                   {hasCopied ? <Check /> : <Copy />}
//                   Copy
//                 </Button>
//               )}
//             </ThemeWrapper>
//           </DialogContent>

//           <Button
//             size="icon"
//             variant="ghost"
//             className="rounded-md border-2 border-black"
//             onClick={() => {
//               setConfig({
//                 ...config,
//                 theme: "zinc",
//                 radius: 0.5,
//               });
//             }}
//           >
//             <Repeat />
//             <span className="sr-only">Reset</span>
//           </Button>
//         </div>
//       </Dialog>
//     </>
//   );
// }

// function CustomizerCode() {
//   const [config] = useConfig();
//   const activeTheme = baseColors.find((theme) => theme.name === config.theme);

//   return (
//     <ThemeWrapper className="relative space-y-4">
//       <div data-rehype-pretty-code-fragment="">
//         <pre className="max-h-[450px] overflow-x-auto rounded-lg border bg-zinc-950 py-4 dark:bg-zinc-900">
//           <code className="relative rounded bg-muted px-[0.3rem] py-[0.2rem] font-mono text-sm">
//             <span className="line text-white">@layer base &#123;</span>
//             <span className="line text-white">&nbsp;&nbsp;:root &#123;</span>
//             <span className="line text-white">&nbsp;&nbsp;&nbsp;&nbsp;--background: {activeTheme?.cssVars.light["background"]};</span>
//             <span className="line text-white">&nbsp;&nbsp;&nbsp;&nbsp;--foreground: {activeTheme?.cssVars.light["foreground"]};</span>
//             {["card", "popover", "primary", "secondary", "muted", "accent", "destructive"].map((prefix) => (
//               <>
//                 <span className="line text-white">
//                   &nbsp;&nbsp;&nbsp;&nbsp;--{prefix}: {activeTheme?.cssVars.light[prefix as keyof typeof activeTheme.cssVars.light]};
//                 </span>
//                 <span className="line text-white">
//                   &nbsp;&nbsp;&nbsp;&nbsp;--{prefix}-foreground: {activeTheme?.cssVars.light[`${prefix}-foreground` as keyof typeof activeTheme.cssVars.light]};
//                 </span>
//               </>
//             ))}
//             <span className="line text-white">&nbsp;&nbsp;&nbsp;&nbsp;--border: {activeTheme?.cssVars.light["border"]};</span>
//             <span className="line text-white">&nbsp;&nbsp;&nbsp;&nbsp;--input: {activeTheme?.cssVars.light["input"]};</span>
//             <span className="line text-white">&nbsp;&nbsp;&nbsp;&nbsp;--ring: {activeTheme?.cssVars.light["ring"]};</span>
//             <span className="line text-white">&nbsp;&nbsp;&nbsp;&nbsp;--radius: {config.radius}rem;</span>
//             {["chart-1", "chart-2", "chart-3", "chart-4", "chart-5"].map((prefix) => (
//               <>
//                 <span className="line text-white">
//                   &nbsp;&nbsp;&nbsp;&nbsp;--{prefix}: {activeTheme?.cssVars.light[prefix as keyof typeof activeTheme.cssVars.light]};
//                 </span>
//               </>
//             ))}
//             <span className="line text-white">&nbsp;&nbsp;&#125;</span>
//             <span className="line text-white">&nbsp;</span>
//             <span className="line text-white">&nbsp;&nbsp;.dark &#123;</span>
//             <span className="line text-white">&nbsp;&nbsp;&nbsp;&nbsp;--background: {activeTheme?.cssVars.dark["background"]};</span>
//             <span className="line text-white">&nbsp;&nbsp;&nbsp;&nbsp;--foreground: {activeTheme?.cssVars.dark["foreground"]};</span>
//             {["card", "popover", "primary", "secondary", "muted", "accent", "destructive"].map((prefix) => (
//               <>
//                 <span className="line text-white">
//                   &nbsp;&nbsp;&nbsp;&nbsp;--{prefix}: {activeTheme?.cssVars.dark[prefix as keyof typeof activeTheme.cssVars.dark]};
//                 </span>
//                 <span className="line text-white">
//                   &nbsp;&nbsp;&nbsp;&nbsp;--{prefix}-foreground: {activeTheme?.cssVars.dark[`${prefix}-foreground` as keyof typeof activeTheme.cssVars.dark]};
//                 </span>
//               </>
//             ))}
//             <span className="line text-white">&nbsp;&nbsp;&nbsp;&nbsp;--border: {activeTheme?.cssVars.dark["border"]};</span>
//             <span className="line text-white">&nbsp;&nbsp;&nbsp;&nbsp;--input: {activeTheme?.cssVars.dark["input"]};</span>
//             <span className="line text-white">&nbsp;&nbsp;&nbsp;&nbsp;--ring: {activeTheme?.cssVars.dark["ring"]};</span>
//             {["chart-1", "chart-2", "chart-3", "chart-4", "chart-5"].map((prefix) => (
//               <>
//                 <span className="line text-white">
//                   &nbsp;&nbsp;&nbsp;&nbsp;--{prefix}: {activeTheme?.cssVars.dark[prefix as keyof typeof activeTheme.cssVars.dark]};
//                 </span>
//               </>
//             ))}
//             <span className="line text-white">&nbsp;&nbsp;&#125;</span>
//             <span className="line text-white">&#125;</span>
//           </code>
//         </pre>
//       </div>
//     </ThemeWrapper>
//   );
// }

function getThemeCode(theme: BaseColor, radius: number) {
  if (!theme) {
    return "";
  }

  return template(BASE_STYLES_WITH_VARIABLES)({
    colors: theme.cssVars,
    radius,
  });
}

const BASE_STYLES_WITH_VARIABLES = `
@layer base {
  :root {
    --background: <%- colors.light["background"] %>;
    --foreground: <%- colors.light["foreground"] %>;
    --card: <%- colors.light["card"] %>;
    --card-foreground: <%- colors.light["card-foreground"] %>;
    --popover: <%- colors.light["popover"] %>;
    --popover-foreground: <%- colors.light["popover-foreground"] %>;
    --primary: <%- colors.light["primary"] %>;
    --primary-foreground: <%- colors.light["primary-foreground"] %>;
    --secondary: <%- colors.light["secondary"] %>;
    --secondary-foreground: <%- colors.light["secondary-foreground"] %>;
    --muted: <%- colors.light["muted"] %>;
    --muted-foreground: <%- colors.light["muted-foreground"] %>;
    --accent: <%- colors.light["accent"] %>;
    --accent-foreground: <%- colors.light["accent-foreground"] %>;
    --destructive: <%- colors.light["destructive"] %>;
    --destructive-foreground: <%- colors.light["destructive-foreground"] %>;
    --border: <%- colors.light["border"] %>;
    --input: <%- colors.light["input"] %>;
    --ring: <%- colors.light["ring"] %>;
    --radius: <%- radius %>rem;
    --chart-1: <%- colors.light["chart-1"] %>;
    --chart-2: <%- colors.light["chart-2"] %>;
    --chart-3: <%- colors.light["chart-3"] %>;
    --chart-4: <%- colors.light["chart-4"] %>;
    --chart-5: <%- colors.light["chart-5"] %>;
  }

  .dark {
    --background: <%- colors.dark["background"] %>;
    --foreground: <%- colors.dark["foreground"] %>;
    --card: <%- colors.dark["card"] %>;
    --card-foreground: <%- colors.dark["card-foreground"] %>;
    --popover: <%- colors.dark["popover"] %>;
    --popover-foreground: <%- colors.dark["popover-foreground"] %>;
    --primary: <%- colors.dark["primary"] %>;
    --primary-foreground: <%- colors.dark["primary-foreground"] %>;
    --secondary: <%- colors.dark["secondary"] %>;
    --secondary-foreground: <%- colors.dark["secondary-foreground"] %>;
    --muted: <%- colors.dark["muted"] %>;
    --muted-foreground: <%- colors.dark["muted-foreground"] %>;
    --accent: <%- colors.dark["accent"] %>;
    --accent-foreground: <%- colors.dark["accent-foreground"] %>;
    --destructive: <%- colors.dark["destructive"] %>;
    --destructive-foreground: <%- colors.dark["destructive-foreground"] %>;
    --border: <%- colors.dark["border"] %>;
    --input: <%- colors.dark["input"] %>;
    --ring: <%- colors.dark["ring"] %>;
    --chart-1: <%- colors.dark["chart-1"] %>;
    --chart-2: <%- colors.dark["chart-2"] %>;
    --chart-3: <%- colors.dark["chart-3"] %>;
    --chart-4: <%- colors.dark["chart-4"] %>;
    --chart-5: <%- colors.dark["chart-5"] %>;
  }
}
`;
</file>

<file path="public/r/styles/default/portofolio-01.json">
{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "portofolio-01",
  "type": "registry:block",
  "author": "shadcn (https://ui.shadcn.com)",
  "description": "minimal portfolio template design for professionals.",
  "registryDependencies": [
    "footer",
    "list"
  ],
  "files": [
    {
      "path": "blocks/portofolio-01/main.tsx",
      "content": "import { List } from \"./components/list\";\nimport Link from \"next/link\";\nimport { Footer } from \"./components/footer\";\nimport { projects } from \"./contents/projects\";\nimport AnimatedBackground from \"./components/animated-background\";\n\nexport default function Layout() {\n  return (\n    <>\n      <div className=\" relative z-50 mx-auto flex h-full w-full justify-center px-4 pt-20 text-primary md:h-screen\">\n        <div>\n          <div>\n            <h1 className=\"text-lg font-semibold\">BroKarim</h1>\n          </div>\n          <div>\n            <p className=\"text-fg-muted\">Software Engineer</p>\n          </div>\n\n          <div>\n            <p className=\"mt-10 text-sm\">\n              Designing sleek, accessible, and modern UIs that set a new\n              standard in functionality and aesthetics\n            </p>\n          </div>\n          <div>\n            <h2 className=\"text-fg-muted mb-2 mt-10 text-sm\">Projects</h2>\n          </div>\n          <List items={projects} />\n          <div>\n            <Footer />\n          </div>\n        </div>\n      </div>\n    </>\n  );\n}\n",
      "type": "registry:page",
      "target": "app/main.tsx"
    },
    {
      "path": "blocks/portofolio-01/components/footer.tsx",
      "content": "import Link from \"next/link\";\n\nconst links = [\n  { label: \"GitHub\", href: \"https://github.com/BroKarim\" },\n  { label: \"X\", href: \"https://x.com/BroKariim\" },\n  { label: \"Thread\", href: \"https://www.threads.net/@brokariim\" },\n];\n\nexport const Footer = () => {\n  return (\n    <div className=\"my-20\">\n      <div className=\"text-fg-muted flex flex-col gap-2 border-t py-6 text-sm\">\n        <div className=\"text-fg-muted flex items-center gap-3 text-sm\">\n          <div>Find me on:</div>\n          {links.map((link) => (\n            <Link key={link.label} href={link.href} target=\"_blank\">\n              {link.label}\n            </Link>\n          ))}\n        </div>\n        <div>Or mail me at brokariim@gmail.com</div>\n      </div>\n    </div>\n  );\n};\n",
      "type": "registry:component",
      "target": ""
    },
    {
      "path": "blocks/portofolio-01/components/list.tsx",
      "content": "\"use client\";\n\nimport { useState } from \"react\";\nimport { Link } from \"next-view-transitions\";\nimport { cn } from \"@/lib/utils\";\nimport AnimatedBackground from \"./animated-background\";\n\nexport const List = ({\n  items,\n}: {\n  items: { title: string; description?: string; hint?: string; href: string }[];\n}) => {\n  const [hoveredIndex, setHoveredIndex] = useState<number | null>(null);\n\n  return (\n    <div className=\"text-sm\">\n      {items.map((item, index) => (\n        <AnimatedBackground\n          key={index}\n          className=\"rounded-lg bg-zinc-100/50 hover:text-primary dark:bg-zinc-800/50 \"\n          transition={{\n            type: \"spring\",\n            bounce: 0.2,\n            duration: 0.6,\n          }}\n          enableHover\n        >\n          <div>\n            <Link\n              href={item.href}\n              target={item.href.startsWith(\"http\") ? \"_blank\" : undefined}\n              className=\"w-full\"\n            >\n              <div\n                className={cn(\n                  \"flex items-center justify-between border-b py-3 duration-200\",\n                  hoveredIndex !== null && hoveredIndex !== index\n                    ? \"!opacity-50\"\n                    : \"\",\n                )}\n              >\n                <div className=\"flex flex-col\">\n                  <span>{item.title}</span>\n                  {item.description && <span>{item.description}</span>}\n                </div>\n                {item.hint && <span className=\" text-right\">{item.hint}</span>}\n              </div>\n            </Link>\n          </div>\n        </AnimatedBackground>\n      ))}\n    </div>\n  );\n};\n",
      "type": "registry:component",
      "target": ""
    },
    {
      "path": "blocks/portofolio-01/components/animated-background.tsx",
      "content": "\"use client\";\nimport { cn } from \"@/lib/utils\";\nimport { AnimatePresence, Transition, motion } from \"framer-motion\";\nimport {\n  Children,\n  cloneElement,\n  ReactElement,\n  useEffect,\n  useState,\n  useId,\n} from \"react\";\n\ntype AnimatedBackgroundProps = {\n  children:\n    | ReactElement<{ \"data-id\": string }>[]\n    | ReactElement<{ \"data-id\": string }>;\n  defaultValue?: string;\n  onValueChange?: (newActiveId: string | null) => void;\n  className?: string;\n  transition?: Transition;\n  enableHover?: boolean;\n};\n\nexport default function AnimatedBackground({\n  children,\n  defaultValue,\n  onValueChange,\n  className,\n  transition,\n  enableHover = false,\n}: AnimatedBackgroundProps) {\n  const [activeId, setActiveId] = useState<string | null>(null);\n  const uniqueId = useId();\n\n  const handleSetActiveId = (id: string | null) => {\n    setActiveId(id);\n\n    if (onValueChange) {\n      onValueChange(id);\n    }\n  };\n\n  useEffect(() => {\n    if (defaultValue !== undefined) {\n      setActiveId(defaultValue);\n    }\n  }, [defaultValue]);\n\n  return Children.map(children, (child: any, index) => {\n    const id = child.props[\"data-id\"];\n\n    const interactionProps = enableHover\n      ? {\n          onMouseEnter: () => handleSetActiveId(id),\n          onMouseLeave: () => handleSetActiveId(null),\n        }\n      : {\n          onClick: () => handleSetActiveId(id),\n        };\n\n    return cloneElement(\n      child,\n      {\n        key: index,\n        className: cn(\"relative \", child.props.className),\n        \"aria-selected\": activeId === id,\n        \"data-checked\": activeId === id ? \"true\" : \"false\",\n        ...interactionProps,\n      },\n      <>\n        <AnimatePresence initial={false}>\n          {activeId === id && (\n            <motion.div\n              layoutId={`background-${uniqueId}`}\n              className={cn(\"absolute inset-0\", className)}\n              transition={transition}\n              initial={{ opacity: defaultValue ? 1 : 0 }}\n              animate={{\n                opacity: 1,\n              }}\n              exit={{\n                opacity: 0,\n              }}\n            />\n          )}\n        </AnimatePresence>\n        <span className=\"z-10\">{child.props.children}</span>\n      </>,\n    );\n  });\n}\n",
      "type": "registry:component",
      "target": ""
    },
    {
      "path": "blocks/portofolio-01/contents/projects.ts",
      "content": "type Project = {\n  title: string;\n  hint: string;\n  description: string;\n  href: string;\n};\n\nexport const projects: Project[] = [\n  {\n    title: \"CodeSnap\",\n    hint: \"developer, contributor\",\n    description:\n      \"A tool for capturing and sharing beautifully styled code snippets.\",\n    href: \"#\",\n  },\n  {\n    title: \"DevQuest\",\n    hint: \"founder, architect\",\n    description:\n      \"An interactive platform for developers to learn, grow, and solve coding challenges together.\",\n    href: \"#\",\n  },\n  {\n    title: \"BugTrackr\",\n    hint: \"maintainer, engineer\",\n    description:\n      \"Streamlined issue tracking and task management for agile teams.\",\n    href: \"#\",\n  },\n  {\n    title: \"PixelCraft\",\n    hint: \"UI/UX enthusiast\",\n    description:\n      \"A design framework for creating visually stunning, pixel-perfect user interfaces.\",\n    href: \"#\",\n  },\n];\n",
      "type": "registry:file",
      "target": "app/data.ts"
    }
  ],
  "categories": [
    "portofolio"
  ]
}
</file>

<file path="registry/registry-categories.ts">
export const registryCategories = [
  {
    name: "Hero",
    slug: "hero",
    hidden: false,
  },

  {
    name: "Portofolio",
    slug: "portofolio",
    hidden: false,
  },
  {
    name: "Bento",
    slug: "bento",
    hidden: false,
  },
  {
    name: "Card",
    slug: "card",
    hidden: false,
  },
  {
    name: "Tool",
    slug: "tool",
    hidden: false,
  },
];
</file>

<file path="app/(app)/page.tsx">
import { BlockDisplay } from "@/components/registry/component-display";
import "/public/registry/theme.css";
import { Suspense } from "react";

const FEATURED_BLOCKS = ["bento-01", "portofolio-02", "hero-01"];

export default async function IndexPage() {
  return (
    <>
      <Suspense>
        {FEATURED_BLOCKS.map((block) => (
          <div key={block} className="container py-8 first:pt-6 last:border-b-2 dark:border-border   md:py-12">
            <BlockDisplay name={block} />
          </div>
        ))}
      </Suspense>
    </>
  );
}
</file>

<file path="__registry__/index.tsx">
// @ts-nocheck
// This file is autogenerated by scripts/build-registry.ts
// Do not edit this file directly.
import * as React from "react"

export const Index: Record<string, any> = {
  "default": {
    "card-01": {
      name: "card-01",
      description: "Ideal for product designers.",
      type: "registry:block",
      registryDependencies: ["nav","lang-switch","photos"],
      files: [{
        path: "registry/default/blocks/card-01/page.tsx",
        type: "registry:page",
        target: "app/page.tsx"
      },{
        path: "registry/default/blocks/card-01/components/post-card.tsx",
        type: "registry:component",
        target: ""
      }],
      categories: ["card"],
      component: React.lazy(() => import("@/registry/default/blocks/card-01/page.tsx")),
      source: "__registry__/default/blocks/card-01/page.tsx",
      meta: undefined,
    },
    "card-02": {
      name: "card-02",
      description: "Ideal for product designers.",
      type: "registry:block",
      registryDependencies: ["pricing","shades","currency"],
      files: [{
        path: "registry/default/blocks/card-02/page.tsx",
        type: "registry:page",
        target: "app/page.tsx"
      },{
        path: "registry/default/blocks/card-02/components/pricing-card.tsx",
        type: "registry:component",
        target: ""
      },{
        path: "registry/default/ui/card.tsx",
        type: "registry:ui",
        target: "components/ui/card.tsx"
      },{
        path: "registry/default/ui/badge.tsx",
        type: "registry:ui",
        target: "components/ui/badge.tsx"
      },{
        path: "registry/default/ui/texture-button.tsx",
        type: "registry:ui",
        target: "components/ui/texture-button.tsx"
      },{
        path: "registry/default/lib/utils.ts",
        type: "registry:ui",
        target: "lib/utils.ts"
      }],
      categories: ["card"],
      component: React.lazy(() => import("@/registry/default/blocks/card-02/page.tsx")),
      source: "__registry__/default/blocks/card-02/page.tsx",
      meta: undefined,
    },
    "hero-01": {
      name: "hero-01",
      description: "Ideal for product designers.",
      type: "registry:block",
      registryDependencies: ["nav","lang-switch","photos"],
      files: [{
        path: "registry/default/blocks/next-int/page.tsx",
        type: "registry:page",
        target: "app/page.tsx"
      },{
        path: "registry/default/blocks/next-int/components/navbar.tsx",
        type: "registry:component",
        target: ""
      },{
        path: "registry/default/blocks/next-int/components/lang-switch.tsx",
        type: "registry:component",
        target: ""
      },{
        path: "registry/default/blocks/next-int/components/photos.tsx",
        type: "registry:component",
        target: ""
      }],
      categories: ["hero"],
      component: React.lazy(() => import("@/registry/default/blocks/next-int/page.tsx")),
      source: "__registry__/default/blocks/next-int/page.tsx",
      meta: undefined,
    },
    "portofolio-01": {
      name: "portofolio-01",
      description: "minimal portfolio template design for professionals.",
      type: "registry:block",
      registryDependencies: ["footer","list"],
      files: [{
        path: "registry/default/blocks/portofolio-01/main.tsx",
        type: "registry:page",
        target: "app/main.tsx"
      },{
        path: "registry/default/blocks/portofolio-01/components/footer.tsx",
        type: "registry:component",
        target: ""
      },{
        path: "registry/default/blocks/portofolio-01/components/list.tsx",
        type: "registry:component",
        target: ""
      },{
        path: "registry/default/blocks/portofolio-01/components/animated-background.tsx",
        type: "registry:component",
        target: ""
      },{
        path: "registry/default/blocks/portofolio-01/contents/projects.ts",
        type: "registry:file",
        target: "app/data.ts"
      }],
      categories: ["portofolio"],
      component: React.lazy(() => import("@/registry/default/blocks/portofolio-01/main.tsx")),
      source: "__registry__/default/blocks/portofolio-01/main.tsx",
      meta: undefined,
    },
    "portofolio-03": {
      name: "portofolio-03",
      description: "minimal portfolio template design for professionals.",
      type: "registry:block",
      registryDependencies: ["footer","list"],
      files: [{
        path: "registry/default/blocks/portofolio-03/page.tsx",
        type: "registry:page",
        target: "app/page.tsx"
      },{
        path: "registry/default/blocks/portofolio-03/components/work-experiences.tsx",
        type: "registry:component",
        target: ""
      },{
        path: "registry/default/blocks/portofolio-03/components/expandable-tab.tsx",
        type: "registry:component",
        target: ""
      },{
        path: "registry/default/blocks/portofolio-03/components/logos.tsx",
        type: "registry:component",
        target: ""
      }],
      categories: ["portofolio"],
      component: React.lazy(() => import("@/registry/default/blocks/portofolio-03/page.tsx")),
      source: "__registry__/default/blocks/portofolio-03/page.tsx",
      meta: undefined,
    },
    "portofolio-02": {
      name: "portofolio-02",
      description: "minimal portfolio template design for professionals.",
      type: "registry:block",
      registryDependencies: ["footer","list"],
      files: [{
        path: "registry/default/blocks/portofolio-02/main.tsx",
        type: "registry:page",
        target: "app/main.tsx"
      },{
        path: "registry/default/blocks/portofolio-02/components/bio-detail.tsx",
        type: "registry:component",
        target: ""
      },{
        path: "registry/default/blocks/portofolio-02/components/bio.tsx",
        type: "registry:component",
        target: ""
      },{
        path: "registry/default/blocks/portofolio-02/components/career-path.tsx",
        type: "registry:component",
        target: ""
      },{
        path: "registry/default/blocks/portofolio-02/components/highlight.tsx",
        type: "registry:component",
        target: ""
      },{
        path: "registry/default/blocks/portofolio-02/components/intro-item.tsx",
        type: "registry:component",
        target: ""
      },{
        path: "registry/default/blocks/portofolio-02/components/panel.tsx",
        type: "registry:component",
        target: ""
      },{
        path: "registry/default/blocks/portofolio-02/components/typhography.tsx",
        type: "registry:component",
        target: ""
      },{
        path: "registry/default/blocks/portofolio-02/components/typhography.tsx",
        type: "registry:component",
        target: ""
      },{
        path: "registry/default/blocks/portofolio-02/components/tag.tsx",
        type: "registry:component",
        target: ""
      },{
        path: "registry/default/blocks/portofolio-02/data/career-path.ts",
        type: "registry:file",
        target: "data/career-path.ts"
      },{
        path: "registry/default/blocks/portofolio-02/data/USER.ts",
        type: "registry:file",
        target: "data/USER.ts"
      },{
        path: "registry/default/blocks/portofolio-02/type/career-path.ts",
        type: "registry:file",
        target: "type/career-pat.ts"
      }],
      categories: ["portofolio"],
      component: React.lazy(() => import("@/registry/default/blocks/portofolio-02/main.tsx")),
      source: "__registry__/default/blocks/portofolio-02/main.tsx",
      meta: undefined,
    },
    "hero-02": {
      name: "hero-02",
      description: "Designed for library applications.",
      type: "registry:block",
      registryDependencies: ["banner","colorfulButton","githubButton","openSource"],
      files: [{
        path: "registry/default/blocks/tool-01/main.tsx",
        type: "registry:page",
        target: "app/main.tsx"
      },{
        path: "registry/default/blocks/tool-01/style/style.css",
        type: "registry:page",
        target: "app/style.css"
      },{
        path: "registry/default/blocks/tool-01/components/header.tsx",
        type: "registry:component",
        target: ""
      },{
        path: "registry/default/blocks/tool-01/components/banner.tsx",
        type: "registry:component",
        target: ""
      },{
        path: "registry/default/blocks/tool-01/components/colorful-button.tsx",
        type: "registry:component",
        target: ""
      },{
        path: "registry/default/blocks/tool-01/components/github-button.tsx",
        type: "registry:component",
        target: ""
      },{
        path: "registry/default/blocks/tool-01/components/installer.tsx",
        type: "registry:component",
        target: ""
      },{
        path: "registry/default/blocks/tool-01/components/open-source.tsx",
        type: "registry:component",
        target: ""
      },{
        path: "registry/default/blocks/tool-01/components/review.tsx",
        type: "registry:component",
        target: ""
      }],
      categories: ["hero","tool"],
      component: React.lazy(() => import("@/registry/default/blocks/tool-01/main.tsx")),
      source: "__registry__/default/blocks/tool-01/main.tsx",
      meta: undefined,
    },
    "bento-01": {
      name: "bento-01",
      description: "Ideal for product designers.",
      type: "registry:block",
      registryDependencies: ["nav","lang-switch","photos"],
      files: [{
        path: "registry/default/blocks/bento-01/page.tsx",
        type: "registry:page",
        target: "app/page.tsx"
      },{
        path: "registry/default/blocks/bento-01/components/animated-emoji.tsx",
        type: "registry:component",
        target: ""
      },{
        path: "registry/default/blocks/bento-01/components/logo.tsx",
        type: "registry:component",
        target: ""
      },{
        path: "registry/default/ui/card.tsx",
        type: "registry:ui",
        target: "components/ui/card.tsx"
      },{
        path: "registry/default/blocks/bento-01/hooks/useAnimation.tsx",
        type: "registry:file",
        target: "hooks/use-animation.ts"
      }],
      categories: ["bento"],
      component: React.lazy(() => import("@/registry/default/blocks/bento-01/page.tsx")),
      source: "__registry__/default/blocks/bento-01/page.tsx",
      meta: undefined,
    },
    "tool-02": {
      name: "tool-02",
      description: "Before after components.",
      type: "registry:block",
      registryDependencies: ["compare"],
      files: [{
        path: "registry/default/blocks/tool-02/page.tsx",
        type: "registry:page",
        target: "app/main.tsx"
      },{
        path: "registry/default/blocks/tool-02/components/compare.tsx",
        type: "registry:component",
        target: ""
      },{
        path: "registry/default/lib/utils.ts",
        type: "registry:ui",
        target: "lib/utils.ts"
      }],
      categories: ["tool"],
      component: React.lazy(() => import("@/registry/default/blocks/tool-02/page.tsx")),
      source: "__registry__/default/blocks/tool-02/page.tsx",
      meta: undefined,
    },
    "utils": {
      name: "utils",
      description: "",
      type: "registry:lib",
      registryDependencies: undefined,
      files: [{
        path: "registry/default/lib/utils.ts",
        type: "registry:lib",
        target: ""
      }],
      categories: undefined,
      component: React.lazy(() => import("@/registry/default/lib/utils.ts")),
      source: "",
      meta: undefined,
    },
    "accordion": {
      name: "accordion",
      description: "",
      type: "registry:ui",
      registryDependencies: undefined,
      files: [{
        path: "registry/default/ui/accordion.tsx",
        type: "registry:ui",
        target: ""
      }],
      categories: undefined,
      component: React.lazy(() => import("@/registry/default/ui/accordion.tsx")),
      source: "",
      meta: undefined,
    },
    "alert": {
      name: "alert",
      description: "",
      type: "registry:ui",
      registryDependencies: undefined,
      files: [{
        path: "registry/default/ui/alert.tsx",
        type: "registry:ui",
        target: ""
      }],
      categories: undefined,
      component: React.lazy(() => import("@/registry/default/ui/alert.tsx")),
      source: "",
      meta: undefined,
    },
    "avatar": {
      name: "avatar",
      description: "",
      type: "registry:ui",
      registryDependencies: undefined,
      files: [{
        path: "registry/default/ui/avatar.tsx",
        type: "registry:ui",
        target: ""
      }],
      categories: undefined,
      component: React.lazy(() => import("@/registry/default/ui/avatar.tsx")),
      source: "",
      meta: undefined,
    },
    "badge": {
      name: "badge",
      description: "",
      type: "registry:ui",
      registryDependencies: undefined,
      files: [{
        path: "registry/default/ui/badge.tsx",
        type: "registry:ui",
        target: ""
      }],
      categories: undefined,
      component: React.lazy(() => import("@/registry/default/ui/badge.tsx")),
      source: "",
      meta: undefined,
    },
    "border-beam": {
      name: "border-beam",
      description: "",
      type: "registry:ui",
      registryDependencies: undefined,
      files: [{
        path: "registry/default/ui/border-beam.tsx",
        type: "registry:ui",
        target: ""
      }],
      categories: undefined,
      component: React.lazy(() => import("@/registry/default/ui/border-beam.tsx")),
      source: "",
      meta: undefined,
    },
    "button": {
      name: "button",
      description: "",
      type: "registry:ui",
      registryDependencies: undefined,
      files: [{
        path: "registry/default/ui/button.tsx",
        type: "registry:ui",
        target: ""
      }],
      categories: undefined,
      component: React.lazy(() => import("@/registry/default/ui/button.tsx")),
      source: "",
      meta: undefined,
    },
    "texture-button": {
      name: "texture-button",
      description: "",
      type: "registry:ui",
      registryDependencies: undefined,
      files: [{
        path: "registry/default/ui/texture-button.tsx",
        type: "registry:ui",
        target: ""
      }],
      categories: undefined,
      component: React.lazy(() => import("@/registry/default/ui/texture-button.tsx")),
      source: "",
      meta: undefined,
    },
    "calendar": {
      name: "calendar",
      description: "",
      type: "registry:ui",
      registryDependencies: ["button"],
      files: [{
        path: "registry/default/ui/calendar.tsx",
        type: "registry:ui",
        target: ""
      }],
      categories: undefined,
      component: React.lazy(() => import("@/registry/default/ui/calendar.tsx")),
      source: "",
      meta: undefined,
    },
    "card": {
      name: "card",
      description: "",
      type: "registry:ui",
      registryDependencies: undefined,
      files: [{
        path: "registry/default/ui/card.tsx",
        type: "registry:ui",
        target: ""
      }],
      categories: undefined,
      component: React.lazy(() => import("@/registry/default/ui/card.tsx")),
      source: "",
      meta: undefined,
    },
    "chart": {
      name: "chart",
      description: "",
      type: "registry:ui",
      registryDependencies: ["card"],
      files: [{
        path: "registry/default/ui/chart.tsx",
        type: "registry:ui",
        target: ""
      }],
      categories: undefined,
      component: React.lazy(() => import("@/registry/default/ui/chart.tsx")),
      source: "",
      meta: undefined,
    },
    "collapsible": {
      name: "collapsible",
      description: "",
      type: "registry:ui",
      registryDependencies: undefined,
      files: [{
        path: "registry/default/ui/collapsible.tsx",
        type: "registry:ui",
        target: ""
      }],
      categories: undefined,
      component: React.lazy(() => import("@/registry/default/ui/collapsible.tsx")),
      source: "",
      meta: undefined,
    },
    "command": {
      name: "command",
      description: "",
      type: "registry:ui",
      registryDependencies: ["dialog"],
      files: [{
        path: "registry/default/ui/command.tsx",
        type: "registry:ui",
        target: ""
      }],
      categories: undefined,
      component: React.lazy(() => import("@/registry/default/ui/command.tsx")),
      source: "",
      meta: undefined,
    },
    "dialog": {
      name: "dialog",
      description: "",
      type: "registry:ui",
      registryDependencies: undefined,
      files: [{
        path: "registry/default/ui/dialog.tsx",
        type: "registry:ui",
        target: ""
      }],
      categories: undefined,
      component: React.lazy(() => import("@/registry/default/ui/dialog.tsx")),
      source: "",
      meta: undefined,
    },
    "drawer": {
      name: "drawer",
      description: "",
      type: "registry:ui",
      registryDependencies: undefined,
      files: [{
        path: "registry/default/ui/drawer.tsx",
        type: "registry:ui",
        target: ""
      }],
      categories: undefined,
      component: React.lazy(() => import("@/registry/default/ui/drawer.tsx")),
      source: "",
      meta: undefined,
    },
    "dropdown-menu": {
      name: "dropdown-menu",
      description: "",
      type: "registry:ui",
      registryDependencies: undefined,
      files: [{
        path: "registry/default/ui/dropdown-menu.tsx",
        type: "registry:ui",
        target: ""
      }],
      categories: undefined,
      component: React.lazy(() => import("@/registry/default/ui/dropdown-menu.tsx")),
      source: "",
      meta: undefined,
    },
    "form": {
      name: "form",
      description: "",
      type: "registry:ui",
      registryDependencies: ["button","label"],
      files: [{
        path: "registry/default/ui/form.tsx",
        type: "registry:ui",
        target: ""
      }],
      categories: undefined,
      component: React.lazy(() => import("@/registry/default/ui/form.tsx")),
      source: "",
      meta: undefined,
    },
    "hover-card": {
      name: "hover-card",
      description: "",
      type: "registry:ui",
      registryDependencies: undefined,
      files: [{
        path: "registry/default/ui/hover-card.tsx",
        type: "registry:ui",
        target: ""
      }],
      categories: undefined,
      component: React.lazy(() => import("@/registry/default/ui/hover-card.tsx")),
      source: "",
      meta: undefined,
    },
    "icon-button": {
      name: "icon-button",
      description: "",
      type: "registry:ui",
      registryDependencies: undefined,
      files: [{
        path: "registry/default/ui/icon-button.tsx",
        type: "registry:ui",
        target: ""
      }],
      categories: undefined,
      component: React.lazy(() => import("@/registry/default/ui/icon-button.tsx")),
      source: "",
      meta: undefined,
    },
    "input": {
      name: "input",
      description: "",
      type: "registry:ui",
      registryDependencies: undefined,
      files: [{
        path: "registry/default/ui/input.tsx",
        type: "registry:ui",
        target: ""
      }],
      categories: undefined,
      component: React.lazy(() => import("@/registry/default/ui/input.tsx")),
      source: "",
      meta: undefined,
    },
    "label": {
      name: "label",
      description: "",
      type: "registry:ui",
      registryDependencies: undefined,
      files: [{
        path: "registry/default/ui/label.tsx",
        type: "registry:ui",
        target: ""
      }],
      categories: undefined,
      component: React.lazy(() => import("@/registry/default/ui/label.tsx")),
      source: "",
      meta: undefined,
    },
    "navigation-menu": {
      name: "navigation-menu",
      description: "",
      type: "registry:ui",
      registryDependencies: undefined,
      files: [{
        path: "registry/default/ui/navigation-menu.tsx",
        type: "registry:ui",
        target: ""
      }],
      categories: undefined,
      component: React.lazy(() => import("@/registry/default/ui/navigation-menu.tsx")),
      source: "",
      meta: undefined,
    },
    "popover": {
      name: "popover",
      description: "",
      type: "registry:ui",
      registryDependencies: undefined,
      files: [{
        path: "registry/default/ui/popover.tsx",
        type: "registry:ui",
        target: ""
      }],
      categories: undefined,
      component: React.lazy(() => import("@/registry/default/ui/popover.tsx")),
      source: "",
      meta: undefined,
    },
    "resizable": {
      name: "resizable",
      description: "",
      type: "registry:ui",
      registryDependencies: undefined,
      files: [{
        path: "registry/default/ui/resizable.tsx",
        type: "registry:ui",
        target: ""
      }],
      categories: undefined,
      component: React.lazy(() => import("@/registry/default/ui/resizable.tsx")),
      source: "",
      meta: undefined,
    },
    "scroll-area": {
      name: "scroll-area",
      description: "",
      type: "registry:ui",
      registryDependencies: undefined,
      files: [{
        path: "registry/default/ui/scroll-area.tsx",
        type: "registry:ui",
        target: ""
      }],
      categories: undefined,
      component: React.lazy(() => import("@/registry/default/ui/scroll-area.tsx")),
      source: "",
      meta: undefined,
    },
    "select": {
      name: "select",
      description: "",
      type: "registry:ui",
      registryDependencies: undefined,
      files: [{
        path: "registry/default/ui/select.tsx",
        type: "registry:ui",
        target: ""
      }],
      categories: undefined,
      component: React.lazy(() => import("@/registry/default/ui/select.tsx")),
      source: "",
      meta: undefined,
    },
    "separator": {
      name: "separator",
      description: "",
      type: "registry:ui",
      registryDependencies: undefined,
      files: [{
        path: "registry/default/ui/separator.tsx",
        type: "registry:ui",
        target: ""
      }],
      categories: undefined,
      component: React.lazy(() => import("@/registry/default/ui/separator.tsx")),
      source: "",
      meta: undefined,
    },
    "sheet": {
      name: "sheet",
      description: "",
      type: "registry:ui",
      registryDependencies: undefined,
      files: [{
        path: "registry/default/ui/sheet.tsx",
        type: "registry:ui",
        target: ""
      }],
      categories: undefined,
      component: React.lazy(() => import("@/registry/default/ui/sheet.tsx")),
      source: "",
      meta: undefined,
    },
    "sidebar": {
      name: "sidebar",
      description: "",
      type: "registry:ui",
      registryDependencies: ["button","separator","sheet","tooltip","input","use-mobile","skeleton"],
      files: [{
        path: "registry/default/ui/sidebar.tsx",
        type: "registry:ui",
        target: ""
      }],
      categories: undefined,
      component: React.lazy(() => import("@/registry/default/ui/sidebar.tsx")),
      source: "",
      meta: undefined,
    },
    "skeleton": {
      name: "skeleton",
      description: "",
      type: "registry:ui",
      registryDependencies: undefined,
      files: [{
        path: "registry/default/ui/skeleton.tsx",
        type: "registry:ui",
        target: ""
      }],
      categories: undefined,
      component: React.lazy(() => import("@/registry/default/ui/skeleton.tsx")),
      source: "",
      meta: undefined,
    },
    "sonner": {
      name: "sonner",
      description: "",
      type: "registry:ui",
      registryDependencies: undefined,
      files: [{
        path: "registry/default/ui/sonner.tsx",
        type: "registry:ui",
        target: ""
      }],
      categories: undefined,
      component: React.lazy(() => import("@/registry/default/ui/sonner.tsx")),
      source: "",
      meta: undefined,
    },
    "switch": {
      name: "switch",
      description: "",
      type: "registry:ui",
      registryDependencies: undefined,
      files: [{
        path: "registry/default/ui/switch.tsx",
        type: "registry:ui",
        target: ""
      }],
      categories: undefined,
      component: React.lazy(() => import("@/registry/default/ui/switch.tsx")),
      source: "",
      meta: undefined,
    },
    "table": {
      name: "table",
      description: "",
      type: "registry:ui",
      registryDependencies: undefined,
      files: [{
        path: "registry/default/ui/table.tsx",
        type: "registry:ui",
        target: ""
      }],
      categories: undefined,
      component: React.lazy(() => import("@/registry/default/ui/table.tsx")),
      source: "",
      meta: undefined,
    },
    "tabs": {
      name: "tabs",
      description: "",
      type: "registry:ui",
      registryDependencies: undefined,
      files: [{
        path: "registry/default/ui/tabs.tsx",
        type: "registry:ui",
        target: ""
      }],
      categories: undefined,
      component: React.lazy(() => import("@/registry/default/ui/tabs.tsx")),
      source: "",
      meta: undefined,
    },
    "toast": {
      name: "toast",
      description: "",
      type: "registry:ui",
      registryDependencies: undefined,
      files: [{
        path: "registry/default/ui/toast.tsx",
        type: "registry:ui",
        target: ""
      },{
        path: "registry/default/hooks/use-toast.ts",
        type: "registry:hook",
        target: ""
      },{
        path: "registry/default/ui/toaster.tsx",
        type: "registry:ui",
        target: ""
      }],
      categories: undefined,
      component: React.lazy(() => import("@/registry/default/ui/toast.tsx")),
      source: "",
      meta: undefined,
    },
    "toaster": {
      name: "toaster",
      description: "",
      type: "registry:ui",
      registryDependencies: undefined,
      files: [{
        path: "registry/default/ui/toast.tsx",
        type: "registry:ui",
        target: ""
      },{
        path: "registry/default/hooks/use-toast.ts",
        type: "registry:hook",
        target: ""
      },{
        path: "registry/default/ui/toaster.tsx",
        type: "registry:ui",
        target: ""
      }],
      categories: undefined,
      component: React.lazy(() => import("@/registry/default/ui/toast.tsx")),
      source: "",
      meta: undefined,
    },
    "toggle": {
      name: "toggle",
      description: "",
      type: "registry:ui",
      registryDependencies: undefined,
      files: [{
        path: "registry/default/ui/toggle.tsx",
        type: "registry:ui",
        target: ""
      }],
      categories: undefined,
      component: React.lazy(() => import("@/registry/default/ui/toggle.tsx")),
      source: "",
      meta: undefined,
    },
    "toggle-group": {
      name: "toggle-group",
      description: "",
      type: "registry:ui",
      registryDependencies: ["toggle"],
      files: [{
        path: "registry/default/ui/toggle-group.tsx",
        type: "registry:ui",
        target: ""
      }],
      categories: undefined,
      component: React.lazy(() => import("@/registry/default/ui/toggle-group.tsx")),
      source: "",
      meta: undefined,
    },
    "tooltip": {
      name: "tooltip",
      description: "",
      type: "registry:ui",
      registryDependencies: undefined,
      files: [{
        path: "registry/default/ui/tooltip.tsx",
        type: "registry:ui",
        target: ""
      }],
      categories: undefined,
      component: React.lazy(() => import("@/registry/default/ui/tooltip.tsx")),
      source: "",
      meta: undefined,
    },
  },
}
</file>

<file path="registry/registry-blocks.ts">
import { type Registry } from "@/registry/schema";

export const blocks: Registry["items"] = [
  {
    name: "card-01",
    type: "registry:block",
    description: "Ideal for product designers.",
    registryDependencies: ["nav", "lang-switch", "photos"],
    files: [
      {
        path: "blocks/card-01/page.tsx",
        type: "registry:page",
        target: "app/page.tsx",
      },
      {
        path: "blocks/card-01/components/post-card.tsx",
        type: "registry:component",
      },
    ],
    categories: ["card"],
  },
  {
    name: "card-02",
    type: "registry:block",
    description: "Ideal for product designers.",
    registryDependencies: ["pricing", "shades", "currency"],
    files: [
      {
        path: "blocks/card-02/page.tsx",
        type: "registry:page",
        target: "app/page.tsx",
      },
      {
        path: "blocks/card-02/components/pricing-card.tsx",
        type: "registry:component",
      },
      {
        path: "ui/card.tsx",
        type: "registry:ui",
        target: "components/ui/card.tsx",
      },
      {
        path: "ui/badge.tsx",
        type: "registry:ui",
        target: "components/ui/badge.tsx",
      },
      {
        path: "ui/texture-button.tsx",
        type: "registry:ui",
        target: "components/ui/texture-button.tsx",
      },
      {
        path: "lib/utils.ts",
        type: "registry:ui",
        target: "lib/utils.ts",
      },
    ],
    categories: ["card"],
  },
  {
    name: "hero-01",
    type: "registry:block",
    description: "Ideal for product designers.",
    registryDependencies: ["nav", "lang-switch", "photos"],
    files: [
      {
        path: "blocks/next-int/page.tsx",
        type: "registry:page",
        target: "app/page.tsx",
      },
      {
        path: "blocks/next-int/components/navbar.tsx",
        type: "registry:component",
      },
      {
        path: "blocks/next-int/components/lang-switch.tsx",
        type: "registry:component",
      },
      {
        path: "blocks/next-int/components/photos.tsx",
        type: "registry:component",
      },
    ],
    categories: ["hero"],
  },
  {
    name: "portofolio-01",
    type: "registry:block",
    description: "minimal portfolio template design for professionals.",
    registryDependencies: ["footer", "list"],
    files: [
      {
        path: "blocks/portofolio-01/main.tsx",
        type: "registry:page",
        target: "app/main.tsx",
      },
      {
        path: "blocks/portofolio-01/components/footer.tsx",
        type: "registry:component",
      },
      {
        path: "blocks/portofolio-01/components/list.tsx",
        type: "registry:component",
      },
      {
        path: "blocks/portofolio-01/components/animated-background.tsx",
        type: "registry:component",
      },
      {
        path: "blocks/portofolio-01/contents/projects.ts",
        type: "registry:file",
        target: "app/data.ts",
      },
    ],
    categories: ["portofolio"],
  },
  {
    name: "portofolio-03",
    type: "registry:block",
    description: "minimal portfolio template design for professionals.",
    registryDependencies: ["footer", "list"],
    files: [
      {
        path: "blocks/portofolio-03/page.tsx",
        type: "registry:page",
        target: "app/page.tsx",
      },
      {
        path: "blocks/portofolio-03/components/work-experiences.tsx",
        type: "registry:component",
      },
      {
        path: "blocks/portofolio-03/components/expandable-tab.tsx",
        type: "registry:component",
      },
      {
        path: "blocks/portofolio-03/components/logos.tsx",
        type: "registry:component",
      },
    ],
    categories: ["portofolio"],
  },
  {
    name: "portofolio-02",
    type: "registry:block",
    description: "minimal portfolio template design for professionals.",
    registryDependencies: ["footer", "list"],
    files: [
      {
        path: "blocks/portofolio-02/main.tsx",
        type: "registry:page",
        target: "app/main.tsx",
      },
      {
        path: "blocks/portofolio-02/components/bio-detail.tsx",
        type: "registry:component",
      },
      {
        path: "blocks/portofolio-02/components/bio.tsx",
        type: "registry:component",
      },
      {
        path: "blocks/portofolio-02/components/career-path.tsx",
        type: "registry:component",
      },
      {
        path: "blocks/portofolio-02/components/highlight.tsx",
        type: "registry:component",
      },
      {
        path: "blocks/portofolio-02/components/intro-item.tsx",
        type: "registry:component",
      },
      {
        path: "blocks/portofolio-02/components/panel.tsx",
        type: "registry:component",
      },
      {
        path: "blocks/portofolio-02/components/typhography.tsx",
        type: "registry:component",
      },
      {
        path: "blocks/portofolio-02/components/typhography.tsx",
        type: "registry:component",
      },
      {
        path: "blocks/portofolio-02/components/tag.tsx",
        type: "registry:component",
      },
      {
        path: "blocks/portofolio-02/data/career-path.ts",
        type: "registry:file",
        target: "data/career-path.ts",
      },
      {
        path: "blocks/portofolio-02/data/USER.ts",
        type: "registry:file",
        target: "data/USER.ts",
      },
      {
        path: "blocks/portofolio-02/type/career-path.ts",
        type: "registry:file",
        target: "type/career-pat.ts",
      },
    ],
    categories: ["portofolio"],
  },
  {
    name: "hero-02",
    type: "registry:block",
    description: "Designed for library applications.",
    registryDependencies: [
      "banner",
      "colorfulButton",
      "githubButton",
      "openSource",
    ],
    files: [
      {
        path: "blocks/tool-01/main.tsx",
        type: "registry:page",
        target: "app/main.tsx",
      },
      {
        path: "blocks/tool-01/style/style.css",
        type: "registry:page",
        target: "app/style.css",
      },
      {
        path: "blocks/tool-01/components/header.tsx",
        type: "registry:component",
      },
      {
        path: "blocks/tool-01/components/banner.tsx",
        type: "registry:component",
      },
      {
        path: "blocks/tool-01/components/colorful-button.tsx",
        type: "registry:component",
      },
      {
        path: "blocks/tool-01/components/github-button.tsx",
        type: "registry:component",
      },
      {
        path: "blocks/tool-01/components/installer.tsx",
        type: "registry:component",
      },
      {
        path: "blocks/tool-01/components/open-source.tsx",
        type: "registry:component",
      },
      {
        path: "blocks/tool-01/components/review.tsx",
        type: "registry:component",
      },
    ],
    categories: ["hero", "tool"],
  },
  {
    name: "bento-01",
    type: "registry:block",
    description: "Ideal for product designers.",
    registryDependencies: ["nav", "lang-switch", "photos"],
    files: [
      {
        path: "blocks/bento-01/page.tsx",
        type: "registry:page",
        target: "app/page.tsx",
      },
      {
        path: "blocks/bento-01/components/animated-emoji.tsx",
        type: "registry:component",
      },
      {
        path: "blocks/bento-01/components/logo.tsx",
        type: "registry:component",
      },
      {
        path: "ui/card.tsx",
        type: "registry:ui",
        target: "components/ui/card.tsx",
      },
      {
        path: "blocks/bento-01/hooks/useAnimation.tsx",
        type: "registry:file",
        target: "hooks/use-animation.ts",
      },
    ],
    categories: ["bento"],
  },
  {
    name: "tool-02",
    type: "registry:block",
    description: "Before after components.",
    registryDependencies: ["compare"],
    files: [
      {
        path: "blocks/tool-02/page.tsx",
        type: "registry:page",
        target: "app/main.tsx",
      },
      {
        path: "blocks/tool-02/components/compare.tsx",
        type: "registry:component",
      },
      {
        path: "lib/utils.ts",
        type: "registry:ui",
        target: "lib/utils.ts",
      },
    ],
    categories: ["tool"],
  },
];
</file>

</files>
